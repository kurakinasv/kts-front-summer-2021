(()=>{var __webpack_modules__={648:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar GetIntrinsic = __webpack_require__(584);\n\nvar callBind = __webpack_require__(257);\n\nvar $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));\n\nmodule.exports = function callBoundIntrinsic(name, allowMissing) {\n  var intrinsic = GetIntrinsic(name, !!allowMissing);\n\n  if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {\n    return callBind(intrinsic);\n  }\n\n  return intrinsic;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjQ4LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUlBLFlBQVksR0FBR0MsbUJBQU8sQ0FBQyxHQUFELENBQTFCOztBQUVBLElBQUlDLFFBQVEsR0FBR0QsbUJBQU8sQ0FBQyxHQUFELENBQXRCOztBQUVBLElBQUlFLFFBQVEsR0FBR0QsUUFBUSxDQUFDRixZQUFZLENBQUMsMEJBQUQsQ0FBYixDQUF2Qjs7QUFFQUksTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFNBQVNDLGtCQUFULENBQTRCQyxJQUE1QixFQUFrQ0MsWUFBbEMsRUFBZ0Q7QUFDaEUsTUFBSUMsU0FBUyxHQUFHVCxZQUFZLENBQUNPLElBQUQsRUFBTyxDQUFDLENBQUNDLFlBQVQsQ0FBNUI7O0FBQ0EsTUFBSSxPQUFPQyxTQUFQLEtBQXFCLFVBQXJCLElBQW1DTixRQUFRLENBQUNJLElBQUQsRUFBTyxhQUFQLENBQVIsR0FBZ0MsQ0FBQyxDQUF4RSxFQUEyRTtBQUMxRSxXQUFPTCxRQUFRLENBQUNPLFNBQUQsQ0FBZjtBQUNBOztBQUNELFNBQU9BLFNBQVA7QUFDQSxDQU5EIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3JhX25ldy8uL25vZGVfbW9kdWxlcy9jYWxsLWJpbmQvY2FsbEJvdW5kLmpzPzU0NWUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnZ2V0LWludHJpbnNpYycpO1xuXG52YXIgY2FsbEJpbmQgPSByZXF1aXJlKCcuLycpO1xuXG52YXIgJGluZGV4T2YgPSBjYWxsQmluZChHZXRJbnRyaW5zaWMoJ1N0cmluZy5wcm90b3R5cGUuaW5kZXhPZicpKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjYWxsQm91bmRJbnRyaW5zaWMobmFtZSwgYWxsb3dNaXNzaW5nKSB7XG5cdHZhciBpbnRyaW5zaWMgPSBHZXRJbnRyaW5zaWMobmFtZSwgISFhbGxvd01pc3NpbmcpO1xuXHRpZiAodHlwZW9mIGludHJpbnNpYyA9PT0gJ2Z1bmN0aW9uJyAmJiAkaW5kZXhPZihuYW1lLCAnLnByb3RvdHlwZS4nKSA+IC0xKSB7XG5cdFx0cmV0dXJuIGNhbGxCaW5kKGludHJpbnNpYyk7XG5cdH1cblx0cmV0dXJuIGludHJpbnNpYztcbn07XG4iXSwibmFtZXMiOlsiR2V0SW50cmluc2ljIiwicmVxdWlyZSIsImNhbGxCaW5kIiwiJGluZGV4T2YiLCJtb2R1bGUiLCJleHBvcnRzIiwiY2FsbEJvdW5kSW50cmluc2ljIiwibmFtZSIsImFsbG93TWlzc2luZyIsImludHJpbnNpYyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///648\n")},257:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar bind = __webpack_require__(597);\n\nvar GetIntrinsic = __webpack_require__(584);\n\nvar $apply = GetIntrinsic('%Function.prototype.apply%');\nvar $call = GetIntrinsic('%Function.prototype.call%');\nvar $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);\nvar $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);\nvar $defineProperty = GetIntrinsic('%Object.defineProperty%', true);\nvar $max = GetIntrinsic('%Math.max%');\n\nif ($defineProperty) {\n  try {\n    $defineProperty({}, 'a', {\n      value: 1\n    });\n  } catch (e) {\n    // IE 8 has a broken defineProperty\n    $defineProperty = null;\n  }\n}\n\nmodule.exports = function callBind(originalFunction) {\n  var func = $reflectApply(bind, $call, arguments);\n\n  if ($gOPD && $defineProperty) {\n    var desc = $gOPD(func, 'length');\n\n    if (desc.configurable) {\n      // original length, plus the receiver, minus any additional arguments (after the receiver)\n      $defineProperty(func, 'length', {\n        value: 1 + $max(0, originalFunction.length - (arguments.length - 1))\n      });\n    }\n  }\n\n  return func;\n};\n\nvar applyBind = function applyBind() {\n  return $reflectApply(bind, $apply, arguments);\n};\n\nif ($defineProperty) {\n  $defineProperty(module.exports, 'apply', {\n    value: applyBind\n  });\n} else {\n  module.exports.apply = applyBind;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjU3LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUlBLElBQUksR0FBR0MsbUJBQU8sQ0FBQyxHQUFELENBQWxCOztBQUNBLElBQUlDLFlBQVksR0FBR0QsbUJBQU8sQ0FBQyxHQUFELENBQTFCOztBQUVBLElBQUlFLE1BQU0sR0FBR0QsWUFBWSxDQUFDLDRCQUFELENBQXpCO0FBQ0EsSUFBSUUsS0FBSyxHQUFHRixZQUFZLENBQUMsMkJBQUQsQ0FBeEI7QUFDQSxJQUFJRyxhQUFhLEdBQUdILFlBQVksQ0FBQyxpQkFBRCxFQUFvQixJQUFwQixDQUFaLElBQXlDRixJQUFJLENBQUNNLElBQUwsQ0FBVUYsS0FBVixFQUFpQkQsTUFBakIsQ0FBN0Q7QUFFQSxJQUFJSSxLQUFLLEdBQUdMLFlBQVksQ0FBQyxtQ0FBRCxFQUFzQyxJQUF0QyxDQUF4QjtBQUNBLElBQUlNLGVBQWUsR0FBR04sWUFBWSxDQUFDLHlCQUFELEVBQTRCLElBQTVCLENBQWxDO0FBQ0EsSUFBSU8sSUFBSSxHQUFHUCxZQUFZLENBQUMsWUFBRCxDQUF2Qjs7QUFFQSxJQUFJTSxlQUFKLEVBQXFCO0FBQ3BCLE1BQUk7QUFDSEEsSUFBQUEsZUFBZSxDQUFDLEVBQUQsRUFBSyxHQUFMLEVBQVU7QUFBRUUsTUFBQUEsS0FBSyxFQUFFO0FBQVQsS0FBVixDQUFmO0FBQ0EsR0FGRCxDQUVFLE9BQU9DLENBQVAsRUFBVTtBQUNYO0FBQ0FILElBQUFBLGVBQWUsR0FBRyxJQUFsQjtBQUNBO0FBQ0Q7O0FBRURJLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixTQUFTQyxRQUFULENBQWtCQyxnQkFBbEIsRUFBb0M7QUFDcEQsTUFBSUMsSUFBSSxHQUFHWCxhQUFhLENBQUNMLElBQUQsRUFBT0ksS0FBUCxFQUFjYSxTQUFkLENBQXhCOztBQUNBLE1BQUlWLEtBQUssSUFBSUMsZUFBYixFQUE4QjtBQUM3QixRQUFJVSxJQUFJLEdBQUdYLEtBQUssQ0FBQ1MsSUFBRCxFQUFPLFFBQVAsQ0FBaEI7O0FBQ0EsUUFBSUUsSUFBSSxDQUFDQyxZQUFULEVBQXVCO0FBQ3RCO0FBQ0FYLE1BQUFBLGVBQWUsQ0FDZFEsSUFEYyxFQUVkLFFBRmMsRUFHZDtBQUFFTixRQUFBQSxLQUFLLEVBQUUsSUFBSUQsSUFBSSxDQUFDLENBQUQsRUFBSU0sZ0JBQWdCLENBQUNLLE1BQWpCLElBQTJCSCxTQUFTLENBQUNHLE1BQVYsR0FBbUIsQ0FBOUMsQ0FBSjtBQUFqQixPQUhjLENBQWY7QUFLQTtBQUNEOztBQUNELFNBQU9KLElBQVA7QUFDQSxDQWREOztBQWdCQSxJQUFJSyxTQUFTLEdBQUcsU0FBU0EsU0FBVCxHQUFxQjtBQUNwQyxTQUFPaEIsYUFBYSxDQUFDTCxJQUFELEVBQU9HLE1BQVAsRUFBZWMsU0FBZixDQUFwQjtBQUNBLENBRkQ7O0FBSUEsSUFBSVQsZUFBSixFQUFxQjtBQUNwQkEsRUFBQUEsZUFBZSxDQUFDSSxNQUFNLENBQUNDLE9BQVIsRUFBaUIsT0FBakIsRUFBMEI7QUFBRUgsSUFBQUEsS0FBSyxFQUFFVztBQUFULEdBQTFCLENBQWY7QUFDQSxDQUZELE1BRU87QUFDTlQsRUFBQUEsb0JBQUEsR0FBdUJTLFNBQXZCO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jcmFfbmV3Ly4vbm9kZV9tb2R1bGVzL2NhbGwtYmluZC9pbmRleC5qcz8zZWIxIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCdmdW5jdGlvbi1iaW5kJyk7XG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnZ2V0LWludHJpbnNpYycpO1xuXG52YXIgJGFwcGx5ID0gR2V0SW50cmluc2ljKCclRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5JScpO1xudmFyICRjYWxsID0gR2V0SW50cmluc2ljKCclRnVuY3Rpb24ucHJvdG90eXBlLmNhbGwlJyk7XG52YXIgJHJlZmxlY3RBcHBseSA9IEdldEludHJpbnNpYygnJVJlZmxlY3QuYXBwbHklJywgdHJ1ZSkgfHwgYmluZC5jYWxsKCRjYWxsLCAkYXBwbHkpO1xuXG52YXIgJGdPUEQgPSBHZXRJbnRyaW5zaWMoJyVPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJScsIHRydWUpO1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IEdldEludHJpbnNpYygnJU9iamVjdC5kZWZpbmVQcm9wZXJ0eSUnLCB0cnVlKTtcbnZhciAkbWF4ID0gR2V0SW50cmluc2ljKCclTWF0aC5tYXglJyk7XG5cbmlmICgkZGVmaW5lUHJvcGVydHkpIHtcblx0dHJ5IHtcblx0XHQkZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyB2YWx1ZTogMSB9KTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdC8vIElFIDggaGFzIGEgYnJva2VuIGRlZmluZVByb3BlcnR5XG5cdFx0JGRlZmluZVByb3BlcnR5ID0gbnVsbDtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNhbGxCaW5kKG9yaWdpbmFsRnVuY3Rpb24pIHtcblx0dmFyIGZ1bmMgPSAkcmVmbGVjdEFwcGx5KGJpbmQsICRjYWxsLCBhcmd1bWVudHMpO1xuXHRpZiAoJGdPUEQgJiYgJGRlZmluZVByb3BlcnR5KSB7XG5cdFx0dmFyIGRlc2MgPSAkZ09QRChmdW5jLCAnbGVuZ3RoJyk7XG5cdFx0aWYgKGRlc2MuY29uZmlndXJhYmxlKSB7XG5cdFx0XHQvLyBvcmlnaW5hbCBsZW5ndGgsIHBsdXMgdGhlIHJlY2VpdmVyLCBtaW51cyBhbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgKGFmdGVyIHRoZSByZWNlaXZlcilcblx0XHRcdCRkZWZpbmVQcm9wZXJ0eShcblx0XHRcdFx0ZnVuYyxcblx0XHRcdFx0J2xlbmd0aCcsXG5cdFx0XHRcdHsgdmFsdWU6IDEgKyAkbWF4KDAsIG9yaWdpbmFsRnVuY3Rpb24ubGVuZ3RoIC0gKGFyZ3VtZW50cy5sZW5ndGggLSAxKSkgfVxuXHRcdFx0KTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGZ1bmM7XG59O1xuXG52YXIgYXBwbHlCaW5kID0gZnVuY3Rpb24gYXBwbHlCaW5kKCkge1xuXHRyZXR1cm4gJHJlZmxlY3RBcHBseShiaW5kLCAkYXBwbHksIGFyZ3VtZW50cyk7XG59O1xuXG5pZiAoJGRlZmluZVByb3BlcnR5KSB7XG5cdCRkZWZpbmVQcm9wZXJ0eShtb2R1bGUuZXhwb3J0cywgJ2FwcGx5JywgeyB2YWx1ZTogYXBwbHlCaW5kIH0pO1xufSBlbHNlIHtcblx0bW9kdWxlLmV4cG9ydHMuYXBwbHkgPSBhcHBseUJpbmQ7XG59XG4iXSwibmFtZXMiOlsiYmluZCIsInJlcXVpcmUiLCJHZXRJbnRyaW5zaWMiLCIkYXBwbHkiLCIkY2FsbCIsIiRyZWZsZWN0QXBwbHkiLCJjYWxsIiwiJGdPUEQiLCIkZGVmaW5lUHJvcGVydHkiLCIkbWF4IiwidmFsdWUiLCJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImNhbGxCaW5kIiwib3JpZ2luYWxGdW5jdGlvbiIsImZ1bmMiLCJhcmd1bWVudHMiLCJkZXNjIiwiY29uZmlndXJhYmxlIiwibGVuZ3RoIiwiYXBwbHlCaW5kIiwiYXBwbHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///257\n")},705:module=>{"use strict";eval('\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\n\nmodule.exports = function (cssWithMappingToString) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = "";\n      var needLayer = typeof item[5] !== "undefined";\n\n      if (item[4]) {\n        content += "@supports (".concat(item[4], ") {");\n      }\n\n      if (item[2]) {\n        content += "@media ".concat(item[2], " {");\n      }\n\n      if (needLayer) {\n        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");\n      }\n\n      content += cssWithMappingToString(item);\n\n      if (needLayer) {\n        content += "}";\n      }\n\n      if (item[2]) {\n        content += "}";\n      }\n\n      if (item[4]) {\n        content += "}";\n      }\n\n      return content;\n    }).join("");\n  }; // import a list of modules into the list\n\n\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === "string") {\n      modules = [[null, modules, undefined]];\n    }\n\n    var alreadyImportedModules = {};\n\n    if (dedupe) {\n      for (var _i = 0; _i < this.length; _i++) {\n        var id = this[_i][0];\n\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n\n    for (var _i2 = 0; _i2 < modules.length; _i2++) {\n      var item = [].concat(modules[_i2]);\n\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n\n      if (typeof layer !== "undefined") {\n        if (typeof item[5] === "undefined") {\n          item[5] = layer;\n        } else {\n          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");\n          item[5] = layer;\n        }\n      }\n\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");\n          item[2] = media;\n        }\n      }\n\n      if (supports) {\n        if (!item[4]) {\n          item[4] = "".concat(supports);\n        } else {\n          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");\n          item[4] = supports;\n        }\n      }\n\n      list.push(item);\n    }\n  };\n\n  return list;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LENBQVVPLFFBQVYsQ0FBVjtBQUNELFNBRkQsTUFFTztBQUNMVixVQUFBQSxJQUFJLENBQUMsQ0FBRCxDQUFKLEdBQVUsY0FBY0csTUFBZCxDQUFxQkgsSUFBSSxDQUFDLENBQUQsQ0FBekIsRUFBOEIsS0FBOUIsRUFBcUNHLE1BQXJDLENBQTRDSCxJQUFJLENBQUMsQ0FBRCxDQUFoRCxFQUFxRCxHQUFyRCxDQUFWO0FBQ0FBLFVBQUFBLElBQUksQ0FBQyxDQUFELENBQUosR0FBVVUsUUFBVjtBQUNEO0FBQ0Y7O0FBRURiLE1BQUFBLElBQUksQ0FBQ29CLElBQUwsQ0FBVWpCLElBQVY7QUFDRDtBQUNGLEdBckREOztBQXVEQSxTQUFPSCxJQUFQO0FBQ0QsQ0EvRkQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jcmFfbmV3Ly4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcz8yNGZiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IHRoaXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNbX2ldWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgbW9kdWxlcy5sZW5ndGg7IF9pMisrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19pMl0pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59OyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwibmVlZExheWVyIiwiY29uY2F0IiwibGVuZ3RoIiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWEiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImxheWVyIiwidW5kZWZpbmVkIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsIl9pIiwiaWQiLCJfaTIiLCJwdXNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///705\n')},476:module=>{"use strict";eval('\n\nmodule.exports = function (item) {\n  var content = item[1];\n  var cssMapping = item[3];\n\n  if (!cssMapping) {\n    return content;\n  }\n\n  if (typeof btoa === "function") {\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);\n    var sourceMapping = "/*# ".concat(data, " */");\n    var sourceURLs = cssMapping.sources.map(function (source) {\n      return "/*# sourceURL=".concat(cssMapping.sourceRoot || "").concat(source, " */");\n    });\n    return [content].concat(sourceURLs).concat([sourceMapping]).join("\\n");\n  }\n\n  return [content].join("\\n");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDc2LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViQSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsVUFBVUMsSUFBVixFQUFnQjtBQUMvQixNQUFJQyxPQUFPLEdBQUdELElBQUksQ0FBQyxDQUFELENBQWxCO0FBQ0EsTUFBSUUsVUFBVSxHQUFHRixJQUFJLENBQUMsQ0FBRCxDQUFyQjs7QUFFQSxNQUFJLENBQUNFLFVBQUwsRUFBaUI7QUFDZixXQUFPRCxPQUFQO0FBQ0Q7O0FBRUQsTUFBSSxPQUFPRSxJQUFQLEtBQWdCLFVBQXBCLEVBQWdDO0FBQzlCLFFBQUlDLE1BQU0sR0FBR0QsSUFBSSxDQUFDRSxRQUFRLENBQUNDLGtCQUFrQixDQUFDQyxJQUFJLENBQUNDLFNBQUwsQ0FBZU4sVUFBZixDQUFELENBQW5CLENBQVQsQ0FBakI7QUFDQSxRQUFJTyxJQUFJLEdBQUcsK0RBQStEQyxNQUEvRCxDQUFzRU4sTUFBdEUsQ0FBWDtBQUNBLFFBQUlPLGFBQWEsR0FBRyxPQUFPRCxNQUFQLENBQWNELElBQWQsRUFBb0IsS0FBcEIsQ0FBcEI7QUFDQSxRQUFJRyxVQUFVLEdBQUdWLFVBQVUsQ0FBQ1csT0FBWCxDQUFtQkMsR0FBbkIsQ0FBdUIsVUFBVUMsTUFBVixFQUFrQjtBQUN4RCxhQUFPLGlCQUFpQkwsTUFBakIsQ0FBd0JSLFVBQVUsQ0FBQ2MsVUFBWCxJQUF5QixFQUFqRCxFQUFxRE4sTUFBckQsQ0FBNERLLE1BQTVELEVBQW9FLEtBQXBFLENBQVA7QUFDRCxLQUZnQixDQUFqQjtBQUdBLFdBQU8sQ0FBQ2QsT0FBRCxFQUFVUyxNQUFWLENBQWlCRSxVQUFqQixFQUE2QkYsTUFBN0IsQ0FBb0MsQ0FBQ0MsYUFBRCxDQUFwQyxFQUFxRE0sSUFBckQsQ0FBMEQsSUFBMUQsQ0FBUDtBQUNEOztBQUVELFNBQU8sQ0FBQ2hCLE9BQUQsRUFBVWdCLElBQVYsQ0FBZSxJQUFmLENBQVA7QUFDRCxDQW5CRCIsInNvdXJjZXMiOlsid2VicGFjazovL2NyYV9uZXcvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcz9hZjEyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgXCJcIikuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07Il0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJpdGVtIiwiY29udGVudCIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsImNvbmNhdCIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlcyIsIm1hcCIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJqb2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///476\n')},193:module=>{"use strict";eval("\n/* eslint no-invalid-this: 1 */\n\nvar ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';\nvar slice = Array.prototype.slice;\nvar toStr = Object.prototype.toString;\nvar funcType = '[object Function]';\n\nmodule.exports = function bind(that) {\n  var target = this;\n\n  if (typeof target !== 'function' || toStr.call(target) !== funcType) {\n    throw new TypeError(ERROR_MESSAGE + target);\n  }\n\n  var args = slice.call(arguments, 1);\n  var bound;\n\n  var binder = function binder() {\n    if (this instanceof bound) {\n      var result = target.apply(this, args.concat(slice.call(arguments)));\n\n      if (Object(result) === result) {\n        return result;\n      }\n\n      return this;\n    } else {\n      return target.apply(that, args.concat(slice.call(arguments)));\n    }\n  };\n\n  var boundLength = Math.max(0, target.length - args.length);\n  var boundArgs = [];\n\n  for (var i = 0; i < boundLength; i++) {\n    boundArgs.push('$' + i);\n  }\n\n  bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);\n\n  if (target.prototype) {\n    var Empty = function Empty() {};\n\n    Empty.prototype = target.prototype;\n    bound.prototype = new Empty();\n    Empty.prototype = null;\n  }\n\n  return bound;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTkzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWI7O0FBRUEsSUFBSUEsYUFBYSxHQUFHLGlEQUFwQjtBQUNBLElBQUlDLEtBQUssR0FBR0MsS0FBSyxDQUFDQyxTQUFOLENBQWdCRixLQUE1QjtBQUNBLElBQUlHLEtBQUssR0FBR0MsTUFBTSxDQUFDRixTQUFQLENBQWlCRyxRQUE3QjtBQUNBLElBQUlDLFFBQVEsR0FBRyxtQkFBZjs7QUFFQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFNBQVNDLElBQVQsQ0FBY0MsSUFBZCxFQUFvQjtBQUNqQyxNQUFJQyxNQUFNLEdBQUcsSUFBYjs7QUFDQSxNQUFJLE9BQU9BLE1BQVAsS0FBa0IsVUFBbEIsSUFBZ0NSLEtBQUssQ0FBQ1MsSUFBTixDQUFXRCxNQUFYLE1BQXVCTCxRQUEzRCxFQUFxRTtBQUNqRSxVQUFNLElBQUlPLFNBQUosQ0FBY2QsYUFBYSxHQUFHWSxNQUE5QixDQUFOO0FBQ0g7O0FBQ0QsTUFBSUcsSUFBSSxHQUFHZCxLQUFLLENBQUNZLElBQU4sQ0FBV0csU0FBWCxFQUFzQixDQUF0QixDQUFYO0FBRUEsTUFBSUMsS0FBSjs7QUFDQSxNQUFJQyxNQUFNLEdBQUcsU0FBVEEsTUFBUyxHQUFZO0FBQ3JCLFFBQUksZ0JBQWdCRCxLQUFwQixFQUEyQjtBQUN2QixVQUFJRSxNQUFNLEdBQUdQLE1BQU0sQ0FBQ1EsS0FBUCxDQUNULElBRFMsRUFFVEwsSUFBSSxDQUFDTSxNQUFMLENBQVlwQixLQUFLLENBQUNZLElBQU4sQ0FBV0csU0FBWCxDQUFaLENBRlMsQ0FBYjs7QUFJQSxVQUFJWCxNQUFNLENBQUNjLE1BQUQsQ0FBTixLQUFtQkEsTUFBdkIsRUFBK0I7QUFDM0IsZUFBT0EsTUFBUDtBQUNIOztBQUNELGFBQU8sSUFBUDtBQUNILEtBVEQsTUFTTztBQUNILGFBQU9QLE1BQU0sQ0FBQ1EsS0FBUCxDQUNIVCxJQURHLEVBRUhJLElBQUksQ0FBQ00sTUFBTCxDQUFZcEIsS0FBSyxDQUFDWSxJQUFOLENBQVdHLFNBQVgsQ0FBWixDQUZHLENBQVA7QUFJSDtBQUNKLEdBaEJEOztBQWtCQSxNQUFJTSxXQUFXLEdBQUdDLElBQUksQ0FBQ0MsR0FBTCxDQUFTLENBQVQsRUFBWVosTUFBTSxDQUFDYSxNQUFQLEdBQWdCVixJQUFJLENBQUNVLE1BQWpDLENBQWxCO0FBQ0EsTUFBSUMsU0FBUyxHQUFHLEVBQWhCOztBQUNBLE9BQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0wsV0FBcEIsRUFBaUNLLENBQUMsRUFBbEMsRUFBc0M7QUFDbENELElBQUFBLFNBQVMsQ0FBQ0UsSUFBVixDQUFlLE1BQU1ELENBQXJCO0FBQ0g7O0FBRURWLEVBQUFBLEtBQUssR0FBR1ksUUFBUSxDQUFDLFFBQUQsRUFBVyxzQkFBc0JILFNBQVMsQ0FBQ0ksSUFBVixDQUFlLEdBQWYsQ0FBdEIsR0FBNEMsMkNBQXZELENBQVIsQ0FBNEdaLE1BQTVHLENBQVI7O0FBRUEsTUFBSU4sTUFBTSxDQUFDVCxTQUFYLEVBQXNCO0FBQ2xCLFFBQUk0QixLQUFLLEdBQUcsU0FBU0EsS0FBVCxHQUFpQixDQUFFLENBQS9COztBQUNBQSxJQUFBQSxLQUFLLENBQUM1QixTQUFOLEdBQWtCUyxNQUFNLENBQUNULFNBQXpCO0FBQ0FjLElBQUFBLEtBQUssQ0FBQ2QsU0FBTixHQUFrQixJQUFJNEIsS0FBSixFQUFsQjtBQUNBQSxJQUFBQSxLQUFLLENBQUM1QixTQUFOLEdBQWtCLElBQWxCO0FBQ0g7O0FBRUQsU0FBT2MsS0FBUDtBQUNILENBMUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3JhX25ldy8uL25vZGVfbW9kdWxlcy9mdW5jdGlvbi1iaW5kL2ltcGxlbWVudGF0aW9uLmpzPzY4OGUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKiBlc2xpbnQgbm8taW52YWxpZC10aGlzOiAxICovXG5cbnZhciBFUlJPUl9NRVNTQUdFID0gJ0Z1bmN0aW9uLnByb3RvdHlwZS5iaW5kIGNhbGxlZCBvbiBpbmNvbXBhdGlibGUgJztcbnZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgZnVuY1R5cGUgPSAnW29iamVjdCBGdW5jdGlvbl0nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJpbmQodGhhdCkge1xuICAgIHZhciB0YXJnZXQgPSB0aGlzO1xuICAgIGlmICh0eXBlb2YgdGFyZ2V0ICE9PSAnZnVuY3Rpb24nIHx8IHRvU3RyLmNhbGwodGFyZ2V0KSAhPT0gZnVuY1R5cGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihFUlJPUl9NRVNTQUdFICsgdGFyZ2V0KTtcbiAgICB9XG4gICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG5cbiAgICB2YXIgYm91bmQ7XG4gICAgdmFyIGJpbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBib3VuZCkge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRhcmdldC5hcHBseShcbiAgICAgICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgICAgIGFyZ3MuY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzKSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAoT2JqZWN0KHJlc3VsdCkgPT09IHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQuYXBwbHkoXG4gICAgICAgICAgICAgICAgdGhhdCxcbiAgICAgICAgICAgICAgICBhcmdzLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHZhciBib3VuZExlbmd0aCA9IE1hdGgubWF4KDAsIHRhcmdldC5sZW5ndGggLSBhcmdzLmxlbmd0aCk7XG4gICAgdmFyIGJvdW5kQXJncyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm91bmRMZW5ndGg7IGkrKykge1xuICAgICAgICBib3VuZEFyZ3MucHVzaCgnJCcgKyBpKTtcbiAgICB9XG5cbiAgICBib3VuZCA9IEZ1bmN0aW9uKCdiaW5kZXInLCAncmV0dXJuIGZ1bmN0aW9uICgnICsgYm91bmRBcmdzLmpvaW4oJywnKSArICcpeyByZXR1cm4gYmluZGVyLmFwcGx5KHRoaXMsYXJndW1lbnRzKTsgfScpKGJpbmRlcik7XG5cbiAgICBpZiAodGFyZ2V0LnByb3RvdHlwZSkge1xuICAgICAgICB2YXIgRW1wdHkgPSBmdW5jdGlvbiBFbXB0eSgpIHt9O1xuICAgICAgICBFbXB0eS5wcm90b3R5cGUgPSB0YXJnZXQucHJvdG90eXBlO1xuICAgICAgICBib3VuZC5wcm90b3R5cGUgPSBuZXcgRW1wdHkoKTtcbiAgICAgICAgRW1wdHkucHJvdG90eXBlID0gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gYm91bmQ7XG59O1xuIl0sIm5hbWVzIjpbIkVSUk9SX01FU1NBR0UiLCJzbGljZSIsIkFycmF5IiwicHJvdG90eXBlIiwidG9TdHIiLCJPYmplY3QiLCJ0b1N0cmluZyIsImZ1bmNUeXBlIiwibW9kdWxlIiwiZXhwb3J0cyIsImJpbmQiLCJ0aGF0IiwidGFyZ2V0IiwiY2FsbCIsIlR5cGVFcnJvciIsImFyZ3MiLCJhcmd1bWVudHMiLCJib3VuZCIsImJpbmRlciIsInJlc3VsdCIsImFwcGx5IiwiY29uY2F0IiwiYm91bmRMZW5ndGgiLCJNYXRoIiwibWF4IiwibGVuZ3RoIiwiYm91bmRBcmdzIiwiaSIsInB1c2giLCJGdW5jdGlvbiIsImpvaW4iLCJFbXB0eSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///193\n")},597:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar implementation = __webpack_require__(193);\n\nmodule.exports = Function.prototype.bind || implementation;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTk3LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUlBLGNBQWMsR0FBR0MsbUJBQU8sQ0FBQyxHQUFELENBQTVCOztBQUVBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJDLFFBQVEsQ0FBQ0MsU0FBVCxDQUFtQkMsSUFBbkIsSUFBMkJOLGNBQTVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3JhX25ldy8uL25vZGVfbW9kdWxlcy9mdW5jdGlvbi1iaW5kL2luZGV4LmpzPzBmN2MiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgfHwgaW1wbGVtZW50YXRpb247XG4iXSwibmFtZXMiOlsiaW1wbGVtZW50YXRpb24iLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsIkZ1bmN0aW9uIiwicHJvdG90eXBlIiwiYmluZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///597\n")},584:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar undefined;\nvar $SyntaxError = SyntaxError;\nvar $Function = Function;\nvar $TypeError = TypeError; // eslint-disable-next-line consistent-return\n\nvar getEvalledConstructor = function getEvalledConstructor(expressionSyntax) {\n  try {\n    return $Function('\"use strict\"; return (' + expressionSyntax + ').constructor;')();\n  } catch (e) {}\n};\n\nvar $gOPD = Object.getOwnPropertyDescriptor;\n\nif ($gOPD) {\n  try {\n    $gOPD({}, '');\n  } catch (e) {\n    $gOPD = null; // this is IE 8, which has a broken gOPD\n  }\n}\n\nvar throwTypeError = function throwTypeError() {\n  throw new $TypeError();\n};\n\nvar ThrowTypeError = $gOPD ? function () {\n  try {\n    // eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties\n    arguments.callee; // IE 8 does not throw here\n\n    return throwTypeError;\n  } catch (calleeThrows) {\n    try {\n      // IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')\n      return $gOPD(arguments, 'callee').get;\n    } catch (gOPDthrows) {\n      return throwTypeError;\n    }\n  }\n}() : throwTypeError;\n\nvar hasSymbols = __webpack_require__(563)();\n\nvar getProto = Object.getPrototypeOf || function (x) {\n  return x.__proto__;\n}; // eslint-disable-line no-proto\n\n\nvar needsEval = {};\nvar TypedArray = typeof Uint8Array === 'undefined' ? undefined : getProto(Uint8Array);\nvar INTRINSICS = {\n  '%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,\n  '%Array%': Array,\n  '%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,\n  '%ArrayIteratorPrototype%': hasSymbols ? getProto([][Symbol.iterator]()) : undefined,\n  '%AsyncFromSyncIteratorPrototype%': undefined,\n  '%AsyncFunction%': needsEval,\n  '%AsyncGenerator%': needsEval,\n  '%AsyncGeneratorFunction%': needsEval,\n  '%AsyncIteratorPrototype%': needsEval,\n  '%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,\n  '%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,\n  '%Boolean%': Boolean,\n  '%DataView%': typeof DataView === 'undefined' ? undefined : DataView,\n  '%Date%': Date,\n  '%decodeURI%': decodeURI,\n  '%decodeURIComponent%': decodeURIComponent,\n  '%encodeURI%': encodeURI,\n  '%encodeURIComponent%': encodeURIComponent,\n  '%Error%': Error,\n  '%eval%': eval,\n  // eslint-disable-line no-eval\n  '%EvalError%': EvalError,\n  '%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,\n  '%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,\n  '%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,\n  '%Function%': $Function,\n  '%GeneratorFunction%': needsEval,\n  '%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,\n  '%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,\n  '%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,\n  '%isFinite%': isFinite,\n  '%isNaN%': isNaN,\n  '%IteratorPrototype%': hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined,\n  '%JSON%': (typeof JSON === \"undefined\" ? \"undefined\" : _typeof(JSON)) === 'object' ? JSON : undefined,\n  '%Map%': typeof Map === 'undefined' ? undefined : Map,\n  '%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols ? undefined : getProto(new Map()[Symbol.iterator]()),\n  '%Math%': Math,\n  '%Number%': Number,\n  '%Object%': Object,\n  '%parseFloat%': parseFloat,\n  '%parseInt%': parseInt,\n  '%Promise%': typeof Promise === 'undefined' ? undefined : Promise,\n  '%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,\n  '%RangeError%': RangeError,\n  '%ReferenceError%': ReferenceError,\n  '%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,\n  '%RegExp%': RegExp,\n  '%Set%': typeof Set === 'undefined' ? undefined : Set,\n  '%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols ? undefined : getProto(new Set()[Symbol.iterator]()),\n  '%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,\n  '%String%': String,\n  '%StringIteratorPrototype%': hasSymbols ? getProto(''[Symbol.iterator]()) : undefined,\n  '%Symbol%': hasSymbols ? Symbol : undefined,\n  '%SyntaxError%': $SyntaxError,\n  '%ThrowTypeError%': ThrowTypeError,\n  '%TypedArray%': TypedArray,\n  '%TypeError%': $TypeError,\n  '%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,\n  '%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,\n  '%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,\n  '%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,\n  '%URIError%': URIError,\n  '%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,\n  '%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,\n  '%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet\n};\n\nvar doEval = function doEval(name) {\n  var value;\n\n  if (name === '%AsyncFunction%') {\n    value = getEvalledConstructor('async function () {}');\n  } else if (name === '%GeneratorFunction%') {\n    value = getEvalledConstructor('function* () {}');\n  } else if (name === '%AsyncGeneratorFunction%') {\n    value = getEvalledConstructor('async function* () {}');\n  } else if (name === '%AsyncGenerator%') {\n    var fn = doEval('%AsyncGeneratorFunction%');\n\n    if (fn) {\n      value = fn.prototype;\n    }\n  } else if (name === '%AsyncIteratorPrototype%') {\n    var gen = doEval('%AsyncGenerator%');\n\n    if (gen) {\n      value = getProto(gen.prototype);\n    }\n  }\n\n  INTRINSICS[name] = value;\n  return value;\n};\n\nvar LEGACY_ALIASES = {\n  '%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],\n  '%ArrayPrototype%': ['Array', 'prototype'],\n  '%ArrayProto_entries%': ['Array', 'prototype', 'entries'],\n  '%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],\n  '%ArrayProto_keys%': ['Array', 'prototype', 'keys'],\n  '%ArrayProto_values%': ['Array', 'prototype', 'values'],\n  '%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],\n  '%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],\n  '%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],\n  '%BooleanPrototype%': ['Boolean', 'prototype'],\n  '%DataViewPrototype%': ['DataView', 'prototype'],\n  '%DatePrototype%': ['Date', 'prototype'],\n  '%ErrorPrototype%': ['Error', 'prototype'],\n  '%EvalErrorPrototype%': ['EvalError', 'prototype'],\n  '%Float32ArrayPrototype%': ['Float32Array', 'prototype'],\n  '%Float64ArrayPrototype%': ['Float64Array', 'prototype'],\n  '%FunctionPrototype%': ['Function', 'prototype'],\n  '%Generator%': ['GeneratorFunction', 'prototype'],\n  '%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],\n  '%Int8ArrayPrototype%': ['Int8Array', 'prototype'],\n  '%Int16ArrayPrototype%': ['Int16Array', 'prototype'],\n  '%Int32ArrayPrototype%': ['Int32Array', 'prototype'],\n  '%JSONParse%': ['JSON', 'parse'],\n  '%JSONStringify%': ['JSON', 'stringify'],\n  '%MapPrototype%': ['Map', 'prototype'],\n  '%NumberPrototype%': ['Number', 'prototype'],\n  '%ObjectPrototype%': ['Object', 'prototype'],\n  '%ObjProto_toString%': ['Object', 'prototype', 'toString'],\n  '%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],\n  '%PromisePrototype%': ['Promise', 'prototype'],\n  '%PromiseProto_then%': ['Promise', 'prototype', 'then'],\n  '%Promise_all%': ['Promise', 'all'],\n  '%Promise_reject%': ['Promise', 'reject'],\n  '%Promise_resolve%': ['Promise', 'resolve'],\n  '%RangeErrorPrototype%': ['RangeError', 'prototype'],\n  '%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],\n  '%RegExpPrototype%': ['RegExp', 'prototype'],\n  '%SetPrototype%': ['Set', 'prototype'],\n  '%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],\n  '%StringPrototype%': ['String', 'prototype'],\n  '%SymbolPrototype%': ['Symbol', 'prototype'],\n  '%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],\n  '%TypedArrayPrototype%': ['TypedArray', 'prototype'],\n  '%TypeErrorPrototype%': ['TypeError', 'prototype'],\n  '%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],\n  '%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],\n  '%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],\n  '%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],\n  '%URIErrorPrototype%': ['URIError', 'prototype'],\n  '%WeakMapPrototype%': ['WeakMap', 'prototype'],\n  '%WeakSetPrototype%': ['WeakSet', 'prototype']\n};\n\nvar bind = __webpack_require__(597);\n\nvar hasOwn = __webpack_require__(380);\n\nvar $concat = bind.call(Function.call, Array.prototype.concat);\nvar $spliceApply = bind.call(Function.apply, Array.prototype.splice);\nvar $replace = bind.call(Function.call, String.prototype.replace);\nvar $strSlice = bind.call(Function.call, String.prototype.slice);\n/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */\n\nvar rePropName = /[^%.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|%$))/g;\nvar reEscapeChar = /\\\\(\\\\)?/g;\n/** Used to match backslashes in property paths. */\n\nvar stringToPath = function stringToPath(string) {\n  var first = $strSlice(string, 0, 1);\n  var last = $strSlice(string, -1);\n\n  if (first === '%' && last !== '%') {\n    throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');\n  } else if (last === '%' && first !== '%') {\n    throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');\n  }\n\n  var result = [];\n  $replace(string, rePropName, function (match, number, quote, subString) {\n    result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;\n  });\n  return result;\n};\n/* end adaptation */\n\n\nvar getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {\n  var intrinsicName = name;\n  var alias;\n\n  if (hasOwn(LEGACY_ALIASES, intrinsicName)) {\n    alias = LEGACY_ALIASES[intrinsicName];\n    intrinsicName = '%' + alias[0] + '%';\n  }\n\n  if (hasOwn(INTRINSICS, intrinsicName)) {\n    var value = INTRINSICS[intrinsicName];\n\n    if (value === needsEval) {\n      value = doEval(intrinsicName);\n    }\n\n    if (typeof value === 'undefined' && !allowMissing) {\n      throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');\n    }\n\n    return {\n      alias: alias,\n      name: intrinsicName,\n      value: value\n    };\n  }\n\n  throw new $SyntaxError('intrinsic ' + name + ' does not exist!');\n};\n\nmodule.exports = function GetIntrinsic(name, allowMissing) {\n  if (typeof name !== 'string' || name.length === 0) {\n    throw new $TypeError('intrinsic name must be a non-empty string');\n  }\n\n  if (arguments.length > 1 && typeof allowMissing !== 'boolean') {\n    throw new $TypeError('\"allowMissing\" argument must be a boolean');\n  }\n\n  var parts = stringToPath(name);\n  var intrinsicBaseName = parts.length > 0 ? parts[0] : '';\n  var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);\n  var intrinsicRealName = intrinsic.name;\n  var value = intrinsic.value;\n  var skipFurtherCaching = false;\n  var alias = intrinsic.alias;\n\n  if (alias) {\n    intrinsicBaseName = alias[0];\n    $spliceApply(parts, $concat([0, 1], alias));\n  }\n\n  for (var i = 1, isOwn = true; i < parts.length; i += 1) {\n    var part = parts[i];\n    var first = $strSlice(part, 0, 1);\n    var last = $strSlice(part, -1);\n\n    if ((first === '\"' || first === \"'\" || first === '`' || last === '\"' || last === \"'\" || last === '`') && first !== last) {\n      throw new $SyntaxError('property names with quotes must have matching quotes');\n    }\n\n    if (part === 'constructor' || !isOwn) {\n      skipFurtherCaching = true;\n    }\n\n    intrinsicBaseName += '.' + part;\n    intrinsicRealName = '%' + intrinsicBaseName + '%';\n\n    if (hasOwn(INTRINSICS, intrinsicRealName)) {\n      value = INTRINSICS[intrinsicRealName];\n    } else if (value != null) {\n      if (!(part in value)) {\n        if (!allowMissing) {\n          throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');\n        }\n\n        return void undefined;\n      }\n\n      if ($gOPD && i + 1 >= parts.length) {\n        var desc = $gOPD(value, part);\n        isOwn = !!desc; // By convention, when a data property is converted to an accessor\n        // property to emulate a data property that does not suffer from\n        // the override mistake, that accessor's getter is marked with\n        // an `originalValue` property. Here, when we detect this, we\n        // uphold the illusion by pretending to see that original data\n        // property, i.e., returning the value rather than the getter\n        // itself.\n\n        if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {\n          value = desc.get;\n        } else {\n          value = value[part];\n        }\n      } else {\n        isOwn = hasOwn(value, part);\n        value = value[part];\n      }\n\n      if (isOwn && !skipFurtherCaching) {\n        INTRINSICS[intrinsicRealName] = value;\n      }\n    }\n  }\n\n  return value;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///584\n")},563:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar origSymbol = typeof Symbol !== 'undefined' && Symbol;\n\nvar hasSymbolSham = __webpack_require__(956);\n\nmodule.exports = function hasNativeSymbols() {\n  if (typeof origSymbol !== 'function') {\n    return false;\n  }\n\n  if (typeof Symbol !== 'function') {\n    return false;\n  }\n\n  if (_typeof(origSymbol('foo')) !== 'symbol') {\n    return false;\n  }\n\n  if (_typeof(Symbol('bar')) !== 'symbol') {\n    return false;\n  }\n\n  return hasSymbolSham();\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTYzLmpzIiwibWFwcGluZ3MiOiJBQUFhOzs7O0FBRWIsSUFBSUEsVUFBVSxHQUFHLE9BQU9DLE1BQVAsS0FBa0IsV0FBbEIsSUFBaUNBLE1BQWxEOztBQUNBLElBQUlDLGFBQWEsR0FBR0MsbUJBQU8sQ0FBQyxHQUFELENBQTNCOztBQUVBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsU0FBU0MsZ0JBQVQsR0FBNEI7QUFDNUMsTUFBSSxPQUFPTixVQUFQLEtBQXNCLFVBQTFCLEVBQXNDO0FBQUUsV0FBTyxLQUFQO0FBQWU7O0FBQ3ZELE1BQUksT0FBT0MsTUFBUCxLQUFrQixVQUF0QixFQUFrQztBQUFFLFdBQU8sS0FBUDtBQUFlOztBQUNuRCxNQUFJLFFBQU9ELFVBQVUsQ0FBQyxLQUFELENBQWpCLE1BQTZCLFFBQWpDLEVBQTJDO0FBQUUsV0FBTyxLQUFQO0FBQWU7O0FBQzVELE1BQUksUUFBT0MsTUFBTSxDQUFDLEtBQUQsQ0FBYixNQUF5QixRQUE3QixFQUF1QztBQUFFLFdBQU8sS0FBUDtBQUFlOztBQUV4RCxTQUFPQyxhQUFhLEVBQXBCO0FBQ0EsQ0FQRCIsInNvdXJjZXMiOlsid2VicGFjazovL2NyYV9uZXcvLi9ub2RlX21vZHVsZXMvaGFzLXN5bWJvbHMvaW5kZXguanM/NTE1NiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBvcmlnU3ltYm9sID0gdHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sO1xudmFyIGhhc1N5bWJvbFNoYW0gPSByZXF1aXJlKCcuL3NoYW1zJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaGFzTmF0aXZlU3ltYm9scygpIHtcblx0aWYgKHR5cGVvZiBvcmlnU3ltYm9sICE9PSAnZnVuY3Rpb24nKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ2Z1bmN0aW9uJykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKHR5cGVvZiBvcmlnU3ltYm9sKCdmb28nKSAhPT0gJ3N5bWJvbCcpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICh0eXBlb2YgU3ltYm9sKCdiYXInKSAhPT0gJ3N5bWJvbCcpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0cmV0dXJuIGhhc1N5bWJvbFNoYW0oKTtcbn07XG4iXSwibmFtZXMiOlsib3JpZ1N5bWJvbCIsIlN5bWJvbCIsImhhc1N5bWJvbFNoYW0iLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImhhc05hdGl2ZVN5bWJvbHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///563\n")},956:module=>{"use strict";eval("\n/* eslint complexity: [2, 18], max-statements: [2, 33] */\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nmodule.exports = function hasSymbols() {\n  if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') {\n    return false;\n  }\n\n  if (_typeof(Symbol.iterator) === 'symbol') {\n    return true;\n  }\n\n  var obj = {};\n  var sym = Symbol('test');\n  var symObj = Object(sym);\n\n  if (typeof sym === 'string') {\n    return false;\n  }\n\n  if (Object.prototype.toString.call(sym) !== '[object Symbol]') {\n    return false;\n  }\n\n  if (Object.prototype.toString.call(symObj) !== '[object Symbol]') {\n    return false;\n  } // temp disabled per https://github.com/ljharb/object.assign/issues/17\n  // if (sym instanceof Symbol) { return false; }\n  // temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4\n  // if (!(symObj instanceof Symbol)) { return false; }\n  // if (typeof Symbol.prototype.toString !== 'function') { return false; }\n  // if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }\n\n\n  var symVal = 42;\n  obj[sym] = symVal;\n\n  for (sym in obj) {\n    return false;\n  } // eslint-disable-line no-restricted-syntax, no-unreachable-loop\n\n\n  if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) {\n    return false;\n  }\n\n  if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) {\n    return false;\n  }\n\n  var syms = Object.getOwnPropertySymbols(obj);\n\n  if (syms.length !== 1 || syms[0] !== sym) {\n    return false;\n  }\n\n  if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {\n    return false;\n  }\n\n  if (typeof Object.getOwnPropertyDescriptor === 'function') {\n    var descriptor = Object.getOwnPropertyDescriptor(obj, sym);\n\n    if (descriptor.value !== symVal || descriptor.enumerable !== true) {\n      return false;\n    }\n  }\n\n  return true;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTU2LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWI7Ozs7QUFDQUEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFNBQVNDLFVBQVQsR0FBc0I7QUFDdEMsTUFBSSxPQUFPQyxNQUFQLEtBQWtCLFVBQWxCLElBQWdDLE9BQU9DLE1BQU0sQ0FBQ0MscUJBQWQsS0FBd0MsVUFBNUUsRUFBd0Y7QUFBRSxXQUFPLEtBQVA7QUFBZTs7QUFDekcsTUFBSSxRQUFPRixNQUFNLENBQUNHLFFBQWQsTUFBMkIsUUFBL0IsRUFBeUM7QUFBRSxXQUFPLElBQVA7QUFBYzs7QUFFekQsTUFBSUMsR0FBRyxHQUFHLEVBQVY7QUFDQSxNQUFJQyxHQUFHLEdBQUdMLE1BQU0sQ0FBQyxNQUFELENBQWhCO0FBQ0EsTUFBSU0sTUFBTSxHQUFHTCxNQUFNLENBQUNJLEdBQUQsQ0FBbkI7O0FBQ0EsTUFBSSxPQUFPQSxHQUFQLEtBQWUsUUFBbkIsRUFBNkI7QUFBRSxXQUFPLEtBQVA7QUFBZTs7QUFFOUMsTUFBSUosTUFBTSxDQUFDTSxTQUFQLENBQWlCQyxRQUFqQixDQUEwQkMsSUFBMUIsQ0FBK0JKLEdBQS9CLE1BQXdDLGlCQUE1QyxFQUErRDtBQUFFLFdBQU8sS0FBUDtBQUFlOztBQUNoRixNQUFJSixNQUFNLENBQUNNLFNBQVAsQ0FBaUJDLFFBQWpCLENBQTBCQyxJQUExQixDQUErQkgsTUFBL0IsTUFBMkMsaUJBQS9DLEVBQWtFO0FBQUUsV0FBTyxLQUFQO0FBQWUsR0FWN0MsQ0FZdEM7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBOzs7QUFFQSxNQUFJSSxNQUFNLEdBQUcsRUFBYjtBQUNBTixFQUFBQSxHQUFHLENBQUNDLEdBQUQsQ0FBSCxHQUFXSyxNQUFYOztBQUNBLE9BQUtMLEdBQUwsSUFBWUQsR0FBWixFQUFpQjtBQUFFLFdBQU8sS0FBUDtBQUFlLEdBdEJJLENBc0JIOzs7QUFDbkMsTUFBSSxPQUFPSCxNQUFNLENBQUNVLElBQWQsS0FBdUIsVUFBdkIsSUFBcUNWLE1BQU0sQ0FBQ1UsSUFBUCxDQUFZUCxHQUFaLEVBQWlCUSxNQUFqQixLQUE0QixDQUFyRSxFQUF3RTtBQUFFLFdBQU8sS0FBUDtBQUFlOztBQUV6RixNQUFJLE9BQU9YLE1BQU0sQ0FBQ1ksbUJBQWQsS0FBc0MsVUFBdEMsSUFBb0RaLE1BQU0sQ0FBQ1ksbUJBQVAsQ0FBMkJULEdBQTNCLEVBQWdDUSxNQUFoQyxLQUEyQyxDQUFuRyxFQUFzRztBQUFFLFdBQU8sS0FBUDtBQUFlOztBQUV2SCxNQUFJRSxJQUFJLEdBQUdiLE1BQU0sQ0FBQ0MscUJBQVAsQ0FBNkJFLEdBQTdCLENBQVg7O0FBQ0EsTUFBSVUsSUFBSSxDQUFDRixNQUFMLEtBQWdCLENBQWhCLElBQXFCRSxJQUFJLENBQUMsQ0FBRCxDQUFKLEtBQVlULEdBQXJDLEVBQTBDO0FBQUUsV0FBTyxLQUFQO0FBQWU7O0FBRTNELE1BQUksQ0FBQ0osTUFBTSxDQUFDTSxTQUFQLENBQWlCUSxvQkFBakIsQ0FBc0NOLElBQXRDLENBQTJDTCxHQUEzQyxFQUFnREMsR0FBaEQsQ0FBTCxFQUEyRDtBQUFFLFdBQU8sS0FBUDtBQUFlOztBQUU1RSxNQUFJLE9BQU9KLE1BQU0sQ0FBQ2Usd0JBQWQsS0FBMkMsVUFBL0MsRUFBMkQ7QUFDMUQsUUFBSUMsVUFBVSxHQUFHaEIsTUFBTSxDQUFDZSx3QkFBUCxDQUFnQ1osR0FBaEMsRUFBcUNDLEdBQXJDLENBQWpCOztBQUNBLFFBQUlZLFVBQVUsQ0FBQ0MsS0FBWCxLQUFxQlIsTUFBckIsSUFBK0JPLFVBQVUsQ0FBQ0UsVUFBWCxLQUEwQixJQUE3RCxFQUFtRTtBQUFFLGFBQU8sS0FBUDtBQUFlO0FBQ3BGOztBQUVELFNBQU8sSUFBUDtBQUNBLENBdENEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3JhX25ldy8uL25vZGVfbW9kdWxlcy9oYXMtc3ltYm9scy9zaGFtcy5qcz8xNjk2Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyogZXNsaW50IGNvbXBsZXhpdHk6IFsyLCAxOF0sIG1heC1zdGF0ZW1lbnRzOiBbMiwgMzNdICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGhhc1N5bWJvbHMoKSB7XG5cdGlmICh0eXBlb2YgU3ltYm9sICE9PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzICE9PSAnZnVuY3Rpb24nKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAodHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gJ3N5bWJvbCcpIHsgcmV0dXJuIHRydWU7IH1cblxuXHR2YXIgb2JqID0ge307XG5cdHZhciBzeW0gPSBTeW1ib2woJ3Rlc3QnKTtcblx0dmFyIHN5bU9iaiA9IE9iamVjdChzeW0pO1xuXHRpZiAodHlwZW9mIHN5bSA9PT0gJ3N0cmluZycpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0aWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzeW0pICE9PSAnW29iamVjdCBTeW1ib2xdJykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzeW1PYmopICE9PSAnW29iamVjdCBTeW1ib2xdJykgeyByZXR1cm4gZmFsc2U7IH1cblxuXHQvLyB0ZW1wIGRpc2FibGVkIHBlciBodHRwczovL2dpdGh1Yi5jb20vbGpoYXJiL29iamVjdC5hc3NpZ24vaXNzdWVzLzE3XG5cdC8vIGlmIChzeW0gaW5zdGFuY2VvZiBTeW1ib2wpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdC8vIHRlbXAgZGlzYWJsZWQgcGVyIGh0dHBzOi8vZ2l0aHViLmNvbS9XZWJSZWZsZWN0aW9uL2dldC1vd24tcHJvcGVydHktc3ltYm9scy9pc3N1ZXMvNFxuXHQvLyBpZiAoIShzeW1PYmogaW5zdGFuY2VvZiBTeW1ib2wpKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdC8vIGlmICh0eXBlb2YgU3ltYm9sLnByb3RvdHlwZS50b1N0cmluZyAhPT0gJ2Z1bmN0aW9uJykgeyByZXR1cm4gZmFsc2U7IH1cblx0Ly8gaWYgKFN0cmluZyhzeW0pICE9PSBTeW1ib2wucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoc3ltKSkgeyByZXR1cm4gZmFsc2U7IH1cblxuXHR2YXIgc3ltVmFsID0gNDI7XG5cdG9ialtzeW1dID0gc3ltVmFsO1xuXHRmb3IgKHN5bSBpbiBvYmopIHsgcmV0dXJuIGZhbHNlOyB9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXgsIG5vLXVucmVhY2hhYmxlLWxvb3Bcblx0aWYgKHR5cGVvZiBPYmplY3Qua2V5cyA9PT0gJ2Z1bmN0aW9uJyAmJiBPYmplY3Qua2V5cyhvYmopLmxlbmd0aCAhPT0gMCkgeyByZXR1cm4gZmFsc2U7IH1cblxuXHRpZiAodHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzID09PSAnZnVuY3Rpb24nICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iaikubGVuZ3RoICE9PSAwKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdHZhciBzeW1zID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmopO1xuXHRpZiAoc3ltcy5sZW5ndGggIT09IDEgfHwgc3ltc1swXSAhPT0gc3ltKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKG9iaiwgc3ltKSkgeyByZXR1cm4gZmFsc2U7IH1cblxuXHRpZiAodHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPT09ICdmdW5jdGlvbicpIHtcblx0XHR2YXIgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBzeW0pO1xuXHRcdGlmIChkZXNjcmlwdG9yLnZhbHVlICE9PSBzeW1WYWwgfHwgZGVzY3JpcHRvci5lbnVtZXJhYmxlICE9PSB0cnVlKSB7IHJldHVybiBmYWxzZTsgfVxuXHR9XG5cblx0cmV0dXJuIHRydWU7XG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJoYXNTeW1ib2xzIiwiU3ltYm9sIiwiT2JqZWN0IiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiaXRlcmF0b3IiLCJvYmoiLCJzeW0iLCJzeW1PYmoiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJzeW1WYWwiLCJrZXlzIiwibGVuZ3RoIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInN5bXMiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImRlc2NyaXB0b3IiLCJ2YWx1ZSIsImVudW1lcmFibGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///956\n")},380:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar bind = __webpack_require__(597);\n\nmodule.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzgwLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUlBLElBQUksR0FBR0MsbUJBQU8sQ0FBQyxHQUFELENBQWxCOztBQUVBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJILElBQUksQ0FBQ0ksSUFBTCxDQUFVQyxRQUFRLENBQUNELElBQW5CLEVBQXlCRSxNQUFNLENBQUNDLFNBQVAsQ0FBaUJDLGNBQTFDLENBQWpCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3JhX25ldy8uL25vZGVfbW9kdWxlcy9oYXMvc3JjL2luZGV4LmpzP2EwZDMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJ2Z1bmN0aW9uLWJpbmQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSk7XG4iXSwibmFtZXMiOlsiYmluZCIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiY2FsbCIsIkZ1bmN0aW9uIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///380\n")},773:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar reactIs = __webpack_require__(972);\n/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\n\nvar REACT_STATICS = {\n  childContextTypes: true,\n  contextType: true,\n  contextTypes: true,\n  defaultProps: true,\n  displayName: true,\n  getDefaultProps: true,\n  getDerivedStateFromError: true,\n  getDerivedStateFromProps: true,\n  mixins: true,\n  propTypes: true,\n  type: true\n};\nvar KNOWN_STATICS = {\n  name: true,\n  length: true,\n  prototype: true,\n  caller: true,\n  callee: true,\n  arguments: true,\n  arity: true\n};\nvar FORWARD_REF_STATICS = {\n  '$$typeof': true,\n  render: true,\n  defaultProps: true,\n  displayName: true,\n  propTypes: true\n};\nvar MEMO_STATICS = {\n  '$$typeof': true,\n  compare: true,\n  defaultProps: true,\n  displayName: true,\n  propTypes: true,\n  type: true\n};\nvar TYPE_STATICS = {};\nTYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;\nTYPE_STATICS[reactIs.Memo] = MEMO_STATICS;\n\nfunction getStatics(component) {\n  // React v16.11 and below\n  if (reactIs.isMemo(component)) {\n    return MEMO_STATICS;\n  } // React v16.12 and above\n\n\n  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;\n}\n\nvar defineProperty = Object.defineProperty;\nvar getOwnPropertyNames = Object.getOwnPropertyNames;\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\nvar getPrototypeOf = Object.getPrototypeOf;\nvar objectPrototype = Object.prototype;\n\nfunction hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {\n  if (typeof sourceComponent !== 'string') {\n    // don't hoist over string (html) components\n    if (objectPrototype) {\n      var inheritedComponent = getPrototypeOf(sourceComponent);\n\n      if (inheritedComponent && inheritedComponent !== objectPrototype) {\n        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);\n      }\n    }\n\n    var keys = getOwnPropertyNames(sourceComponent);\n\n    if (getOwnPropertySymbols) {\n      keys = keys.concat(getOwnPropertySymbols(sourceComponent));\n    }\n\n    var targetStatics = getStatics(targetComponent);\n    var sourceStatics = getStatics(sourceComponent);\n\n    for (var i = 0; i < keys.length; ++i) {\n      var key = keys[i];\n\n      if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {\n        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);\n\n        try {\n          // Avoid failures from read-only properties\n          defineProperty(targetComponent, key, descriptor);\n        } catch (e) {}\n      }\n    }\n  }\n\n  return targetComponent;\n}\n\nmodule.exports = hoistNonReactStatics;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///773\n")},347:module=>{"use strict";eval("/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n/* eslint-disable no-unused-vars */\n\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n  if (val === null || val === undefined) {\n    throw new TypeError('Object.assign cannot be called with null or undefined');\n  }\n\n  return Object(val);\n}\n\nfunction shouldUseNative() {\n  try {\n    if (!Object.assign) {\n      return false;\n    } // Detect buggy property enumeration order in older V8 versions.\n    // https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\n\n    var test1 = new String('abc'); // eslint-disable-line no-new-wrappers\n\n    test1[5] = 'de';\n\n    if (Object.getOwnPropertyNames(test1)[0] === '5') {\n      return false;\n    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\n\n    var test2 = {};\n\n    for (var i = 0; i < 10; i++) {\n      test2['_' + String.fromCharCode(i)] = i;\n    }\n\n    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n      return test2[n];\n    });\n\n    if (order2.join('') !== '0123456789') {\n      return false;\n    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\n\n    var test3 = {};\n    'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n      test3[letter] = letter;\n    });\n\n    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {\n      return false;\n    }\n\n    return true;\n  } catch (err) {\n    // We don't expect any of the above to throw, but better to be safe.\n    return false;\n  }\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n  var from;\n  var to = toObject(target);\n  var symbols;\n\n  for (var s = 1; s < arguments.length; s++) {\n    from = Object(arguments[s]);\n\n    for (var key in from) {\n      if (hasOwnProperty.call(from, key)) {\n        to[key] = from[key];\n      }\n    }\n\n    if (getOwnPropertySymbols) {\n      symbols = getOwnPropertySymbols(from);\n\n      for (var i = 0; i < symbols.length; i++) {\n        if (propIsEnumerable.call(from, symbols[i])) {\n          to[symbols[i]] = from[symbols[i]];\n        }\n      }\n    }\n  }\n\n  return to;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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TSxDQUFDbUMsU0FBUyxDQUFDRCxDQUFELENBQVYsQ0FBYjs7QUFFQSxTQUFLLElBQUlHLEdBQVQsSUFBZ0JOLElBQWhCLEVBQXNCO0FBQ3JCLFVBQUk5QixjQUFjLENBQUNxQyxJQUFmLENBQW9CUCxJQUFwQixFQUEwQk0sR0FBMUIsQ0FBSixFQUFvQztBQUNuQ0wsUUFBQUEsRUFBRSxDQUFDSyxHQUFELENBQUYsR0FBVU4sSUFBSSxDQUFDTSxHQUFELENBQWQ7QUFDQTtBQUNEOztBQUVELFFBQUl0QyxxQkFBSixFQUEyQjtBQUMxQmtDLE1BQUFBLE9BQU8sR0FBR2xDLHFCQUFxQixDQUFDZ0MsSUFBRCxDQUEvQjs7QUFDQSxXQUFLLElBQUloQixDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHa0IsT0FBTyxDQUFDRyxNQUE1QixFQUFvQ3JCLENBQUMsRUFBckMsRUFBeUM7QUFDeEMsWUFBSVosZ0JBQWdCLENBQUNtQyxJQUFqQixDQUFzQlAsSUFBdEIsRUFBNEJFLE9BQU8sQ0FBQ2xCLENBQUQsQ0FBbkMsQ0FBSixFQUE2QztBQUM1Q2lCLFVBQUFBLEVBQUUsQ0FBQ0MsT0FBTyxDQUFDbEIsQ0FBRCxDQUFSLENBQUYsR0FBaUJnQixJQUFJLENBQUNFLE9BQU8sQ0FBQ2xCLENBQUQsQ0FBUixDQUFyQjtBQUNBO0FBQ0Q7QUFDRDtBQUNEOztBQUVELFNBQU9pQixFQUFQO0FBQ0EsQ0F6QkQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jcmFfbmV3Ly4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanM/MzIwYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIl0sIm5hbWVzIjpbImdldE93blByb3BlcnR5U3ltYm9scyIsIk9iamVjdCIsImhhc093blByb3BlcnR5IiwicHJvdG90eXBlIiwicHJvcElzRW51bWVyYWJsZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwidG9PYmplY3QiLCJ2YWwiLCJ1bmRlZmluZWQiLCJUeXBlRXJyb3IiLCJzaG91bGRVc2VOYXRpdmUiLCJhc3NpZ24iLCJ0ZXN0MSIsIlN0cmluZyIsImdldE93blByb3BlcnR5TmFtZXMiLCJ0ZXN0MiIsImkiLCJmcm9tQ2hhckNvZGUiLCJvcmRlcjIiLCJtYXAiLCJuIiwiam9pbiIsInRlc3QzIiwic3BsaXQiLCJmb3JFYWNoIiwibGV0dGVyIiwia2V5cyIsImVyciIsIm1vZHVsZSIsImV4cG9ydHMiLCJ0YXJnZXQiLCJzb3VyY2UiLCJmcm9tIiwidG8iLCJzeW1ib2xzIiwicyIsImFyZ3VtZW50cyIsImxlbmd0aCIsImtleSIsImNhbGwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///347\n")},291:(module,__unused_webpack_exports,__webpack_require__)=>{eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar hasMap = typeof Map === 'function' && Map.prototype;\nvar mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;\nvar mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;\nvar mapForEach = hasMap && Map.prototype.forEach;\nvar hasSet = typeof Set === 'function' && Set.prototype;\nvar setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;\nvar setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;\nvar setForEach = hasSet && Set.prototype.forEach;\nvar hasWeakMap = typeof WeakMap === 'function' && WeakMap.prototype;\nvar weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;\nvar hasWeakSet = typeof WeakSet === 'function' && WeakSet.prototype;\nvar weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;\nvar hasWeakRef = typeof WeakRef === 'function' && WeakRef.prototype;\nvar weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;\nvar booleanValueOf = Boolean.prototype.valueOf;\nvar objectToString = Object.prototype.toString;\nvar functionToString = Function.prototype.toString;\nvar match = String.prototype.match;\nvar bigIntValueOf = typeof BigInt === 'function' ? BigInt.prototype.valueOf : null;\nvar gOPS = Object.getOwnPropertySymbols;\nvar symToString = typeof Symbol === 'function' && _typeof(Symbol.iterator) === 'symbol' ? Symbol.prototype.toString : null;\nvar hasShammedSymbols = typeof Symbol === 'function' && _typeof(Symbol.iterator) === 'object';\nvar isEnumerable = Object.prototype.propertyIsEnumerable;\nvar gPO = (typeof Reflect === 'function' ? Reflect.getPrototypeOf : Object.getPrototypeOf) || ([].__proto__ === Array.prototype // eslint-disable-line no-proto\n? function (O) {\n  return O.__proto__; // eslint-disable-line no-proto\n} : null);\n\nvar inspectCustom = __webpack_require__(654).custom;\n\nvar inspectSymbol = inspectCustom && isSymbol(inspectCustom) ? inspectCustom : null;\nvar toStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag !== 'undefined' ? Symbol.toStringTag : null;\n\nmodule.exports = function inspect_(obj, options, depth, seen) {\n  var opts = options || {};\n\n  if (has(opts, 'quoteStyle') && opts.quoteStyle !== 'single' && opts.quoteStyle !== 'double') {\n    throw new TypeError('option \"quoteStyle\" must be \"single\" or \"double\"');\n  }\n\n  if (has(opts, 'maxStringLength') && (typeof opts.maxStringLength === 'number' ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity : opts.maxStringLength !== null)) {\n    throw new TypeError('option \"maxStringLength\", if provided, must be a positive integer, Infinity, or `null`');\n  }\n\n  var customInspect = has(opts, 'customInspect') ? opts.customInspect : true;\n\n  if (typeof customInspect !== 'boolean' && customInspect !== 'symbol') {\n    throw new TypeError('option \"customInspect\", if provided, must be `true`, `false`, or `\\'symbol\\'`');\n  }\n\n  if (has(opts, 'indent') && opts.indent !== null && opts.indent !== '\\t' && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)) {\n    throw new TypeError('options \"indent\" must be \"\\\\t\", an integer > 0, or `null`');\n  }\n\n  if (typeof obj === 'undefined') {\n    return 'undefined';\n  }\n\n  if (obj === null) {\n    return 'null';\n  }\n\n  if (typeof obj === 'boolean') {\n    return obj ? 'true' : 'false';\n  }\n\n  if (typeof obj === 'string') {\n    return inspectString(obj, opts);\n  }\n\n  if (typeof obj === 'number') {\n    if (obj === 0) {\n      return Infinity / obj > 0 ? '0' : '-0';\n    }\n\n    return String(obj);\n  }\n\n  if (typeof obj === 'bigint') {\n    return String(obj) + 'n';\n  }\n\n  var maxDepth = typeof opts.depth === 'undefined' ? 5 : opts.depth;\n\n  if (typeof depth === 'undefined') {\n    depth = 0;\n  }\n\n  if (depth >= maxDepth && maxDepth > 0 && _typeof(obj) === 'object') {\n    return isArray(obj) ? '[Array]' : '[Object]';\n  }\n\n  var indent = getIndent(opts, depth);\n\n  if (typeof seen === 'undefined') {\n    seen = [];\n  } else if (indexOf(seen, obj) >= 0) {\n    return '[Circular]';\n  }\n\n  function inspect(value, from, noIndent) {\n    if (from) {\n      seen = seen.slice();\n      seen.push(from);\n    }\n\n    if (noIndent) {\n      var newOpts = {\n        depth: opts.depth\n      };\n\n      if (has(opts, 'quoteStyle')) {\n        newOpts.quoteStyle = opts.quoteStyle;\n      }\n\n      return inspect_(value, newOpts, depth + 1, seen);\n    }\n\n    return inspect_(value, opts, depth + 1, seen);\n  }\n\n  if (typeof obj === 'function') {\n    var name = nameOf(obj);\n    var keys = arrObjKeys(obj, inspect);\n    return '[Function' + (name ? ': ' + name : ' (anonymous)') + ']' + (keys.length > 0 ? ' { ' + keys.join(', ') + ' }' : '');\n  }\n\n  if (isSymbol(obj)) {\n    var symString = hasShammedSymbols ? String(obj).replace(/^(Symbol\\(.*\\))_[^)]*$/, '$1') : symToString.call(obj);\n    return _typeof(obj) === 'object' && !hasShammedSymbols ? markBoxed(symString) : symString;\n  }\n\n  if (isElement(obj)) {\n    var s = '<' + String(obj.nodeName).toLowerCase();\n    var attrs = obj.attributes || [];\n\n    for (var i = 0; i < attrs.length; i++) {\n      s += ' ' + attrs[i].name + '=' + wrapQuotes(quote(attrs[i].value), 'double', opts);\n    }\n\n    s += '>';\n\n    if (obj.childNodes && obj.childNodes.length) {\n      s += '...';\n    }\n\n    s += '</' + String(obj.nodeName).toLowerCase() + '>';\n    return s;\n  }\n\n  if (isArray(obj)) {\n    if (obj.length === 0) {\n      return '[]';\n    }\n\n    var xs = arrObjKeys(obj, inspect);\n\n    if (indent && !singleLineValues(xs)) {\n      return '[' + indentedJoin(xs, indent) + ']';\n    }\n\n    return '[ ' + xs.join(', ') + ' ]';\n  }\n\n  if (isError(obj)) {\n    var parts = arrObjKeys(obj, inspect);\n\n    if (parts.length === 0) {\n      return '[' + String(obj) + ']';\n    }\n\n    return '{ [' + String(obj) + '] ' + parts.join(', ') + ' }';\n  }\n\n  if (_typeof(obj) === 'object' && customInspect) {\n    if (inspectSymbol && typeof obj[inspectSymbol] === 'function') {\n      return obj[inspectSymbol]();\n    } else if (customInspect !== 'symbol' && typeof obj.inspect === 'function') {\n      return obj.inspect();\n    }\n  }\n\n  if (isMap(obj)) {\n    var mapParts = [];\n    mapForEach.call(obj, function (value, key) {\n      mapParts.push(inspect(key, obj, true) + ' => ' + inspect(value, obj));\n    });\n    return collectionOf('Map', mapSize.call(obj), mapParts, indent);\n  }\n\n  if (isSet(obj)) {\n    var setParts = [];\n    setForEach.call(obj, function (value) {\n      setParts.push(inspect(value, obj));\n    });\n    return collectionOf('Set', setSize.call(obj), setParts, indent);\n  }\n\n  if (isWeakMap(obj)) {\n    return weakCollectionOf('WeakMap');\n  }\n\n  if (isWeakSet(obj)) {\n    return weakCollectionOf('WeakSet');\n  }\n\n  if (isWeakRef(obj)) {\n    return weakCollectionOf('WeakRef');\n  }\n\n  if (isNumber(obj)) {\n    return markBoxed(inspect(Number(obj)));\n  }\n\n  if (isBigInt(obj)) {\n    return markBoxed(inspect(bigIntValueOf.call(obj)));\n  }\n\n  if (isBoolean(obj)) {\n    return markBoxed(booleanValueOf.call(obj));\n  }\n\n  if (isString(obj)) {\n    return markBoxed(inspect(String(obj)));\n  }\n\n  if (!isDate(obj) && !isRegExp(obj)) {\n    var ys = arrObjKeys(obj, inspect);\n    var isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;\n    var protoTag = obj instanceof Object ? '' : 'null prototype';\n    var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? toStr(obj).slice(8, -1) : protoTag ? 'Object' : '';\n    var constructorTag = isPlainObject || typeof obj.constructor !== 'function' ? '' : obj.constructor.name ? obj.constructor.name + ' ' : '';\n    var tag = constructorTag + (stringTag || protoTag ? '[' + [].concat(stringTag || [], protoTag || []).join(': ') + '] ' : '');\n\n    if (ys.length === 0) {\n      return tag + '{}';\n    }\n\n    if (indent) {\n      return tag + '{' + indentedJoin(ys, indent) + '}';\n    }\n\n    return tag + '{ ' + ys.join(', ') + ' }';\n  }\n\n  return String(obj);\n};\n\nfunction wrapQuotes(s, defaultStyle, opts) {\n  var quoteChar = (opts.quoteStyle || defaultStyle) === 'double' ? '\"' : \"'\";\n  return quoteChar + s + quoteChar;\n}\n\nfunction quote(s) {\n  return String(s).replace(/\"/g, '&quot;');\n}\n\nfunction isArray(obj) {\n  return toStr(obj) === '[object Array]' && (!toStringTag || !(_typeof(obj) === 'object' && toStringTag in obj));\n}\n\nfunction isDate(obj) {\n  return toStr(obj) === '[object Date]' && (!toStringTag || !(_typeof(obj) === 'object' && toStringTag in obj));\n}\n\nfunction isRegExp(obj) {\n  return toStr(obj) === '[object RegExp]' && (!toStringTag || !(_typeof(obj) === 'object' && toStringTag in obj));\n}\n\nfunction isError(obj) {\n  return toStr(obj) === '[object Error]' && (!toStringTag || !(_typeof(obj) === 'object' && toStringTag in obj));\n}\n\nfunction isString(obj) {\n  return toStr(obj) === '[object String]' && (!toStringTag || !(_typeof(obj) === 'object' && toStringTag in obj));\n}\n\nfunction isNumber(obj) {\n  return toStr(obj) === '[object Number]' && (!toStringTag || !(_typeof(obj) === 'object' && toStringTag in obj));\n}\n\nfunction isBoolean(obj) {\n  return toStr(obj) === '[object Boolean]' && (!toStringTag || !(_typeof(obj) === 'object' && toStringTag in obj));\n} // Symbol and BigInt do have Symbol.toStringTag by spec, so that can't be used to eliminate false positives\n\n\nfunction isSymbol(obj) {\n  if (hasShammedSymbols) {\n    return obj && _typeof(obj) === 'object' && obj instanceof Symbol;\n  }\n\n  if (_typeof(obj) === 'symbol') {\n    return true;\n  }\n\n  if (!obj || _typeof(obj) !== 'object' || !symToString) {\n    return false;\n  }\n\n  try {\n    symToString.call(obj);\n    return true;\n  } catch (e) {}\n\n  return false;\n}\n\nfunction isBigInt(obj) {\n  if (!obj || _typeof(obj) !== 'object' || !bigIntValueOf) {\n    return false;\n  }\n\n  try {\n    bigIntValueOf.call(obj);\n    return true;\n  } catch (e) {}\n\n  return false;\n}\n\nvar hasOwn = Object.prototype.hasOwnProperty || function (key) {\n  return key in this;\n};\n\nfunction has(obj, key) {\n  return hasOwn.call(obj, key);\n}\n\nfunction toStr(obj) {\n  return objectToString.call(obj);\n}\n\nfunction nameOf(f) {\n  if (f.name) {\n    return f.name;\n  }\n\n  var m = match.call(functionToString.call(f), /^function\\s*([\\w$]+)/);\n\n  if (m) {\n    return m[1];\n  }\n\n  return null;\n}\n\nfunction indexOf(xs, x) {\n  if (xs.indexOf) {\n    return xs.indexOf(x);\n  }\n\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\nfunction isMap(x) {\n  if (!mapSize || !x || _typeof(x) !== 'object') {\n    return false;\n  }\n\n  try {\n    mapSize.call(x);\n\n    try {\n      setSize.call(x);\n    } catch (s) {\n      return true;\n    }\n\n    return x instanceof Map; // core-js workaround, pre-v2.5.0\n  } catch (e) {}\n\n  return false;\n}\n\nfunction isWeakMap(x) {\n  if (!weakMapHas || !x || _typeof(x) !== 'object') {\n    return false;\n  }\n\n  try {\n    weakMapHas.call(x, weakMapHas);\n\n    try {\n      weakSetHas.call(x, weakSetHas);\n    } catch (s) {\n      return true;\n    }\n\n    return x instanceof WeakMap; // core-js workaround, pre-v2.5.0\n  } catch (e) {}\n\n  return false;\n}\n\nfunction isWeakRef(x) {\n  if (!weakRefDeref || !x || _typeof(x) !== 'object') {\n    return false;\n  }\n\n  try {\n    weakRefDeref.call(x);\n    return true;\n  } catch (e) {}\n\n  return false;\n}\n\nfunction isSet(x) {\n  if (!setSize || !x || _typeof(x) !== 'object') {\n    return false;\n  }\n\n  try {\n    setSize.call(x);\n\n    try {\n      mapSize.call(x);\n    } catch (m) {\n      return true;\n    }\n\n    return x instanceof Set; // core-js workaround, pre-v2.5.0\n  } catch (e) {}\n\n  return false;\n}\n\nfunction isWeakSet(x) {\n  if (!weakSetHas || !x || _typeof(x) !== 'object') {\n    return false;\n  }\n\n  try {\n    weakSetHas.call(x, weakSetHas);\n\n    try {\n      weakMapHas.call(x, weakMapHas);\n    } catch (s) {\n      return true;\n    }\n\n    return x instanceof WeakSet; // core-js workaround, pre-v2.5.0\n  } catch (e) {}\n\n  return false;\n}\n\nfunction isElement(x) {\n  if (!x || _typeof(x) !== 'object') {\n    return false;\n  }\n\n  if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {\n    return true;\n  }\n\n  return typeof x.nodeName === 'string' && typeof x.getAttribute === 'function';\n}\n\nfunction inspectString(str, opts) {\n  if (str.length > opts.maxStringLength) {\n    var remaining = str.length - opts.maxStringLength;\n    var trailer = '... ' + remaining + ' more character' + (remaining > 1 ? 's' : '');\n    return inspectString(str.slice(0, opts.maxStringLength), opts) + trailer;\n  } // eslint-disable-next-line no-control-regex\n\n\n  var s = str.replace(/(['\\\\])/g, '\\\\$1').replace(/[\\x00-\\x1f]/g, lowbyte);\n  return wrapQuotes(s, 'single', opts);\n}\n\nfunction lowbyte(c) {\n  var n = c.charCodeAt(0);\n  var x = {\n    8: 'b',\n    9: 't',\n    10: 'n',\n    12: 'f',\n    13: 'r'\n  }[n];\n\n  if (x) {\n    return '\\\\' + x;\n  }\n\n  return '\\\\x' + (n < 0x10 ? '0' : '') + n.toString(16).toUpperCase();\n}\n\nfunction markBoxed(str) {\n  return 'Object(' + str + ')';\n}\n\nfunction weakCollectionOf(type) {\n  return type + ' { ? }';\n}\n\nfunction collectionOf(type, size, entries, indent) {\n  var joinedEntries = indent ? indentedJoin(entries, indent) : entries.join(', ');\n  return type + ' (' + size + ') {' + joinedEntries + '}';\n}\n\nfunction singleLineValues(xs) {\n  for (var i = 0; i < xs.length; i++) {\n    if (indexOf(xs[i], '\\n') >= 0) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction getIndent(opts, depth) {\n  var baseIndent;\n\n  if (opts.indent === '\\t') {\n    baseIndent = '\\t';\n  } else if (typeof opts.indent === 'number' && opts.indent > 0) {\n    baseIndent = Array(opts.indent + 1).join(' ');\n  } else {\n    return null;\n  }\n\n  return {\n    base: baseIndent,\n    prev: Array(depth + 1).join(baseIndent)\n  };\n}\n\nfunction indentedJoin(xs, indent) {\n  if (xs.length === 0) {\n    return '';\n  }\n\n  var lineJoiner = '\\n' + indent.prev + indent.base;\n  return lineJoiner + xs.join(',' + lineJoiner) + '\\n' + indent.prev;\n}\n\nfunction arrObjKeys(obj, inspect) {\n  var isArr = isArray(obj);\n  var xs = [];\n\n  if (isArr) {\n    xs.length = obj.length;\n\n    for (var i = 0; i < obj.length; i++) {\n      xs[i] = has(obj, i) ? inspect(obj[i], obj) : '';\n    }\n  }\n\n  var syms = typeof gOPS === 'function' ? gOPS(obj) : [];\n  var symMap;\n\n  if (hasShammedSymbols) {\n    symMap = {};\n\n    for (var k = 0; k < syms.length; k++) {\n      symMap['$' + syms[k]] = syms[k];\n    }\n  }\n\n  for (var key in obj) {\n    // eslint-disable-line no-restricted-syntax\n    if (!has(obj, key)) {\n      continue;\n    } // eslint-disable-line no-restricted-syntax, no-continue\n\n\n    if (isArr && String(Number(key)) === key && key < obj.length) {\n      continue;\n    } // eslint-disable-line no-restricted-syntax, no-continue\n\n\n    if (hasShammedSymbols && symMap['$' + key] instanceof Symbol) {\n      // this is to prevent shammed Symbols, which are stored as strings, from being included in the string key section\n      continue; // eslint-disable-line no-restricted-syntax, no-continue\n    } else if (/[^\\w$]/.test(key)) {\n      xs.push(inspect(key, obj) + ': ' + inspect(obj[key], obj));\n    } else {\n      xs.push(key + ': ' + inspect(obj[key], obj));\n    }\n  }\n\n  if (typeof gOPS === 'function') {\n    for (var j = 0; j < syms.length; j++) {\n      if (isEnumerable.call(obj, syms[j])) {\n        xs.push('[' + inspect(syms[j]) + ']: ' + inspect(obj[syms[j]], obj));\n      }\n    }\n  }\n\n  return xs;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///291\n")},433:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar ReactPropTypesSecret = __webpack_require__(642);\n\nfunction emptyFunction() {}\n\nfunction emptyFunctionWithReset() {}\n\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function () {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n\n    var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use PropTypes.checkPropTypes() to call them. ' + 'Read more at http://fb.me/use-check-prop-types');\n    err.name = 'Invariant Violation';\n    throw err;\n  }\n\n  ;\n  shim.isRequired = shim;\n\n  function getShim() {\n    return shim;\n  }\n\n  ; // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n\n  var ReactPropTypes = {\n    array: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n  ReactPropTypes.PropTypes = ReactPropTypes;\n  return ReactPropTypes;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDMzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVhOztBQUViLElBQUlBLG9CQUFvQixHQUFHQyxtQkFBTyxDQUFDLEdBQUQsQ0FBbEM7O0FBRUEsU0FBU0MsYUFBVCxHQUF5QixDQUFFOztBQUMzQixTQUFTQyxzQkFBVCxHQUFrQyxDQUFFOztBQUNwQ0Esc0JBQXNCLENBQUNDLGlCQUF2QixHQUEyQ0YsYUFBM0M7O0FBRUFHLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixZQUFXO0FBQzFCLFdBQVNDLElBQVQsQ0FBY0MsS0FBZCxFQUFxQkMsUUFBckIsRUFBK0JDLGFBQS9CLEVBQThDQyxRQUE5QyxFQUF3REMsWUFBeEQsRUFBc0VDLE1BQXRFLEVBQThFO0FBQzVFLFFBQUlBLE1BQU0sS0FBS2Isb0JBQWYsRUFBcUM7QUFDbkM7QUFDQTtBQUNEOztBQUNELFFBQUljLEdBQUcsR0FBRyxJQUFJQyxLQUFKLENBQ1IseUZBQ0EsK0NBREEsR0FFQSxnREFIUSxDQUFWO0FBS0FELElBQUFBLEdBQUcsQ0FBQ0UsSUFBSixHQUFXLHFCQUFYO0FBQ0EsVUFBTUYsR0FBTjtBQUNEOztBQUFBO0FBQ0RQLEVBQUFBLElBQUksQ0FBQ1UsVUFBTCxHQUFrQlYsSUFBbEI7O0FBQ0EsV0FBU1csT0FBVCxHQUFtQjtBQUNqQixXQUFPWCxJQUFQO0FBQ0Q7O0FBQUEsR0FqQnlCLENBa0IxQjtBQUNBOztBQUNBLE1BQUlZLGNBQWMsR0FBRztBQUNuQkMsSUFBQUEsS0FBSyxFQUFFYixJQURZO0FBRW5CYyxJQUFBQSxJQUFJLEVBQUVkLElBRmE7QUFHbkJlLElBQUFBLElBQUksRUFBRWYsSUFIYTtBQUluQmdCLElBQUFBLE1BQU0sRUFBRWhCLElBSlc7QUFLbkJpQixJQUFBQSxNQUFNLEVBQUVqQixJQUxXO0FBTW5Ca0IsSUFBQUEsTUFBTSxFQUFFbEIsSUFOVztBQU9uQm1CLElBQUFBLE1BQU0sRUFBRW5CLElBUFc7QUFTbkJvQixJQUFBQSxHQUFHLEVBQUVwQixJQVRjO0FBVW5CcUIsSUFBQUEsT0FBTyxFQUFFVixPQVZVO0FBV25CVyxJQUFBQSxPQUFPLEVBQUV0QixJQVhVO0FBWW5CdUIsSUFBQUEsV0FBVyxFQUFFdkIsSUFaTTtBQWFuQndCLElBQUFBLFVBQVUsRUFBRWIsT0FiTztBQWNuQmMsSUFBQUEsSUFBSSxFQUFFekIsSUFkYTtBQWVuQjBCLElBQUFBLFFBQVEsRUFBRWYsT0FmUztBQWdCbkJnQixJQUFBQSxLQUFLLEVBQUVoQixPQWhCWTtBQWlCbkJpQixJQUFBQSxTQUFTLEVBQUVqQixPQWpCUTtBQWtCbkJrQixJQUFBQSxLQUFLLEVBQUVsQixPQWxCWTtBQW1CbkJtQixJQUFBQSxLQUFLLEVBQUVuQixPQW5CWTtBQXFCbkJvQixJQUFBQSxjQUFjLEVBQUVuQyxzQkFyQkc7QUFzQm5CQyxJQUFBQSxpQkFBaUIsRUFBRUY7QUF0QkEsR0FBckI7QUF5QkFpQixFQUFBQSxjQUFjLENBQUNvQixTQUFmLEdBQTJCcEIsY0FBM0I7QUFFQSxTQUFPQSxjQUFQO0FBQ0QsQ0FoREQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jcmFfbmV3Ly4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzP2Q3YTAiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fVxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbldpdGhSZXNldCgpIHt9XG5lbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LnJlc2V0V2FybmluZ0NhY2hlID0gZW1wdHlGdW5jdGlvbjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGVsZW1lbnRUeXBlOiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW0sXG5cbiAgICBjaGVja1Byb3BUeXBlczogZW1wdHlGdW5jdGlvbldpdGhSZXNldCxcbiAgICByZXNldFdhcm5pbmdDYWNoZTogZW1wdHlGdW5jdGlvblxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iXSwibmFtZXMiOlsiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJyZXF1aXJlIiwiZW1wdHlGdW5jdGlvbiIsImVtcHR5RnVuY3Rpb25XaXRoUmVzZXQiLCJyZXNldFdhcm5pbmdDYWNoZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJzaGltIiwicHJvcHMiLCJwcm9wTmFtZSIsImNvbXBvbmVudE5hbWUiLCJsb2NhdGlvbiIsInByb3BGdWxsTmFtZSIsInNlY3JldCIsImVyciIsIkVycm9yIiwibmFtZSIsImlzUmVxdWlyZWQiLCJnZXRTaGltIiwiUmVhY3RQcm9wVHlwZXMiLCJhcnJheSIsImJvb2wiLCJmdW5jIiwibnVtYmVyIiwib2JqZWN0Iiwic3RyaW5nIiwic3ltYm9sIiwiYW55IiwiYXJyYXlPZiIsImVsZW1lbnQiLCJlbGVtZW50VHlwZSIsImluc3RhbmNlT2YiLCJub2RlIiwib2JqZWN0T2YiLCJvbmVPZiIsIm9uZU9mVHlwZSIsInNoYXBlIiwiZXhhY3QiLCJjaGVja1Byb3BUeXBlcyIsIlByb3BUeXBlcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///433\n")},74:(module,__unused_webpack_exports,__webpack_require__)=>{eval("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nif (false) { var throwOnDirectAccess, ReactIs; } else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = __webpack_require__(433)();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzQuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUEsSUFBSUEsS0FBSixFQUEyQyxxQ0FBM0MsTUFPTztBQUNMO0FBQ0E7QUFDQU0sRUFBQUEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCSCxtQkFBTyxDQUFDLEdBQUQsQ0FBUCxFQUFqQjtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3JhX25ldy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzP2Q3YmMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShSZWFjdElzLmlzRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIl0sIm5hbWVzIjpbInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsIlJlYWN0SXMiLCJyZXF1aXJlIiwidGhyb3dPbkRpcmVjdEFjY2VzcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJpc0VsZW1lbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///74\n")},642:module=>{"use strict";eval("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\nmodule.exports = ReactPropTypesSecret;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjQyLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVhOztBQUViLElBQUlBLG9CQUFvQixHQUFHLDhDQUEzQjtBQUVBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJGLG9CQUFqQiIsInNvdXJjZXMiOlsid2VicGFjazovL2NyYV9uZXcvLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanM/NTliMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcbiJdLCJuYW1lcyI6WyJSZWFjdFByb3BUeXBlc1NlY3JldCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///642\n")},280:module=>{"use strict";eval("\n\nvar replace = String.prototype.replace;\nvar percentTwenties = /%20/g;\nvar Format = {\n  RFC1738: 'RFC1738',\n  RFC3986: 'RFC3986'\n};\nmodule.exports = {\n  'default': Format.RFC3986,\n  formatters: {\n    RFC1738: function RFC1738(value) {\n      return replace.call(value, percentTwenties, '+');\n    },\n    RFC3986: function RFC3986(value) {\n      return String(value);\n    }\n  },\n  RFC1738: Format.RFC1738,\n  RFC3986: Format.RFC3986\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjgwLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUlBLE9BQU8sR0FBR0MsTUFBTSxDQUFDQyxTQUFQLENBQWlCRixPQUEvQjtBQUNBLElBQUlHLGVBQWUsR0FBRyxNQUF0QjtBQUVBLElBQUlDLE1BQU0sR0FBRztBQUNUQyxFQUFBQSxPQUFPLEVBQUUsU0FEQTtBQUVUQyxFQUFBQSxPQUFPLEVBQUU7QUFGQSxDQUFiO0FBS0FDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUNiLGFBQVdKLE1BQU0sQ0FBQ0UsT0FETDtBQUViRyxFQUFBQSxVQUFVLEVBQUU7QUFDUkosSUFBQUEsT0FBTyxFQUFFLGlCQUFVSyxLQUFWLEVBQWlCO0FBQ3RCLGFBQU9WLE9BQU8sQ0FBQ1csSUFBUixDQUFhRCxLQUFiLEVBQW9CUCxlQUFwQixFQUFxQyxHQUFyQyxDQUFQO0FBQ0gsS0FITztBQUlSRyxJQUFBQSxPQUFPLEVBQUUsaUJBQVVJLEtBQVYsRUFBaUI7QUFDdEIsYUFBT1QsTUFBTSxDQUFDUyxLQUFELENBQWI7QUFDSDtBQU5PLEdBRkM7QUFVYkwsRUFBQUEsT0FBTyxFQUFFRCxNQUFNLENBQUNDLE9BVkg7QUFXYkMsRUFBQUEsT0FBTyxFQUFFRixNQUFNLENBQUNFO0FBWEgsQ0FBakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jcmFfbmV3Ly4vbm9kZV9tb2R1bGVzL3FzL2xpYi9mb3JtYXRzLmpzP2IzMTMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVwbGFjZSA9IFN0cmluZy5wcm90b3R5cGUucmVwbGFjZTtcbnZhciBwZXJjZW50VHdlbnRpZXMgPSAvJTIwL2c7XG5cbnZhciBGb3JtYXQgPSB7XG4gICAgUkZDMTczODogJ1JGQzE3MzgnLFxuICAgIFJGQzM5ODY6ICdSRkMzOTg2J1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgJ2RlZmF1bHQnOiBGb3JtYXQuUkZDMzk4NixcbiAgICBmb3JtYXR0ZXJzOiB7XG4gICAgICAgIFJGQzE3Mzg6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlcGxhY2UuY2FsbCh2YWx1ZSwgcGVyY2VudFR3ZW50aWVzLCAnKycpO1xuICAgICAgICB9LFxuICAgICAgICBSRkMzOTg2OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBTdHJpbmcodmFsdWUpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBSRkMxNzM4OiBGb3JtYXQuUkZDMTczOCxcbiAgICBSRkMzOTg2OiBGb3JtYXQuUkZDMzk4NlxufTtcbiJdLCJuYW1lcyI6WyJyZXBsYWNlIiwiU3RyaW5nIiwicHJvdG90eXBlIiwicGVyY2VudFR3ZW50aWVzIiwiRm9ybWF0IiwiUkZDMTczOCIsIlJGQzM5ODYiLCJtb2R1bGUiLCJleHBvcnRzIiwiZm9ybWF0dGVycyIsInZhbHVlIiwiY2FsbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///280\n")},520:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar stringify = __webpack_require__(535);\n\nvar parse = __webpack_require__(503);\n\nvar formats = __webpack_require__(280);\n\nmodule.exports = {\n  formats: formats,\n  parse: parse,\n  stringify: stringify\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTIwLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUlBLFNBQVMsR0FBR0MsbUJBQU8sQ0FBQyxHQUFELENBQXZCOztBQUNBLElBQUlDLEtBQUssR0FBR0QsbUJBQU8sQ0FBQyxHQUFELENBQW5COztBQUNBLElBQUlFLE9BQU8sR0FBR0YsbUJBQU8sQ0FBQyxHQUFELENBQXJCOztBQUVBRyxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDYkYsRUFBQUEsT0FBTyxFQUFFQSxPQURJO0FBRWJELEVBQUFBLEtBQUssRUFBRUEsS0FGTTtBQUdiRixFQUFBQSxTQUFTLEVBQUVBO0FBSEUsQ0FBakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jcmFfbmV3Ly4vbm9kZV9tb2R1bGVzL3FzL2xpYi9pbmRleC5qcz80MzI4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHN0cmluZ2lmeSA9IHJlcXVpcmUoJy4vc3RyaW5naWZ5Jyk7XG52YXIgcGFyc2UgPSByZXF1aXJlKCcuL3BhcnNlJyk7XG52YXIgZm9ybWF0cyA9IHJlcXVpcmUoJy4vZm9ybWF0cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBmb3JtYXRzOiBmb3JtYXRzLFxuICAgIHBhcnNlOiBwYXJzZSxcbiAgICBzdHJpbmdpZnk6IHN0cmluZ2lmeVxufTtcbiJdLCJuYW1lcyI6WyJzdHJpbmdpZnkiLCJyZXF1aXJlIiwicGFyc2UiLCJmb3JtYXRzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///520\n")},503:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar utils = __webpack_require__(706);\n\nvar has = Object.prototype.hasOwnProperty;\nvar isArray = Array.isArray;\nvar defaults = {\n  allowDots: false,\n  allowPrototypes: false,\n  allowSparse: false,\n  arrayLimit: 20,\n  charset: 'utf-8',\n  charsetSentinel: false,\n  comma: false,\n  decoder: utils.decode,\n  delimiter: '&',\n  depth: 5,\n  ignoreQueryPrefix: false,\n  interpretNumericEntities: false,\n  parameterLimit: 1000,\n  parseArrays: true,\n  plainObjects: false,\n  strictNullHandling: false\n};\n\nvar interpretNumericEntities = function interpretNumericEntities(str) {\n  return str.replace(/&#(\\d+);/g, function ($0, numberStr) {\n    return String.fromCharCode(parseInt(numberStr, 10));\n  });\n};\n\nvar parseArrayValue = function parseArrayValue(val, options) {\n  if (val && typeof val === 'string' && options.comma && val.indexOf(',') > -1) {\n    return val.split(',');\n  }\n\n  return val;\n}; // This is what browsers will submit when the ✓ character occurs in an\n// application/x-www-form-urlencoded body and the encoding of the page containing\n// the form is iso-8859-1, or when the submitted form has an accept-charset\n// attribute of iso-8859-1. Presumably also with other charsets that do not contain\n// the ✓ character, such as us-ascii.\n\n\nvar isoSentinel = 'utf8=%26%2310003%3B'; // encodeURIComponent('&#10003;')\n// These are the percent-encoded utf-8 octets representing a checkmark, indicating that the request actually is utf-8 encoded.\n\nvar charsetSentinel = 'utf8=%E2%9C%93'; // encodeURIComponent('✓')\n\nvar parseValues = function parseQueryStringValues(str, options) {\n  var obj = {};\n  var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\\?/, '') : str;\n  var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;\n  var parts = cleanStr.split(options.delimiter, limit);\n  var skipIndex = -1; // Keep track of where the utf8 sentinel was found\n\n  var i;\n  var charset = options.charset;\n\n  if (options.charsetSentinel) {\n    for (i = 0; i < parts.length; ++i) {\n      if (parts[i].indexOf('utf8=') === 0) {\n        if (parts[i] === charsetSentinel) {\n          charset = 'utf-8';\n        } else if (parts[i] === isoSentinel) {\n          charset = 'iso-8859-1';\n        }\n\n        skipIndex = i;\n        i = parts.length; // The eslint settings do not allow break;\n      }\n    }\n  }\n\n  for (i = 0; i < parts.length; ++i) {\n    if (i === skipIndex) {\n      continue;\n    }\n\n    var part = parts[i];\n    var bracketEqualsPos = part.indexOf(']=');\n    var pos = bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1;\n    var key, val;\n\n    if (pos === -1) {\n      key = options.decoder(part, defaults.decoder, charset, 'key');\n      val = options.strictNullHandling ? null : '';\n    } else {\n      key = options.decoder(part.slice(0, pos), defaults.decoder, charset, 'key');\n      val = utils.maybeMap(parseArrayValue(part.slice(pos + 1), options), function (encodedVal) {\n        return options.decoder(encodedVal, defaults.decoder, charset, 'value');\n      });\n    }\n\n    if (val && options.interpretNumericEntities && charset === 'iso-8859-1') {\n      val = interpretNumericEntities(val);\n    }\n\n    if (part.indexOf('[]=') > -1) {\n      val = isArray(val) ? [val] : val;\n    }\n\n    if (has.call(obj, key)) {\n      obj[key] = utils.combine(obj[key], val);\n    } else {\n      obj[key] = val;\n    }\n  }\n\n  return obj;\n};\n\nvar parseObject = function parseObject(chain, val, options, valuesParsed) {\n  var leaf = valuesParsed ? val : parseArrayValue(val, options);\n\n  for (var i = chain.length - 1; i >= 0; --i) {\n    var obj;\n    var root = chain[i];\n\n    if (root === '[]' && options.parseArrays) {\n      obj = [].concat(leaf);\n    } else {\n      obj = options.plainObjects ? Object.create(null) : {};\n      var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;\n      var index = parseInt(cleanRoot, 10);\n\n      if (!options.parseArrays && cleanRoot === '') {\n        obj = {\n          0: leaf\n        };\n      } else if (!isNaN(index) && root !== cleanRoot && String(index) === cleanRoot && index >= 0 && options.parseArrays && index <= options.arrayLimit) {\n        obj = [];\n        obj[index] = leaf;\n      } else {\n        obj[cleanRoot] = leaf;\n      }\n    }\n\n    leaf = obj;\n  }\n\n  return leaf;\n};\n\nvar parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {\n  if (!givenKey) {\n    return;\n  } // Transform dot notation to bracket notation\n\n\n  var key = options.allowDots ? givenKey.replace(/\\.([^.[]+)/g, '[$1]') : givenKey; // The regex chunks\n\n  var brackets = /(\\[[^[\\]]*])/;\n  var child = /(\\[[^[\\]]*])/g; // Get the parent\n\n  var segment = options.depth > 0 && brackets.exec(key);\n  var parent = segment ? key.slice(0, segment.index) : key; // Stash the parent if it exists\n\n  var keys = [];\n\n  if (parent) {\n    // If we aren't using plain objects, optionally prefix keys that would overwrite object prototype properties\n    if (!options.plainObjects && has.call(Object.prototype, parent)) {\n      if (!options.allowPrototypes) {\n        return;\n      }\n    }\n\n    keys.push(parent);\n  } // Loop through children appending to the array until we hit depth\n\n\n  var i = 0;\n\n  while (options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth) {\n    i += 1;\n\n    if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {\n      if (!options.allowPrototypes) {\n        return;\n      }\n    }\n\n    keys.push(segment[1]);\n  } // If there's a remainder, just add whatever is left\n\n\n  if (segment) {\n    keys.push('[' + key.slice(segment.index) + ']');\n  }\n\n  return parseObject(keys, val, options, valuesParsed);\n};\n\nvar normalizeParseOptions = function normalizeParseOptions(opts) {\n  if (!opts) {\n    return defaults;\n  }\n\n  if (opts.decoder !== null && opts.decoder !== undefined && typeof opts.decoder !== 'function') {\n    throw new TypeError('Decoder has to be a function.');\n  }\n\n  if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {\n    throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');\n  }\n\n  var charset = typeof opts.charset === 'undefined' ? defaults.charset : opts.charset;\n  return {\n    allowDots: typeof opts.allowDots === 'undefined' ? defaults.allowDots : !!opts.allowDots,\n    allowPrototypes: typeof opts.allowPrototypes === 'boolean' ? opts.allowPrototypes : defaults.allowPrototypes,\n    allowSparse: typeof opts.allowSparse === 'boolean' ? opts.allowSparse : defaults.allowSparse,\n    arrayLimit: typeof opts.arrayLimit === 'number' ? opts.arrayLimit : defaults.arrayLimit,\n    charset: charset,\n    charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,\n    comma: typeof opts.comma === 'boolean' ? opts.comma : defaults.comma,\n    decoder: typeof opts.decoder === 'function' ? opts.decoder : defaults.decoder,\n    delimiter: typeof opts.delimiter === 'string' || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,\n    // eslint-disable-next-line no-implicit-coercion, no-extra-parens\n    depth: typeof opts.depth === 'number' || opts.depth === false ? +opts.depth : defaults.depth,\n    ignoreQueryPrefix: opts.ignoreQueryPrefix === true,\n    interpretNumericEntities: typeof opts.interpretNumericEntities === 'boolean' ? opts.interpretNumericEntities : defaults.interpretNumericEntities,\n    parameterLimit: typeof opts.parameterLimit === 'number' ? opts.parameterLimit : defaults.parameterLimit,\n    parseArrays: opts.parseArrays !== false,\n    plainObjects: typeof opts.plainObjects === 'boolean' ? opts.plainObjects : defaults.plainObjects,\n    strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling\n  };\n};\n\nmodule.exports = function (str, opts) {\n  var options = normalizeParseOptions(opts);\n\n  if (str === '' || str === null || typeof str === 'undefined') {\n    return options.plainObjects ? Object.create(null) : {};\n  }\n\n  var tempObj = typeof str === 'string' ? parseValues(str, options) : str;\n  var obj = options.plainObjects ? Object.create(null) : {}; // Iterate over the keys and setup the new object\n\n  var keys = Object.keys(tempObj);\n\n  for (var i = 0; i < keys.length; ++i) {\n    var key = keys[i];\n    var newObj = parseKeys(key, tempObj[key], options, typeof str === 'string');\n    obj = utils.merge(obj, newObj, options);\n  }\n\n  if (options.allowSparse === true) {\n    return obj;\n  }\n\n  return utils.compact(obj);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///503\n")},535:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar getSideChannel = __webpack_require__(357);\n\nvar utils = __webpack_require__(706);\n\nvar formats = __webpack_require__(280);\n\nvar has = Object.prototype.hasOwnProperty;\nvar arrayPrefixGenerators = {\n  brackets: function brackets(prefix) {\n    return prefix + '[]';\n  },\n  comma: 'comma',\n  indices: function indices(prefix, key) {\n    return prefix + '[' + key + ']';\n  },\n  repeat: function repeat(prefix) {\n    return prefix;\n  }\n};\nvar isArray = Array.isArray;\nvar push = Array.prototype.push;\n\nvar pushToArray = function pushToArray(arr, valueOrArray) {\n  push.apply(arr, isArray(valueOrArray) ? valueOrArray : [valueOrArray]);\n};\n\nvar toISO = Date.prototype.toISOString;\nvar defaultFormat = formats['default'];\nvar defaults = {\n  addQueryPrefix: false,\n  allowDots: false,\n  charset: 'utf-8',\n  charsetSentinel: false,\n  delimiter: '&',\n  encode: true,\n  encoder: utils.encode,\n  encodeValuesOnly: false,\n  format: defaultFormat,\n  formatter: formats.formatters[defaultFormat],\n  // deprecated\n  indices: false,\n  serializeDate: function serializeDate(date) {\n    return toISO.call(date);\n  },\n  skipNulls: false,\n  strictNullHandling: false\n};\n\nvar isNonNullishPrimitive = function isNonNullishPrimitive(v) {\n  return typeof v === 'string' || typeof v === 'number' || typeof v === 'boolean' || _typeof(v) === 'symbol' || typeof v === 'bigint';\n};\n\nvar stringify = function stringify(object, prefix, generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, sideChannel) {\n  var obj = object;\n\n  if (sideChannel.has(object)) {\n    throw new RangeError('Cyclic object value');\n  }\n\n  if (typeof filter === 'function') {\n    obj = filter(prefix, obj);\n  } else if (obj instanceof Date) {\n    obj = serializeDate(obj);\n  } else if (generateArrayPrefix === 'comma' && isArray(obj)) {\n    obj = utils.maybeMap(obj, function (value) {\n      if (value instanceof Date) {\n        return serializeDate(value);\n      }\n\n      return value;\n    });\n  }\n\n  if (obj === null) {\n    if (strictNullHandling) {\n      return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset, 'key', format) : prefix;\n    }\n\n    obj = '';\n  }\n\n  if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {\n    if (encoder) {\n      var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, 'key', format);\n      return [formatter(keyValue) + '=' + formatter(encoder(obj, defaults.encoder, charset, 'value', format))];\n    }\n\n    return [formatter(prefix) + '=' + formatter(String(obj))];\n  }\n\n  var values = [];\n\n  if (typeof obj === 'undefined') {\n    return values;\n  }\n\n  var objKeys;\n\n  if (generateArrayPrefix === 'comma' && isArray(obj)) {\n    // we need to join elements in\n    objKeys = [{\n      value: obj.length > 0 ? obj.join(',') || null : undefined\n    }];\n  } else if (isArray(filter)) {\n    objKeys = filter;\n  } else {\n    var keys = Object.keys(obj);\n    objKeys = sort ? keys.sort(sort) : keys;\n  }\n\n  for (var i = 0; i < objKeys.length; ++i) {\n    var key = objKeys[i];\n    var value = _typeof(key) === 'object' && key.value !== undefined ? key.value : obj[key];\n\n    if (skipNulls && value === null) {\n      continue;\n    }\n\n    var keyPrefix = isArray(obj) ? typeof generateArrayPrefix === 'function' ? generateArrayPrefix(prefix, key) : prefix : prefix + (allowDots ? '.' + key : '[' + key + ']');\n    sideChannel.set(object, true);\n    var valueSideChannel = getSideChannel();\n    pushToArray(values, stringify(value, keyPrefix, generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, valueSideChannel));\n  }\n\n  return values;\n};\n\nvar normalizeStringifyOptions = function normalizeStringifyOptions(opts) {\n  if (!opts) {\n    return defaults;\n  }\n\n  if (opts.encoder !== null && opts.encoder !== undefined && typeof opts.encoder !== 'function') {\n    throw new TypeError('Encoder has to be a function.');\n  }\n\n  var charset = opts.charset || defaults.charset;\n\n  if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {\n    throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');\n  }\n\n  var format = formats['default'];\n\n  if (typeof opts.format !== 'undefined') {\n    if (!has.call(formats.formatters, opts.format)) {\n      throw new TypeError('Unknown format option provided.');\n    }\n\n    format = opts.format;\n  }\n\n  var formatter = formats.formatters[format];\n  var filter = defaults.filter;\n\n  if (typeof opts.filter === 'function' || isArray(opts.filter)) {\n    filter = opts.filter;\n  }\n\n  return {\n    addQueryPrefix: typeof opts.addQueryPrefix === 'boolean' ? opts.addQueryPrefix : defaults.addQueryPrefix,\n    allowDots: typeof opts.allowDots === 'undefined' ? defaults.allowDots : !!opts.allowDots,\n    charset: charset,\n    charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,\n    delimiter: typeof opts.delimiter === 'undefined' ? defaults.delimiter : opts.delimiter,\n    encode: typeof opts.encode === 'boolean' ? opts.encode : defaults.encode,\n    encoder: typeof opts.encoder === 'function' ? opts.encoder : defaults.encoder,\n    encodeValuesOnly: typeof opts.encodeValuesOnly === 'boolean' ? opts.encodeValuesOnly : defaults.encodeValuesOnly,\n    filter: filter,\n    format: format,\n    formatter: formatter,\n    serializeDate: typeof opts.serializeDate === 'function' ? opts.serializeDate : defaults.serializeDate,\n    skipNulls: typeof opts.skipNulls === 'boolean' ? opts.skipNulls : defaults.skipNulls,\n    sort: typeof opts.sort === 'function' ? opts.sort : null,\n    strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling\n  };\n};\n\nmodule.exports = function (object, opts) {\n  var obj = object;\n  var options = normalizeStringifyOptions(opts);\n  var objKeys;\n  var filter;\n\n  if (typeof options.filter === 'function') {\n    filter = options.filter;\n    obj = filter('', obj);\n  } else if (isArray(options.filter)) {\n    filter = options.filter;\n    objKeys = filter;\n  }\n\n  var keys = [];\n\n  if (_typeof(obj) !== 'object' || obj === null) {\n    return '';\n  }\n\n  var arrayFormat;\n\n  if (opts && opts.arrayFormat in arrayPrefixGenerators) {\n    arrayFormat = opts.arrayFormat;\n  } else if (opts && 'indices' in opts) {\n    arrayFormat = opts.indices ? 'indices' : 'repeat';\n  } else {\n    arrayFormat = 'indices';\n  }\n\n  var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];\n\n  if (!objKeys) {\n    objKeys = Object.keys(obj);\n  }\n\n  if (options.sort) {\n    objKeys.sort(options.sort);\n  }\n\n  var sideChannel = getSideChannel();\n\n  for (var i = 0; i < objKeys.length; ++i) {\n    var key = objKeys[i];\n\n    if (options.skipNulls && obj[key] === null) {\n      continue;\n    }\n\n    pushToArray(keys, stringify(obj[key], key, generateArrayPrefix, options.strictNullHandling, options.skipNulls, options.encode ? options.encoder : null, options.filter, options.sort, options.allowDots, options.serializeDate, options.format, options.formatter, options.encodeValuesOnly, options.charset, sideChannel));\n  }\n\n  var joined = keys.join(options.delimiter);\n  var prefix = options.addQueryPrefix === true ? '?' : '';\n\n  if (options.charsetSentinel) {\n    if (options.charset === 'iso-8859-1') {\n      // encodeURIComponent('&#10003;'), the \"numeric entity\" representation of a checkmark\n      prefix += 'utf8=%26%2310003%3B&';\n    } else {\n      // encodeURIComponent('✓')\n      prefix += 'utf8=%E2%9C%93&';\n    }\n  }\n\n  return joined.length > 0 ? prefix + joined : '';\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///535\n")},706:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar formats = __webpack_require__(280);\n\nvar has = Object.prototype.hasOwnProperty;\nvar isArray = Array.isArray;\n\nvar hexTable = function () {\n  var array = [];\n\n  for (var i = 0; i < 256; ++i) {\n    array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());\n  }\n\n  return array;\n}();\n\nvar compactQueue = function compactQueue(queue) {\n  while (queue.length > 1) {\n    var item = queue.pop();\n    var obj = item.obj[item.prop];\n\n    if (isArray(obj)) {\n      var compacted = [];\n\n      for (var j = 0; j < obj.length; ++j) {\n        if (typeof obj[j] !== 'undefined') {\n          compacted.push(obj[j]);\n        }\n      }\n\n      item.obj[item.prop] = compacted;\n    }\n  }\n};\n\nvar arrayToObject = function arrayToObject(source, options) {\n  var obj = options && options.plainObjects ? Object.create(null) : {};\n\n  for (var i = 0; i < source.length; ++i) {\n    if (typeof source[i] !== 'undefined') {\n      obj[i] = source[i];\n    }\n  }\n\n  return obj;\n};\n\nvar merge = function merge(target, source, options) {\n  /* eslint no-param-reassign: 0 */\n  if (!source) {\n    return target;\n  }\n\n  if (_typeof(source) !== 'object') {\n    if (isArray(target)) {\n      target.push(source);\n    } else if (target && _typeof(target) === 'object') {\n      if (options && (options.plainObjects || options.allowPrototypes) || !has.call(Object.prototype, source)) {\n        target[source] = true;\n      }\n    } else {\n      return [target, source];\n    }\n\n    return target;\n  }\n\n  if (!target || _typeof(target) !== 'object') {\n    return [target].concat(source);\n  }\n\n  var mergeTarget = target;\n\n  if (isArray(target) && !isArray(source)) {\n    mergeTarget = arrayToObject(target, options);\n  }\n\n  if (isArray(target) && isArray(source)) {\n    source.forEach(function (item, i) {\n      if (has.call(target, i)) {\n        var targetItem = target[i];\n\n        if (targetItem && _typeof(targetItem) === 'object' && item && _typeof(item) === 'object') {\n          target[i] = merge(targetItem, item, options);\n        } else {\n          target.push(item);\n        }\n      } else {\n        target[i] = item;\n      }\n    });\n    return target;\n  }\n\n  return Object.keys(source).reduce(function (acc, key) {\n    var value = source[key];\n\n    if (has.call(acc, key)) {\n      acc[key] = merge(acc[key], value, options);\n    } else {\n      acc[key] = value;\n    }\n\n    return acc;\n  }, mergeTarget);\n};\n\nvar assign = function assignSingleSource(target, source) {\n  return Object.keys(source).reduce(function (acc, key) {\n    acc[key] = source[key];\n    return acc;\n  }, target);\n};\n\nvar decode = function decode(str, decoder, charset) {\n  var strWithoutPlus = str.replace(/\\+/g, ' ');\n\n  if (charset === 'iso-8859-1') {\n    // unescape never throws, no try...catch needed:\n    return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);\n  } // utf-8\n\n\n  try {\n    return decodeURIComponent(strWithoutPlus);\n  } catch (e) {\n    return strWithoutPlus;\n  }\n};\n\nvar encode = function encode(str, defaultEncoder, charset, kind, format) {\n  // This code was originally written by Brian White (mscdex) for the io.js core querystring library.\n  // It has been adapted here for stricter adherence to RFC 3986\n  if (str.length === 0) {\n    return str;\n  }\n\n  var string = str;\n\n  if (_typeof(str) === 'symbol') {\n    string = Symbol.prototype.toString.call(str);\n  } else if (typeof str !== 'string') {\n    string = String(str);\n  }\n\n  if (charset === 'iso-8859-1') {\n    return escape(string).replace(/%u[0-9a-f]{4}/gi, function ($0) {\n      return '%26%23' + parseInt($0.slice(2), 16) + '%3B';\n    });\n  }\n\n  var out = '';\n\n  for (var i = 0; i < string.length; ++i) {\n    var c = string.charCodeAt(i);\n\n    if (c === 0x2D // -\n    || c === 0x2E // .\n    || c === 0x5F // _\n    || c === 0x7E // ~\n    || c >= 0x30 && c <= 0x39 // 0-9\n    || c >= 0x41 && c <= 0x5A // a-z\n    || c >= 0x61 && c <= 0x7A // A-Z\n    || format === formats.RFC1738 && (c === 0x28 || c === 0x29) // ( )\n    ) {\n      out += string.charAt(i);\n      continue;\n    }\n\n    if (c < 0x80) {\n      out = out + hexTable[c];\n      continue;\n    }\n\n    if (c < 0x800) {\n      out = out + (hexTable[0xC0 | c >> 6] + hexTable[0x80 | c & 0x3F]);\n      continue;\n    }\n\n    if (c < 0xD800 || c >= 0xE000) {\n      out = out + (hexTable[0xE0 | c >> 12] + hexTable[0x80 | c >> 6 & 0x3F] + hexTable[0x80 | c & 0x3F]);\n      continue;\n    }\n\n    i += 1;\n    c = 0x10000 + ((c & 0x3FF) << 10 | string.charCodeAt(i) & 0x3FF);\n    out += hexTable[0xF0 | c >> 18] + hexTable[0x80 | c >> 12 & 0x3F] + hexTable[0x80 | c >> 6 & 0x3F] + hexTable[0x80 | c & 0x3F];\n  }\n\n  return out;\n};\n\nvar compact = function compact(value) {\n  var queue = [{\n    obj: {\n      o: value\n    },\n    prop: 'o'\n  }];\n  var refs = [];\n\n  for (var i = 0; i < queue.length; ++i) {\n    var item = queue[i];\n    var obj = item.obj[item.prop];\n    var keys = Object.keys(obj);\n\n    for (var j = 0; j < keys.length; ++j) {\n      var key = keys[j];\n      var val = obj[key];\n\n      if (_typeof(val) === 'object' && val !== null && refs.indexOf(val) === -1) {\n        queue.push({\n          obj: obj,\n          prop: key\n        });\n        refs.push(val);\n      }\n    }\n  }\n\n  compactQueue(queue);\n  return value;\n};\n\nvar isRegExp = function isRegExp(obj) {\n  return Object.prototype.toString.call(obj) === '[object RegExp]';\n};\n\nvar isBuffer = function isBuffer(obj) {\n  if (!obj || _typeof(obj) !== 'object') {\n    return false;\n  }\n\n  return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));\n};\n\nvar combine = function combine(a, b) {\n  return [].concat(a, b);\n};\n\nvar maybeMap = function maybeMap(val, fn) {\n  if (isArray(val)) {\n    var mapped = [];\n\n    for (var i = 0; i < val.length; i += 1) {\n      mapped.push(fn(val[i]));\n    }\n\n    return mapped;\n  }\n\n  return fn(val);\n};\n\nmodule.exports = {\n  arrayToObject: arrayToObject,\n  assign: assign,\n  combine: combine,\n  compact: compact,\n  decode: decode,\n  encode: encode,\n  isBuffer: isBuffer,\n  isRegExp: isRegExp,\n  maybeMap: maybeMap,\n  merge: merge\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///706\n")},748:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('/** @license React v17.0.2\n * react-dom.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/*\n Modernizr 3.0.0pre (Custom Build) | MIT\n*/\n\n\nfunction _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nvar aa = __webpack_require__(466),\n    m = __webpack_require__(347),\n    r = __webpack_require__(767);\n\nfunction y(a) {\n  for (var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++) {\n    b += "&args[]=" + encodeURIComponent(arguments[c]);\n  }\n\n  return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";\n}\n\nif (!aa) throw Error(y(227));\nvar ba = new Set(),\n    ca = {};\n\nfunction da(a, b) {\n  ea(a, b);\n  ea(a + "Capture", b);\n}\n\nfunction ea(a, b) {\n  ca[a] = b;\n\n  for (a = 0; a < b.length; a++) {\n    ba.add(b[a]);\n  }\n}\n\nvar fa = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement),\n    ha = /^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$/,\n    ia = Object.prototype.hasOwnProperty,\n    ja = {},\n    ka = {};\n\nfunction la(a) {\n  if (ia.call(ka, a)) return !0;\n  if (ia.call(ja, a)) return !1;\n  if (ha.test(a)) return ka[a] = !0;\n  ja[a] = !0;\n  return !1;\n}\n\nfunction ma(a, b, c, d) {\n  if (null !== c && 0 === c.type) return !1;\n\n  switch (_typeof(b)) {\n    case "function":\n    case "symbol":\n      return !0;\n\n    case "boolean":\n      if (d) return !1;\n      if (null !== c) return !c.acceptsBooleans;\n      a = a.toLowerCase().slice(0, 5);\n      return "data-" !== a && "aria-" !== a;\n\n    default:\n      return !1;\n  }\n}\n\nfunction na(a, b, c, d) {\n  if (null === b || "undefined" === typeof b || ma(a, b, c, d)) return !0;\n  if (d) return !1;\n  if (null !== c) switch (c.type) {\n    case 3:\n      return !b;\n\n    case 4:\n      return !1 === b;\n\n    case 5:\n      return isNaN(b);\n\n    case 6:\n      return isNaN(b) || 1 > b;\n  }\n  return !1;\n}\n\nfunction B(a, b, c, d, e, f, g) {\n  this.acceptsBooleans = 2 === b || 3 === b || 4 === b;\n  this.attributeName = d;\n  this.attributeNamespace = e;\n  this.mustUseProperty = c;\n  this.propertyName = a;\n  this.type = b;\n  this.sanitizeURL = f;\n  this.removeEmptyString = g;\n}\n\nvar D = {};\n"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function (a) {\n  D[a] = new B(a, 0, !1, a, null, !1, !1);\n});\n[["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function (a) {\n  var b = a[0];\n  D[b] = new B(b, 1, !1, a[1], null, !1, !1);\n});\n["contentEditable", "draggable", "spellCheck", "value"].forEach(function (a) {\n  D[a] = new B(a, 2, !1, a.toLowerCase(), null, !1, !1);\n});\n["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function (a) {\n  D[a] = new B(a, 2, !1, a, null, !1, !1);\n});\n"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function (a) {\n  D[a] = new B(a, 3, !1, a.toLowerCase(), null, !1, !1);\n});\n["checked", "multiple", "muted", "selected"].forEach(function (a) {\n  D[a] = new B(a, 3, !0, a, null, !1, !1);\n});\n["capture", "download"].forEach(function (a) {\n  D[a] = new B(a, 4, !1, a, null, !1, !1);\n});\n["cols", "rows", "size", "span"].forEach(function (a) {\n  D[a] = new B(a, 6, !1, a, null, !1, !1);\n});\n["rowSpan", "start"].forEach(function (a) {\n  D[a] = new B(a, 5, !1, a.toLowerCase(), null, !1, !1);\n});\nvar oa = /[\\-:]([a-z])/g;\n\nfunction pa(a) {\n  return a[1].toUpperCase();\n}\n\n"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function (a) {\n  var b = a.replace(oa, pa);\n  D[b] = new B(b, 1, !1, a, null, !1, !1);\n});\n"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function (a) {\n  var b = a.replace(oa, pa);\n  D[b] = new B(b, 1, !1, a, "http://www.w3.org/1999/xlink", !1, !1);\n});\n["xml:base", "xml:lang", "xml:space"].forEach(function (a) {\n  var b = a.replace(oa, pa);\n  D[b] = new B(b, 1, !1, a, "http://www.w3.org/XML/1998/namespace", !1, !1);\n});\n["tabIndex", "crossOrigin"].forEach(function (a) {\n  D[a] = new B(a, 1, !1, a.toLowerCase(), null, !1, !1);\n});\nD.xlinkHref = new B("xlinkHref", 1, !1, "xlink:href", "http://www.w3.org/1999/xlink", !0, !1);\n["src", "href", "action", "formAction"].forEach(function (a) {\n  D[a] = new B(a, 1, !1, a.toLowerCase(), null, !0, !0);\n});\n\nfunction qa(a, b, c, d) {\n  var e = D.hasOwnProperty(b) ? D[b] : null;\n  var f = null !== e ? 0 === e.type : d ? !1 : !(2 < b.length) || "o" !== b[0] && "O" !== b[0] || "n" !== b[1] && "N" !== b[1] ? !1 : !0;\n  f || (na(b, c, e, d) && (c = null), d || null === e ? la(b) && (null === c ? a.removeAttribute(b) : a.setAttribute(b, "" + c)) : e.mustUseProperty ? a[e.propertyName] = null === c ? 3 === e.type ? !1 : "" : c : (b = e.attributeName, d = e.attributeNamespace, null === c ? a.removeAttribute(b) : (e = e.type, c = 3 === e || 4 === e && !0 === c ? "" : "" + c, d ? a.setAttributeNS(d, b, c) : a.setAttribute(b, c))));\n}\n\nvar ra = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,\n    sa = 60103,\n    ta = 60106,\n    ua = 60107,\n    wa = 60108,\n    xa = 60114,\n    ya = 60109,\n    za = 60110,\n    Aa = 60112,\n    Ba = 60113,\n    Ca = 60120,\n    Da = 60115,\n    Ea = 60116,\n    Fa = 60121,\n    Ga = 60128,\n    Ha = 60129,\n    Ia = 60130,\n    Ja = 60131;\n\nif ("function" === typeof Symbol && Symbol.for) {\n  var E = Symbol.for;\n  sa = E("react.element");\n  ta = E("react.portal");\n  ua = E("react.fragment");\n  wa = E("react.strict_mode");\n  xa = E("react.profiler");\n  ya = E("react.provider");\n  za = E("react.context");\n  Aa = E("react.forward_ref");\n  Ba = E("react.suspense");\n  Ca = E("react.suspense_list");\n  Da = E("react.memo");\n  Ea = E("react.lazy");\n  Fa = E("react.block");\n  E("react.scope");\n  Ga = E("react.opaque.id");\n  Ha = E("react.debug_trace_mode");\n  Ia = E("react.offscreen");\n  Ja = E("react.legacy_hidden");\n}\n\nvar Ka = "function" === typeof Symbol && Symbol.iterator;\n\nfunction La(a) {\n  if (null === a || "object" !== _typeof(a)) return null;\n  a = Ka && a[Ka] || a["@@iterator"];\n  return "function" === typeof a ? a : null;\n}\n\nvar Ma;\n\nfunction Na(a) {\n  if (void 0 === Ma) try {\n    throw Error();\n  } catch (c) {\n    var b = c.stack.trim().match(/\\n( *(at )?)/);\n    Ma = b && b[1] || "";\n  }\n  return "\\n" + Ma + a;\n}\n\nvar Oa = !1;\n\nfunction Pa(a, b) {\n  if (!a || Oa) return "";\n  Oa = !0;\n  var c = Error.prepareStackTrace;\n  Error.prepareStackTrace = void 0;\n\n  try {\n    if (b) {\n      if (b = function b() {\n        throw Error();\n      }, Object.defineProperty(b.prototype, "props", {\n        set: function set() {\n          throw Error();\n        }\n      }), "object" === (typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) && Reflect.construct) {\n        try {\n          Reflect.construct(b, []);\n        } catch (k) {\n          var d = k;\n        }\n\n        Reflect.construct(a, [], b);\n      } else {\n        try {\n          b.call();\n        } catch (k) {\n          d = k;\n        }\n\n        a.call(b.prototype);\n      }\n    } else {\n      try {\n        throw Error();\n      } catch (k) {\n        d = k;\n      }\n\n      a();\n    }\n  } catch (k) {\n    if (k && d && "string" === typeof k.stack) {\n      for (var e = k.stack.split("\\n"), f = d.stack.split("\\n"), g = e.length - 1, h = f.length - 1; 1 <= g && 0 <= h && e[g] !== f[h];) {\n        h--;\n      }\n\n      for (; 1 <= g && 0 <= h; g--, h--) {\n        if (e[g] !== f[h]) {\n          if (1 !== g || 1 !== h) {\n            do {\n              if (g--, h--, 0 > h || e[g] !== f[h]) return "\\n" + e[g].replace(" at new ", " at ");\n            } while (1 <= g && 0 <= h);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    Oa = !1, Error.prepareStackTrace = c;\n  }\n\n  return (a = a ? a.displayName || a.name : "") ? Na(a) : "";\n}\n\nfunction Qa(a) {\n  switch (a.tag) {\n    case 5:\n      return Na(a.type);\n\n    case 16:\n      return Na("Lazy");\n\n    case 13:\n      return Na("Suspense");\n\n    case 19:\n      return Na("SuspenseList");\n\n    case 0:\n    case 2:\n    case 15:\n      return a = Pa(a.type, !1), a;\n\n    case 11:\n      return a = Pa(a.type.render, !1), a;\n\n    case 22:\n      return a = Pa(a.type._render, !1), a;\n\n    case 1:\n      return a = Pa(a.type, !0), a;\n\n    default:\n      return "";\n  }\n}\n\nfunction Ra(a) {\n  if (null == a) return null;\n  if ("function" === typeof a) return a.displayName || a.name || null;\n  if ("string" === typeof a) return a;\n\n  switch (a) {\n    case ua:\n      return "Fragment";\n\n    case ta:\n      return "Portal";\n\n    case xa:\n      return "Profiler";\n\n    case wa:\n      return "StrictMode";\n\n    case Ba:\n      return "Suspense";\n\n    case Ca:\n      return "SuspenseList";\n  }\n\n  if ("object" === _typeof(a)) switch (a.$$typeof) {\n    case za:\n      return (a.displayName || "Context") + ".Consumer";\n\n    case ya:\n      return (a._context.displayName || "Context") + ".Provider";\n\n    case Aa:\n      var b = a.render;\n      b = b.displayName || b.name || "";\n      return a.displayName || ("" !== b ? "ForwardRef(" + b + ")" : "ForwardRef");\n\n    case Da:\n      return Ra(a.type);\n\n    case Fa:\n      return Ra(a._render);\n\n    case Ea:\n      b = a._payload;\n      a = a._init;\n\n      try {\n        return Ra(a(b));\n      } catch (c) {}\n\n  }\n  return null;\n}\n\nfunction Sa(a) {\n  switch (_typeof(a)) {\n    case "boolean":\n    case "number":\n    case "object":\n    case "string":\n    case "undefined":\n      return a;\n\n    default:\n      return "";\n  }\n}\n\nfunction Ta(a) {\n  var b = a.type;\n  return (a = a.nodeName) && "input" === a.toLowerCase() && ("checkbox" === b || "radio" === b);\n}\n\nfunction Ua(a) {\n  var b = Ta(a) ? "checked" : "value",\n      c = Object.getOwnPropertyDescriptor(a.constructor.prototype, b),\n      d = "" + a[b];\n\n  if (!a.hasOwnProperty(b) && "undefined" !== typeof c && "function" === typeof c.get && "function" === typeof c.set) {\n    var e = c.get,\n        f = c.set;\n    Object.defineProperty(a, b, {\n      configurable: !0,\n      get: function get() {\n        return e.call(this);\n      },\n      set: function set(a) {\n        d = "" + a;\n        f.call(this, a);\n      }\n    });\n    Object.defineProperty(a, b, {\n      enumerable: c.enumerable\n    });\n    return {\n      getValue: function getValue() {\n        return d;\n      },\n      setValue: function setValue(a) {\n        d = "" + a;\n      },\n      stopTracking: function stopTracking() {\n        a._valueTracker = null;\n        delete a[b];\n      }\n    };\n  }\n}\n\nfunction Va(a) {\n  a._valueTracker || (a._valueTracker = Ua(a));\n}\n\nfunction Wa(a) {\n  if (!a) return !1;\n  var b = a._valueTracker;\n  if (!b) return !0;\n  var c = b.getValue();\n  var d = "";\n  a && (d = Ta(a) ? a.checked ? "true" : "false" : a.value);\n  a = d;\n  return a !== c ? (b.setValue(a), !0) : !1;\n}\n\nfunction Xa(a) {\n  a = a || ("undefined" !== typeof document ? document : void 0);\n  if ("undefined" === typeof a) return null;\n\n  try {\n    return a.activeElement || a.body;\n  } catch (b) {\n    return a.body;\n  }\n}\n\nfunction Ya(a, b) {\n  var c = b.checked;\n  return m({}, b, {\n    defaultChecked: void 0,\n    defaultValue: void 0,\n    value: void 0,\n    checked: null != c ? c : a._wrapperState.initialChecked\n  });\n}\n\nfunction Za(a, b) {\n  var c = null == b.defaultValue ? "" : b.defaultValue,\n      d = null != b.checked ? b.checked : b.defaultChecked;\n  c = Sa(null != b.value ? b.value : c);\n  a._wrapperState = {\n    initialChecked: d,\n    initialValue: c,\n    controlled: "checkbox" === b.type || "radio" === b.type ? null != b.checked : null != b.value\n  };\n}\n\nfunction $a(a, b) {\n  b = b.checked;\n  null != b && qa(a, "checked", b, !1);\n}\n\nfunction ab(a, b) {\n  $a(a, b);\n  var c = Sa(b.value),\n      d = b.type;\n  if (null != c) {\n    if ("number" === d) {\n      if (0 === c && "" === a.value || a.value != c) a.value = "" + c;\n    } else a.value !== "" + c && (a.value = "" + c);\n  } else if ("submit" === d || "reset" === d) {\n    a.removeAttribute("value");\n    return;\n  }\n  b.hasOwnProperty("value") ? bb(a, b.type, c) : b.hasOwnProperty("defaultValue") && bb(a, b.type, Sa(b.defaultValue));\n  null == b.checked && null != b.defaultChecked && (a.defaultChecked = !!b.defaultChecked);\n}\n\nfunction cb(a, b, c) {\n  if (b.hasOwnProperty("value") || b.hasOwnProperty("defaultValue")) {\n    var d = b.type;\n    if (!("submit" !== d && "reset" !== d || void 0 !== b.value && null !== b.value)) return;\n    b = "" + a._wrapperState.initialValue;\n    c || b === a.value || (a.value = b);\n    a.defaultValue = b;\n  }\n\n  c = a.name;\n  "" !== c && (a.name = "");\n  a.defaultChecked = !!a._wrapperState.initialChecked;\n  "" !== c && (a.name = c);\n}\n\nfunction bb(a, b, c) {\n  if ("number" !== b || Xa(a.ownerDocument) !== a) null == c ? a.defaultValue = "" + a._wrapperState.initialValue : a.defaultValue !== "" + c && (a.defaultValue = "" + c);\n}\n\nfunction db(a) {\n  var b = "";\n  aa.Children.forEach(a, function (a) {\n    null != a && (b += a);\n  });\n  return b;\n}\n\nfunction eb(a, b) {\n  a = m({\n    children: void 0\n  }, b);\n  if (b = db(b.children)) a.children = b;\n  return a;\n}\n\nfunction fb(a, b, c, d) {\n  a = a.options;\n\n  if (b) {\n    b = {};\n\n    for (var e = 0; e < c.length; e++) {\n      b["$" + c[e]] = !0;\n    }\n\n    for (c = 0; c < a.length; c++) {\n      e = b.hasOwnProperty("$" + a[c].value), a[c].selected !== e && (a[c].selected = e), e && d && (a[c].defaultSelected = !0);\n    }\n  } else {\n    c = "" + Sa(c);\n    b = null;\n\n    for (e = 0; e < a.length; e++) {\n      if (a[e].value === c) {\n        a[e].selected = !0;\n        d && (a[e].defaultSelected = !0);\n        return;\n      }\n\n      null !== b || a[e].disabled || (b = a[e]);\n    }\n\n    null !== b && (b.selected = !0);\n  }\n}\n\nfunction gb(a, b) {\n  if (null != b.dangerouslySetInnerHTML) throw Error(y(91));\n  return m({}, b, {\n    value: void 0,\n    defaultValue: void 0,\n    children: "" + a._wrapperState.initialValue\n  });\n}\n\nfunction hb(a, b) {\n  var c = b.value;\n\n  if (null == c) {\n    c = b.children;\n    b = b.defaultValue;\n\n    if (null != c) {\n      if (null != b) throw Error(y(92));\n\n      if (Array.isArray(c)) {\n        if (!(1 >= c.length)) throw Error(y(93));\n        c = c[0];\n      }\n\n      b = c;\n    }\n\n    null == b && (b = "");\n    c = b;\n  }\n\n  a._wrapperState = {\n    initialValue: Sa(c)\n  };\n}\n\nfunction ib(a, b) {\n  var c = Sa(b.value),\n      d = Sa(b.defaultValue);\n  null != c && (c = "" + c, c !== a.value && (a.value = c), null == b.defaultValue && a.defaultValue !== c && (a.defaultValue = c));\n  null != d && (a.defaultValue = "" + d);\n}\n\nfunction jb(a) {\n  var b = a.textContent;\n  b === a._wrapperState.initialValue && "" !== b && null !== b && (a.value = b);\n}\n\nvar kb = {\n  html: "http://www.w3.org/1999/xhtml",\n  mathml: "http://www.w3.org/1998/Math/MathML",\n  svg: "http://www.w3.org/2000/svg"\n};\n\nfunction lb(a) {\n  switch (a) {\n    case "svg":\n      return "http://www.w3.org/2000/svg";\n\n    case "math":\n      return "http://www.w3.org/1998/Math/MathML";\n\n    default:\n      return "http://www.w3.org/1999/xhtml";\n  }\n}\n\nfunction mb(a, b) {\n  return null == a || "http://www.w3.org/1999/xhtml" === a ? lb(b) : "http://www.w3.org/2000/svg" === a && "foreignObject" === b ? "http://www.w3.org/1999/xhtml" : a;\n}\n\nvar nb,\n    ob = function (a) {\n  return "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function (b, c, d, e) {\n    MSApp.execUnsafeLocalFunction(function () {\n      return a(b, c, d, e);\n    });\n  } : a;\n}(function (a, b) {\n  if (a.namespaceURI !== kb.svg || "innerHTML" in a) a.innerHTML = b;else {\n    nb = nb || document.createElement("div");\n    nb.innerHTML = "<svg>" + b.valueOf().toString() + "</svg>";\n\n    for (b = nb.firstChild; a.firstChild;) {\n      a.removeChild(a.firstChild);\n    }\n\n    for (; b.firstChild;) {\n      a.appendChild(b.firstChild);\n    }\n  }\n});\n\nfunction pb(a, b) {\n  if (b) {\n    var c = a.firstChild;\n\n    if (c && c === a.lastChild && 3 === c.nodeType) {\n      c.nodeValue = b;\n      return;\n    }\n  }\n\n  a.textContent = b;\n}\n\nvar qb = {\n  animationIterationCount: !0,\n  borderImageOutset: !0,\n  borderImageSlice: !0,\n  borderImageWidth: !0,\n  boxFlex: !0,\n  boxFlexGroup: !0,\n  boxOrdinalGroup: !0,\n  columnCount: !0,\n  columns: !0,\n  flex: !0,\n  flexGrow: !0,\n  flexPositive: !0,\n  flexShrink: !0,\n  flexNegative: !0,\n  flexOrder: !0,\n  gridArea: !0,\n  gridRow: !0,\n  gridRowEnd: !0,\n  gridRowSpan: !0,\n  gridRowStart: !0,\n  gridColumn: !0,\n  gridColumnEnd: !0,\n  gridColumnSpan: !0,\n  gridColumnStart: !0,\n  fontWeight: !0,\n  lineClamp: !0,\n  lineHeight: !0,\n  opacity: !0,\n  order: !0,\n  orphans: !0,\n  tabSize: !0,\n  widows: !0,\n  zIndex: !0,\n  zoom: !0,\n  fillOpacity: !0,\n  floodOpacity: !0,\n  stopOpacity: !0,\n  strokeDasharray: !0,\n  strokeDashoffset: !0,\n  strokeMiterlimit: !0,\n  strokeOpacity: !0,\n  strokeWidth: !0\n},\n    rb = ["Webkit", "ms", "Moz", "O"];\nObject.keys(qb).forEach(function (a) {\n  rb.forEach(function (b) {\n    b = b + a.charAt(0).toUpperCase() + a.substring(1);\n    qb[b] = qb[a];\n  });\n});\n\nfunction sb(a, b, c) {\n  return null == b || "boolean" === typeof b || "" === b ? "" : c || "number" !== typeof b || 0 === b || qb.hasOwnProperty(a) && qb[a] ? ("" + b).trim() : b + "px";\n}\n\nfunction tb(a, b) {\n  a = a.style;\n\n  for (var c in b) {\n    if (b.hasOwnProperty(c)) {\n      var d = 0 === c.indexOf("--"),\n          e = sb(c, b[c], d);\n      "float" === c && (c = "cssFloat");\n      d ? a.setProperty(c, e) : a[c] = e;\n    }\n  }\n}\n\nvar ub = m({\n  menuitem: !0\n}, {\n  area: !0,\n  base: !0,\n  br: !0,\n  col: !0,\n  embed: !0,\n  hr: !0,\n  img: !0,\n  input: !0,\n  keygen: !0,\n  link: !0,\n  meta: !0,\n  param: !0,\n  source: !0,\n  track: !0,\n  wbr: !0\n});\n\nfunction vb(a, b) {\n  if (b) {\n    if (ub[a] && (null != b.children || null != b.dangerouslySetInnerHTML)) throw Error(y(137, a));\n\n    if (null != b.dangerouslySetInnerHTML) {\n      if (null != b.children) throw Error(y(60));\n      if (!("object" === _typeof(b.dangerouslySetInnerHTML) && "__html" in b.dangerouslySetInnerHTML)) throw Error(y(61));\n    }\n\n    if (null != b.style && "object" !== _typeof(b.style)) throw Error(y(62));\n  }\n}\n\nfunction wb(a, b) {\n  if (-1 === a.indexOf("-")) return "string" === typeof b.is;\n\n  switch (a) {\n    case "annotation-xml":\n    case "color-profile":\n    case "font-face":\n    case "font-face-src":\n    case "font-face-uri":\n    case "font-face-format":\n    case "font-face-name":\n    case "missing-glyph":\n      return !1;\n\n    default:\n      return !0;\n  }\n}\n\nfunction xb(a) {\n  a = a.target || a.srcElement || window;\n  a.correspondingUseElement && (a = a.correspondingUseElement);\n  return 3 === a.nodeType ? a.parentNode : a;\n}\n\nvar yb = null,\n    zb = null,\n    Ab = null;\n\nfunction Bb(a) {\n  if (a = Cb(a)) {\n    if ("function" !== typeof yb) throw Error(y(280));\n    var b = a.stateNode;\n    b && (b = Db(b), yb(a.stateNode, a.type, b));\n  }\n}\n\nfunction Eb(a) {\n  zb ? Ab ? Ab.push(a) : Ab = [a] : zb = a;\n}\n\nfunction Fb() {\n  if (zb) {\n    var a = zb,\n        b = Ab;\n    Ab = zb = null;\n    Bb(a);\n    if (b) for (a = 0; a < b.length; a++) {\n      Bb(b[a]);\n    }\n  }\n}\n\nfunction Gb(a, b) {\n  return a(b);\n}\n\nfunction Hb(a, b, c, d, e) {\n  return a(b, c, d, e);\n}\n\nfunction Ib() {}\n\nvar Jb = Gb,\n    Kb = !1,\n    Lb = !1;\n\nfunction Mb() {\n  if (null !== zb || null !== Ab) Ib(), Fb();\n}\n\nfunction Nb(a, b, c) {\n  if (Lb) return a(b, c);\n  Lb = !0;\n\n  try {\n    return Jb(a, b, c);\n  } finally {\n    Lb = !1, Mb();\n  }\n}\n\nfunction Ob(a, b) {\n  var c = a.stateNode;\n  if (null === c) return null;\n  var d = Db(c);\n  if (null === d) return null;\n  c = d[b];\n\n  a: switch (b) {\n    case "onClick":\n    case "onClickCapture":\n    case "onDoubleClick":\n    case "onDoubleClickCapture":\n    case "onMouseDown":\n    case "onMouseDownCapture":\n    case "onMouseMove":\n    case "onMouseMoveCapture":\n    case "onMouseUp":\n    case "onMouseUpCapture":\n    case "onMouseEnter":\n      (d = !d.disabled) || (a = a.type, d = !("button" === a || "input" === a || "select" === a || "textarea" === a));\n      a = !d;\n      break a;\n\n    default:\n      a = !1;\n  }\n\n  if (a) return null;\n  if (c && "function" !== typeof c) throw Error(y(231, b, _typeof(c)));\n  return c;\n}\n\nvar Pb = !1;\nif (fa) try {\n  var Qb = {};\n  Object.defineProperty(Qb, "passive", {\n    get: function get() {\n      Pb = !0;\n    }\n  });\n  window.addEventListener("test", Qb, Qb);\n  window.removeEventListener("test", Qb, Qb);\n} catch (a) {\n  Pb = !1;\n}\n\nfunction Rb(a, b, c, d, e, f, g, h, k) {\n  var l = Array.prototype.slice.call(arguments, 3);\n\n  try {\n    b.apply(c, l);\n  } catch (n) {\n    this.onError(n);\n  }\n}\n\nvar Sb = !1,\n    Tb = null,\n    Ub = !1,\n    Vb = null,\n    Wb = {\n  onError: function onError(a) {\n    Sb = !0;\n    Tb = a;\n  }\n};\n\nfunction Xb(a, b, c, d, e, f, g, h, k) {\n  Sb = !1;\n  Tb = null;\n  Rb.apply(Wb, arguments);\n}\n\nfunction Yb(a, b, c, d, e, f, g, h, k) {\n  Xb.apply(this, arguments);\n\n  if (Sb) {\n    if (Sb) {\n      var l = Tb;\n      Sb = !1;\n      Tb = null;\n    } else throw Error(y(198));\n\n    Ub || (Ub = !0, Vb = l);\n  }\n}\n\nfunction Zb(a) {\n  var b = a,\n      c = a;\n  if (a.alternate) for (; b.return;) {\n    b = b.return;\n  } else {\n    a = b;\n\n    do {\n      b = a, 0 !== (b.flags & 1026) && (c = b.return), a = b.return;\n    } while (a);\n  }\n  return 3 === b.tag ? c : null;\n}\n\nfunction $b(a) {\n  if (13 === a.tag) {\n    var b = a.memoizedState;\n    null === b && (a = a.alternate, null !== a && (b = a.memoizedState));\n    if (null !== b) return b.dehydrated;\n  }\n\n  return null;\n}\n\nfunction ac(a) {\n  if (Zb(a) !== a) throw Error(y(188));\n}\n\nfunction bc(a) {\n  var b = a.alternate;\n\n  if (!b) {\n    b = Zb(a);\n    if (null === b) throw Error(y(188));\n    return b !== a ? null : a;\n  }\n\n  for (var c = a, d = b;;) {\n    var e = c.return;\n    if (null === e) break;\n    var f = e.alternate;\n\n    if (null === f) {\n      d = e.return;\n\n      if (null !== d) {\n        c = d;\n        continue;\n      }\n\n      break;\n    }\n\n    if (e.child === f.child) {\n      for (f = e.child; f;) {\n        if (f === c) return ac(e), a;\n        if (f === d) return ac(e), b;\n        f = f.sibling;\n      }\n\n      throw Error(y(188));\n    }\n\n    if (c.return !== d.return) c = e, d = f;else {\n      for (var g = !1, h = e.child; h;) {\n        if (h === c) {\n          g = !0;\n          c = e;\n          d = f;\n          break;\n        }\n\n        if (h === d) {\n          g = !0;\n          d = e;\n          c = f;\n          break;\n        }\n\n        h = h.sibling;\n      }\n\n      if (!g) {\n        for (h = f.child; h;) {\n          if (h === c) {\n            g = !0;\n            c = f;\n            d = e;\n            break;\n          }\n\n          if (h === d) {\n            g = !0;\n            d = f;\n            c = e;\n            break;\n          }\n\n          h = h.sibling;\n        }\n\n        if (!g) throw Error(y(189));\n      }\n    }\n    if (c.alternate !== d) throw Error(y(190));\n  }\n\n  if (3 !== c.tag) throw Error(y(188));\n  return c.stateNode.current === c ? a : b;\n}\n\nfunction cc(a) {\n  a = bc(a);\n  if (!a) return null;\n\n  for (var b = a;;) {\n    if (5 === b.tag || 6 === b.tag) return b;\n    if (b.child) b.child.return = b, b = b.child;else {\n      if (b === a) break;\n\n      for (; !b.sibling;) {\n        if (!b.return || b.return === a) return null;\n        b = b.return;\n      }\n\n      b.sibling.return = b.return;\n      b = b.sibling;\n    }\n  }\n\n  return null;\n}\n\nfunction dc(a, b) {\n  for (var c = a.alternate; null !== b;) {\n    if (b === a || b === c) return !0;\n    b = b.return;\n  }\n\n  return !1;\n}\n\nvar ec,\n    fc,\n    gc,\n    hc,\n    ic = !1,\n    jc = [],\n    kc = null,\n    lc = null,\n    mc = null,\n    nc = new Map(),\n    oc = new Map(),\n    pc = [],\n    qc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");\n\nfunction rc(a, b, c, d, e) {\n  return {\n    blockedOn: a,\n    domEventName: b,\n    eventSystemFlags: c | 16,\n    nativeEvent: e,\n    targetContainers: [d]\n  };\n}\n\nfunction sc(a, b) {\n  switch (a) {\n    case "focusin":\n    case "focusout":\n      kc = null;\n      break;\n\n    case "dragenter":\n    case "dragleave":\n      lc = null;\n      break;\n\n    case "mouseover":\n    case "mouseout":\n      mc = null;\n      break;\n\n    case "pointerover":\n    case "pointerout":\n      nc.delete(b.pointerId);\n      break;\n\n    case "gotpointercapture":\n    case "lostpointercapture":\n      oc.delete(b.pointerId);\n  }\n}\n\nfunction tc(a, b, c, d, e, f) {\n  if (null === a || a.nativeEvent !== f) return a = rc(b, c, d, e, f), null !== b && (b = Cb(b), null !== b && fc(b)), a;\n  a.eventSystemFlags |= d;\n  b = a.targetContainers;\n  null !== e && -1 === b.indexOf(e) && b.push(e);\n  return a;\n}\n\nfunction uc(a, b, c, d, e) {\n  switch (b) {\n    case "focusin":\n      return kc = tc(kc, a, b, c, d, e), !0;\n\n    case "dragenter":\n      return lc = tc(lc, a, b, c, d, e), !0;\n\n    case "mouseover":\n      return mc = tc(mc, a, b, c, d, e), !0;\n\n    case "pointerover":\n      var f = e.pointerId;\n      nc.set(f, tc(nc.get(f) || null, a, b, c, d, e));\n      return !0;\n\n    case "gotpointercapture":\n      return f = e.pointerId, oc.set(f, tc(oc.get(f) || null, a, b, c, d, e)), !0;\n  }\n\n  return !1;\n}\n\nfunction vc(a) {\n  var b = wc(a.target);\n\n  if (null !== b) {\n    var c = Zb(b);\n    if (null !== c) if (b = c.tag, 13 === b) {\n      if (b = $b(c), null !== b) {\n        a.blockedOn = b;\n        hc(a.lanePriority, function () {\n          r.unstable_runWithPriority(a.priority, function () {\n            gc(c);\n          });\n        });\n        return;\n      }\n    } else if (3 === b && c.stateNode.hydrate) {\n      a.blockedOn = 3 === c.tag ? c.stateNode.containerInfo : null;\n      return;\n    }\n  }\n\n  a.blockedOn = null;\n}\n\nfunction xc(a) {\n  if (null !== a.blockedOn) return !1;\n\n  for (var b = a.targetContainers; 0 < b.length;) {\n    var c = yc(a.domEventName, a.eventSystemFlags, b[0], a.nativeEvent);\n    if (null !== c) return b = Cb(c), null !== b && fc(b), a.blockedOn = c, !1;\n    b.shift();\n  }\n\n  return !0;\n}\n\nfunction zc(a, b, c) {\n  xc(a) && c.delete(b);\n}\n\nfunction Ac() {\n  for (ic = !1; 0 < jc.length;) {\n    var a = jc[0];\n\n    if (null !== a.blockedOn) {\n      a = Cb(a.blockedOn);\n      null !== a && ec(a);\n      break;\n    }\n\n    for (var b = a.targetContainers; 0 < b.length;) {\n      var c = yc(a.domEventName, a.eventSystemFlags, b[0], a.nativeEvent);\n\n      if (null !== c) {\n        a.blockedOn = c;\n        break;\n      }\n\n      b.shift();\n    }\n\n    null === a.blockedOn && jc.shift();\n  }\n\n  null !== kc && xc(kc) && (kc = null);\n  null !== lc && xc(lc) && (lc = null);\n  null !== mc && xc(mc) && (mc = null);\n  nc.forEach(zc);\n  oc.forEach(zc);\n}\n\nfunction Bc(a, b) {\n  a.blockedOn === b && (a.blockedOn = null, ic || (ic = !0, r.unstable_scheduleCallback(r.unstable_NormalPriority, Ac)));\n}\n\nfunction Cc(a) {\n  function b(b) {\n    return Bc(b, a);\n  }\n\n  if (0 < jc.length) {\n    Bc(jc[0], a);\n\n    for (var c = 1; c < jc.length; c++) {\n      var d = jc[c];\n      d.blockedOn === a && (d.blockedOn = null);\n    }\n  }\n\n  null !== kc && Bc(kc, a);\n  null !== lc && Bc(lc, a);\n  null !== mc && Bc(mc, a);\n  nc.forEach(b);\n  oc.forEach(b);\n\n  for (c = 0; c < pc.length; c++) {\n    d = pc[c], d.blockedOn === a && (d.blockedOn = null);\n  }\n\n  for (; 0 < pc.length && (c = pc[0], null === c.blockedOn);) {\n    vc(c), null === c.blockedOn && pc.shift();\n  }\n}\n\nfunction Dc(a, b) {\n  var c = {};\n  c[a.toLowerCase()] = b.toLowerCase();\n  c["Webkit" + a] = "webkit" + b;\n  c["Moz" + a] = "moz" + b;\n  return c;\n}\n\nvar Ec = {\n  animationend: Dc("Animation", "AnimationEnd"),\n  animationiteration: Dc("Animation", "AnimationIteration"),\n  animationstart: Dc("Animation", "AnimationStart"),\n  transitionend: Dc("Transition", "TransitionEnd")\n},\n    Fc = {},\n    Gc = {};\nfa && (Gc = document.createElement("div").style, "AnimationEvent" in window || (delete Ec.animationend.animation, delete Ec.animationiteration.animation, delete Ec.animationstart.animation), "TransitionEvent" in window || delete Ec.transitionend.transition);\n\nfunction Hc(a) {\n  if (Fc[a]) return Fc[a];\n  if (!Ec[a]) return a;\n  var b = Ec[a],\n      c;\n\n  for (c in b) {\n    if (b.hasOwnProperty(c) && c in Gc) return Fc[a] = b[c];\n  }\n\n  return a;\n}\n\nvar Ic = Hc("animationend"),\n    Jc = Hc("animationiteration"),\n    Kc = Hc("animationstart"),\n    Lc = Hc("transitionend"),\n    Mc = new Map(),\n    Nc = new Map(),\n    Oc = ["abort", "abort", Ic, "animationEnd", Jc, "animationIteration", Kc, "animationStart", "canplay", "canPlay", "canplaythrough", "canPlayThrough", "durationchange", "durationChange", "emptied", "emptied", "encrypted", "encrypted", "ended", "ended", "error", "error", "gotpointercapture", "gotPointerCapture", "load", "load", "loadeddata", "loadedData", "loadedmetadata", "loadedMetadata", "loadstart", "loadStart", "lostpointercapture", "lostPointerCapture", "playing", "playing", "progress", "progress", "seeking", "seeking", "stalled", "stalled", "suspend", "suspend", "timeupdate", "timeUpdate", Lc, "transitionEnd", "waiting", "waiting"];\n\nfunction Pc(a, b) {\n  for (var c = 0; c < a.length; c += 2) {\n    var d = a[c],\n        e = a[c + 1];\n    e = "on" + (e[0].toUpperCase() + e.slice(1));\n    Nc.set(d, b);\n    Mc.set(d, e);\n    da(e, [d]);\n  }\n}\n\nvar Qc = r.unstable_now;\nQc();\nvar F = 8;\n\nfunction Rc(a) {\n  if (0 !== (1 & a)) return F = 15, 1;\n  if (0 !== (2 & a)) return F = 14, 2;\n  if (0 !== (4 & a)) return F = 13, 4;\n  var b = 24 & a;\n  if (0 !== b) return F = 12, b;\n  if (0 !== (a & 32)) return F = 11, 32;\n  b = 192 & a;\n  if (0 !== b) return F = 10, b;\n  if (0 !== (a & 256)) return F = 9, 256;\n  b = 3584 & a;\n  if (0 !== b) return F = 8, b;\n  if (0 !== (a & 4096)) return F = 7, 4096;\n  b = 4186112 & a;\n  if (0 !== b) return F = 6, b;\n  b = 62914560 & a;\n  if (0 !== b) return F = 5, b;\n  if (a & 67108864) return F = 4, 67108864;\n  if (0 !== (a & 134217728)) return F = 3, 134217728;\n  b = 805306368 & a;\n  if (0 !== b) return F = 2, b;\n  if (0 !== (1073741824 & a)) return F = 1, 1073741824;\n  F = 8;\n  return a;\n}\n\nfunction Sc(a) {\n  switch (a) {\n    case 99:\n      return 15;\n\n    case 98:\n      return 10;\n\n    case 97:\n    case 96:\n      return 8;\n\n    case 95:\n      return 2;\n\n    default:\n      return 0;\n  }\n}\n\nfunction Tc(a) {\n  switch (a) {\n    case 15:\n    case 14:\n      return 99;\n\n    case 13:\n    case 12:\n    case 11:\n    case 10:\n      return 98;\n\n    case 9:\n    case 8:\n    case 7:\n    case 6:\n    case 4:\n    case 5:\n      return 97;\n\n    case 3:\n    case 2:\n    case 1:\n      return 95;\n\n    case 0:\n      return 90;\n\n    default:\n      throw Error(y(358, a));\n  }\n}\n\nfunction Uc(a, b) {\n  var c = a.pendingLanes;\n  if (0 === c) return F = 0;\n  var d = 0,\n      e = 0,\n      f = a.expiredLanes,\n      g = a.suspendedLanes,\n      h = a.pingedLanes;\n  if (0 !== f) d = f, e = F = 15;else if (f = c & 134217727, 0 !== f) {\n    var k = f & ~g;\n    0 !== k ? (d = Rc(k), e = F) : (h &= f, 0 !== h && (d = Rc(h), e = F));\n  } else f = c & ~g, 0 !== f ? (d = Rc(f), e = F) : 0 !== h && (d = Rc(h), e = F);\n  if (0 === d) return 0;\n  d = 31 - Vc(d);\n  d = c & ((0 > d ? 0 : 1 << d) << 1) - 1;\n\n  if (0 !== b && b !== d && 0 === (b & g)) {\n    Rc(b);\n    if (e <= F) return b;\n    F = e;\n  }\n\n  b = a.entangledLanes;\n  if (0 !== b) for (a = a.entanglements, b &= d; 0 < b;) {\n    c = 31 - Vc(b), e = 1 << c, d |= a[c], b &= ~e;\n  }\n  return d;\n}\n\nfunction Wc(a) {\n  a = a.pendingLanes & -1073741825;\n  return 0 !== a ? a : a & 1073741824 ? 1073741824 : 0;\n}\n\nfunction Xc(a, b) {\n  switch (a) {\n    case 15:\n      return 1;\n\n    case 14:\n      return 2;\n\n    case 12:\n      return a = Yc(24 & ~b), 0 === a ? Xc(10, b) : a;\n\n    case 10:\n      return a = Yc(192 & ~b), 0 === a ? Xc(8, b) : a;\n\n    case 8:\n      return a = Yc(3584 & ~b), 0 === a && (a = Yc(4186112 & ~b), 0 === a && (a = 512)), a;\n\n    case 2:\n      return b = Yc(805306368 & ~b), 0 === b && (b = 268435456), b;\n  }\n\n  throw Error(y(358, a));\n}\n\nfunction Yc(a) {\n  return a & -a;\n}\n\nfunction Zc(a) {\n  for (var b = [], c = 0; 31 > c; c++) {\n    b.push(a);\n  }\n\n  return b;\n}\n\nfunction $c(a, b, c) {\n  a.pendingLanes |= b;\n  var d = b - 1;\n  a.suspendedLanes &= d;\n  a.pingedLanes &= d;\n  a = a.eventTimes;\n  b = 31 - Vc(b);\n  a[b] = c;\n}\n\nvar Vc = Math.clz32 ? Math.clz32 : ad,\n    bd = Math.log,\n    cd = Math.LN2;\n\nfunction ad(a) {\n  return 0 === a ? 32 : 31 - (bd(a) / cd | 0) | 0;\n}\n\nvar dd = r.unstable_UserBlockingPriority,\n    ed = r.unstable_runWithPriority,\n    fd = !0;\n\nfunction gd(a, b, c, d) {\n  Kb || Ib();\n  var e = hd,\n      f = Kb;\n  Kb = !0;\n\n  try {\n    Hb(e, a, b, c, d);\n  } finally {\n    (Kb = f) || Mb();\n  }\n}\n\nfunction id(a, b, c, d) {\n  ed(dd, hd.bind(null, a, b, c, d));\n}\n\nfunction hd(a, b, c, d) {\n  if (fd) {\n    var e;\n    if ((e = 0 === (b & 4)) && 0 < jc.length && -1 < qc.indexOf(a)) a = rc(null, a, b, c, d), jc.push(a);else {\n      var f = yc(a, b, c, d);\n      if (null === f) e && sc(a, d);else {\n        if (e) {\n          if (-1 < qc.indexOf(a)) {\n            a = rc(f, a, b, c, d);\n            jc.push(a);\n            return;\n          }\n\n          if (uc(f, a, b, c, d)) return;\n          sc(a, d);\n        }\n\n        jd(a, b, d, null, c);\n      }\n    }\n  }\n}\n\nfunction yc(a, b, c, d) {\n  var e = xb(d);\n  e = wc(e);\n\n  if (null !== e) {\n    var f = Zb(e);\n    if (null === f) e = null;else {\n      var g = f.tag;\n\n      if (13 === g) {\n        e = $b(f);\n        if (null !== e) return e;\n        e = null;\n      } else if (3 === g) {\n        if (f.stateNode.hydrate) return 3 === f.tag ? f.stateNode.containerInfo : null;\n        e = null;\n      } else f !== e && (e = null);\n    }\n  }\n\n  jd(a, b, d, e, c);\n  return null;\n}\n\nvar kd = null,\n    ld = null,\n    md = null;\n\nfunction nd() {\n  if (md) return md;\n  var a,\n      b = ld,\n      c = b.length,\n      d,\n      e = "value" in kd ? kd.value : kd.textContent,\n      f = e.length;\n\n  for (a = 0; a < c && b[a] === e[a]; a++) {\n    ;\n  }\n\n  var g = c - a;\n\n  for (d = 1; d <= g && b[c - d] === e[f - d]; d++) {\n    ;\n  }\n\n  return md = e.slice(a, 1 < d ? 1 - d : void 0);\n}\n\nfunction od(a) {\n  var b = a.keyCode;\n  "charCode" in a ? (a = a.charCode, 0 === a && 13 === b && (a = 13)) : a = b;\n  10 === a && (a = 13);\n  return 32 <= a || 13 === a ? a : 0;\n}\n\nfunction pd() {\n  return !0;\n}\n\nfunction qd() {\n  return !1;\n}\n\nfunction rd(a) {\n  function b(b, d, e, f, g) {\n    this._reactName = b;\n    this._targetInst = e;\n    this.type = d;\n    this.nativeEvent = f;\n    this.target = g;\n    this.currentTarget = null;\n\n    for (var c in a) {\n      a.hasOwnProperty(c) && (b = a[c], this[c] = b ? b(f) : f[c]);\n    }\n\n    this.isDefaultPrevented = (null != f.defaultPrevented ? f.defaultPrevented : !1 === f.returnValue) ? pd : qd;\n    this.isPropagationStopped = qd;\n    return this;\n  }\n\n  m(b.prototype, {\n    preventDefault: function preventDefault() {\n      this.defaultPrevented = !0;\n      var a = this.nativeEvent;\n      a && (a.preventDefault ? a.preventDefault() : "unknown" !== typeof a.returnValue && (a.returnValue = !1), this.isDefaultPrevented = pd);\n    },\n    stopPropagation: function stopPropagation() {\n      var a = this.nativeEvent;\n      a && (a.stopPropagation ? a.stopPropagation() : "unknown" !== typeof a.cancelBubble && (a.cancelBubble = !0), this.isPropagationStopped = pd);\n    },\n    persist: function persist() {},\n    isPersistent: pd\n  });\n  return b;\n}\n\nvar sd = {\n  eventPhase: 0,\n  bubbles: 0,\n  cancelable: 0,\n  timeStamp: function timeStamp(a) {\n    return a.timeStamp || Date.now();\n  },\n  defaultPrevented: 0,\n  isTrusted: 0\n},\n    td = rd(sd),\n    ud = m({}, sd, {\n  view: 0,\n  detail: 0\n}),\n    vd = rd(ud),\n    wd,\n    xd,\n    yd,\n    Ad = m({}, ud, {\n  screenX: 0,\n  screenY: 0,\n  clientX: 0,\n  clientY: 0,\n  pageX: 0,\n  pageY: 0,\n  ctrlKey: 0,\n  shiftKey: 0,\n  altKey: 0,\n  metaKey: 0,\n  getModifierState: zd,\n  button: 0,\n  buttons: 0,\n  relatedTarget: function relatedTarget(a) {\n    return void 0 === a.relatedTarget ? a.fromElement === a.srcElement ? a.toElement : a.fromElement : a.relatedTarget;\n  },\n  movementX: function movementX(a) {\n    if ("movementX" in a) return a.movementX;\n    a !== yd && (yd && "mousemove" === a.type ? (wd = a.screenX - yd.screenX, xd = a.screenY - yd.screenY) : xd = wd = 0, yd = a);\n    return wd;\n  },\n  movementY: function movementY(a) {\n    return "movementY" in a ? a.movementY : xd;\n  }\n}),\n    Bd = rd(Ad),\n    Cd = m({}, Ad, {\n  dataTransfer: 0\n}),\n    Dd = rd(Cd),\n    Ed = m({}, ud, {\n  relatedTarget: 0\n}),\n    Fd = rd(Ed),\n    Gd = m({}, sd, {\n  animationName: 0,\n  elapsedTime: 0,\n  pseudoElement: 0\n}),\n    Hd = rd(Gd),\n    Id = m({}, sd, {\n  clipboardData: function clipboardData(a) {\n    return "clipboardData" in a ? a.clipboardData : window.clipboardData;\n  }\n}),\n    Jd = rd(Id),\n    Kd = m({}, sd, {\n  data: 0\n}),\n    Ld = rd(Kd),\n    Md = {\n  Esc: "Escape",\n  Spacebar: " ",\n  Left: "ArrowLeft",\n  Up: "ArrowUp",\n  Right: "ArrowRight",\n  Down: "ArrowDown",\n  Del: "Delete",\n  Win: "OS",\n  Menu: "ContextMenu",\n  Apps: "ContextMenu",\n  Scroll: "ScrollLock",\n  MozPrintableKey: "Unidentified"\n},\n    Nd = {\n  8: "Backspace",\n  9: "Tab",\n  12: "Clear",\n  13: "Enter",\n  16: "Shift",\n  17: "Control",\n  18: "Alt",\n  19: "Pause",\n  20: "CapsLock",\n  27: "Escape",\n  32: " ",\n  33: "PageUp",\n  34: "PageDown",\n  35: "End",\n  36: "Home",\n  37: "ArrowLeft",\n  38: "ArrowUp",\n  39: "ArrowRight",\n  40: "ArrowDown",\n  45: "Insert",\n  46: "Delete",\n  112: "F1",\n  113: "F2",\n  114: "F3",\n  115: "F4",\n  116: "F5",\n  117: "F6",\n  118: "F7",\n  119: "F8",\n  120: "F9",\n  121: "F10",\n  122: "F11",\n  123: "F12",\n  144: "NumLock",\n  145: "ScrollLock",\n  224: "Meta"\n},\n    Od = {\n  Alt: "altKey",\n  Control: "ctrlKey",\n  Meta: "metaKey",\n  Shift: "shiftKey"\n};\n\nfunction Pd(a) {\n  var b = this.nativeEvent;\n  return b.getModifierState ? b.getModifierState(a) : (a = Od[a]) ? !!b[a] : !1;\n}\n\nfunction zd() {\n  return Pd;\n}\n\nvar Qd = m({}, ud, {\n  key: function key(a) {\n    if (a.key) {\n      var b = Md[a.key] || a.key;\n      if ("Unidentified" !== b) return b;\n    }\n\n    return "keypress" === a.type ? (a = od(a), 13 === a ? "Enter" : String.fromCharCode(a)) : "keydown" === a.type || "keyup" === a.type ? Nd[a.keyCode] || "Unidentified" : "";\n  },\n  code: 0,\n  location: 0,\n  ctrlKey: 0,\n  shiftKey: 0,\n  altKey: 0,\n  metaKey: 0,\n  repeat: 0,\n  locale: 0,\n  getModifierState: zd,\n  charCode: function charCode(a) {\n    return "keypress" === a.type ? od(a) : 0;\n  },\n  keyCode: function keyCode(a) {\n    return "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;\n  },\n  which: function which(a) {\n    return "keypress" === a.type ? od(a) : "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;\n  }\n}),\n    Rd = rd(Qd),\n    Sd = m({}, Ad, {\n  pointerId: 0,\n  width: 0,\n  height: 0,\n  pressure: 0,\n  tangentialPressure: 0,\n  tiltX: 0,\n  tiltY: 0,\n  twist: 0,\n  pointerType: 0,\n  isPrimary: 0\n}),\n    Td = rd(Sd),\n    Ud = m({}, ud, {\n  touches: 0,\n  targetTouches: 0,\n  changedTouches: 0,\n  altKey: 0,\n  metaKey: 0,\n  ctrlKey: 0,\n  shiftKey: 0,\n  getModifierState: zd\n}),\n    Vd = rd(Ud),\n    Wd = m({}, sd, {\n  propertyName: 0,\n  elapsedTime: 0,\n  pseudoElement: 0\n}),\n    Xd = rd(Wd),\n    Yd = m({}, Ad, {\n  deltaX: function deltaX(a) {\n    return "deltaX" in a ? a.deltaX : "wheelDeltaX" in a ? -a.wheelDeltaX : 0;\n  },\n  deltaY: function deltaY(a) {\n    return "deltaY" in a ? a.deltaY : "wheelDeltaY" in a ? -a.wheelDeltaY : "wheelDelta" in a ? -a.wheelDelta : 0;\n  },\n  deltaZ: 0,\n  deltaMode: 0\n}),\n    Zd = rd(Yd),\n    $d = [9, 13, 27, 32],\n    ae = fa && "CompositionEvent" in window,\n    be = null;\nfa && "documentMode" in document && (be = document.documentMode);\nvar ce = fa && "TextEvent" in window && !be,\n    de = fa && (!ae || be && 8 < be && 11 >= be),\n    ee = String.fromCharCode(32),\n    fe = !1;\n\nfunction ge(a, b) {\n  switch (a) {\n    case "keyup":\n      return -1 !== $d.indexOf(b.keyCode);\n\n    case "keydown":\n      return 229 !== b.keyCode;\n\n    case "keypress":\n    case "mousedown":\n    case "focusout":\n      return !0;\n\n    default:\n      return !1;\n  }\n}\n\nfunction he(a) {\n  a = a.detail;\n  return "object" === _typeof(a) && "data" in a ? a.data : null;\n}\n\nvar ie = !1;\n\nfunction je(a, b) {\n  switch (a) {\n    case "compositionend":\n      return he(b);\n\n    case "keypress":\n      if (32 !== b.which) return null;\n      fe = !0;\n      return ee;\n\n    case "textInput":\n      return a = b.data, a === ee && fe ? null : a;\n\n    default:\n      return null;\n  }\n}\n\nfunction ke(a, b) {\n  if (ie) return "compositionend" === a || !ae && ge(a, b) ? (a = nd(), md = ld = kd = null, ie = !1, a) : null;\n\n  switch (a) {\n    case "paste":\n      return null;\n\n    case "keypress":\n      if (!(b.ctrlKey || b.altKey || b.metaKey) || b.ctrlKey && b.altKey) {\n        if (b.char && 1 < b.char.length) return b.char;\n        if (b.which) return String.fromCharCode(b.which);\n      }\n\n      return null;\n\n    case "compositionend":\n      return de && "ko" !== b.locale ? null : b.data;\n\n    default:\n      return null;\n  }\n}\n\nvar le = {\n  color: !0,\n  date: !0,\n  datetime: !0,\n  "datetime-local": !0,\n  email: !0,\n  month: !0,\n  number: !0,\n  password: !0,\n  range: !0,\n  search: !0,\n  tel: !0,\n  text: !0,\n  time: !0,\n  url: !0,\n  week: !0\n};\n\nfunction me(a) {\n  var b = a && a.nodeName && a.nodeName.toLowerCase();\n  return "input" === b ? !!le[a.type] : "textarea" === b ? !0 : !1;\n}\n\nfunction ne(a, b, c, d) {\n  Eb(d);\n  b = oe(b, "onChange");\n  0 < b.length && (c = new td("onChange", "change", null, c, d), a.push({\n    event: c,\n    listeners: b\n  }));\n}\n\nvar pe = null,\n    qe = null;\n\nfunction re(a) {\n  se(a, 0);\n}\n\nfunction te(a) {\n  var b = ue(a);\n  if (Wa(b)) return a;\n}\n\nfunction ve(a, b) {\n  if ("change" === a) return b;\n}\n\nvar we = !1;\n\nif (fa) {\n  var xe;\n\n  if (fa) {\n    var ye = ("oninput" in document);\n\n    if (!ye) {\n      var ze = document.createElement("div");\n      ze.setAttribute("oninput", "return;");\n      ye = "function" === typeof ze.oninput;\n    }\n\n    xe = ye;\n  } else xe = !1;\n\n  we = xe && (!document.documentMode || 9 < document.documentMode);\n}\n\nfunction Ae() {\n  pe && (pe.detachEvent("onpropertychange", Be), qe = pe = null);\n}\n\nfunction Be(a) {\n  if ("value" === a.propertyName && te(qe)) {\n    var b = [];\n    ne(b, qe, a, xb(a));\n    a = re;\n    if (Kb) a(b);else {\n      Kb = !0;\n\n      try {\n        Gb(a, b);\n      } finally {\n        Kb = !1, Mb();\n      }\n    }\n  }\n}\n\nfunction Ce(a, b, c) {\n  "focusin" === a ? (Ae(), pe = b, qe = c, pe.attachEvent("onpropertychange", Be)) : "focusout" === a && Ae();\n}\n\nfunction De(a) {\n  if ("selectionchange" === a || "keyup" === a || "keydown" === a) return te(qe);\n}\n\nfunction Ee(a, b) {\n  if ("click" === a) return te(b);\n}\n\nfunction Fe(a, b) {\n  if ("input" === a || "change" === a) return te(b);\n}\n\nfunction Ge(a, b) {\n  return a === b && (0 !== a || 1 / a === 1 / b) || a !== a && b !== b;\n}\n\nvar He = "function" === typeof Object.is ? Object.is : Ge,\n    Ie = Object.prototype.hasOwnProperty;\n\nfunction Je(a, b) {\n  if (He(a, b)) return !0;\n  if ("object" !== _typeof(a) || null === a || "object" !== _typeof(b) || null === b) return !1;\n  var c = Object.keys(a),\n      d = Object.keys(b);\n  if (c.length !== d.length) return !1;\n\n  for (d = 0; d < c.length; d++) {\n    if (!Ie.call(b, c[d]) || !He(a[c[d]], b[c[d]])) return !1;\n  }\n\n  return !0;\n}\n\nfunction Ke(a) {\n  for (; a && a.firstChild;) {\n    a = a.firstChild;\n  }\n\n  return a;\n}\n\nfunction Le(a, b) {\n  var c = Ke(a);\n  a = 0;\n\n  for (var d; c;) {\n    if (3 === c.nodeType) {\n      d = a + c.textContent.length;\n      if (a <= b && d >= b) return {\n        node: c,\n        offset: b - a\n      };\n      a = d;\n    }\n\n    a: {\n      for (; c;) {\n        if (c.nextSibling) {\n          c = c.nextSibling;\n          break a;\n        }\n\n        c = c.parentNode;\n      }\n\n      c = void 0;\n    }\n\n    c = Ke(c);\n  }\n}\n\nfunction Me(a, b) {\n  return a && b ? a === b ? !0 : a && 3 === a.nodeType ? !1 : b && 3 === b.nodeType ? Me(a, b.parentNode) : "contains" in a ? a.contains(b) : a.compareDocumentPosition ? !!(a.compareDocumentPosition(b) & 16) : !1 : !1;\n}\n\nfunction Ne() {\n  for (var a = window, b = Xa(); b instanceof a.HTMLIFrameElement;) {\n    try {\n      var c = "string" === typeof b.contentWindow.location.href;\n    } catch (d) {\n      c = !1;\n    }\n\n    if (c) a = b.contentWindow;else break;\n    b = Xa(a.document);\n  }\n\n  return b;\n}\n\nfunction Oe(a) {\n  var b = a && a.nodeName && a.nodeName.toLowerCase();\n  return b && ("input" === b && ("text" === a.type || "search" === a.type || "tel" === a.type || "url" === a.type || "password" === a.type) || "textarea" === b || "true" === a.contentEditable);\n}\n\nvar Pe = fa && "documentMode" in document && 11 >= document.documentMode,\n    Qe = null,\n    Re = null,\n    Se = null,\n    Te = !1;\n\nfunction Ue(a, b, c) {\n  var d = c.window === c ? c.document : 9 === c.nodeType ? c : c.ownerDocument;\n  Te || null == Qe || Qe !== Xa(d) || (d = Qe, "selectionStart" in d && Oe(d) ? d = {\n    start: d.selectionStart,\n    end: d.selectionEnd\n  } : (d = (d.ownerDocument && d.ownerDocument.defaultView || window).getSelection(), d = {\n    anchorNode: d.anchorNode,\n    anchorOffset: d.anchorOffset,\n    focusNode: d.focusNode,\n    focusOffset: d.focusOffset\n  }), Se && Je(Se, d) || (Se = d, d = oe(Re, "onSelect"), 0 < d.length && (b = new td("onSelect", "select", null, b, c), a.push({\n    event: b,\n    listeners: d\n  }), b.target = Qe)));\n}\n\nPc("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "), 0);\nPc("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "), 1);\nPc(Oc, 2);\n\nfor (var Ve = "change selectionchange textInput compositionstart compositionend compositionupdate".split(" "), We = 0; We < Ve.length; We++) {\n  Nc.set(Ve[We], 0);\n}\n\nea("onMouseEnter", ["mouseout", "mouseover"]);\nea("onMouseLeave", ["mouseout", "mouseover"]);\nea("onPointerEnter", ["pointerout", "pointerover"]);\nea("onPointerLeave", ["pointerout", "pointerover"]);\nda("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));\nda("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));\nda("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);\nda("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));\nda("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));\nda("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));\nvar Xe = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),\n    Ye = new Set("cancel close invalid load scroll toggle".split(" ").concat(Xe));\n\nfunction Ze(a, b, c) {\n  var d = a.type || "unknown-event";\n  a.currentTarget = c;\n  Yb(d, b, void 0, a);\n  a.currentTarget = null;\n}\n\nfunction se(a, b) {\n  b = 0 !== (b & 4);\n\n  for (var c = 0; c < a.length; c++) {\n    var d = a[c],\n        e = d.event;\n    d = d.listeners;\n\n    a: {\n      var f = void 0;\n      if (b) for (var g = d.length - 1; 0 <= g; g--) {\n        var h = d[g],\n            k = h.instance,\n            l = h.currentTarget;\n        h = h.listener;\n        if (k !== f && e.isPropagationStopped()) break a;\n        Ze(e, h, l);\n        f = k;\n      } else for (g = 0; g < d.length; g++) {\n        h = d[g];\n        k = h.instance;\n        l = h.currentTarget;\n        h = h.listener;\n        if (k !== f && e.isPropagationStopped()) break a;\n        Ze(e, h, l);\n        f = k;\n      }\n    }\n  }\n\n  if (Ub) throw a = Vb, Ub = !1, Vb = null, a;\n}\n\nfunction G(a, b) {\n  var c = $e(b),\n      d = a + "__bubble";\n  c.has(d) || (af(b, a, 2, !1), c.add(d));\n}\n\nvar bf = "_reactListening" + Math.random().toString(36).slice(2);\n\nfunction cf(a) {\n  a[bf] || (a[bf] = !0, ba.forEach(function (b) {\n    Ye.has(b) || df(b, !1, a, null);\n    df(b, !0, a, null);\n  }));\n}\n\nfunction df(a, b, c, d) {\n  var e = 4 < arguments.length && void 0 !== arguments[4] ? arguments[4] : 0,\n      f = c;\n  "selectionchange" === a && 9 !== c.nodeType && (f = c.ownerDocument);\n\n  if (null !== d && !b && Ye.has(a)) {\n    if ("scroll" !== a) return;\n    e |= 2;\n    f = d;\n  }\n\n  var g = $e(f),\n      h = a + "__" + (b ? "capture" : "bubble");\n  g.has(h) || (b && (e |= 4), af(f, a, e, b), g.add(h));\n}\n\nfunction af(a, b, c, d) {\n  var e = Nc.get(b);\n\n  switch (void 0 === e ? 2 : e) {\n    case 0:\n      e = gd;\n      break;\n\n    case 1:\n      e = id;\n      break;\n\n    default:\n      e = hd;\n  }\n\n  c = e.bind(null, b, c, a);\n  e = void 0;\n  !Pb || "touchstart" !== b && "touchmove" !== b && "wheel" !== b || (e = !0);\n  d ? void 0 !== e ? a.addEventListener(b, c, {\n    capture: !0,\n    passive: e\n  }) : a.addEventListener(b, c, !0) : void 0 !== e ? a.addEventListener(b, c, {\n    passive: e\n  }) : a.addEventListener(b, c, !1);\n}\n\nfunction jd(a, b, c, d, e) {\n  var f = d;\n  if (0 === (b & 1) && 0 === (b & 2) && null !== d) a: for (;;) {\n    if (null === d) return;\n    var g = d.tag;\n\n    if (3 === g || 4 === g) {\n      var h = d.stateNode.containerInfo;\n      if (h === e || 8 === h.nodeType && h.parentNode === e) break;\n      if (4 === g) for (g = d.return; null !== g;) {\n        var k = g.tag;\n        if (3 === k || 4 === k) if (k = g.stateNode.containerInfo, k === e || 8 === k.nodeType && k.parentNode === e) return;\n        g = g.return;\n      }\n\n      for (; null !== h;) {\n        g = wc(h);\n        if (null === g) return;\n        k = g.tag;\n\n        if (5 === k || 6 === k) {\n          d = f = g;\n          continue a;\n        }\n\n        h = h.parentNode;\n      }\n    }\n\n    d = d.return;\n  }\n  Nb(function () {\n    var d = f,\n        e = xb(c),\n        g = [];\n\n    a: {\n      var h = Mc.get(a);\n\n      if (void 0 !== h) {\n        var k = td,\n            x = a;\n\n        switch (a) {\n          case "keypress":\n            if (0 === od(c)) break a;\n\n          case "keydown":\n          case "keyup":\n            k = Rd;\n            break;\n\n          case "focusin":\n            x = "focus";\n            k = Fd;\n            break;\n\n          case "focusout":\n            x = "blur";\n            k = Fd;\n            break;\n\n          case "beforeblur":\n          case "afterblur":\n            k = Fd;\n            break;\n\n          case "click":\n            if (2 === c.button) break a;\n\n          case "auxclick":\n          case "dblclick":\n          case "mousedown":\n          case "mousemove":\n          case "mouseup":\n          case "mouseout":\n          case "mouseover":\n          case "contextmenu":\n            k = Bd;\n            break;\n\n          case "drag":\n          case "dragend":\n          case "dragenter":\n          case "dragexit":\n          case "dragleave":\n          case "dragover":\n          case "dragstart":\n          case "drop":\n            k = Dd;\n            break;\n\n          case "touchcancel":\n          case "touchend":\n          case "touchmove":\n          case "touchstart":\n            k = Vd;\n            break;\n\n          case Ic:\n          case Jc:\n          case Kc:\n            k = Hd;\n            break;\n\n          case Lc:\n            k = Xd;\n            break;\n\n          case "scroll":\n            k = vd;\n            break;\n\n          case "wheel":\n            k = Zd;\n            break;\n\n          case "copy":\n          case "cut":\n          case "paste":\n            k = Jd;\n            break;\n\n          case "gotpointercapture":\n          case "lostpointercapture":\n          case "pointercancel":\n          case "pointerdown":\n          case "pointermove":\n          case "pointerout":\n          case "pointerover":\n          case "pointerup":\n            k = Td;\n        }\n\n        var w = 0 !== (b & 4),\n            z = !w && "scroll" === a,\n            u = w ? null !== h ? h + "Capture" : null : h;\n        w = [];\n\n        for (var t = d, q; null !== t;) {\n          q = t;\n          var v = q.stateNode;\n          5 === q.tag && null !== v && (q = v, null !== u && (v = Ob(t, u), null != v && w.push(ef(t, v, q))));\n          if (z) break;\n          t = t.return;\n        }\n\n        0 < w.length && (h = new k(h, x, null, c, e), g.push({\n          event: h,\n          listeners: w\n        }));\n      }\n    }\n\n    if (0 === (b & 7)) {\n      a: {\n        h = "mouseover" === a || "pointerover" === a;\n        k = "mouseout" === a || "pointerout" === a;\n        if (h && 0 === (b & 16) && (x = c.relatedTarget || c.fromElement) && (wc(x) || x[ff])) break a;\n\n        if (k || h) {\n          h = e.window === e ? e : (h = e.ownerDocument) ? h.defaultView || h.parentWindow : window;\n\n          if (k) {\n            if (x = c.relatedTarget || c.toElement, k = d, x = x ? wc(x) : null, null !== x && (z = Zb(x), x !== z || 5 !== x.tag && 6 !== x.tag)) x = null;\n          } else k = null, x = d;\n\n          if (k !== x) {\n            w = Bd;\n            v = "onMouseLeave";\n            u = "onMouseEnter";\n            t = "mouse";\n            if ("pointerout" === a || "pointerover" === a) w = Td, v = "onPointerLeave", u = "onPointerEnter", t = "pointer";\n            z = null == k ? h : ue(k);\n            q = null == x ? h : ue(x);\n            h = new w(v, t + "leave", k, c, e);\n            h.target = z;\n            h.relatedTarget = q;\n            v = null;\n            wc(e) === d && (w = new w(u, t + "enter", x, c, e), w.target = q, w.relatedTarget = z, v = w);\n            z = v;\n            if (k && x) b: {\n              w = k;\n              u = x;\n              t = 0;\n\n              for (q = w; q; q = gf(q)) {\n                t++;\n              }\n\n              q = 0;\n\n              for (v = u; v; v = gf(v)) {\n                q++;\n              }\n\n              for (; 0 < t - q;) {\n                w = gf(w), t--;\n              }\n\n              for (; 0 < q - t;) {\n                u = gf(u), q--;\n              }\n\n              for (; t--;) {\n                if (w === u || null !== u && w === u.alternate) break b;\n                w = gf(w);\n                u = gf(u);\n              }\n\n              w = null;\n            } else w = null;\n            null !== k && hf(g, h, k, w, !1);\n            null !== x && null !== z && hf(g, z, x, w, !0);\n          }\n        }\n      }\n\n      a: {\n        h = d ? ue(d) : window;\n        k = h.nodeName && h.nodeName.toLowerCase();\n        if ("select" === k || "input" === k && "file" === h.type) var J = ve;else if (me(h)) {\n          if (we) J = Fe;else {\n            J = De;\n            var K = Ce;\n          }\n        } else (k = h.nodeName) && "input" === k.toLowerCase() && ("checkbox" === h.type || "radio" === h.type) && (J = Ee);\n\n        if (J && (J = J(a, d))) {\n          ne(g, J, c, e);\n          break a;\n        }\n\n        K && K(a, h, d);\n        "focusout" === a && (K = h._wrapperState) && K.controlled && "number" === h.type && bb(h, "number", h.value);\n      }\n\n      K = d ? ue(d) : window;\n\n      switch (a) {\n        case "focusin":\n          if (me(K) || "true" === K.contentEditable) Qe = K, Re = d, Se = null;\n          break;\n\n        case "focusout":\n          Se = Re = Qe = null;\n          break;\n\n        case "mousedown":\n          Te = !0;\n          break;\n\n        case "contextmenu":\n        case "mouseup":\n        case "dragend":\n          Te = !1;\n          Ue(g, c, e);\n          break;\n\n        case "selectionchange":\n          if (Pe) break;\n\n        case "keydown":\n        case "keyup":\n          Ue(g, c, e);\n      }\n\n      var Q;\n      if (ae) b: {\n        switch (a) {\n          case "compositionstart":\n            var L = "onCompositionStart";\n            break b;\n\n          case "compositionend":\n            L = "onCompositionEnd";\n            break b;\n\n          case "compositionupdate":\n            L = "onCompositionUpdate";\n            break b;\n        }\n\n        L = void 0;\n      } else ie ? ge(a, c) && (L = "onCompositionEnd") : "keydown" === a && 229 === c.keyCode && (L = "onCompositionStart");\n      L && (de && "ko" !== c.locale && (ie || "onCompositionStart" !== L ? "onCompositionEnd" === L && ie && (Q = nd()) : (kd = e, ld = "value" in kd ? kd.value : kd.textContent, ie = !0)), K = oe(d, L), 0 < K.length && (L = new Ld(L, a, null, c, e), g.push({\n        event: L,\n        listeners: K\n      }), Q ? L.data = Q : (Q = he(c), null !== Q && (L.data = Q))));\n      if (Q = ce ? je(a, c) : ke(a, c)) d = oe(d, "onBeforeInput"), 0 < d.length && (e = new Ld("onBeforeInput", "beforeinput", null, c, e), g.push({\n        event: e,\n        listeners: d\n      }), e.data = Q);\n    }\n\n    se(g, b);\n  });\n}\n\nfunction ef(a, b, c) {\n  return {\n    instance: a,\n    listener: b,\n    currentTarget: c\n  };\n}\n\nfunction oe(a, b) {\n  for (var c = b + "Capture", d = []; null !== a;) {\n    var e = a,\n        f = e.stateNode;\n    5 === e.tag && null !== f && (e = f, f = Ob(a, c), null != f && d.unshift(ef(a, f, e)), f = Ob(a, b), null != f && d.push(ef(a, f, e)));\n    a = a.return;\n  }\n\n  return d;\n}\n\nfunction gf(a) {\n  if (null === a) return null;\n\n  do {\n    a = a.return;\n  } while (a && 5 !== a.tag);\n\n  return a ? a : null;\n}\n\nfunction hf(a, b, c, d, e) {\n  for (var f = b._reactName, g = []; null !== c && c !== d;) {\n    var h = c,\n        k = h.alternate,\n        l = h.stateNode;\n    if (null !== k && k === d) break;\n    5 === h.tag && null !== l && (h = l, e ? (k = Ob(c, f), null != k && g.unshift(ef(c, k, h))) : e || (k = Ob(c, f), null != k && g.push(ef(c, k, h))));\n    c = c.return;\n  }\n\n  0 !== g.length && a.push({\n    event: b,\n    listeners: g\n  });\n}\n\nfunction jf() {}\n\nvar kf = null,\n    lf = null;\n\nfunction mf(a, b) {\n  switch (a) {\n    case "button":\n    case "input":\n    case "select":\n    case "textarea":\n      return !!b.autoFocus;\n  }\n\n  return !1;\n}\n\nfunction nf(a, b) {\n  return "textarea" === a || "option" === a || "noscript" === a || "string" === typeof b.children || "number" === typeof b.children || "object" === _typeof(b.dangerouslySetInnerHTML) && null !== b.dangerouslySetInnerHTML && null != b.dangerouslySetInnerHTML.__html;\n}\n\nvar of = "function" === typeof setTimeout ? setTimeout : void 0,\n    pf = "function" === typeof clearTimeout ? clearTimeout : void 0;\n\nfunction qf(a) {\n  1 === a.nodeType ? a.textContent = "" : 9 === a.nodeType && (a = a.body, null != a && (a.textContent = ""));\n}\n\nfunction rf(a) {\n  for (; null != a; a = a.nextSibling) {\n    var b = a.nodeType;\n    if (1 === b || 3 === b) break;\n  }\n\n  return a;\n}\n\nfunction sf(a) {\n  a = a.previousSibling;\n\n  for (var b = 0; a;) {\n    if (8 === a.nodeType) {\n      var c = a.data;\n\n      if ("$" === c || "$!" === c || "$?" === c) {\n        if (0 === b) return a;\n        b--;\n      } else "/$" === c && b++;\n    }\n\n    a = a.previousSibling;\n  }\n\n  return null;\n}\n\nvar tf = 0;\n\nfunction uf(a) {\n  return {\n    $$typeof: Ga,\n    toString: a,\n    valueOf: a\n  };\n}\n\nvar vf = Math.random().toString(36).slice(2),\n    wf = "__reactFiber$" + vf,\n    xf = "__reactProps$" + vf,\n    ff = "__reactContainer$" + vf,\n    yf = "__reactEvents$" + vf;\n\nfunction wc(a) {\n  var b = a[wf];\n  if (b) return b;\n\n  for (var c = a.parentNode; c;) {\n    if (b = c[ff] || c[wf]) {\n      c = b.alternate;\n      if (null !== b.child || null !== c && null !== c.child) for (a = sf(a); null !== a;) {\n        if (c = a[wf]) return c;\n        a = sf(a);\n      }\n      return b;\n    }\n\n    a = c;\n    c = a.parentNode;\n  }\n\n  return null;\n}\n\nfunction Cb(a) {\n  a = a[wf] || a[ff];\n  return !a || 5 !== a.tag && 6 !== a.tag && 13 !== a.tag && 3 !== a.tag ? null : a;\n}\n\nfunction ue(a) {\n  if (5 === a.tag || 6 === a.tag) return a.stateNode;\n  throw Error(y(33));\n}\n\nfunction Db(a) {\n  return a[xf] || null;\n}\n\nfunction $e(a) {\n  var b = a[yf];\n  void 0 === b && (b = a[yf] = new Set());\n  return b;\n}\n\nvar zf = [],\n    Af = -1;\n\nfunction Bf(a) {\n  return {\n    current: a\n  };\n}\n\nfunction H(a) {\n  0 > Af || (a.current = zf[Af], zf[Af] = null, Af--);\n}\n\nfunction I(a, b) {\n  Af++;\n  zf[Af] = a.current;\n  a.current = b;\n}\n\nvar Cf = {},\n    M = Bf(Cf),\n    N = Bf(!1),\n    Df = Cf;\n\nfunction Ef(a, b) {\n  var c = a.type.contextTypes;\n  if (!c) return Cf;\n  var d = a.stateNode;\n  if (d && d.__reactInternalMemoizedUnmaskedChildContext === b) return d.__reactInternalMemoizedMaskedChildContext;\n  var e = {},\n      f;\n\n  for (f in c) {\n    e[f] = b[f];\n  }\n\n  d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = b, a.__reactInternalMemoizedMaskedChildContext = e);\n  return e;\n}\n\nfunction Ff(a) {\n  a = a.childContextTypes;\n  return null !== a && void 0 !== a;\n}\n\nfunction Gf() {\n  H(N);\n  H(M);\n}\n\nfunction Hf(a, b, c) {\n  if (M.current !== Cf) throw Error(y(168));\n  I(M, b);\n  I(N, c);\n}\n\nfunction If(a, b, c) {\n  var d = a.stateNode;\n  a = b.childContextTypes;\n  if ("function" !== typeof d.getChildContext) return c;\n  d = d.getChildContext();\n\n  for (var e in d) {\n    if (!(e in a)) throw Error(y(108, Ra(b) || "Unknown", e));\n  }\n\n  return m({}, c, d);\n}\n\nfunction Jf(a) {\n  a = (a = a.stateNode) && a.__reactInternalMemoizedMergedChildContext || Cf;\n  Df = M.current;\n  I(M, a);\n  I(N, N.current);\n  return !0;\n}\n\nfunction Kf(a, b, c) {\n  var d = a.stateNode;\n  if (!d) throw Error(y(169));\n  c ? (a = If(a, b, Df), d.__reactInternalMemoizedMergedChildContext = a, H(N), H(M), I(M, a)) : H(N);\n  I(N, c);\n}\n\nvar Lf = null,\n    Mf = null,\n    Nf = r.unstable_runWithPriority,\n    Of = r.unstable_scheduleCallback,\n    Pf = r.unstable_cancelCallback,\n    Qf = r.unstable_shouldYield,\n    Rf = r.unstable_requestPaint,\n    Sf = r.unstable_now,\n    Tf = r.unstable_getCurrentPriorityLevel,\n    Uf = r.unstable_ImmediatePriority,\n    Vf = r.unstable_UserBlockingPriority,\n    Wf = r.unstable_NormalPriority,\n    Xf = r.unstable_LowPriority,\n    Yf = r.unstable_IdlePriority,\n    Zf = {},\n    $f = void 0 !== Rf ? Rf : function () {},\n    ag = null,\n    bg = null,\n    cg = !1,\n    dg = Sf(),\n    O = 1E4 > dg ? Sf : function () {\n  return Sf() - dg;\n};\n\nfunction eg() {\n  switch (Tf()) {\n    case Uf:\n      return 99;\n\n    case Vf:\n      return 98;\n\n    case Wf:\n      return 97;\n\n    case Xf:\n      return 96;\n\n    case Yf:\n      return 95;\n\n    default:\n      throw Error(y(332));\n  }\n}\n\nfunction fg(a) {\n  switch (a) {\n    case 99:\n      return Uf;\n\n    case 98:\n      return Vf;\n\n    case 97:\n      return Wf;\n\n    case 96:\n      return Xf;\n\n    case 95:\n      return Yf;\n\n    default:\n      throw Error(y(332));\n  }\n}\n\nfunction gg(a, b) {\n  a = fg(a);\n  return Nf(a, b);\n}\n\nfunction hg(a, b, c) {\n  a = fg(a);\n  return Of(a, b, c);\n}\n\nfunction ig() {\n  if (null !== bg) {\n    var a = bg;\n    bg = null;\n    Pf(a);\n  }\n\n  jg();\n}\n\nfunction jg() {\n  if (!cg && null !== ag) {\n    cg = !0;\n    var a = 0;\n\n    try {\n      var b = ag;\n      gg(99, function () {\n        for (; a < b.length; a++) {\n          var c = b[a];\n\n          do {\n            c = c(!0);\n          } while (null !== c);\n        }\n      });\n      ag = null;\n    } catch (c) {\n      throw null !== ag && (ag = ag.slice(a + 1)), Of(Uf, ig), c;\n    } finally {\n      cg = !1;\n    }\n  }\n}\n\nvar kg = ra.ReactCurrentBatchConfig;\n\nfunction lg(a, b) {\n  if (a && a.defaultProps) {\n    b = m({}, b);\n    a = a.defaultProps;\n\n    for (var c in a) {\n      void 0 === b[c] && (b[c] = a[c]);\n    }\n\n    return b;\n  }\n\n  return b;\n}\n\nvar mg = Bf(null),\n    ng = null,\n    og = null,\n    pg = null;\n\nfunction qg() {\n  pg = og = ng = null;\n}\n\nfunction rg(a) {\n  var b = mg.current;\n  H(mg);\n  a.type._context._currentValue = b;\n}\n\nfunction sg(a, b) {\n  for (; null !== a;) {\n    var c = a.alternate;\n    if ((a.childLanes & b) === b) {\n      if (null === c || (c.childLanes & b) === b) break;else c.childLanes |= b;\n    } else a.childLanes |= b, null !== c && (c.childLanes |= b);\n    a = a.return;\n  }\n}\n\nfunction tg(a, b) {\n  ng = a;\n  pg = og = null;\n  a = a.dependencies;\n  null !== a && null !== a.firstContext && (0 !== (a.lanes & b) && (ug = !0), a.firstContext = null);\n}\n\nfunction vg(a, b) {\n  if (pg !== a && !1 !== b && 0 !== b) {\n    if ("number" !== typeof b || 1073741823 === b) pg = a, b = 1073741823;\n    b = {\n      context: a,\n      observedBits: b,\n      next: null\n    };\n\n    if (null === og) {\n      if (null === ng) throw Error(y(308));\n      og = b;\n      ng.dependencies = {\n        lanes: 0,\n        firstContext: b,\n        responders: null\n      };\n    } else og = og.next = b;\n  }\n\n  return a._currentValue;\n}\n\nvar wg = !1;\n\nfunction xg(a) {\n  a.updateQueue = {\n    baseState: a.memoizedState,\n    firstBaseUpdate: null,\n    lastBaseUpdate: null,\n    shared: {\n      pending: null\n    },\n    effects: null\n  };\n}\n\nfunction yg(a, b) {\n  a = a.updateQueue;\n  b.updateQueue === a && (b.updateQueue = {\n    baseState: a.baseState,\n    firstBaseUpdate: a.firstBaseUpdate,\n    lastBaseUpdate: a.lastBaseUpdate,\n    shared: a.shared,\n    effects: a.effects\n  });\n}\n\nfunction zg(a, b) {\n  return {\n    eventTime: a,\n    lane: b,\n    tag: 0,\n    payload: null,\n    callback: null,\n    next: null\n  };\n}\n\nfunction Ag(a, b) {\n  a = a.updateQueue;\n\n  if (null !== a) {\n    a = a.shared;\n    var c = a.pending;\n    null === c ? b.next = b : (b.next = c.next, c.next = b);\n    a.pending = b;\n  }\n}\n\nfunction Bg(a, b) {\n  var c = a.updateQueue,\n      d = a.alternate;\n\n  if (null !== d && (d = d.updateQueue, c === d)) {\n    var e = null,\n        f = null;\n    c = c.firstBaseUpdate;\n\n    if (null !== c) {\n      do {\n        var g = {\n          eventTime: c.eventTime,\n          lane: c.lane,\n          tag: c.tag,\n          payload: c.payload,\n          callback: c.callback,\n          next: null\n        };\n        null === f ? e = f = g : f = f.next = g;\n        c = c.next;\n      } while (null !== c);\n\n      null === f ? e = f = b : f = f.next = b;\n    } else e = f = b;\n\n    c = {\n      baseState: d.baseState,\n      firstBaseUpdate: e,\n      lastBaseUpdate: f,\n      shared: d.shared,\n      effects: d.effects\n    };\n    a.updateQueue = c;\n    return;\n  }\n\n  a = c.lastBaseUpdate;\n  null === a ? c.firstBaseUpdate = b : a.next = b;\n  c.lastBaseUpdate = b;\n}\n\nfunction Cg(a, b, c, d) {\n  var e = a.updateQueue;\n  wg = !1;\n  var f = e.firstBaseUpdate,\n      g = e.lastBaseUpdate,\n      h = e.shared.pending;\n\n  if (null !== h) {\n    e.shared.pending = null;\n    var k = h,\n        l = k.next;\n    k.next = null;\n    null === g ? f = l : g.next = l;\n    g = k;\n    var n = a.alternate;\n\n    if (null !== n) {\n      n = n.updateQueue;\n      var A = n.lastBaseUpdate;\n      A !== g && (null === A ? n.firstBaseUpdate = l : A.next = l, n.lastBaseUpdate = k);\n    }\n  }\n\n  if (null !== f) {\n    A = e.baseState;\n    g = 0;\n    n = l = k = null;\n\n    do {\n      h = f.lane;\n      var p = f.eventTime;\n\n      if ((d & h) === h) {\n        null !== n && (n = n.next = {\n          eventTime: p,\n          lane: 0,\n          tag: f.tag,\n          payload: f.payload,\n          callback: f.callback,\n          next: null\n        });\n\n        a: {\n          var C = a,\n              x = f;\n          h = b;\n          p = c;\n\n          switch (x.tag) {\n            case 1:\n              C = x.payload;\n\n              if ("function" === typeof C) {\n                A = C.call(p, A, h);\n                break a;\n              }\n\n              A = C;\n              break a;\n\n            case 3:\n              C.flags = C.flags & -4097 | 64;\n\n            case 0:\n              C = x.payload;\n              h = "function" === typeof C ? C.call(p, A, h) : C;\n              if (null === h || void 0 === h) break a;\n              A = m({}, A, h);\n              break a;\n\n            case 2:\n              wg = !0;\n          }\n        }\n\n        null !== f.callback && (a.flags |= 32, h = e.effects, null === h ? e.effects = [f] : h.push(f));\n      } else p = {\n        eventTime: p,\n        lane: h,\n        tag: f.tag,\n        payload: f.payload,\n        callback: f.callback,\n        next: null\n      }, null === n ? (l = n = p, k = A) : n = n.next = p, g |= h;\n\n      f = f.next;\n      if (null === f) if (h = e.shared.pending, null === h) break;else f = h.next, h.next = null, e.lastBaseUpdate = h, e.shared.pending = null;\n    } while (1);\n\n    null === n && (k = A);\n    e.baseState = k;\n    e.firstBaseUpdate = l;\n    e.lastBaseUpdate = n;\n    Dg |= g;\n    a.lanes = g;\n    a.memoizedState = A;\n  }\n}\n\nfunction Eg(a, b, c) {\n  a = b.effects;\n  b.effects = null;\n  if (null !== a) for (b = 0; b < a.length; b++) {\n    var d = a[b],\n        e = d.callback;\n\n    if (null !== e) {\n      d.callback = null;\n      d = c;\n      if ("function" !== typeof e) throw Error(y(191, e));\n      e.call(d);\n    }\n  }\n}\n\nvar Fg = new aa.Component().refs;\n\nfunction Gg(a, b, c, d) {\n  b = a.memoizedState;\n  c = c(d, b);\n  c = null === c || void 0 === c ? b : m({}, b, c);\n  a.memoizedState = c;\n  0 === a.lanes && (a.updateQueue.baseState = c);\n}\n\nvar Kg = {\n  isMounted: function isMounted(a) {\n    return (a = a._reactInternals) ? Zb(a) === a : !1;\n  },\n  enqueueSetState: function enqueueSetState(a, b, c) {\n    a = a._reactInternals;\n    var d = Hg(),\n        e = Ig(a),\n        f = zg(d, e);\n    f.payload = b;\n    void 0 !== c && null !== c && (f.callback = c);\n    Ag(a, f);\n    Jg(a, e, d);\n  },\n  enqueueReplaceState: function enqueueReplaceState(a, b, c) {\n    a = a._reactInternals;\n    var d = Hg(),\n        e = Ig(a),\n        f = zg(d, e);\n    f.tag = 1;\n    f.payload = b;\n    void 0 !== c && null !== c && (f.callback = c);\n    Ag(a, f);\n    Jg(a, e, d);\n  },\n  enqueueForceUpdate: function enqueueForceUpdate(a, b) {\n    a = a._reactInternals;\n    var c = Hg(),\n        d = Ig(a),\n        e = zg(c, d);\n    e.tag = 2;\n    void 0 !== b && null !== b && (e.callback = b);\n    Ag(a, e);\n    Jg(a, d, c);\n  }\n};\n\nfunction Lg(a, b, c, d, e, f, g) {\n  a = a.stateNode;\n  return "function" === typeof a.shouldComponentUpdate ? a.shouldComponentUpdate(d, f, g) : b.prototype && b.prototype.isPureReactComponent ? !Je(c, d) || !Je(e, f) : !0;\n}\n\nfunction Mg(a, b, c) {\n  var d = !1,\n      e = Cf;\n  var f = b.contextType;\n  "object" === _typeof(f) && null !== f ? f = vg(f) : (e = Ff(b) ? Df : M.current, d = b.contextTypes, f = (d = null !== d && void 0 !== d) ? Ef(a, e) : Cf);\n  b = new b(c, f);\n  a.memoizedState = null !== b.state && void 0 !== b.state ? b.state : null;\n  b.updater = Kg;\n  a.stateNode = b;\n  b._reactInternals = a;\n  d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = e, a.__reactInternalMemoizedMaskedChildContext = f);\n  return b;\n}\n\nfunction Ng(a, b, c, d) {\n  a = b.state;\n  "function" === typeof b.componentWillReceiveProps && b.componentWillReceiveProps(c, d);\n  "function" === typeof b.UNSAFE_componentWillReceiveProps && b.UNSAFE_componentWillReceiveProps(c, d);\n  b.state !== a && Kg.enqueueReplaceState(b, b.state, null);\n}\n\nfunction Og(a, b, c, d) {\n  var e = a.stateNode;\n  e.props = c;\n  e.state = a.memoizedState;\n  e.refs = Fg;\n  xg(a);\n  var f = b.contextType;\n  "object" === _typeof(f) && null !== f ? e.context = vg(f) : (f = Ff(b) ? Df : M.current, e.context = Ef(a, f));\n  Cg(a, c, e, d);\n  e.state = a.memoizedState;\n  f = b.getDerivedStateFromProps;\n  "function" === typeof f && (Gg(a, b, f, c), e.state = a.memoizedState);\n  "function" === typeof b.getDerivedStateFromProps || "function" === typeof e.getSnapshotBeforeUpdate || "function" !== typeof e.UNSAFE_componentWillMount && "function" !== typeof e.componentWillMount || (b = e.state, "function" === typeof e.componentWillMount && e.componentWillMount(), "function" === typeof e.UNSAFE_componentWillMount && e.UNSAFE_componentWillMount(), b !== e.state && Kg.enqueueReplaceState(e, e.state, null), Cg(a, c, e, d), e.state = a.memoizedState);\n  "function" === typeof e.componentDidMount && (a.flags |= 4);\n}\n\nvar Pg = Array.isArray;\n\nfunction Qg(a, b, c) {\n  a = c.ref;\n\n  if (null !== a && "function" !== typeof a && "object" !== _typeof(a)) {\n    if (c._owner) {\n      c = c._owner;\n\n      if (c) {\n        if (1 !== c.tag) throw Error(y(309));\n        var d = c.stateNode;\n      }\n\n      if (!d) throw Error(y(147, a));\n      var e = "" + a;\n      if (null !== b && null !== b.ref && "function" === typeof b.ref && b.ref._stringRef === e) return b.ref;\n\n      b = function b(a) {\n        var b = d.refs;\n        b === Fg && (b = d.refs = {});\n        null === a ? delete b[e] : b[e] = a;\n      };\n\n      b._stringRef = e;\n      return b;\n    }\n\n    if ("string" !== typeof a) throw Error(y(284));\n    if (!c._owner) throw Error(y(290, a));\n  }\n\n  return a;\n}\n\nfunction Rg(a, b) {\n  if ("textarea" !== a.type) throw Error(y(31, "[object Object]" === Object.prototype.toString.call(b) ? "object with keys {" + Object.keys(b).join(", ") + "}" : b));\n}\n\nfunction Sg(a) {\n  function b(b, c) {\n    if (a) {\n      var d = b.lastEffect;\n      null !== d ? (d.nextEffect = c, b.lastEffect = c) : b.firstEffect = b.lastEffect = c;\n      c.nextEffect = null;\n      c.flags = 8;\n    }\n  }\n\n  function c(c, d) {\n    if (!a) return null;\n\n    for (; null !== d;) {\n      b(c, d), d = d.sibling;\n    }\n\n    return null;\n  }\n\n  function d(a, b) {\n    for (a = new Map(); null !== b;) {\n      null !== b.key ? a.set(b.key, b) : a.set(b.index, b), b = b.sibling;\n    }\n\n    return a;\n  }\n\n  function e(a, b) {\n    a = Tg(a, b);\n    a.index = 0;\n    a.sibling = null;\n    return a;\n  }\n\n  function f(b, c, d) {\n    b.index = d;\n    if (!a) return c;\n    d = b.alternate;\n    if (null !== d) return d = d.index, d < c ? (b.flags = 2, c) : d;\n    b.flags = 2;\n    return c;\n  }\n\n  function g(b) {\n    a && null === b.alternate && (b.flags = 2);\n    return b;\n  }\n\n  function h(a, b, c, d) {\n    if (null === b || 6 !== b.tag) return b = Ug(c, a.mode, d), b.return = a, b;\n    b = e(b, c);\n    b.return = a;\n    return b;\n  }\n\n  function k(a, b, c, d) {\n    if (null !== b && b.elementType === c.type) return d = e(b, c.props), d.ref = Qg(a, b, c), d.return = a, d;\n    d = Vg(c.type, c.key, c.props, null, a.mode, d);\n    d.ref = Qg(a, b, c);\n    d.return = a;\n    return d;\n  }\n\n  function l(a, b, c, d) {\n    if (null === b || 4 !== b.tag || b.stateNode.containerInfo !== c.containerInfo || b.stateNode.implementation !== c.implementation) return b = Wg(c, a.mode, d), b.return = a, b;\n    b = e(b, c.children || []);\n    b.return = a;\n    return b;\n  }\n\n  function n(a, b, c, d, f) {\n    if (null === b || 7 !== b.tag) return b = Xg(c, a.mode, d, f), b.return = a, b;\n    b = e(b, c);\n    b.return = a;\n    return b;\n  }\n\n  function A(a, b, c) {\n    if ("string" === typeof b || "number" === typeof b) return b = Ug("" + b, a.mode, c), b.return = a, b;\n\n    if ("object" === _typeof(b) && null !== b) {\n      switch (b.$$typeof) {\n        case sa:\n          return c = Vg(b.type, b.key, b.props, null, a.mode, c), c.ref = Qg(a, null, b), c.return = a, c;\n\n        case ta:\n          return b = Wg(b, a.mode, c), b.return = a, b;\n      }\n\n      if (Pg(b) || La(b)) return b = Xg(b, a.mode, c, null), b.return = a, b;\n      Rg(a, b);\n    }\n\n    return null;\n  }\n\n  function p(a, b, c, d) {\n    var e = null !== b ? b.key : null;\n    if ("string" === typeof c || "number" === typeof c) return null !== e ? null : h(a, b, "" + c, d);\n\n    if ("object" === _typeof(c) && null !== c) {\n      switch (c.$$typeof) {\n        case sa:\n          return c.key === e ? c.type === ua ? n(a, b, c.props.children, d, e) : k(a, b, c, d) : null;\n\n        case ta:\n          return c.key === e ? l(a, b, c, d) : null;\n      }\n\n      if (Pg(c) || La(c)) return null !== e ? null : n(a, b, c, d, null);\n      Rg(a, c);\n    }\n\n    return null;\n  }\n\n  function C(a, b, c, d, e) {\n    if ("string" === typeof d || "number" === typeof d) return a = a.get(c) || null, h(b, a, "" + d, e);\n\n    if ("object" === _typeof(d) && null !== d) {\n      switch (d.$$typeof) {\n        case sa:\n          return a = a.get(null === d.key ? c : d.key) || null, d.type === ua ? n(b, a, d.props.children, e, d.key) : k(b, a, d, e);\n\n        case ta:\n          return a = a.get(null === d.key ? c : d.key) || null, l(b, a, d, e);\n      }\n\n      if (Pg(d) || La(d)) return a = a.get(c) || null, n(b, a, d, e, null);\n      Rg(b, d);\n    }\n\n    return null;\n  }\n\n  function x(e, g, h, k) {\n    for (var l = null, t = null, u = g, z = g = 0, q = null; null !== u && z < h.length; z++) {\n      u.index > z ? (q = u, u = null) : q = u.sibling;\n      var n = p(e, u, h[z], k);\n\n      if (null === n) {\n        null === u && (u = q);\n        break;\n      }\n\n      a && u && null === n.alternate && b(e, u);\n      g = f(n, g, z);\n      null === t ? l = n : t.sibling = n;\n      t = n;\n      u = q;\n    }\n\n    if (z === h.length) return c(e, u), l;\n\n    if (null === u) {\n      for (; z < h.length; z++) {\n        u = A(e, h[z], k), null !== u && (g = f(u, g, z), null === t ? l = u : t.sibling = u, t = u);\n      }\n\n      return l;\n    }\n\n    for (u = d(e, u); z < h.length; z++) {\n      q = C(u, e, z, h[z], k), null !== q && (a && null !== q.alternate && u.delete(null === q.key ? z : q.key), g = f(q, g, z), null === t ? l = q : t.sibling = q, t = q);\n    }\n\n    a && u.forEach(function (a) {\n      return b(e, a);\n    });\n    return l;\n  }\n\n  function w(e, g, h, k) {\n    var l = La(h);\n    if ("function" !== typeof l) throw Error(y(150));\n    h = l.call(h);\n    if (null == h) throw Error(y(151));\n\n    for (var t = l = null, u = g, z = g = 0, q = null, n = h.next(); null !== u && !n.done; z++, n = h.next()) {\n      u.index > z ? (q = u, u = null) : q = u.sibling;\n      var w = p(e, u, n.value, k);\n\n      if (null === w) {\n        null === u && (u = q);\n        break;\n      }\n\n      a && u && null === w.alternate && b(e, u);\n      g = f(w, g, z);\n      null === t ? l = w : t.sibling = w;\n      t = w;\n      u = q;\n    }\n\n    if (n.done) return c(e, u), l;\n\n    if (null === u) {\n      for (; !n.done; z++, n = h.next()) {\n        n = A(e, n.value, k), null !== n && (g = f(n, g, z), null === t ? l = n : t.sibling = n, t = n);\n      }\n\n      return l;\n    }\n\n    for (u = d(e, u); !n.done; z++, n = h.next()) {\n      n = C(u, e, z, n.value, k), null !== n && (a && null !== n.alternate && u.delete(null === n.key ? z : n.key), g = f(n, g, z), null === t ? l = n : t.sibling = n, t = n);\n    }\n\n    a && u.forEach(function (a) {\n      return b(e, a);\n    });\n    return l;\n  }\n\n  return function (a, d, f, h) {\n    var k = "object" === _typeof(f) && null !== f && f.type === ua && null === f.key;\n    k && (f = f.props.children);\n    var l = "object" === _typeof(f) && null !== f;\n    if (l) switch (f.$$typeof) {\n      case sa:\n        a: {\n          l = f.key;\n\n          for (k = d; null !== k;) {\n            if (k.key === l) {\n              switch (k.tag) {\n                case 7:\n                  if (f.type === ua) {\n                    c(a, k.sibling);\n                    d = e(k, f.props.children);\n                    d.return = a;\n                    a = d;\n                    break a;\n                  }\n\n                  break;\n\n                default:\n                  if (k.elementType === f.type) {\n                    c(a, k.sibling);\n                    d = e(k, f.props);\n                    d.ref = Qg(a, k, f);\n                    d.return = a;\n                    a = d;\n                    break a;\n                  }\n\n              }\n\n              c(a, k);\n              break;\n            } else b(a, k);\n\n            k = k.sibling;\n          }\n\n          f.type === ua ? (d = Xg(f.props.children, a.mode, h, f.key), d.return = a, a = d) : (h = Vg(f.type, f.key, f.props, null, a.mode, h), h.ref = Qg(a, d, f), h.return = a, a = h);\n        }\n\n        return g(a);\n\n      case ta:\n        a: {\n          for (k = f.key; null !== d;) {\n            if (d.key === k) {\n              if (4 === d.tag && d.stateNode.containerInfo === f.containerInfo && d.stateNode.implementation === f.implementation) {\n                c(a, d.sibling);\n                d = e(d, f.children || []);\n                d.return = a;\n                a = d;\n                break a;\n              } else {\n                c(a, d);\n                break;\n              }\n            } else b(a, d);\n            d = d.sibling;\n          }\n\n          d = Wg(f, a.mode, h);\n          d.return = a;\n          a = d;\n        }\n\n        return g(a);\n    }\n    if ("string" === typeof f || "number" === typeof f) return f = "" + f, null !== d && 6 === d.tag ? (c(a, d.sibling), d = e(d, f), d.return = a, a = d) : (c(a, d), d = Ug(f, a.mode, h), d.return = a, a = d), g(a);\n    if (Pg(f)) return x(a, d, f, h);\n    if (La(f)) return w(a, d, f, h);\n    l && Rg(a, f);\n    if ("undefined" === typeof f && !k) switch (a.tag) {\n      case 1:\n      case 22:\n      case 0:\n      case 11:\n      case 15:\n        throw Error(y(152, Ra(a.type) || "Component"));\n    }\n    return c(a, d);\n  };\n}\n\nvar Yg = Sg(!0),\n    Zg = Sg(!1),\n    $g = {},\n    ah = Bf($g),\n    bh = Bf($g),\n    ch = Bf($g);\n\nfunction dh(a) {\n  if (a === $g) throw Error(y(174));\n  return a;\n}\n\nfunction eh(a, b) {\n  I(ch, b);\n  I(bh, a);\n  I(ah, $g);\n  a = b.nodeType;\n\n  switch (a) {\n    case 9:\n    case 11:\n      b = (b = b.documentElement) ? b.namespaceURI : mb(null, "");\n      break;\n\n    default:\n      a = 8 === a ? b.parentNode : b, b = a.namespaceURI || null, a = a.tagName, b = mb(b, a);\n  }\n\n  H(ah);\n  I(ah, b);\n}\n\nfunction fh() {\n  H(ah);\n  H(bh);\n  H(ch);\n}\n\nfunction gh(a) {\n  dh(ch.current);\n  var b = dh(ah.current);\n  var c = mb(b, a.type);\n  b !== c && (I(bh, a), I(ah, c));\n}\n\nfunction hh(a) {\n  bh.current === a && (H(ah), H(bh));\n}\n\nvar P = Bf(0);\n\nfunction ih(a) {\n  for (var b = a; null !== b;) {\n    if (13 === b.tag) {\n      var c = b.memoizedState;\n      if (null !== c && (c = c.dehydrated, null === c || "$?" === c.data || "$!" === c.data)) return b;\n    } else if (19 === b.tag && void 0 !== b.memoizedProps.revealOrder) {\n      if (0 !== (b.flags & 64)) return b;\n    } else if (null !== b.child) {\n      b.child.return = b;\n      b = b.child;\n      continue;\n    }\n\n    if (b === a) break;\n\n    for (; null === b.sibling;) {\n      if (null === b.return || b.return === a) return null;\n      b = b.return;\n    }\n\n    b.sibling.return = b.return;\n    b = b.sibling;\n  }\n\n  return null;\n}\n\nvar jh = null,\n    kh = null,\n    lh = !1;\n\nfunction mh(a, b) {\n  var c = nh(5, null, null, 0);\n  c.elementType = "DELETED";\n  c.type = "DELETED";\n  c.stateNode = b;\n  c.return = a;\n  c.flags = 8;\n  null !== a.lastEffect ? (a.lastEffect.nextEffect = c, a.lastEffect = c) : a.firstEffect = a.lastEffect = c;\n}\n\nfunction oh(a, b) {\n  switch (a.tag) {\n    case 5:\n      var c = a.type;\n      b = 1 !== b.nodeType || c.toLowerCase() !== b.nodeName.toLowerCase() ? null : b;\n      return null !== b ? (a.stateNode = b, !0) : !1;\n\n    case 6:\n      return b = "" === a.pendingProps || 3 !== b.nodeType ? null : b, null !== b ? (a.stateNode = b, !0) : !1;\n\n    case 13:\n      return !1;\n\n    default:\n      return !1;\n  }\n}\n\nfunction ph(a) {\n  if (lh) {\n    var b = kh;\n\n    if (b) {\n      var c = b;\n\n      if (!oh(a, b)) {\n        b = rf(c.nextSibling);\n\n        if (!b || !oh(a, b)) {\n          a.flags = a.flags & -1025 | 2;\n          lh = !1;\n          jh = a;\n          return;\n        }\n\n        mh(jh, c);\n      }\n\n      jh = a;\n      kh = rf(b.firstChild);\n    } else a.flags = a.flags & -1025 | 2, lh = !1, jh = a;\n  }\n}\n\nfunction qh(a) {\n  for (a = a.return; null !== a && 5 !== a.tag && 3 !== a.tag && 13 !== a.tag;) {\n    a = a.return;\n  }\n\n  jh = a;\n}\n\nfunction rh(a) {\n  if (a !== jh) return !1;\n  if (!lh) return qh(a), lh = !0, !1;\n  var b = a.type;\n  if (5 !== a.tag || "head" !== b && "body" !== b && !nf(b, a.memoizedProps)) for (b = kh; b;) {\n    mh(a, b), b = rf(b.nextSibling);\n  }\n  qh(a);\n\n  if (13 === a.tag) {\n    a = a.memoizedState;\n    a = null !== a ? a.dehydrated : null;\n    if (!a) throw Error(y(317));\n\n    a: {\n      a = a.nextSibling;\n\n      for (b = 0; a;) {\n        if (8 === a.nodeType) {\n          var c = a.data;\n\n          if ("/$" === c) {\n            if (0 === b) {\n              kh = rf(a.nextSibling);\n              break a;\n            }\n\n            b--;\n          } else "$" !== c && "$!" !== c && "$?" !== c || b++;\n        }\n\n        a = a.nextSibling;\n      }\n\n      kh = null;\n    }\n  } else kh = jh ? rf(a.stateNode.nextSibling) : null;\n\n  return !0;\n}\n\nfunction sh() {\n  kh = jh = null;\n  lh = !1;\n}\n\nvar th = [];\n\nfunction uh() {\n  for (var a = 0; a < th.length; a++) {\n    th[a]._workInProgressVersionPrimary = null;\n  }\n\n  th.length = 0;\n}\n\nvar vh = ra.ReactCurrentDispatcher,\n    wh = ra.ReactCurrentBatchConfig,\n    xh = 0,\n    R = null,\n    S = null,\n    T = null,\n    yh = !1,\n    zh = !1;\n\nfunction Ah() {\n  throw Error(y(321));\n}\n\nfunction Bh(a, b) {\n  if (null === b) return !1;\n\n  for (var c = 0; c < b.length && c < a.length; c++) {\n    if (!He(a[c], b[c])) return !1;\n  }\n\n  return !0;\n}\n\nfunction Ch(a, b, c, d, e, f) {\n  xh = f;\n  R = b;\n  b.memoizedState = null;\n  b.updateQueue = null;\n  b.lanes = 0;\n  vh.current = null === a || null === a.memoizedState ? Dh : Eh;\n  a = c(d, e);\n\n  if (zh) {\n    f = 0;\n\n    do {\n      zh = !1;\n      if (!(25 > f)) throw Error(y(301));\n      f += 1;\n      T = S = null;\n      b.updateQueue = null;\n      vh.current = Fh;\n      a = c(d, e);\n    } while (zh);\n  }\n\n  vh.current = Gh;\n  b = null !== S && null !== S.next;\n  xh = 0;\n  T = S = R = null;\n  yh = !1;\n  if (b) throw Error(y(300));\n  return a;\n}\n\nfunction Hh() {\n  var a = {\n    memoizedState: null,\n    baseState: null,\n    baseQueue: null,\n    queue: null,\n    next: null\n  };\n  null === T ? R.memoizedState = T = a : T = T.next = a;\n  return T;\n}\n\nfunction Ih() {\n  if (null === S) {\n    var a = R.alternate;\n    a = null !== a ? a.memoizedState : null;\n  } else a = S.next;\n\n  var b = null === T ? R.memoizedState : T.next;\n  if (null !== b) T = b, S = a;else {\n    if (null === a) throw Error(y(310));\n    S = a;\n    a = {\n      memoizedState: S.memoizedState,\n      baseState: S.baseState,\n      baseQueue: S.baseQueue,\n      queue: S.queue,\n      next: null\n    };\n    null === T ? R.memoizedState = T = a : T = T.next = a;\n  }\n  return T;\n}\n\nfunction Jh(a, b) {\n  return "function" === typeof b ? b(a) : b;\n}\n\nfunction Kh(a) {\n  var b = Ih(),\n      c = b.queue;\n  if (null === c) throw Error(y(311));\n  c.lastRenderedReducer = a;\n  var d = S,\n      e = d.baseQueue,\n      f = c.pending;\n\n  if (null !== f) {\n    if (null !== e) {\n      var g = e.next;\n      e.next = f.next;\n      f.next = g;\n    }\n\n    d.baseQueue = e = f;\n    c.pending = null;\n  }\n\n  if (null !== e) {\n    e = e.next;\n    d = d.baseState;\n    var h = g = f = null,\n        k = e;\n\n    do {\n      var l = k.lane;\n      if ((xh & l) === l) null !== h && (h = h.next = {\n        lane: 0,\n        action: k.action,\n        eagerReducer: k.eagerReducer,\n        eagerState: k.eagerState,\n        next: null\n      }), d = k.eagerReducer === a ? k.eagerState : a(d, k.action);else {\n        var n = {\n          lane: l,\n          action: k.action,\n          eagerReducer: k.eagerReducer,\n          eagerState: k.eagerState,\n          next: null\n        };\n        null === h ? (g = h = n, f = d) : h = h.next = n;\n        R.lanes |= l;\n        Dg |= l;\n      }\n      k = k.next;\n    } while (null !== k && k !== e);\n\n    null === h ? f = d : h.next = g;\n    He(d, b.memoizedState) || (ug = !0);\n    b.memoizedState = d;\n    b.baseState = f;\n    b.baseQueue = h;\n    c.lastRenderedState = d;\n  }\n\n  return [b.memoizedState, c.dispatch];\n}\n\nfunction Lh(a) {\n  var b = Ih(),\n      c = b.queue;\n  if (null === c) throw Error(y(311));\n  c.lastRenderedReducer = a;\n  var d = c.dispatch,\n      e = c.pending,\n      f = b.memoizedState;\n\n  if (null !== e) {\n    c.pending = null;\n    var g = e = e.next;\n\n    do {\n      f = a(f, g.action), g = g.next;\n    } while (g !== e);\n\n    He(f, b.memoizedState) || (ug = !0);\n    b.memoizedState = f;\n    null === b.baseQueue && (b.baseState = f);\n    c.lastRenderedState = f;\n  }\n\n  return [f, d];\n}\n\nfunction Mh(a, b, c) {\n  var d = b._getVersion;\n  d = d(b._source);\n  var e = b._workInProgressVersionPrimary;\n  if (null !== e) a = e === d;else if (a = a.mutableReadLanes, a = (xh & a) === a) b._workInProgressVersionPrimary = d, th.push(b);\n  if (a) return c(b._source);\n  th.push(b);\n  throw Error(y(350));\n}\n\nfunction Nh(a, b, c, d) {\n  var e = U;\n  if (null === e) throw Error(y(349));\n  var f = b._getVersion,\n      g = f(b._source),\n      h = vh.current,\n      k = h.useState(function () {\n    return Mh(e, b, c);\n  }),\n      l = k[1],\n      n = k[0];\n  k = T;\n  var A = a.memoizedState,\n      p = A.refs,\n      C = p.getSnapshot,\n      x = A.source;\n  A = A.subscribe;\n  var w = R;\n  a.memoizedState = {\n    refs: p,\n    source: b,\n    subscribe: d\n  };\n  h.useEffect(function () {\n    p.getSnapshot = c;\n    p.setSnapshot = l;\n    var a = f(b._source);\n\n    if (!He(g, a)) {\n      a = c(b._source);\n      He(n, a) || (l(a), a = Ig(w), e.mutableReadLanes |= a & e.pendingLanes);\n      a = e.mutableReadLanes;\n      e.entangledLanes |= a;\n\n      for (var d = e.entanglements, h = a; 0 < h;) {\n        var k = 31 - Vc(h),\n            v = 1 << k;\n        d[k] |= a;\n        h &= ~v;\n      }\n    }\n  }, [c, b, d]);\n  h.useEffect(function () {\n    return d(b._source, function () {\n      var a = p.getSnapshot,\n          c = p.setSnapshot;\n\n      try {\n        c(a(b._source));\n        var d = Ig(w);\n        e.mutableReadLanes |= d & e.pendingLanes;\n      } catch (q) {\n        c(function () {\n          throw q;\n        });\n      }\n    });\n  }, [b, d]);\n  He(C, c) && He(x, b) && He(A, d) || (a = {\n    pending: null,\n    dispatch: null,\n    lastRenderedReducer: Jh,\n    lastRenderedState: n\n  }, a.dispatch = l = Oh.bind(null, R, a), k.queue = a, k.baseQueue = null, n = Mh(e, b, c), k.memoizedState = k.baseState = n);\n  return n;\n}\n\nfunction Ph(a, b, c) {\n  var d = Ih();\n  return Nh(d, a, b, c);\n}\n\nfunction Qh(a) {\n  var b = Hh();\n  "function" === typeof a && (a = a());\n  b.memoizedState = b.baseState = a;\n  a = b.queue = {\n    pending: null,\n    dispatch: null,\n    lastRenderedReducer: Jh,\n    lastRenderedState: a\n  };\n  a = a.dispatch = Oh.bind(null, R, a);\n  return [b.memoizedState, a];\n}\n\nfunction Rh(a, b, c, d) {\n  a = {\n    tag: a,\n    create: b,\n    destroy: c,\n    deps: d,\n    next: null\n  };\n  b = R.updateQueue;\n  null === b ? (b = {\n    lastEffect: null\n  }, R.updateQueue = b, b.lastEffect = a.next = a) : (c = b.lastEffect, null === c ? b.lastEffect = a.next = a : (d = c.next, c.next = a, a.next = d, b.lastEffect = a));\n  return a;\n}\n\nfunction Sh(a) {\n  var b = Hh();\n  a = {\n    current: a\n  };\n  return b.memoizedState = a;\n}\n\nfunction Th() {\n  return Ih().memoizedState;\n}\n\nfunction Uh(a, b, c, d) {\n  var e = Hh();\n  R.flags |= a;\n  e.memoizedState = Rh(1 | b, c, void 0, void 0 === d ? null : d);\n}\n\nfunction Vh(a, b, c, d) {\n  var e = Ih();\n  d = void 0 === d ? null : d;\n  var f = void 0;\n\n  if (null !== S) {\n    var g = S.memoizedState;\n    f = g.destroy;\n\n    if (null !== d && Bh(d, g.deps)) {\n      Rh(b, c, f, d);\n      return;\n    }\n  }\n\n  R.flags |= a;\n  e.memoizedState = Rh(1 | b, c, f, d);\n}\n\nfunction Wh(a, b) {\n  return Uh(516, 4, a, b);\n}\n\nfunction Xh(a, b) {\n  return Vh(516, 4, a, b);\n}\n\nfunction Yh(a, b) {\n  return Vh(4, 2, a, b);\n}\n\nfunction Zh(a, b) {\n  if ("function" === typeof b) return a = a(), b(a), function () {\n    b(null);\n  };\n  if (null !== b && void 0 !== b) return a = a(), b.current = a, function () {\n    b.current = null;\n  };\n}\n\nfunction $h(a, b, c) {\n  c = null !== c && void 0 !== c ? c.concat([a]) : null;\n  return Vh(4, 2, Zh.bind(null, b, a), c);\n}\n\nfunction ai() {}\n\nfunction bi(a, b) {\n  var c = Ih();\n  b = void 0 === b ? null : b;\n  var d = c.memoizedState;\n  if (null !== d && null !== b && Bh(b, d[1])) return d[0];\n  c.memoizedState = [a, b];\n  return a;\n}\n\nfunction ci(a, b) {\n  var c = Ih();\n  b = void 0 === b ? null : b;\n  var d = c.memoizedState;\n  if (null !== d && null !== b && Bh(b, d[1])) return d[0];\n  a = a();\n  c.memoizedState = [a, b];\n  return a;\n}\n\nfunction di(a, b) {\n  var c = eg();\n  gg(98 > c ? 98 : c, function () {\n    a(!0);\n  });\n  gg(97 < c ? 97 : c, function () {\n    var c = wh.transition;\n    wh.transition = 1;\n\n    try {\n      a(!1), b();\n    } finally {\n      wh.transition = c;\n    }\n  });\n}\n\nfunction Oh(a, b, c) {\n  var d = Hg(),\n      e = Ig(a),\n      f = {\n    lane: e,\n    action: c,\n    eagerReducer: null,\n    eagerState: null,\n    next: null\n  },\n      g = b.pending;\n  null === g ? f.next = f : (f.next = g.next, g.next = f);\n  b.pending = f;\n  g = a.alternate;\n  if (a === R || null !== g && g === R) zh = yh = !0;else {\n    if (0 === a.lanes && (null === g || 0 === g.lanes) && (g = b.lastRenderedReducer, null !== g)) try {\n      var h = b.lastRenderedState,\n          k = g(h, c);\n      f.eagerReducer = g;\n      f.eagerState = k;\n      if (He(k, h)) return;\n    } catch (l) {} finally {}\n    Jg(a, e, d);\n  }\n}\n\nvar Gh = {\n  readContext: vg,\n  useCallback: Ah,\n  useContext: Ah,\n  useEffect: Ah,\n  useImperativeHandle: Ah,\n  useLayoutEffect: Ah,\n  useMemo: Ah,\n  useReducer: Ah,\n  useRef: Ah,\n  useState: Ah,\n  useDebugValue: Ah,\n  useDeferredValue: Ah,\n  useTransition: Ah,\n  useMutableSource: Ah,\n  useOpaqueIdentifier: Ah,\n  unstable_isNewReconciler: !1\n},\n    Dh = {\n  readContext: vg,\n  useCallback: function useCallback(a, b) {\n    Hh().memoizedState = [a, void 0 === b ? null : b];\n    return a;\n  },\n  useContext: vg,\n  useEffect: Wh,\n  useImperativeHandle: function useImperativeHandle(a, b, c) {\n    c = null !== c && void 0 !== c ? c.concat([a]) : null;\n    return Uh(4, 2, Zh.bind(null, b, a), c);\n  },\n  useLayoutEffect: function useLayoutEffect(a, b) {\n    return Uh(4, 2, a, b);\n  },\n  useMemo: function useMemo(a, b) {\n    var c = Hh();\n    b = void 0 === b ? null : b;\n    a = a();\n    c.memoizedState = [a, b];\n    return a;\n  },\n  useReducer: function useReducer(a, b, c) {\n    var d = Hh();\n    b = void 0 !== c ? c(b) : b;\n    d.memoizedState = d.baseState = b;\n    a = d.queue = {\n      pending: null,\n      dispatch: null,\n      lastRenderedReducer: a,\n      lastRenderedState: b\n    };\n    a = a.dispatch = Oh.bind(null, R, a);\n    return [d.memoizedState, a];\n  },\n  useRef: Sh,\n  useState: Qh,\n  useDebugValue: ai,\n  useDeferredValue: function useDeferredValue(a) {\n    var b = Qh(a),\n        c = b[0],\n        d = b[1];\n    Wh(function () {\n      var b = wh.transition;\n      wh.transition = 1;\n\n      try {\n        d(a);\n      } finally {\n        wh.transition = b;\n      }\n    }, [a]);\n    return c;\n  },\n  useTransition: function useTransition() {\n    var a = Qh(!1),\n        b = a[0];\n    a = di.bind(null, a[1]);\n    Sh(a);\n    return [a, b];\n  },\n  useMutableSource: function useMutableSource(a, b, c) {\n    var d = Hh();\n    d.memoizedState = {\n      refs: {\n        getSnapshot: b,\n        setSnapshot: null\n      },\n      source: a,\n      subscribe: c\n    };\n    return Nh(d, a, b, c);\n  },\n  useOpaqueIdentifier: function useOpaqueIdentifier() {\n    if (lh) {\n      var a = !1,\n          b = uf(function () {\n        a || (a = !0, c("r:" + (tf++).toString(36)));\n        throw Error(y(355));\n      }),\n          c = Qh(b)[1];\n      0 === (R.mode & 2) && (R.flags |= 516, Rh(5, function () {\n        c("r:" + (tf++).toString(36));\n      }, void 0, null));\n      return b;\n    }\n\n    b = "r:" + (tf++).toString(36);\n    Qh(b);\n    return b;\n  },\n  unstable_isNewReconciler: !1\n},\n    Eh = {\n  readContext: vg,\n  useCallback: bi,\n  useContext: vg,\n  useEffect: Xh,\n  useImperativeHandle: $h,\n  useLayoutEffect: Yh,\n  useMemo: ci,\n  useReducer: Kh,\n  useRef: Th,\n  useState: function useState() {\n    return Kh(Jh);\n  },\n  useDebugValue: ai,\n  useDeferredValue: function useDeferredValue(a) {\n    var b = Kh(Jh),\n        c = b[0],\n        d = b[1];\n    Xh(function () {\n      var b = wh.transition;\n      wh.transition = 1;\n\n      try {\n        d(a);\n      } finally {\n        wh.transition = b;\n      }\n    }, [a]);\n    return c;\n  },\n  useTransition: function useTransition() {\n    var a = Kh(Jh)[0];\n    return [Th().current, a];\n  },\n  useMutableSource: Ph,\n  useOpaqueIdentifier: function useOpaqueIdentifier() {\n    return Kh(Jh)[0];\n  },\n  unstable_isNewReconciler: !1\n},\n    Fh = {\n  readContext: vg,\n  useCallback: bi,\n  useContext: vg,\n  useEffect: Xh,\n  useImperativeHandle: $h,\n  useLayoutEffect: Yh,\n  useMemo: ci,\n  useReducer: Lh,\n  useRef: Th,\n  useState: function useState() {\n    return Lh(Jh);\n  },\n  useDebugValue: ai,\n  useDeferredValue: function useDeferredValue(a) {\n    var b = Lh(Jh),\n        c = b[0],\n        d = b[1];\n    Xh(function () {\n      var b = wh.transition;\n      wh.transition = 1;\n\n      try {\n        d(a);\n      } finally {\n        wh.transition = b;\n      }\n    }, [a]);\n    return c;\n  },\n  useTransition: function useTransition() {\n    var a = Lh(Jh)[0];\n    return [Th().current, a];\n  },\n  useMutableSource: Ph,\n  useOpaqueIdentifier: function useOpaqueIdentifier() {\n    return Lh(Jh)[0];\n  },\n  unstable_isNewReconciler: !1\n},\n    ei = ra.ReactCurrentOwner,\n    ug = !1;\n\nfunction fi(a, b, c, d) {\n  b.child = null === a ? Zg(b, null, c, d) : Yg(b, a.child, c, d);\n}\n\nfunction gi(a, b, c, d, e) {\n  c = c.render;\n  var f = b.ref;\n  tg(b, e);\n  d = Ch(a, b, c, d, f, e);\n  if (null !== a && !ug) return b.updateQueue = a.updateQueue, b.flags &= -517, a.lanes &= ~e, hi(a, b, e);\n  b.flags |= 1;\n  fi(a, b, d, e);\n  return b.child;\n}\n\nfunction ii(a, b, c, d, e, f) {\n  if (null === a) {\n    var g = c.type;\n    if ("function" === typeof g && !ji(g) && void 0 === g.defaultProps && null === c.compare && void 0 === c.defaultProps) return b.tag = 15, b.type = g, ki(a, b, g, d, e, f);\n    a = Vg(c.type, null, d, b, b.mode, f);\n    a.ref = b.ref;\n    a.return = b;\n    return b.child = a;\n  }\n\n  g = a.child;\n  if (0 === (e & f) && (e = g.memoizedProps, c = c.compare, c = null !== c ? c : Je, c(e, d) && a.ref === b.ref)) return hi(a, b, f);\n  b.flags |= 1;\n  a = Tg(g, d);\n  a.ref = b.ref;\n  a.return = b;\n  return b.child = a;\n}\n\nfunction ki(a, b, c, d, e, f) {\n  if (null !== a && Je(a.memoizedProps, d) && a.ref === b.ref) if (ug = !1, 0 !== (f & e)) 0 !== (a.flags & 16384) && (ug = !0);else return b.lanes = a.lanes, hi(a, b, f);\n  return li(a, b, c, d, f);\n}\n\nfunction mi(a, b, c) {\n  var d = b.pendingProps,\n      e = d.children,\n      f = null !== a ? a.memoizedState : null;\n  if ("hidden" === d.mode || "unstable-defer-without-hiding" === d.mode) {\n    if (0 === (b.mode & 4)) b.memoizedState = {\n      baseLanes: 0\n    }, ni(b, c);else if (0 !== (c & 1073741824)) b.memoizedState = {\n      baseLanes: 0\n    }, ni(b, null !== f ? f.baseLanes : c);else return a = null !== f ? f.baseLanes | c : c, b.lanes = b.childLanes = 1073741824, b.memoizedState = {\n      baseLanes: a\n    }, ni(b, a), null;\n  } else null !== f ? (d = f.baseLanes | c, b.memoizedState = null) : d = c, ni(b, d);\n  fi(a, b, e, c);\n  return b.child;\n}\n\nfunction oi(a, b) {\n  var c = b.ref;\n  if (null === a && null !== c || null !== a && a.ref !== c) b.flags |= 128;\n}\n\nfunction li(a, b, c, d, e) {\n  var f = Ff(c) ? Df : M.current;\n  f = Ef(b, f);\n  tg(b, e);\n  c = Ch(a, b, c, d, f, e);\n  if (null !== a && !ug) return b.updateQueue = a.updateQueue, b.flags &= -517, a.lanes &= ~e, hi(a, b, e);\n  b.flags |= 1;\n  fi(a, b, c, e);\n  return b.child;\n}\n\nfunction pi(a, b, c, d, e) {\n  if (Ff(c)) {\n    var f = !0;\n    Jf(b);\n  } else f = !1;\n\n  tg(b, e);\n  if (null === b.stateNode) null !== a && (a.alternate = null, b.alternate = null, b.flags |= 2), Mg(b, c, d), Og(b, c, d, e), d = !0;else if (null === a) {\n    var g = b.stateNode,\n        h = b.memoizedProps;\n    g.props = h;\n    var k = g.context,\n        l = c.contextType;\n    "object" === _typeof(l) && null !== l ? l = vg(l) : (l = Ff(c) ? Df : M.current, l = Ef(b, l));\n    var n = c.getDerivedStateFromProps,\n        A = "function" === typeof n || "function" === typeof g.getSnapshotBeforeUpdate;\n    A || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== d || k !== l) && Ng(b, g, d, l);\n    wg = !1;\n    var p = b.memoizedState;\n    g.state = p;\n    Cg(b, d, g, e);\n    k = b.memoizedState;\n    h !== d || p !== k || N.current || wg ? ("function" === typeof n && (Gg(b, c, n, d), k = b.memoizedState), (h = wg || Lg(b, c, h, d, p, k, l)) ? (A || "function" !== typeof g.UNSAFE_componentWillMount && "function" !== typeof g.componentWillMount || ("function" === typeof g.componentWillMount && g.componentWillMount(), "function" === typeof g.UNSAFE_componentWillMount && g.UNSAFE_componentWillMount()), "function" === typeof g.componentDidMount && (b.flags |= 4)) : ("function" === typeof g.componentDidMount && (b.flags |= 4), b.memoizedProps = d, b.memoizedState = k), g.props = d, g.state = k, g.context = l, d = h) : ("function" === typeof g.componentDidMount && (b.flags |= 4), d = !1);\n  } else {\n    g = b.stateNode;\n    yg(a, b);\n    h = b.memoizedProps;\n    l = b.type === b.elementType ? h : lg(b.type, h);\n    g.props = l;\n    A = b.pendingProps;\n    p = g.context;\n    k = c.contextType;\n    "object" === _typeof(k) && null !== k ? k = vg(k) : (k = Ff(c) ? Df : M.current, k = Ef(b, k));\n    var C = c.getDerivedStateFromProps;\n    (n = "function" === typeof C || "function" === typeof g.getSnapshotBeforeUpdate) || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== A || p !== k) && Ng(b, g, d, k);\n    wg = !1;\n    p = b.memoizedState;\n    g.state = p;\n    Cg(b, d, g, e);\n    var x = b.memoizedState;\n    h !== A || p !== x || N.current || wg ? ("function" === typeof C && (Gg(b, c, C, d), x = b.memoizedState), (l = wg || Lg(b, c, l, d, p, x, k)) ? (n || "function" !== typeof g.UNSAFE_componentWillUpdate && "function" !== typeof g.componentWillUpdate || ("function" === typeof g.componentWillUpdate && g.componentWillUpdate(d, x, k), "function" === typeof g.UNSAFE_componentWillUpdate && g.UNSAFE_componentWillUpdate(d, x, k)), "function" === typeof g.componentDidUpdate && (b.flags |= 4), "function" === typeof g.getSnapshotBeforeUpdate && (b.flags |= 256)) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && p === a.memoizedState || (b.flags |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && p === a.memoizedState || (b.flags |= 256), b.memoizedProps = d, b.memoizedState = x), g.props = d, g.state = x, g.context = k, d = l) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && p === a.memoizedState || (b.flags |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && p === a.memoizedState || (b.flags |= 256), d = !1);\n  }\n  return qi(a, b, c, d, f, e);\n}\n\nfunction qi(a, b, c, d, e, f) {\n  oi(a, b);\n  var g = 0 !== (b.flags & 64);\n  if (!d && !g) return e && Kf(b, c, !1), hi(a, b, f);\n  d = b.stateNode;\n  ei.current = b;\n  var h = g && "function" !== typeof c.getDerivedStateFromError ? null : d.render();\n  b.flags |= 1;\n  null !== a && g ? (b.child = Yg(b, a.child, null, f), b.child = Yg(b, null, h, f)) : fi(a, b, h, f);\n  b.memoizedState = d.state;\n  e && Kf(b, c, !0);\n  return b.child;\n}\n\nfunction ri(a) {\n  var b = a.stateNode;\n  b.pendingContext ? Hf(a, b.pendingContext, b.pendingContext !== b.context) : b.context && Hf(a, b.context, !1);\n  eh(a, b.containerInfo);\n}\n\nvar si = {\n  dehydrated: null,\n  retryLane: 0\n};\n\nfunction ti(a, b, c) {\n  var d = b.pendingProps,\n      e = P.current,\n      f = !1,\n      g;\n  (g = 0 !== (b.flags & 64)) || (g = null !== a && null === a.memoizedState ? !1 : 0 !== (e & 2));\n  g ? (f = !0, b.flags &= -65) : null !== a && null === a.memoizedState || void 0 === d.fallback || !0 === d.unstable_avoidThisFallback || (e |= 1);\n  I(P, e & 1);\n\n  if (null === a) {\n    void 0 !== d.fallback && ph(b);\n    a = d.children;\n    e = d.fallback;\n    if (f) return a = ui(b, a, e, c), b.child.memoizedState = {\n      baseLanes: c\n    }, b.memoizedState = si, a;\n    if ("number" === typeof d.unstable_expectedLoadTime) return a = ui(b, a, e, c), b.child.memoizedState = {\n      baseLanes: c\n    }, b.memoizedState = si, b.lanes = 33554432, a;\n    c = vi({\n      mode: "visible",\n      children: a\n    }, b.mode, c, null);\n    c.return = b;\n    return b.child = c;\n  }\n\n  if (null !== a.memoizedState) {\n    if (f) return d = wi(a, b, d.children, d.fallback, c), f = b.child, e = a.child.memoizedState, f.memoizedState = null === e ? {\n      baseLanes: c\n    } : {\n      baseLanes: e.baseLanes | c\n    }, f.childLanes = a.childLanes & ~c, b.memoizedState = si, d;\n    c = xi(a, b, d.children, c);\n    b.memoizedState = null;\n    return c;\n  }\n\n  if (f) return d = wi(a, b, d.children, d.fallback, c), f = b.child, e = a.child.memoizedState, f.memoizedState = null === e ? {\n    baseLanes: c\n  } : {\n    baseLanes: e.baseLanes | c\n  }, f.childLanes = a.childLanes & ~c, b.memoizedState = si, d;\n  c = xi(a, b, d.children, c);\n  b.memoizedState = null;\n  return c;\n}\n\nfunction ui(a, b, c, d) {\n  var e = a.mode,\n      f = a.child;\n  b = {\n    mode: "hidden",\n    children: b\n  };\n  0 === (e & 2) && null !== f ? (f.childLanes = 0, f.pendingProps = b) : f = vi(b, e, 0, null);\n  c = Xg(c, e, d, null);\n  f.return = a;\n  c.return = a;\n  f.sibling = c;\n  a.child = f;\n  return c;\n}\n\nfunction xi(a, b, c, d) {\n  var e = a.child;\n  a = e.sibling;\n  c = Tg(e, {\n    mode: "visible",\n    children: c\n  });\n  0 === (b.mode & 2) && (c.lanes = d);\n  c.return = b;\n  c.sibling = null;\n  null !== a && (a.nextEffect = null, a.flags = 8, b.firstEffect = b.lastEffect = a);\n  return b.child = c;\n}\n\nfunction wi(a, b, c, d, e) {\n  var f = b.mode,\n      g = a.child;\n  a = g.sibling;\n  var h = {\n    mode: "hidden",\n    children: c\n  };\n  0 === (f & 2) && b.child !== g ? (c = b.child, c.childLanes = 0, c.pendingProps = h, g = c.lastEffect, null !== g ? (b.firstEffect = c.firstEffect, b.lastEffect = g, g.nextEffect = null) : b.firstEffect = b.lastEffect = null) : c = Tg(g, h);\n  null !== a ? d = Tg(a, d) : (d = Xg(d, f, e, null), d.flags |= 2);\n  d.return = b;\n  c.return = b;\n  c.sibling = d;\n  b.child = c;\n  return d;\n}\n\nfunction yi(a, b) {\n  a.lanes |= b;\n  var c = a.alternate;\n  null !== c && (c.lanes |= b);\n  sg(a.return, b);\n}\n\nfunction zi(a, b, c, d, e, f) {\n  var g = a.memoizedState;\n  null === g ? a.memoizedState = {\n    isBackwards: b,\n    rendering: null,\n    renderingStartTime: 0,\n    last: d,\n    tail: c,\n    tailMode: e,\n    lastEffect: f\n  } : (g.isBackwards = b, g.rendering = null, g.renderingStartTime = 0, g.last = d, g.tail = c, g.tailMode = e, g.lastEffect = f);\n}\n\nfunction Ai(a, b, c) {\n  var d = b.pendingProps,\n      e = d.revealOrder,\n      f = d.tail;\n  fi(a, b, d.children, c);\n  d = P.current;\n  if (0 !== (d & 2)) d = d & 1 | 2, b.flags |= 64;else {\n    if (null !== a && 0 !== (a.flags & 64)) a: for (a = b.child; null !== a;) {\n      if (13 === a.tag) null !== a.memoizedState && yi(a, c);else if (19 === a.tag) yi(a, c);else if (null !== a.child) {\n        a.child.return = a;\n        a = a.child;\n        continue;\n      }\n      if (a === b) break a;\n\n      for (; null === a.sibling;) {\n        if (null === a.return || a.return === b) break a;\n        a = a.return;\n      }\n\n      a.sibling.return = a.return;\n      a = a.sibling;\n    }\n    d &= 1;\n  }\n  I(P, d);\n  if (0 === (b.mode & 2)) b.memoizedState = null;else switch (e) {\n    case "forwards":\n      c = b.child;\n\n      for (e = null; null !== c;) {\n        a = c.alternate, null !== a && null === ih(a) && (e = c), c = c.sibling;\n      }\n\n      c = e;\n      null === c ? (e = b.child, b.child = null) : (e = c.sibling, c.sibling = null);\n      zi(b, !1, e, c, f, b.lastEffect);\n      break;\n\n    case "backwards":\n      c = null;\n      e = b.child;\n\n      for (b.child = null; null !== e;) {\n        a = e.alternate;\n\n        if (null !== a && null === ih(a)) {\n          b.child = e;\n          break;\n        }\n\n        a = e.sibling;\n        e.sibling = c;\n        c = e;\n        e = a;\n      }\n\n      zi(b, !0, c, null, f, b.lastEffect);\n      break;\n\n    case "together":\n      zi(b, !1, null, null, void 0, b.lastEffect);\n      break;\n\n    default:\n      b.memoizedState = null;\n  }\n  return b.child;\n}\n\nfunction hi(a, b, c) {\n  null !== a && (b.dependencies = a.dependencies);\n  Dg |= b.lanes;\n\n  if (0 !== (c & b.childLanes)) {\n    if (null !== a && b.child !== a.child) throw Error(y(153));\n\n    if (null !== b.child) {\n      a = b.child;\n      c = Tg(a, a.pendingProps);\n      b.child = c;\n\n      for (c.return = b; null !== a.sibling;) {\n        a = a.sibling, c = c.sibling = Tg(a, a.pendingProps), c.return = b;\n      }\n\n      c.sibling = null;\n    }\n\n    return b.child;\n  }\n\n  return null;\n}\n\nvar Bi, Ci, Di, Ei;\n\nBi = function Bi(a, b) {\n  for (var c = b.child; null !== c;) {\n    if (5 === c.tag || 6 === c.tag) a.appendChild(c.stateNode);else if (4 !== c.tag && null !== c.child) {\n      c.child.return = c;\n      c = c.child;\n      continue;\n    }\n    if (c === b) break;\n\n    for (; null === c.sibling;) {\n      if (null === c.return || c.return === b) return;\n      c = c.return;\n    }\n\n    c.sibling.return = c.return;\n    c = c.sibling;\n  }\n};\n\nCi = function Ci() {};\n\nDi = function Di(a, b, c, d) {\n  var e = a.memoizedProps;\n\n  if (e !== d) {\n    a = b.stateNode;\n    dh(ah.current);\n    var f = null;\n\n    switch (c) {\n      case "input":\n        e = Ya(a, e);\n        d = Ya(a, d);\n        f = [];\n        break;\n\n      case "option":\n        e = eb(a, e);\n        d = eb(a, d);\n        f = [];\n        break;\n\n      case "select":\n        e = m({}, e, {\n          value: void 0\n        });\n        d = m({}, d, {\n          value: void 0\n        });\n        f = [];\n        break;\n\n      case "textarea":\n        e = gb(a, e);\n        d = gb(a, d);\n        f = [];\n        break;\n\n      default:\n        "function" !== typeof e.onClick && "function" === typeof d.onClick && (a.onclick = jf);\n    }\n\n    vb(c, d);\n    var g;\n    c = null;\n\n    for (l in e) {\n      if (!d.hasOwnProperty(l) && e.hasOwnProperty(l) && null != e[l]) if ("style" === l) {\n        var h = e[l];\n\n        for (g in h) {\n          h.hasOwnProperty(g) && (c || (c = {}), c[g] = "");\n        }\n      } else "dangerouslySetInnerHTML" !== l && "children" !== l && "suppressContentEditableWarning" !== l && "suppressHydrationWarning" !== l && "autoFocus" !== l && (ca.hasOwnProperty(l) ? f || (f = []) : (f = f || []).push(l, null));\n    }\n\n    for (l in d) {\n      var k = d[l];\n      h = null != e ? e[l] : void 0;\n      if (d.hasOwnProperty(l) && k !== h && (null != k || null != h)) if ("style" === l) {\n        if (h) {\n          for (g in h) {\n            !h.hasOwnProperty(g) || k && k.hasOwnProperty(g) || (c || (c = {}), c[g] = "");\n          }\n\n          for (g in k) {\n            k.hasOwnProperty(g) && h[g] !== k[g] && (c || (c = {}), c[g] = k[g]);\n          }\n        } else c || (f || (f = []), f.push(l, c)), c = k;\n      } else "dangerouslySetInnerHTML" === l ? (k = k ? k.__html : void 0, h = h ? h.__html : void 0, null != k && h !== k && (f = f || []).push(l, k)) : "children" === l ? "string" !== typeof k && "number" !== typeof k || (f = f || []).push(l, "" + k) : "suppressContentEditableWarning" !== l && "suppressHydrationWarning" !== l && (ca.hasOwnProperty(l) ? (null != k && "onScroll" === l && G("scroll", a), f || h === k || (f = [])) : "object" === _typeof(k) && null !== k && k.$$typeof === Ga ? k.toString() : (f = f || []).push(l, k));\n    }\n\n    c && (f = f || []).push("style", c);\n    var l = f;\n    if (b.updateQueue = l) b.flags |= 4;\n  }\n};\n\nEi = function Ei(a, b, c, d) {\n  c !== d && (b.flags |= 4);\n};\n\nfunction Fi(a, b) {\n  if (!lh) switch (a.tailMode) {\n    case "hidden":\n      b = a.tail;\n\n      for (var c = null; null !== b;) {\n        null !== b.alternate && (c = b), b = b.sibling;\n      }\n\n      null === c ? a.tail = null : c.sibling = null;\n      break;\n\n    case "collapsed":\n      c = a.tail;\n\n      for (var d = null; null !== c;) {\n        null !== c.alternate && (d = c), c = c.sibling;\n      }\n\n      null === d ? b || null === a.tail ? a.tail = null : a.tail.sibling = null : d.sibling = null;\n  }\n}\n\nfunction Gi(a, b, c) {\n  var d = b.pendingProps;\n\n  switch (b.tag) {\n    case 2:\n    case 16:\n    case 15:\n    case 0:\n    case 11:\n    case 7:\n    case 8:\n    case 12:\n    case 9:\n    case 14:\n      return null;\n\n    case 1:\n      return Ff(b.type) && Gf(), null;\n\n    case 3:\n      fh();\n      H(N);\n      H(M);\n      uh();\n      d = b.stateNode;\n      d.pendingContext && (d.context = d.pendingContext, d.pendingContext = null);\n      if (null === a || null === a.child) rh(b) ? b.flags |= 4 : d.hydrate || (b.flags |= 256);\n      Ci(b);\n      return null;\n\n    case 5:\n      hh(b);\n      var e = dh(ch.current);\n      c = b.type;\n      if (null !== a && null != b.stateNode) Di(a, b, c, d, e), a.ref !== b.ref && (b.flags |= 128);else {\n        if (!d) {\n          if (null === b.stateNode) throw Error(y(166));\n          return null;\n        }\n\n        a = dh(ah.current);\n\n        if (rh(b)) {\n          d = b.stateNode;\n          c = b.type;\n          var f = b.memoizedProps;\n          d[wf] = b;\n          d[xf] = f;\n\n          switch (c) {\n            case "dialog":\n              G("cancel", d);\n              G("close", d);\n              break;\n\n            case "iframe":\n            case "object":\n            case "embed":\n              G("load", d);\n              break;\n\n            case "video":\n            case "audio":\n              for (a = 0; a < Xe.length; a++) {\n                G(Xe[a], d);\n              }\n\n              break;\n\n            case "source":\n              G("error", d);\n              break;\n\n            case "img":\n            case "image":\n            case "link":\n              G("error", d);\n              G("load", d);\n              break;\n\n            case "details":\n              G("toggle", d);\n              break;\n\n            case "input":\n              Za(d, f);\n              G("invalid", d);\n              break;\n\n            case "select":\n              d._wrapperState = {\n                wasMultiple: !!f.multiple\n              };\n              G("invalid", d);\n              break;\n\n            case "textarea":\n              hb(d, f), G("invalid", d);\n          }\n\n          vb(c, f);\n          a = null;\n\n          for (var g in f) {\n            f.hasOwnProperty(g) && (e = f[g], "children" === g ? "string" === typeof e ? d.textContent !== e && (a = ["children", e]) : "number" === typeof e && d.textContent !== "" + e && (a = ["children", "" + e]) : ca.hasOwnProperty(g) && null != e && "onScroll" === g && G("scroll", d));\n          }\n\n          switch (c) {\n            case "input":\n              Va(d);\n              cb(d, f, !0);\n              break;\n\n            case "textarea":\n              Va(d);\n              jb(d);\n              break;\n\n            case "select":\n            case "option":\n              break;\n\n            default:\n              "function" === typeof f.onClick && (d.onclick = jf);\n          }\n\n          d = a;\n          b.updateQueue = d;\n          null !== d && (b.flags |= 4);\n        } else {\n          g = 9 === e.nodeType ? e : e.ownerDocument;\n          a === kb.html && (a = lb(c));\n          a === kb.html ? "script" === c ? (a = g.createElement("div"), a.innerHTML = "<script>\\x3c/script>", a = a.removeChild(a.firstChild)) : "string" === typeof d.is ? a = g.createElement(c, {\n            is: d.is\n          }) : (a = g.createElement(c), "select" === c && (g = a, d.multiple ? g.multiple = !0 : d.size && (g.size = d.size))) : a = g.createElementNS(a, c);\n          a[wf] = b;\n          a[xf] = d;\n          Bi(a, b, !1, !1);\n          b.stateNode = a;\n          g = wb(c, d);\n\n          switch (c) {\n            case "dialog":\n              G("cancel", a);\n              G("close", a);\n              e = d;\n              break;\n\n            case "iframe":\n            case "object":\n            case "embed":\n              G("load", a);\n              e = d;\n              break;\n\n            case "video":\n            case "audio":\n              for (e = 0; e < Xe.length; e++) {\n                G(Xe[e], a);\n              }\n\n              e = d;\n              break;\n\n            case "source":\n              G("error", a);\n              e = d;\n              break;\n\n            case "img":\n            case "image":\n            case "link":\n              G("error", a);\n              G("load", a);\n              e = d;\n              break;\n\n            case "details":\n              G("toggle", a);\n              e = d;\n              break;\n\n            case "input":\n              Za(a, d);\n              e = Ya(a, d);\n              G("invalid", a);\n              break;\n\n            case "option":\n              e = eb(a, d);\n              break;\n\n            case "select":\n              a._wrapperState = {\n                wasMultiple: !!d.multiple\n              };\n              e = m({}, d, {\n                value: void 0\n              });\n              G("invalid", a);\n              break;\n\n            case "textarea":\n              hb(a, d);\n              e = gb(a, d);\n              G("invalid", a);\n              break;\n\n            default:\n              e = d;\n          }\n\n          vb(c, e);\n          var h = e;\n\n          for (f in h) {\n            if (h.hasOwnProperty(f)) {\n              var k = h[f];\n              "style" === f ? tb(a, k) : "dangerouslySetInnerHTML" === f ? (k = k ? k.__html : void 0, null != k && ob(a, k)) : "children" === f ? "string" === typeof k ? ("textarea" !== c || "" !== k) && pb(a, k) : "number" === typeof k && pb(a, "" + k) : "suppressContentEditableWarning" !== f && "suppressHydrationWarning" !== f && "autoFocus" !== f && (ca.hasOwnProperty(f) ? null != k && "onScroll" === f && G("scroll", a) : null != k && qa(a, f, k, g));\n            }\n          }\n\n          switch (c) {\n            case "input":\n              Va(a);\n              cb(a, d, !1);\n              break;\n\n            case "textarea":\n              Va(a);\n              jb(a);\n              break;\n\n            case "option":\n              null != d.value && a.setAttribute("value", "" + Sa(d.value));\n              break;\n\n            case "select":\n              a.multiple = !!d.multiple;\n              f = d.value;\n              null != f ? fb(a, !!d.multiple, f, !1) : null != d.defaultValue && fb(a, !!d.multiple, d.defaultValue, !0);\n              break;\n\n            default:\n              "function" === typeof e.onClick && (a.onclick = jf);\n          }\n\n          mf(c, d) && (b.flags |= 4);\n        }\n\n        null !== b.ref && (b.flags |= 128);\n      }\n      return null;\n\n    case 6:\n      if (a && null != b.stateNode) Ei(a, b, a.memoizedProps, d);else {\n        if ("string" !== typeof d && null === b.stateNode) throw Error(y(166));\n        c = dh(ch.current);\n        dh(ah.current);\n        rh(b) ? (d = b.stateNode, c = b.memoizedProps, d[wf] = b, d.nodeValue !== c && (b.flags |= 4)) : (d = (9 === c.nodeType ? c : c.ownerDocument).createTextNode(d), d[wf] = b, b.stateNode = d);\n      }\n      return null;\n\n    case 13:\n      H(P);\n      d = b.memoizedState;\n      if (0 !== (b.flags & 64)) return b.lanes = c, b;\n      d = null !== d;\n      c = !1;\n      null === a ? void 0 !== b.memoizedProps.fallback && rh(b) : c = null !== a.memoizedState;\n      if (d && !c && 0 !== (b.mode & 2)) if (null === a && !0 !== b.memoizedProps.unstable_avoidThisFallback || 0 !== (P.current & 1)) 0 === V && (V = 3);else {\n        if (0 === V || 3 === V) V = 4;\n        null === U || 0 === (Dg & 134217727) && 0 === (Hi & 134217727) || Ii(U, W);\n      }\n      if (d || c) b.flags |= 4;\n      return null;\n\n    case 4:\n      return fh(), Ci(b), null === a && cf(b.stateNode.containerInfo), null;\n\n    case 10:\n      return rg(b), null;\n\n    case 17:\n      return Ff(b.type) && Gf(), null;\n\n    case 19:\n      H(P);\n      d = b.memoizedState;\n      if (null === d) return null;\n      f = 0 !== (b.flags & 64);\n      g = d.rendering;\n      if (null === g) {\n        if (f) Fi(d, !1);else {\n          if (0 !== V || null !== a && 0 !== (a.flags & 64)) for (a = b.child; null !== a;) {\n            g = ih(a);\n\n            if (null !== g) {\n              b.flags |= 64;\n              Fi(d, !1);\n              f = g.updateQueue;\n              null !== f && (b.updateQueue = f, b.flags |= 4);\n              null === d.lastEffect && (b.firstEffect = null);\n              b.lastEffect = d.lastEffect;\n              d = c;\n\n              for (c = b.child; null !== c;) {\n                f = c, a = d, f.flags &= 2, f.nextEffect = null, f.firstEffect = null, f.lastEffect = null, g = f.alternate, null === g ? (f.childLanes = 0, f.lanes = a, f.child = null, f.memoizedProps = null, f.memoizedState = null, f.updateQueue = null, f.dependencies = null, f.stateNode = null) : (f.childLanes = g.childLanes, f.lanes = g.lanes, f.child = g.child, f.memoizedProps = g.memoizedProps, f.memoizedState = g.memoizedState, f.updateQueue = g.updateQueue, f.type = g.type, a = g.dependencies, f.dependencies = null === a ? null : {\n                  lanes: a.lanes,\n                  firstContext: a.firstContext\n                }), c = c.sibling;\n              }\n\n              I(P, P.current & 1 | 2);\n              return b.child;\n            }\n\n            a = a.sibling;\n          }\n          null !== d.tail && O() > Ji && (b.flags |= 64, f = !0, Fi(d, !1), b.lanes = 33554432);\n        }\n      } else {\n        if (!f) if (a = ih(g), null !== a) {\n          if (b.flags |= 64, f = !0, c = a.updateQueue, null !== c && (b.updateQueue = c, b.flags |= 4), Fi(d, !0), null === d.tail && "hidden" === d.tailMode && !g.alternate && !lh) return b = b.lastEffect = d.lastEffect, null !== b && (b.nextEffect = null), null;\n        } else 2 * O() - d.renderingStartTime > Ji && 1073741824 !== c && (b.flags |= 64, f = !0, Fi(d, !1), b.lanes = 33554432);\n        d.isBackwards ? (g.sibling = b.child, b.child = g) : (c = d.last, null !== c ? c.sibling = g : b.child = g, d.last = g);\n      }\n      return null !== d.tail ? (c = d.tail, d.rendering = c, d.tail = c.sibling, d.lastEffect = b.lastEffect, d.renderingStartTime = O(), c.sibling = null, b = P.current, I(P, f ? b & 1 | 2 : b & 1), c) : null;\n\n    case 23:\n    case 24:\n      return Ki(), null !== a && null !== a.memoizedState !== (null !== b.memoizedState) && "unstable-defer-without-hiding" !== d.mode && (b.flags |= 4), null;\n  }\n\n  throw Error(y(156, b.tag));\n}\n\nfunction Li(a) {\n  switch (a.tag) {\n    case 1:\n      Ff(a.type) && Gf();\n      var b = a.flags;\n      return b & 4096 ? (a.flags = b & -4097 | 64, a) : null;\n\n    case 3:\n      fh();\n      H(N);\n      H(M);\n      uh();\n      b = a.flags;\n      if (0 !== (b & 64)) throw Error(y(285));\n      a.flags = b & -4097 | 64;\n      return a;\n\n    case 5:\n      return hh(a), null;\n\n    case 13:\n      return H(P), b = a.flags, b & 4096 ? (a.flags = b & -4097 | 64, a) : null;\n\n    case 19:\n      return H(P), null;\n\n    case 4:\n      return fh(), null;\n\n    case 10:\n      return rg(a), null;\n\n    case 23:\n    case 24:\n      return Ki(), null;\n\n    default:\n      return null;\n  }\n}\n\nfunction Mi(a, b) {\n  try {\n    var c = "",\n        d = b;\n\n    do {\n      c += Qa(d), d = d.return;\n    } while (d);\n\n    var e = c;\n  } catch (f) {\n    e = "\\nError generating stack: " + f.message + "\\n" + f.stack;\n  }\n\n  return {\n    value: a,\n    source: b,\n    stack: e\n  };\n}\n\nfunction Ni(a, b) {\n  try {\n    console.error(b.value);\n  } catch (c) {\n    setTimeout(function () {\n      throw c;\n    });\n  }\n}\n\nvar Oi = "function" === typeof WeakMap ? WeakMap : Map;\n\nfunction Pi(a, b, c) {\n  c = zg(-1, c);\n  c.tag = 3;\n  c.payload = {\n    element: null\n  };\n  var d = b.value;\n\n  c.callback = function () {\n    Qi || (Qi = !0, Ri = d);\n    Ni(a, b);\n  };\n\n  return c;\n}\n\nfunction Si(a, b, c) {\n  c = zg(-1, c);\n  c.tag = 3;\n  var d = a.type.getDerivedStateFromError;\n\n  if ("function" === typeof d) {\n    var e = b.value;\n\n    c.payload = function () {\n      Ni(a, b);\n      return d(e);\n    };\n  }\n\n  var f = a.stateNode;\n  null !== f && "function" === typeof f.componentDidCatch && (c.callback = function () {\n    "function" !== typeof d && (null === Ti ? Ti = new Set([this]) : Ti.add(this), Ni(a, b));\n    var c = b.stack;\n    this.componentDidCatch(b.value, {\n      componentStack: null !== c ? c : ""\n    });\n  });\n  return c;\n}\n\nvar Ui = "function" === typeof WeakSet ? WeakSet : Set;\n\nfunction Vi(a) {\n  var b = a.ref;\n  if (null !== b) if ("function" === typeof b) try {\n    b(null);\n  } catch (c) {\n    Wi(a, c);\n  } else b.current = null;\n}\n\nfunction Xi(a, b) {\n  switch (b.tag) {\n    case 0:\n    case 11:\n    case 15:\n    case 22:\n      return;\n\n    case 1:\n      if (b.flags & 256 && null !== a) {\n        var c = a.memoizedProps,\n            d = a.memoizedState;\n        a = b.stateNode;\n        b = a.getSnapshotBeforeUpdate(b.elementType === b.type ? c : lg(b.type, c), d);\n        a.__reactInternalSnapshotBeforeUpdate = b;\n      }\n\n      return;\n\n    case 3:\n      b.flags & 256 && qf(b.stateNode.containerInfo);\n      return;\n\n    case 5:\n    case 6:\n    case 4:\n    case 17:\n      return;\n  }\n\n  throw Error(y(163));\n}\n\nfunction Yi(a, b, c) {\n  switch (c.tag) {\n    case 0:\n    case 11:\n    case 15:\n    case 22:\n      b = c.updateQueue;\n      b = null !== b ? b.lastEffect : null;\n\n      if (null !== b) {\n        a = b = b.next;\n\n        do {\n          if (3 === (a.tag & 3)) {\n            var d = a.create;\n            a.destroy = d();\n          }\n\n          a = a.next;\n        } while (a !== b);\n      }\n\n      b = c.updateQueue;\n      b = null !== b ? b.lastEffect : null;\n\n      if (null !== b) {\n        a = b = b.next;\n\n        do {\n          var e = a;\n          d = e.next;\n          e = e.tag;\n          0 !== (e & 4) && 0 !== (e & 1) && (Zi(c, a), $i(c, a));\n          a = d;\n        } while (a !== b);\n      }\n\n      return;\n\n    case 1:\n      a = c.stateNode;\n      c.flags & 4 && (null === b ? a.componentDidMount() : (d = c.elementType === c.type ? b.memoizedProps : lg(c.type, b.memoizedProps), a.componentDidUpdate(d, b.memoizedState, a.__reactInternalSnapshotBeforeUpdate)));\n      b = c.updateQueue;\n      null !== b && Eg(c, b, a);\n      return;\n\n    case 3:\n      b = c.updateQueue;\n\n      if (null !== b) {\n        a = null;\n        if (null !== c.child) switch (c.child.tag) {\n          case 5:\n            a = c.child.stateNode;\n            break;\n\n          case 1:\n            a = c.child.stateNode;\n        }\n        Eg(c, b, a);\n      }\n\n      return;\n\n    case 5:\n      a = c.stateNode;\n      null === b && c.flags & 4 && mf(c.type, c.memoizedProps) && a.focus();\n      return;\n\n    case 6:\n      return;\n\n    case 4:\n      return;\n\n    case 12:\n      return;\n\n    case 13:\n      null === c.memoizedState && (c = c.alternate, null !== c && (c = c.memoizedState, null !== c && (c = c.dehydrated, null !== c && Cc(c))));\n      return;\n\n    case 19:\n    case 17:\n    case 20:\n    case 21:\n    case 23:\n    case 24:\n      return;\n  }\n\n  throw Error(y(163));\n}\n\nfunction aj(a, b) {\n  for (var c = a;;) {\n    if (5 === c.tag) {\n      var d = c.stateNode;\n      if (b) d = d.style, "function" === typeof d.setProperty ? d.setProperty("display", "none", "important") : d.display = "none";else {\n        d = c.stateNode;\n        var e = c.memoizedProps.style;\n        e = void 0 !== e && null !== e && e.hasOwnProperty("display") ? e.display : null;\n        d.style.display = sb("display", e);\n      }\n    } else if (6 === c.tag) c.stateNode.nodeValue = b ? "" : c.memoizedProps;else if ((23 !== c.tag && 24 !== c.tag || null === c.memoizedState || c === a) && null !== c.child) {\n      c.child.return = c;\n      c = c.child;\n      continue;\n    }\n\n    if (c === a) break;\n\n    for (; null === c.sibling;) {\n      if (null === c.return || c.return === a) return;\n      c = c.return;\n    }\n\n    c.sibling.return = c.return;\n    c = c.sibling;\n  }\n}\n\nfunction bj(a, b) {\n  if (Mf && "function" === typeof Mf.onCommitFiberUnmount) try {\n    Mf.onCommitFiberUnmount(Lf, b);\n  } catch (f) {}\n\n  switch (b.tag) {\n    case 0:\n    case 11:\n    case 14:\n    case 15:\n    case 22:\n      a = b.updateQueue;\n\n      if (null !== a && (a = a.lastEffect, null !== a)) {\n        var c = a = a.next;\n\n        do {\n          var d = c,\n              e = d.destroy;\n          d = d.tag;\n          if (void 0 !== e) if (0 !== (d & 4)) Zi(b, c);else {\n            d = b;\n\n            try {\n              e();\n            } catch (f) {\n              Wi(d, f);\n            }\n          }\n          c = c.next;\n        } while (c !== a);\n      }\n\n      break;\n\n    case 1:\n      Vi(b);\n      a = b.stateNode;\n      if ("function" === typeof a.componentWillUnmount) try {\n        a.props = b.memoizedProps, a.state = b.memoizedState, a.componentWillUnmount();\n      } catch (f) {\n        Wi(b, f);\n      }\n      break;\n\n    case 5:\n      Vi(b);\n      break;\n\n    case 4:\n      cj(a, b);\n  }\n}\n\nfunction dj(a) {\n  a.alternate = null;\n  a.child = null;\n  a.dependencies = null;\n  a.firstEffect = null;\n  a.lastEffect = null;\n  a.memoizedProps = null;\n  a.memoizedState = null;\n  a.pendingProps = null;\n  a.return = null;\n  a.updateQueue = null;\n}\n\nfunction ej(a) {\n  return 5 === a.tag || 3 === a.tag || 4 === a.tag;\n}\n\nfunction fj(a) {\n  a: {\n    for (var b = a.return; null !== b;) {\n      if (ej(b)) break a;\n      b = b.return;\n    }\n\n    throw Error(y(160));\n  }\n\n  var c = b;\n  b = c.stateNode;\n\n  switch (c.tag) {\n    case 5:\n      var d = !1;\n      break;\n\n    case 3:\n      b = b.containerInfo;\n      d = !0;\n      break;\n\n    case 4:\n      b = b.containerInfo;\n      d = !0;\n      break;\n\n    default:\n      throw Error(y(161));\n  }\n\n  c.flags & 16 && (pb(b, ""), c.flags &= -17);\n\n  a: b: for (c = a;;) {\n    for (; null === c.sibling;) {\n      if (null === c.return || ej(c.return)) {\n        c = null;\n        break a;\n      }\n\n      c = c.return;\n    }\n\n    c.sibling.return = c.return;\n\n    for (c = c.sibling; 5 !== c.tag && 6 !== c.tag && 18 !== c.tag;) {\n      if (c.flags & 2) continue b;\n      if (null === c.child || 4 === c.tag) continue b;else c.child.return = c, c = c.child;\n    }\n\n    if (!(c.flags & 2)) {\n      c = c.stateNode;\n      break a;\n    }\n  }\n\n  d ? gj(a, c, b) : hj(a, c, b);\n}\n\nfunction gj(a, b, c) {\n  var d = a.tag,\n      e = 5 === d || 6 === d;\n  if (e) a = e ? a.stateNode : a.stateNode.instance, b ? 8 === c.nodeType ? c.parentNode.insertBefore(a, b) : c.insertBefore(a, b) : (8 === c.nodeType ? (b = c.parentNode, b.insertBefore(a, c)) : (b = c, b.appendChild(a)), c = c._reactRootContainer, null !== c && void 0 !== c || null !== b.onclick || (b.onclick = jf));else if (4 !== d && (a = a.child, null !== a)) for (gj(a, b, c), a = a.sibling; null !== a;) {\n    gj(a, b, c), a = a.sibling;\n  }\n}\n\nfunction hj(a, b, c) {\n  var d = a.tag,\n      e = 5 === d || 6 === d;\n  if (e) a = e ? a.stateNode : a.stateNode.instance, b ? c.insertBefore(a, b) : c.appendChild(a);else if (4 !== d && (a = a.child, null !== a)) for (hj(a, b, c), a = a.sibling; null !== a;) {\n    hj(a, b, c), a = a.sibling;\n  }\n}\n\nfunction cj(a, b) {\n  for (var c = b, d = !1, e, f;;) {\n    if (!d) {\n      d = c.return;\n\n      a: for (;;) {\n        if (null === d) throw Error(y(160));\n        e = d.stateNode;\n\n        switch (d.tag) {\n          case 5:\n            f = !1;\n            break a;\n\n          case 3:\n            e = e.containerInfo;\n            f = !0;\n            break a;\n\n          case 4:\n            e = e.containerInfo;\n            f = !0;\n            break a;\n        }\n\n        d = d.return;\n      }\n\n      d = !0;\n    }\n\n    if (5 === c.tag || 6 === c.tag) {\n      a: for (var g = a, h = c, k = h;;) {\n        if (bj(g, k), null !== k.child && 4 !== k.tag) k.child.return = k, k = k.child;else {\n          if (k === h) break a;\n\n          for (; null === k.sibling;) {\n            if (null === k.return || k.return === h) break a;\n            k = k.return;\n          }\n\n          k.sibling.return = k.return;\n          k = k.sibling;\n        }\n      }\n\n      f ? (g = e, h = c.stateNode, 8 === g.nodeType ? g.parentNode.removeChild(h) : g.removeChild(h)) : e.removeChild(c.stateNode);\n    } else if (4 === c.tag) {\n      if (null !== c.child) {\n        e = c.stateNode.containerInfo;\n        f = !0;\n        c.child.return = c;\n        c = c.child;\n        continue;\n      }\n    } else if (bj(a, c), null !== c.child) {\n      c.child.return = c;\n      c = c.child;\n      continue;\n    }\n\n    if (c === b) break;\n\n    for (; null === c.sibling;) {\n      if (null === c.return || c.return === b) return;\n      c = c.return;\n      4 === c.tag && (d = !1);\n    }\n\n    c.sibling.return = c.return;\n    c = c.sibling;\n  }\n}\n\nfunction ij(a, b) {\n  switch (b.tag) {\n    case 0:\n    case 11:\n    case 14:\n    case 15:\n    case 22:\n      var c = b.updateQueue;\n      c = null !== c ? c.lastEffect : null;\n\n      if (null !== c) {\n        var d = c = c.next;\n\n        do {\n          3 === (d.tag & 3) && (a = d.destroy, d.destroy = void 0, void 0 !== a && a()), d = d.next;\n        } while (d !== c);\n      }\n\n      return;\n\n    case 1:\n      return;\n\n    case 5:\n      c = b.stateNode;\n\n      if (null != c) {\n        d = b.memoizedProps;\n        var e = null !== a ? a.memoizedProps : d;\n        a = b.type;\n        var f = b.updateQueue;\n        b.updateQueue = null;\n\n        if (null !== f) {\n          c[xf] = d;\n          "input" === a && "radio" === d.type && null != d.name && $a(c, d);\n          wb(a, e);\n          b = wb(a, d);\n\n          for (e = 0; e < f.length; e += 2) {\n            var g = f[e],\n                h = f[e + 1];\n            "style" === g ? tb(c, h) : "dangerouslySetInnerHTML" === g ? ob(c, h) : "children" === g ? pb(c, h) : qa(c, g, h, b);\n          }\n\n          switch (a) {\n            case "input":\n              ab(c, d);\n              break;\n\n            case "textarea":\n              ib(c, d);\n              break;\n\n            case "select":\n              a = c._wrapperState.wasMultiple, c._wrapperState.wasMultiple = !!d.multiple, f = d.value, null != f ? fb(c, !!d.multiple, f, !1) : a !== !!d.multiple && (null != d.defaultValue ? fb(c, !!d.multiple, d.defaultValue, !0) : fb(c, !!d.multiple, d.multiple ? [] : "", !1));\n          }\n        }\n      }\n\n      return;\n\n    case 6:\n      if (null === b.stateNode) throw Error(y(162));\n      b.stateNode.nodeValue = b.memoizedProps;\n      return;\n\n    case 3:\n      c = b.stateNode;\n      c.hydrate && (c.hydrate = !1, Cc(c.containerInfo));\n      return;\n\n    case 12:\n      return;\n\n    case 13:\n      null !== b.memoizedState && (jj = O(), aj(b.child, !0));\n      kj(b);\n      return;\n\n    case 19:\n      kj(b);\n      return;\n\n    case 17:\n      return;\n\n    case 23:\n    case 24:\n      aj(b, null !== b.memoizedState);\n      return;\n  }\n\n  throw Error(y(163));\n}\n\nfunction kj(a) {\n  var b = a.updateQueue;\n\n  if (null !== b) {\n    a.updateQueue = null;\n    var c = a.stateNode;\n    null === c && (c = a.stateNode = new Ui());\n    b.forEach(function (b) {\n      var d = lj.bind(null, a, b);\n      c.has(b) || (c.add(b), b.then(d, d));\n    });\n  }\n}\n\nfunction mj(a, b) {\n  return null !== a && (a = a.memoizedState, null === a || null !== a.dehydrated) ? (b = b.memoizedState, null !== b && null === b.dehydrated) : !1;\n}\n\nvar nj = Math.ceil,\n    oj = ra.ReactCurrentDispatcher,\n    pj = ra.ReactCurrentOwner,\n    X = 0,\n    U = null,\n    Y = null,\n    W = 0,\n    qj = 0,\n    rj = Bf(0),\n    V = 0,\n    sj = null,\n    tj = 0,\n    Dg = 0,\n    Hi = 0,\n    uj = 0,\n    vj = null,\n    jj = 0,\n    Ji = Infinity;\n\nfunction wj() {\n  Ji = O() + 500;\n}\n\nvar Z = null,\n    Qi = !1,\n    Ri = null,\n    Ti = null,\n    xj = !1,\n    yj = null,\n    zj = 90,\n    Aj = [],\n    Bj = [],\n    Cj = null,\n    Dj = 0,\n    Ej = null,\n    Fj = -1,\n    Gj = 0,\n    Hj = 0,\n    Ij = null,\n    Jj = !1;\n\nfunction Hg() {\n  return 0 !== (X & 48) ? O() : -1 !== Fj ? Fj : Fj = O();\n}\n\nfunction Ig(a) {\n  a = a.mode;\n  if (0 === (a & 2)) return 1;\n  if (0 === (a & 4)) return 99 === eg() ? 1 : 2;\n  0 === Gj && (Gj = tj);\n\n  if (0 !== kg.transition) {\n    0 !== Hj && (Hj = null !== vj ? vj.pendingLanes : 0);\n    a = Gj;\n    var b = 4186112 & ~Hj;\n    b &= -b;\n    0 === b && (a = 4186112 & ~a, b = a & -a, 0 === b && (b = 8192));\n    return b;\n  }\n\n  a = eg();\n  0 !== (X & 4) && 98 === a ? a = Xc(12, Gj) : (a = Sc(a), a = Xc(a, Gj));\n  return a;\n}\n\nfunction Jg(a, b, c) {\n  if (50 < Dj) throw Dj = 0, Ej = null, Error(y(185));\n  a = Kj(a, b);\n  if (null === a) return null;\n  $c(a, b, c);\n  a === U && (Hi |= b, 4 === V && Ii(a, W));\n  var d = eg();\n  1 === b ? 0 !== (X & 8) && 0 === (X & 48) ? Lj(a) : (Mj(a, c), 0 === X && (wj(), ig())) : (0 === (X & 4) || 98 !== d && 99 !== d || (null === Cj ? Cj = new Set([a]) : Cj.add(a)), Mj(a, c));\n  vj = a;\n}\n\nfunction Kj(a, b) {\n  a.lanes |= b;\n  var c = a.alternate;\n  null !== c && (c.lanes |= b);\n  c = a;\n\n  for (a = a.return; null !== a;) {\n    a.childLanes |= b, c = a.alternate, null !== c && (c.childLanes |= b), c = a, a = a.return;\n  }\n\n  return 3 === c.tag ? c.stateNode : null;\n}\n\nfunction Mj(a, b) {\n  for (var c = a.callbackNode, d = a.suspendedLanes, e = a.pingedLanes, f = a.expirationTimes, g = a.pendingLanes; 0 < g;) {\n    var h = 31 - Vc(g),\n        k = 1 << h,\n        l = f[h];\n\n    if (-1 === l) {\n      if (0 === (k & d) || 0 !== (k & e)) {\n        l = b;\n        Rc(k);\n        var n = F;\n        f[h] = 10 <= n ? l + 250 : 6 <= n ? l + 5E3 : -1;\n      }\n    } else l <= b && (a.expiredLanes |= k);\n\n    g &= ~k;\n  }\n\n  d = Uc(a, a === U ? W : 0);\n  b = F;\n  if (0 === d) null !== c && (c !== Zf && Pf(c), a.callbackNode = null, a.callbackPriority = 0);else {\n    if (null !== c) {\n      if (a.callbackPriority === b) return;\n      c !== Zf && Pf(c);\n    }\n\n    15 === b ? (c = Lj.bind(null, a), null === ag ? (ag = [c], bg = Of(Uf, jg)) : ag.push(c), c = Zf) : 14 === b ? c = hg(99, Lj.bind(null, a)) : (c = Tc(b), c = hg(c, Nj.bind(null, a)));\n    a.callbackPriority = b;\n    a.callbackNode = c;\n  }\n}\n\nfunction Nj(a) {\n  Fj = -1;\n  Hj = Gj = 0;\n  if (0 !== (X & 48)) throw Error(y(327));\n  var b = a.callbackNode;\n  if (Oj() && a.callbackNode !== b) return null;\n  var c = Uc(a, a === U ? W : 0);\n  if (0 === c) return null;\n  var d = c;\n  var e = X;\n  X |= 16;\n  var f = Pj();\n  if (U !== a || W !== d) wj(), Qj(a, d);\n\n  do {\n    try {\n      Rj();\n      break;\n    } catch (h) {\n      Sj(a, h);\n    }\n  } while (1);\n\n  qg();\n  oj.current = f;\n  X = e;\n  null !== Y ? d = 0 : (U = null, W = 0, d = V);\n  if (0 !== (tj & Hi)) Qj(a, 0);else if (0 !== d) {\n    2 === d && (X |= 64, a.hydrate && (a.hydrate = !1, qf(a.containerInfo)), c = Wc(a), 0 !== c && (d = Tj(a, c)));\n    if (1 === d) throw b = sj, Qj(a, 0), Ii(a, c), Mj(a, O()), b;\n    a.finishedWork = a.current.alternate;\n    a.finishedLanes = c;\n\n    switch (d) {\n      case 0:\n      case 1:\n        throw Error(y(345));\n\n      case 2:\n        Uj(a);\n        break;\n\n      case 3:\n        Ii(a, c);\n\n        if ((c & 62914560) === c && (d = jj + 500 - O(), 10 < d)) {\n          if (0 !== Uc(a, 0)) break;\n          e = a.suspendedLanes;\n\n          if ((e & c) !== c) {\n            Hg();\n            a.pingedLanes |= a.suspendedLanes & e;\n            break;\n          }\n\n          a.timeoutHandle = of(Uj.bind(null, a), d);\n          break;\n        }\n\n        Uj(a);\n        break;\n\n      case 4:\n        Ii(a, c);\n        if ((c & 4186112) === c) break;\n        d = a.eventTimes;\n\n        for (e = -1; 0 < c;) {\n          var g = 31 - Vc(c);\n          f = 1 << g;\n          g = d[g];\n          g > e && (e = g);\n          c &= ~f;\n        }\n\n        c = e;\n        c = O() - c;\n        c = (120 > c ? 120 : 480 > c ? 480 : 1080 > c ? 1080 : 1920 > c ? 1920 : 3E3 > c ? 3E3 : 4320 > c ? 4320 : 1960 * nj(c / 1960)) - c;\n\n        if (10 < c) {\n          a.timeoutHandle = of(Uj.bind(null, a), c);\n          break;\n        }\n\n        Uj(a);\n        break;\n\n      case 5:\n        Uj(a);\n        break;\n\n      default:\n        throw Error(y(329));\n    }\n  }\n  Mj(a, O());\n  return a.callbackNode === b ? Nj.bind(null, a) : null;\n}\n\nfunction Ii(a, b) {\n  b &= ~uj;\n  b &= ~Hi;\n  a.suspendedLanes |= b;\n  a.pingedLanes &= ~b;\n\n  for (a = a.expirationTimes; 0 < b;) {\n    var c = 31 - Vc(b),\n        d = 1 << c;\n    a[c] = -1;\n    b &= ~d;\n  }\n}\n\nfunction Lj(a) {\n  if (0 !== (X & 48)) throw Error(y(327));\n  Oj();\n\n  if (a === U && 0 !== (a.expiredLanes & W)) {\n    var b = W;\n    var c = Tj(a, b);\n    0 !== (tj & Hi) && (b = Uc(a, b), c = Tj(a, b));\n  } else b = Uc(a, 0), c = Tj(a, b);\n\n  0 !== a.tag && 2 === c && (X |= 64, a.hydrate && (a.hydrate = !1, qf(a.containerInfo)), b = Wc(a), 0 !== b && (c = Tj(a, b)));\n  if (1 === c) throw c = sj, Qj(a, 0), Ii(a, b), Mj(a, O()), c;\n  a.finishedWork = a.current.alternate;\n  a.finishedLanes = b;\n  Uj(a);\n  Mj(a, O());\n  return null;\n}\n\nfunction Vj() {\n  if (null !== Cj) {\n    var a = Cj;\n    Cj = null;\n    a.forEach(function (a) {\n      a.expiredLanes |= 24 & a.pendingLanes;\n      Mj(a, O());\n    });\n  }\n\n  ig();\n}\n\nfunction Wj(a, b) {\n  var c = X;\n  X |= 1;\n\n  try {\n    return a(b);\n  } finally {\n    X = c, 0 === X && (wj(), ig());\n  }\n}\n\nfunction Xj(a, b) {\n  var c = X;\n  X &= -2;\n  X |= 8;\n\n  try {\n    return a(b);\n  } finally {\n    X = c, 0 === X && (wj(), ig());\n  }\n}\n\nfunction ni(a, b) {\n  I(rj, qj);\n  qj |= b;\n  tj |= b;\n}\n\nfunction Ki() {\n  qj = rj.current;\n  H(rj);\n}\n\nfunction Qj(a, b) {\n  a.finishedWork = null;\n  a.finishedLanes = 0;\n  var c = a.timeoutHandle;\n  -1 !== c && (a.timeoutHandle = -1, pf(c));\n  if (null !== Y) for (c = Y.return; null !== c;) {\n    var d = c;\n\n    switch (d.tag) {\n      case 1:\n        d = d.type.childContextTypes;\n        null !== d && void 0 !== d && Gf();\n        break;\n\n      case 3:\n        fh();\n        H(N);\n        H(M);\n        uh();\n        break;\n\n      case 5:\n        hh(d);\n        break;\n\n      case 4:\n        fh();\n        break;\n\n      case 13:\n        H(P);\n        break;\n\n      case 19:\n        H(P);\n        break;\n\n      case 10:\n        rg(d);\n        break;\n\n      case 23:\n      case 24:\n        Ki();\n    }\n\n    c = c.return;\n  }\n  U = a;\n  Y = Tg(a.current, null);\n  W = qj = tj = b;\n  V = 0;\n  sj = null;\n  uj = Hi = Dg = 0;\n}\n\nfunction Sj(a, b) {\n  do {\n    var c = Y;\n\n    try {\n      qg();\n      vh.current = Gh;\n\n      if (yh) {\n        for (var d = R.memoizedState; null !== d;) {\n          var e = d.queue;\n          null !== e && (e.pending = null);\n          d = d.next;\n        }\n\n        yh = !1;\n      }\n\n      xh = 0;\n      T = S = R = null;\n      zh = !1;\n      pj.current = null;\n\n      if (null === c || null === c.return) {\n        V = 1;\n        sj = b;\n        Y = null;\n        break;\n      }\n\n      a: {\n        var f = a,\n            g = c.return,\n            h = c,\n            k = b;\n        b = W;\n        h.flags |= 2048;\n        h.firstEffect = h.lastEffect = null;\n\n        if (null !== k && "object" === _typeof(k) && "function" === typeof k.then) {\n          var l = k;\n\n          if (0 === (h.mode & 2)) {\n            var n = h.alternate;\n            n ? (h.updateQueue = n.updateQueue, h.memoizedState = n.memoizedState, h.lanes = n.lanes) : (h.updateQueue = null, h.memoizedState = null);\n          }\n\n          var A = 0 !== (P.current & 1),\n              p = g;\n\n          do {\n            var C;\n\n            if (C = 13 === p.tag) {\n              var x = p.memoizedState;\n              if (null !== x) C = null !== x.dehydrated ? !0 : !1;else {\n                var w = p.memoizedProps;\n                C = void 0 === w.fallback ? !1 : !0 !== w.unstable_avoidThisFallback ? !0 : A ? !1 : !0;\n              }\n            }\n\n            if (C) {\n              var z = p.updateQueue;\n\n              if (null === z) {\n                var u = new Set();\n                u.add(l);\n                p.updateQueue = u;\n              } else z.add(l);\n\n              if (0 === (p.mode & 2)) {\n                p.flags |= 64;\n                h.flags |= 16384;\n                h.flags &= -2981;\n                if (1 === h.tag) if (null === h.alternate) h.tag = 17;else {\n                  var t = zg(-1, 1);\n                  t.tag = 2;\n                  Ag(h, t);\n                }\n                h.lanes |= 1;\n                break a;\n              }\n\n              k = void 0;\n              h = b;\n              var q = f.pingCache;\n              null === q ? (q = f.pingCache = new Oi(), k = new Set(), q.set(l, k)) : (k = q.get(l), void 0 === k && (k = new Set(), q.set(l, k)));\n\n              if (!k.has(h)) {\n                k.add(h);\n                var v = Yj.bind(null, f, l, h);\n                l.then(v, v);\n              }\n\n              p.flags |= 4096;\n              p.lanes = b;\n              break a;\n            }\n\n            p = p.return;\n          } while (null !== p);\n\n          k = Error((Ra(h.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\\n\\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.");\n        }\n\n        5 !== V && (V = 2);\n        k = Mi(k, h);\n        p = g;\n\n        do {\n          switch (p.tag) {\n            case 3:\n              f = k;\n              p.flags |= 4096;\n              b &= -b;\n              p.lanes |= b;\n              var J = Pi(p, f, b);\n              Bg(p, J);\n              break a;\n\n            case 1:\n              f = k;\n              var K = p.type,\n                  Q = p.stateNode;\n\n              if (0 === (p.flags & 64) && ("function" === typeof K.getDerivedStateFromError || null !== Q && "function" === typeof Q.componentDidCatch && (null === Ti || !Ti.has(Q)))) {\n                p.flags |= 4096;\n                b &= -b;\n                p.lanes |= b;\n                var L = Si(p, f, b);\n                Bg(p, L);\n                break a;\n              }\n\n          }\n\n          p = p.return;\n        } while (null !== p);\n      }\n\n      Zj(c);\n    } catch (va) {\n      b = va;\n      Y === c && null !== c && (Y = c = c.return);\n      continue;\n    }\n\n    break;\n  } while (1);\n}\n\nfunction Pj() {\n  var a = oj.current;\n  oj.current = Gh;\n  return null === a ? Gh : a;\n}\n\nfunction Tj(a, b) {\n  var c = X;\n  X |= 16;\n  var d = Pj();\n  U === a && W === b || Qj(a, b);\n\n  do {\n    try {\n      ak();\n      break;\n    } catch (e) {\n      Sj(a, e);\n    }\n  } while (1);\n\n  qg();\n  X = c;\n  oj.current = d;\n  if (null !== Y) throw Error(y(261));\n  U = null;\n  W = 0;\n  return V;\n}\n\nfunction ak() {\n  for (; null !== Y;) {\n    bk(Y);\n  }\n}\n\nfunction Rj() {\n  for (; null !== Y && !Qf();) {\n    bk(Y);\n  }\n}\n\nfunction bk(a) {\n  var b = ck(a.alternate, a, qj);\n  a.memoizedProps = a.pendingProps;\n  null === b ? Zj(a) : Y = b;\n  pj.current = null;\n}\n\nfunction Zj(a) {\n  var b = a;\n\n  do {\n    var c = b.alternate;\n    a = b.return;\n\n    if (0 === (b.flags & 2048)) {\n      c = Gi(c, b, qj);\n\n      if (null !== c) {\n        Y = c;\n        return;\n      }\n\n      c = b;\n\n      if (24 !== c.tag && 23 !== c.tag || null === c.memoizedState || 0 !== (qj & 1073741824) || 0 === (c.mode & 4)) {\n        for (var d = 0, e = c.child; null !== e;) {\n          d |= e.lanes | e.childLanes, e = e.sibling;\n        }\n\n        c.childLanes = d;\n      }\n\n      null !== a && 0 === (a.flags & 2048) && (null === a.firstEffect && (a.firstEffect = b.firstEffect), null !== b.lastEffect && (null !== a.lastEffect && (a.lastEffect.nextEffect = b.firstEffect), a.lastEffect = b.lastEffect), 1 < b.flags && (null !== a.lastEffect ? a.lastEffect.nextEffect = b : a.firstEffect = b, a.lastEffect = b));\n    } else {\n      c = Li(b);\n\n      if (null !== c) {\n        c.flags &= 2047;\n        Y = c;\n        return;\n      }\n\n      null !== a && (a.firstEffect = a.lastEffect = null, a.flags |= 2048);\n    }\n\n    b = b.sibling;\n\n    if (null !== b) {\n      Y = b;\n      return;\n    }\n\n    Y = b = a;\n  } while (null !== b);\n\n  0 === V && (V = 5);\n}\n\nfunction Uj(a) {\n  var b = eg();\n  gg(99, dk.bind(null, a, b));\n  return null;\n}\n\nfunction dk(a, b) {\n  do {\n    Oj();\n  } while (null !== yj);\n\n  if (0 !== (X & 48)) throw Error(y(327));\n  var c = a.finishedWork;\n  if (null === c) return null;\n  a.finishedWork = null;\n  a.finishedLanes = 0;\n  if (c === a.current) throw Error(y(177));\n  a.callbackNode = null;\n  var d = c.lanes | c.childLanes,\n      e = d,\n      f = a.pendingLanes & ~e;\n  a.pendingLanes = e;\n  a.suspendedLanes = 0;\n  a.pingedLanes = 0;\n  a.expiredLanes &= e;\n  a.mutableReadLanes &= e;\n  a.entangledLanes &= e;\n  e = a.entanglements;\n\n  for (var g = a.eventTimes, h = a.expirationTimes; 0 < f;) {\n    var k = 31 - Vc(f),\n        l = 1 << k;\n    e[k] = 0;\n    g[k] = -1;\n    h[k] = -1;\n    f &= ~l;\n  }\n\n  null !== Cj && 0 === (d & 24) && Cj.has(a) && Cj.delete(a);\n  a === U && (Y = U = null, W = 0);\n  1 < c.flags ? null !== c.lastEffect ? (c.lastEffect.nextEffect = c, d = c.firstEffect) : d = c : d = c.firstEffect;\n\n  if (null !== d) {\n    e = X;\n    X |= 32;\n    pj.current = null;\n    kf = fd;\n    g = Ne();\n\n    if (Oe(g)) {\n      if ("selectionStart" in g) h = {\n        start: g.selectionStart,\n        end: g.selectionEnd\n      };else a: if (h = (h = g.ownerDocument) && h.defaultView || window, (l = h.getSelection && h.getSelection()) && 0 !== l.rangeCount) {\n        h = l.anchorNode;\n        f = l.anchorOffset;\n        k = l.focusNode;\n        l = l.focusOffset;\n\n        try {\n          h.nodeType, k.nodeType;\n        } catch (va) {\n          h = null;\n          break a;\n        }\n\n        var n = 0,\n            A = -1,\n            p = -1,\n            C = 0,\n            x = 0,\n            w = g,\n            z = null;\n\n        b: for (;;) {\n          for (var u;;) {\n            w !== h || 0 !== f && 3 !== w.nodeType || (A = n + f);\n            w !== k || 0 !== l && 3 !== w.nodeType || (p = n + l);\n            3 === w.nodeType && (n += w.nodeValue.length);\n            if (null === (u = w.firstChild)) break;\n            z = w;\n            w = u;\n          }\n\n          for (;;) {\n            if (w === g) break b;\n            z === h && ++C === f && (A = n);\n            z === k && ++x === l && (p = n);\n            if (null !== (u = w.nextSibling)) break;\n            w = z;\n            z = w.parentNode;\n          }\n\n          w = u;\n        }\n\n        h = -1 === A || -1 === p ? null : {\n          start: A,\n          end: p\n        };\n      } else h = null;\n      h = h || {\n        start: 0,\n        end: 0\n      };\n    } else h = null;\n\n    lf = {\n      focusedElem: g,\n      selectionRange: h\n    };\n    fd = !1;\n    Ij = null;\n    Jj = !1;\n    Z = d;\n\n    do {\n      try {\n        ek();\n      } catch (va) {\n        if (null === Z) throw Error(y(330));\n        Wi(Z, va);\n        Z = Z.nextEffect;\n      }\n    } while (null !== Z);\n\n    Ij = null;\n    Z = d;\n\n    do {\n      try {\n        for (g = a; null !== Z;) {\n          var t = Z.flags;\n          t & 16 && pb(Z.stateNode, "");\n\n          if (t & 128) {\n            var q = Z.alternate;\n\n            if (null !== q) {\n              var v = q.ref;\n              null !== v && ("function" === typeof v ? v(null) : v.current = null);\n            }\n          }\n\n          switch (t & 1038) {\n            case 2:\n              fj(Z);\n              Z.flags &= -3;\n              break;\n\n            case 6:\n              fj(Z);\n              Z.flags &= -3;\n              ij(Z.alternate, Z);\n              break;\n\n            case 1024:\n              Z.flags &= -1025;\n              break;\n\n            case 1028:\n              Z.flags &= -1025;\n              ij(Z.alternate, Z);\n              break;\n\n            case 4:\n              ij(Z.alternate, Z);\n              break;\n\n            case 8:\n              h = Z;\n              cj(g, h);\n              var J = h.alternate;\n              dj(h);\n              null !== J && dj(J);\n          }\n\n          Z = Z.nextEffect;\n        }\n      } catch (va) {\n        if (null === Z) throw Error(y(330));\n        Wi(Z, va);\n        Z = Z.nextEffect;\n      }\n    } while (null !== Z);\n\n    v = lf;\n    q = Ne();\n    t = v.focusedElem;\n    g = v.selectionRange;\n\n    if (q !== t && t && t.ownerDocument && Me(t.ownerDocument.documentElement, t)) {\n      null !== g && Oe(t) && (q = g.start, v = g.end, void 0 === v && (v = q), "selectionStart" in t ? (t.selectionStart = q, t.selectionEnd = Math.min(v, t.value.length)) : (v = (q = t.ownerDocument || document) && q.defaultView || window, v.getSelection && (v = v.getSelection(), h = t.textContent.length, J = Math.min(g.start, h), g = void 0 === g.end ? J : Math.min(g.end, h), !v.extend && J > g && (h = g, g = J, J = h), h = Le(t, J), f = Le(t, g), h && f && (1 !== v.rangeCount || v.anchorNode !== h.node || v.anchorOffset !== h.offset || v.focusNode !== f.node || v.focusOffset !== f.offset) && (q = q.createRange(), q.setStart(h.node, h.offset), v.removeAllRanges(), J > g ? (v.addRange(q), v.extend(f.node, f.offset)) : (q.setEnd(f.node, f.offset), v.addRange(q))))));\n      q = [];\n\n      for (v = t; v = v.parentNode;) {\n        1 === v.nodeType && q.push({\n          element: v,\n          left: v.scrollLeft,\n          top: v.scrollTop\n        });\n      }\n\n      "function" === typeof t.focus && t.focus();\n\n      for (t = 0; t < q.length; t++) {\n        v = q[t], v.element.scrollLeft = v.left, v.element.scrollTop = v.top;\n      }\n    }\n\n    fd = !!kf;\n    lf = kf = null;\n    a.current = c;\n    Z = d;\n\n    do {\n      try {\n        for (t = a; null !== Z;) {\n          var K = Z.flags;\n          K & 36 && Yi(t, Z.alternate, Z);\n\n          if (K & 128) {\n            q = void 0;\n            var Q = Z.ref;\n\n            if (null !== Q) {\n              var L = Z.stateNode;\n\n              switch (Z.tag) {\n                case 5:\n                  q = L;\n                  break;\n\n                default:\n                  q = L;\n              }\n\n              "function" === typeof Q ? Q(q) : Q.current = q;\n            }\n          }\n\n          Z = Z.nextEffect;\n        }\n      } catch (va) {\n        if (null === Z) throw Error(y(330));\n        Wi(Z, va);\n        Z = Z.nextEffect;\n      }\n    } while (null !== Z);\n\n    Z = null;\n    $f();\n    X = e;\n  } else a.current = c;\n\n  if (xj) xj = !1, yj = a, zj = b;else for (Z = d; null !== Z;) {\n    b = Z.nextEffect, Z.nextEffect = null, Z.flags & 8 && (K = Z, K.sibling = null, K.stateNode = null), Z = b;\n  }\n  d = a.pendingLanes;\n  0 === d && (Ti = null);\n  1 === d ? a === Ej ? Dj++ : (Dj = 0, Ej = a) : Dj = 0;\n  c = c.stateNode;\n  if (Mf && "function" === typeof Mf.onCommitFiberRoot) try {\n    Mf.onCommitFiberRoot(Lf, c, void 0, 64 === (c.current.flags & 64));\n  } catch (va) {}\n  Mj(a, O());\n  if (Qi) throw Qi = !1, a = Ri, Ri = null, a;\n  if (0 !== (X & 8)) return null;\n  ig();\n  return null;\n}\n\nfunction ek() {\n  for (; null !== Z;) {\n    var a = Z.alternate;\n    Jj || null === Ij || (0 !== (Z.flags & 8) ? dc(Z, Ij) && (Jj = !0) : 13 === Z.tag && mj(a, Z) && dc(Z, Ij) && (Jj = !0));\n    var b = Z.flags;\n    0 !== (b & 256) && Xi(a, Z);\n    0 === (b & 512) || xj || (xj = !0, hg(97, function () {\n      Oj();\n      return null;\n    }));\n    Z = Z.nextEffect;\n  }\n}\n\nfunction Oj() {\n  if (90 !== zj) {\n    var a = 97 < zj ? 97 : zj;\n    zj = 90;\n    return gg(a, fk);\n  }\n\n  return !1;\n}\n\nfunction $i(a, b) {\n  Aj.push(b, a);\n  xj || (xj = !0, hg(97, function () {\n    Oj();\n    return null;\n  }));\n}\n\nfunction Zi(a, b) {\n  Bj.push(b, a);\n  xj || (xj = !0, hg(97, function () {\n    Oj();\n    return null;\n  }));\n}\n\nfunction fk() {\n  if (null === yj) return !1;\n  var a = yj;\n  yj = null;\n  if (0 !== (X & 48)) throw Error(y(331));\n  var b = X;\n  X |= 32;\n  var c = Bj;\n  Bj = [];\n\n  for (var d = 0; d < c.length; d += 2) {\n    var e = c[d],\n        f = c[d + 1],\n        g = e.destroy;\n    e.destroy = void 0;\n    if ("function" === typeof g) try {\n      g();\n    } catch (k) {\n      if (null === f) throw Error(y(330));\n      Wi(f, k);\n    }\n  }\n\n  c = Aj;\n  Aj = [];\n\n  for (d = 0; d < c.length; d += 2) {\n    e = c[d];\n    f = c[d + 1];\n\n    try {\n      var h = e.create;\n      e.destroy = h();\n    } catch (k) {\n      if (null === f) throw Error(y(330));\n      Wi(f, k);\n    }\n  }\n\n  for (h = a.current.firstEffect; null !== h;) {\n    a = h.nextEffect, h.nextEffect = null, h.flags & 8 && (h.sibling = null, h.stateNode = null), h = a;\n  }\n\n  X = b;\n  ig();\n  return !0;\n}\n\nfunction gk(a, b, c) {\n  b = Mi(c, b);\n  b = Pi(a, b, 1);\n  Ag(a, b);\n  b = Hg();\n  a = Kj(a, 1);\n  null !== a && ($c(a, 1, b), Mj(a, b));\n}\n\nfunction Wi(a, b) {\n  if (3 === a.tag) gk(a, a, b);else for (var c = a.return; null !== c;) {\n    if (3 === c.tag) {\n      gk(c, a, b);\n      break;\n    } else if (1 === c.tag) {\n      var d = c.stateNode;\n\n      if ("function" === typeof c.type.getDerivedStateFromError || "function" === typeof d.componentDidCatch && (null === Ti || !Ti.has(d))) {\n        a = Mi(b, a);\n        var e = Si(c, a, 1);\n        Ag(c, e);\n        e = Hg();\n        c = Kj(c, 1);\n        if (null !== c) $c(c, 1, e), Mj(c, e);else if ("function" === typeof d.componentDidCatch && (null === Ti || !Ti.has(d))) try {\n          d.componentDidCatch(b, a);\n        } catch (f) {}\n        break;\n      }\n    }\n\n    c = c.return;\n  }\n}\n\nfunction Yj(a, b, c) {\n  var d = a.pingCache;\n  null !== d && d.delete(b);\n  b = Hg();\n  a.pingedLanes |= a.suspendedLanes & c;\n  U === a && (W & c) === c && (4 === V || 3 === V && (W & 62914560) === W && 500 > O() - jj ? Qj(a, 0) : uj |= c);\n  Mj(a, b);\n}\n\nfunction lj(a, b) {\n  var c = a.stateNode;\n  null !== c && c.delete(b);\n  b = 0;\n  0 === b && (b = a.mode, 0 === (b & 2) ? b = 1 : 0 === (b & 4) ? b = 99 === eg() ? 1 : 2 : (0 === Gj && (Gj = tj), b = Yc(62914560 & ~Gj), 0 === b && (b = 4194304)));\n  c = Hg();\n  a = Kj(a, b);\n  null !== a && ($c(a, b, c), Mj(a, c));\n}\n\nvar ck;\n\nck = function ck(a, b, c) {\n  var d = b.lanes;\n  if (null !== a) {\n    if (a.memoizedProps !== b.pendingProps || N.current) ug = !0;else if (0 !== (c & d)) ug = 0 !== (a.flags & 16384) ? !0 : !1;else {\n      ug = !1;\n\n      switch (b.tag) {\n        case 3:\n          ri(b);\n          sh();\n          break;\n\n        case 5:\n          gh(b);\n          break;\n\n        case 1:\n          Ff(b.type) && Jf(b);\n          break;\n\n        case 4:\n          eh(b, b.stateNode.containerInfo);\n          break;\n\n        case 10:\n          d = b.memoizedProps.value;\n          var e = b.type._context;\n          I(mg, e._currentValue);\n          e._currentValue = d;\n          break;\n\n        case 13:\n          if (null !== b.memoizedState) {\n            if (0 !== (c & b.child.childLanes)) return ti(a, b, c);\n            I(P, P.current & 1);\n            b = hi(a, b, c);\n            return null !== b ? b.sibling : null;\n          }\n\n          I(P, P.current & 1);\n          break;\n\n        case 19:\n          d = 0 !== (c & b.childLanes);\n\n          if (0 !== (a.flags & 64)) {\n            if (d) return Ai(a, b, c);\n            b.flags |= 64;\n          }\n\n          e = b.memoizedState;\n          null !== e && (e.rendering = null, e.tail = null, e.lastEffect = null);\n          I(P, P.current);\n          if (d) break;else return null;\n\n        case 23:\n        case 24:\n          return b.lanes = 0, mi(a, b, c);\n      }\n\n      return hi(a, b, c);\n    }\n  } else ug = !1;\n  b.lanes = 0;\n\n  switch (b.tag) {\n    case 2:\n      d = b.type;\n      null !== a && (a.alternate = null, b.alternate = null, b.flags |= 2);\n      a = b.pendingProps;\n      e = Ef(b, M.current);\n      tg(b, c);\n      e = Ch(null, b, d, a, e, c);\n      b.flags |= 1;\n\n      if ("object" === _typeof(e) && null !== e && "function" === typeof e.render && void 0 === e.$$typeof) {\n        b.tag = 1;\n        b.memoizedState = null;\n        b.updateQueue = null;\n\n        if (Ff(d)) {\n          var f = !0;\n          Jf(b);\n        } else f = !1;\n\n        b.memoizedState = null !== e.state && void 0 !== e.state ? e.state : null;\n        xg(b);\n        var g = d.getDerivedStateFromProps;\n        "function" === typeof g && Gg(b, d, g, a);\n        e.updater = Kg;\n        b.stateNode = e;\n        e._reactInternals = b;\n        Og(b, d, a, c);\n        b = qi(null, b, d, !0, f, c);\n      } else b.tag = 0, fi(null, b, e, c), b = b.child;\n\n      return b;\n\n    case 16:\n      e = b.elementType;\n\n      a: {\n        null !== a && (a.alternate = null, b.alternate = null, b.flags |= 2);\n        a = b.pendingProps;\n        f = e._init;\n        e = f(e._payload);\n        b.type = e;\n        f = b.tag = hk(e);\n        a = lg(e, a);\n\n        switch (f) {\n          case 0:\n            b = li(null, b, e, a, c);\n            break a;\n\n          case 1:\n            b = pi(null, b, e, a, c);\n            break a;\n\n          case 11:\n            b = gi(null, b, e, a, c);\n            break a;\n\n          case 14:\n            b = ii(null, b, e, lg(e.type, a), d, c);\n            break a;\n        }\n\n        throw Error(y(306, e, ""));\n      }\n\n      return b;\n\n    case 0:\n      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : lg(d, e), li(a, b, d, e, c);\n\n    case 1:\n      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : lg(d, e), pi(a, b, d, e, c);\n\n    case 3:\n      ri(b);\n      d = b.updateQueue;\n      if (null === a || null === d) throw Error(y(282));\n      d = b.pendingProps;\n      e = b.memoizedState;\n      e = null !== e ? e.element : null;\n      yg(a, b);\n      Cg(b, d, null, c);\n      d = b.memoizedState.element;\n      if (d === e) sh(), b = hi(a, b, c);else {\n        e = b.stateNode;\n        if (f = e.hydrate) kh = rf(b.stateNode.containerInfo.firstChild), jh = b, f = lh = !0;\n\n        if (f) {\n          a = e.mutableSourceEagerHydrationData;\n          if (null != a) for (e = 0; e < a.length; e += 2) {\n            f = a[e], f._workInProgressVersionPrimary = a[e + 1], th.push(f);\n          }\n          c = Zg(b, null, d, c);\n\n          for (b.child = c; c;) {\n            c.flags = c.flags & -3 | 1024, c = c.sibling;\n          }\n        } else fi(a, b, d, c), sh();\n\n        b = b.child;\n      }\n      return b;\n\n    case 5:\n      return gh(b), null === a && ph(b), d = b.type, e = b.pendingProps, f = null !== a ? a.memoizedProps : null, g = e.children, nf(d, e) ? g = null : null !== f && nf(d, f) && (b.flags |= 16), oi(a, b), fi(a, b, g, c), b.child;\n\n    case 6:\n      return null === a && ph(b), null;\n\n    case 13:\n      return ti(a, b, c);\n\n    case 4:\n      return eh(b, b.stateNode.containerInfo), d = b.pendingProps, null === a ? b.child = Yg(b, null, d, c) : fi(a, b, d, c), b.child;\n\n    case 11:\n      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : lg(d, e), gi(a, b, d, e, c);\n\n    case 7:\n      return fi(a, b, b.pendingProps, c), b.child;\n\n    case 8:\n      return fi(a, b, b.pendingProps.children, c), b.child;\n\n    case 12:\n      return fi(a, b, b.pendingProps.children, c), b.child;\n\n    case 10:\n      a: {\n        d = b.type._context;\n        e = b.pendingProps;\n        g = b.memoizedProps;\n        f = e.value;\n        var h = b.type._context;\n        I(mg, h._currentValue);\n        h._currentValue = f;\n        if (null !== g) if (h = g.value, f = He(h, f) ? 0 : ("function" === typeof d._calculateChangedBits ? d._calculateChangedBits(h, f) : 1073741823) | 0, 0 === f) {\n          if (g.children === e.children && !N.current) {\n            b = hi(a, b, c);\n            break a;\n          }\n        } else for (h = b.child, null !== h && (h.return = b); null !== h;) {\n          var k = h.dependencies;\n\n          if (null !== k) {\n            g = h.child;\n\n            for (var l = k.firstContext; null !== l;) {\n              if (l.context === d && 0 !== (l.observedBits & f)) {\n                1 === h.tag && (l = zg(-1, c & -c), l.tag = 2, Ag(h, l));\n                h.lanes |= c;\n                l = h.alternate;\n                null !== l && (l.lanes |= c);\n                sg(h.return, c);\n                k.lanes |= c;\n                break;\n              }\n\n              l = l.next;\n            }\n          } else g = 10 === h.tag ? h.type === b.type ? null : h.child : h.child;\n\n          if (null !== g) g.return = h;else for (g = h; null !== g;) {\n            if (g === b) {\n              g = null;\n              break;\n            }\n\n            h = g.sibling;\n\n            if (null !== h) {\n              h.return = g.return;\n              g = h;\n              break;\n            }\n\n            g = g.return;\n          }\n          h = g;\n        }\n        fi(a, b, e.children, c);\n        b = b.child;\n      }\n\n      return b;\n\n    case 9:\n      return e = b.type, f = b.pendingProps, d = f.children, tg(b, c), e = vg(e, f.unstable_observedBits), d = d(e), b.flags |= 1, fi(a, b, d, c), b.child;\n\n    case 14:\n      return e = b.type, f = lg(e, b.pendingProps), f = lg(e.type, f), ii(a, b, e, f, d, c);\n\n    case 15:\n      return ki(a, b, b.type, b.pendingProps, d, c);\n\n    case 17:\n      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : lg(d, e), null !== a && (a.alternate = null, b.alternate = null, b.flags |= 2), b.tag = 1, Ff(d) ? (a = !0, Jf(b)) : a = !1, tg(b, c), Mg(b, d, e), Og(b, d, e, c), qi(null, b, d, !0, a, c);\n\n    case 19:\n      return Ai(a, b, c);\n\n    case 23:\n      return mi(a, b, c);\n\n    case 24:\n      return mi(a, b, c);\n  }\n\n  throw Error(y(156, b.tag));\n};\n\nfunction ik(a, b, c, d) {\n  this.tag = a;\n  this.key = c;\n  this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;\n  this.index = 0;\n  this.ref = null;\n  this.pendingProps = b;\n  this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;\n  this.mode = d;\n  this.flags = 0;\n  this.lastEffect = this.firstEffect = this.nextEffect = null;\n  this.childLanes = this.lanes = 0;\n  this.alternate = null;\n}\n\nfunction nh(a, b, c, d) {\n  return new ik(a, b, c, d);\n}\n\nfunction ji(a) {\n  a = a.prototype;\n  return !(!a || !a.isReactComponent);\n}\n\nfunction hk(a) {\n  if ("function" === typeof a) return ji(a) ? 1 : 0;\n\n  if (void 0 !== a && null !== a) {\n    a = a.$$typeof;\n    if (a === Aa) return 11;\n    if (a === Da) return 14;\n  }\n\n  return 2;\n}\n\nfunction Tg(a, b) {\n  var c = a.alternate;\n  null === c ? (c = nh(a.tag, b, a.key, a.mode), c.elementType = a.elementType, c.type = a.type, c.stateNode = a.stateNode, c.alternate = a, a.alternate = c) : (c.pendingProps = b, c.type = a.type, c.flags = 0, c.nextEffect = null, c.firstEffect = null, c.lastEffect = null);\n  c.childLanes = a.childLanes;\n  c.lanes = a.lanes;\n  c.child = a.child;\n  c.memoizedProps = a.memoizedProps;\n  c.memoizedState = a.memoizedState;\n  c.updateQueue = a.updateQueue;\n  b = a.dependencies;\n  c.dependencies = null === b ? null : {\n    lanes: b.lanes,\n    firstContext: b.firstContext\n  };\n  c.sibling = a.sibling;\n  c.index = a.index;\n  c.ref = a.ref;\n  return c;\n}\n\nfunction Vg(a, b, c, d, e, f) {\n  var g = 2;\n  d = a;\n  if ("function" === typeof a) ji(a) && (g = 1);else if ("string" === typeof a) g = 5;else a: switch (a) {\n    case ua:\n      return Xg(c.children, e, f, b);\n\n    case Ha:\n      g = 8;\n      e |= 16;\n      break;\n\n    case wa:\n      g = 8;\n      e |= 1;\n      break;\n\n    case xa:\n      return a = nh(12, c, b, e | 8), a.elementType = xa, a.type = xa, a.lanes = f, a;\n\n    case Ba:\n      return a = nh(13, c, b, e), a.type = Ba, a.elementType = Ba, a.lanes = f, a;\n\n    case Ca:\n      return a = nh(19, c, b, e), a.elementType = Ca, a.lanes = f, a;\n\n    case Ia:\n      return vi(c, e, f, b);\n\n    case Ja:\n      return a = nh(24, c, b, e), a.elementType = Ja, a.lanes = f, a;\n\n    default:\n      if ("object" === _typeof(a) && null !== a) switch (a.$$typeof) {\n        case ya:\n          g = 10;\n          break a;\n\n        case za:\n          g = 9;\n          break a;\n\n        case Aa:\n          g = 11;\n          break a;\n\n        case Da:\n          g = 14;\n          break a;\n\n        case Ea:\n          g = 16;\n          d = null;\n          break a;\n\n        case Fa:\n          g = 22;\n          break a;\n      }\n      throw Error(y(130, null == a ? a : _typeof(a), ""));\n  }\n  b = nh(g, c, b, e);\n  b.elementType = a;\n  b.type = d;\n  b.lanes = f;\n  return b;\n}\n\nfunction Xg(a, b, c, d) {\n  a = nh(7, a, d, b);\n  a.lanes = c;\n  return a;\n}\n\nfunction vi(a, b, c, d) {\n  a = nh(23, a, d, b);\n  a.elementType = Ia;\n  a.lanes = c;\n  return a;\n}\n\nfunction Ug(a, b, c) {\n  a = nh(6, a, null, b);\n  a.lanes = c;\n  return a;\n}\n\nfunction Wg(a, b, c) {\n  b = nh(4, null !== a.children ? a.children : [], a.key, b);\n  b.lanes = c;\n  b.stateNode = {\n    containerInfo: a.containerInfo,\n    pendingChildren: null,\n    implementation: a.implementation\n  };\n  return b;\n}\n\nfunction jk(a, b, c) {\n  this.tag = b;\n  this.containerInfo = a;\n  this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;\n  this.timeoutHandle = -1;\n  this.pendingContext = this.context = null;\n  this.hydrate = c;\n  this.callbackNode = null;\n  this.callbackPriority = 0;\n  this.eventTimes = Zc(0);\n  this.expirationTimes = Zc(-1);\n  this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;\n  this.entanglements = Zc(0);\n  this.mutableSourceEagerHydrationData = null;\n}\n\nfunction kk(a, b, c) {\n  var d = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;\n  return {\n    $$typeof: ta,\n    key: null == d ? null : "" + d,\n    children: a,\n    containerInfo: b,\n    implementation: c\n  };\n}\n\nfunction lk(a, b, c, d) {\n  var e = b.current,\n      f = Hg(),\n      g = Ig(e);\n\n  a: if (c) {\n    c = c._reactInternals;\n\n    b: {\n      if (Zb(c) !== c || 1 !== c.tag) throw Error(y(170));\n      var h = c;\n\n      do {\n        switch (h.tag) {\n          case 3:\n            h = h.stateNode.context;\n            break b;\n\n          case 1:\n            if (Ff(h.type)) {\n              h = h.stateNode.__reactInternalMemoizedMergedChildContext;\n              break b;\n            }\n\n        }\n\n        h = h.return;\n      } while (null !== h);\n\n      throw Error(y(171));\n    }\n\n    if (1 === c.tag) {\n      var k = c.type;\n\n      if (Ff(k)) {\n        c = If(c, k, h);\n        break a;\n      }\n    }\n\n    c = h;\n  } else c = Cf;\n\n  null === b.context ? b.context = c : b.pendingContext = c;\n  b = zg(f, g);\n  b.payload = {\n    element: a\n  };\n  d = void 0 === d ? null : d;\n  null !== d && (b.callback = d);\n  Ag(e, b);\n  Jg(e, g, f);\n  return g;\n}\n\nfunction mk(a) {\n  a = a.current;\n  if (!a.child) return null;\n\n  switch (a.child.tag) {\n    case 5:\n      return a.child.stateNode;\n\n    default:\n      return a.child.stateNode;\n  }\n}\n\nfunction nk(a, b) {\n  a = a.memoizedState;\n\n  if (null !== a && null !== a.dehydrated) {\n    var c = a.retryLane;\n    a.retryLane = 0 !== c && c < b ? c : b;\n  }\n}\n\nfunction ok(a, b) {\n  nk(a, b);\n  (a = a.alternate) && nk(a, b);\n}\n\nfunction pk() {\n  return null;\n}\n\nfunction qk(a, b, c) {\n  var d = null != c && null != c.hydrationOptions && c.hydrationOptions.mutableSources || null;\n  c = new jk(a, b, null != c && !0 === c.hydrate);\n  b = nh(3, null, null, 2 === b ? 7 : 1 === b ? 3 : 0);\n  c.current = b;\n  b.stateNode = c;\n  xg(b);\n  a[ff] = c.current;\n  cf(8 === a.nodeType ? a.parentNode : a);\n  if (d) for (a = 0; a < d.length; a++) {\n    b = d[a];\n    var e = b._getVersion;\n    e = e(b._source);\n    null == c.mutableSourceEagerHydrationData ? c.mutableSourceEagerHydrationData = [b, e] : c.mutableSourceEagerHydrationData.push(b, e);\n  }\n  this._internalRoot = c;\n}\n\nqk.prototype.render = function (a) {\n  lk(a, this._internalRoot, null, null);\n};\n\nqk.prototype.unmount = function () {\n  var a = this._internalRoot,\n      b = a.containerInfo;\n  lk(null, a, null, function () {\n    b[ff] = null;\n  });\n};\n\nfunction rk(a) {\n  return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType && (8 !== a.nodeType || " react-mount-point-unstable " !== a.nodeValue));\n}\n\nfunction sk(a, b) {\n  b || (b = a ? 9 === a.nodeType ? a.documentElement : a.firstChild : null, b = !(!b || 1 !== b.nodeType || !b.hasAttribute("data-reactroot")));\n  if (!b) for (var c; c = a.lastChild;) {\n    a.removeChild(c);\n  }\n  return new qk(a, 0, b ? {\n    hydrate: !0\n  } : void 0);\n}\n\nfunction tk(a, b, c, d, e) {\n  var f = c._reactRootContainer;\n\n  if (f) {\n    var g = f._internalRoot;\n\n    if ("function" === typeof e) {\n      var h = e;\n\n      e = function e() {\n        var a = mk(g);\n        h.call(a);\n      };\n    }\n\n    lk(b, g, a, e);\n  } else {\n    f = c._reactRootContainer = sk(c, d);\n    g = f._internalRoot;\n\n    if ("function" === typeof e) {\n      var k = e;\n\n      e = function e() {\n        var a = mk(g);\n        k.call(a);\n      };\n    }\n\n    Xj(function () {\n      lk(b, g, a, e);\n    });\n  }\n\n  return mk(g);\n}\n\nec = function ec(a) {\n  if (13 === a.tag) {\n    var b = Hg();\n    Jg(a, 4, b);\n    ok(a, 4);\n  }\n};\n\nfc = function fc(a) {\n  if (13 === a.tag) {\n    var b = Hg();\n    Jg(a, 67108864, b);\n    ok(a, 67108864);\n  }\n};\n\ngc = function gc(a) {\n  if (13 === a.tag) {\n    var b = Hg(),\n        c = Ig(a);\n    Jg(a, c, b);\n    ok(a, c);\n  }\n};\n\nhc = function hc(a, b) {\n  return b();\n};\n\nyb = function yb(a, b, c) {\n  switch (b) {\n    case "input":\n      ab(a, c);\n      b = c.name;\n\n      if ("radio" === c.type && null != b) {\n        for (c = a; c.parentNode;) {\n          c = c.parentNode;\n        }\n\n        c = c.querySelectorAll("input[name=" + JSON.stringify("" + b) + \'][type="radio"]\');\n\n        for (b = 0; b < c.length; b++) {\n          var d = c[b];\n\n          if (d !== a && d.form === a.form) {\n            var e = Db(d);\n            if (!e) throw Error(y(90));\n            Wa(d);\n            ab(d, e);\n          }\n        }\n      }\n\n      break;\n\n    case "textarea":\n      ib(a, c);\n      break;\n\n    case "select":\n      b = c.value, null != b && fb(a, !!c.multiple, b, !1);\n  }\n};\n\nGb = Wj;\n\nHb = function Hb(a, b, c, d, e) {\n  var f = X;\n  X |= 4;\n\n  try {\n    return gg(98, a.bind(null, b, c, d, e));\n  } finally {\n    X = f, 0 === X && (wj(), ig());\n  }\n};\n\nIb = function Ib() {\n  0 === (X & 49) && (Vj(), Oj());\n};\n\nJb = function Jb(a, b) {\n  var c = X;\n  X |= 2;\n\n  try {\n    return a(b);\n  } finally {\n    X = c, 0 === X && (wj(), ig());\n  }\n};\n\nfunction uk(a, b) {\n  var c = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;\n  if (!rk(b)) throw Error(y(200));\n  return kk(a, b, null, c);\n}\n\nvar vk = {\n  Events: [Cb, ue, Db, Eb, Fb, Oj, {\n    current: !1\n  }]\n},\n    wk = {\n  findFiberByHostInstance: wc,\n  bundleType: 0,\n  version: "17.0.2",\n  rendererPackageName: "react-dom"\n};\nvar xk = {\n  bundleType: wk.bundleType,\n  version: wk.version,\n  rendererPackageName: wk.rendererPackageName,\n  rendererConfig: wk.rendererConfig,\n  overrideHookState: null,\n  overrideHookStateDeletePath: null,\n  overrideHookStateRenamePath: null,\n  overrideProps: null,\n  overridePropsDeletePath: null,\n  overridePropsRenamePath: null,\n  setSuspenseHandler: null,\n  scheduleUpdate: null,\n  currentDispatcherRef: ra.ReactCurrentDispatcher,\n  findHostInstanceByFiber: function findHostInstanceByFiber(a) {\n    a = cc(a);\n    return null === a ? null : a.stateNode;\n  },\n  findFiberByHostInstance: wk.findFiberByHostInstance || pk,\n  findHostInstancesForRefresh: null,\n  scheduleRefresh: null,\n  scheduleRoot: null,\n  setRefreshHandler: null,\n  getCurrentFiber: null\n};\n\nif ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {\n  var yk = __REACT_DEVTOOLS_GLOBAL_HOOK__;\n  if (!yk.isDisabled && yk.supportsFiber) try {\n    Lf = yk.inject(xk), Mf = yk;\n  } catch (a) {}\n}\n\nexports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = vk;\nexports.createPortal = uk;\n\nexports.findDOMNode = function (a) {\n  if (null == a) return null;\n  if (1 === a.nodeType) return a;\n  var b = a._reactInternals;\n\n  if (void 0 === b) {\n    if ("function" === typeof a.render) throw Error(y(188));\n    throw Error(y(268, Object.keys(a)));\n  }\n\n  a = cc(b);\n  a = null === a ? null : a.stateNode;\n  return a;\n};\n\nexports.flushSync = function (a, b) {\n  var c = X;\n  if (0 !== (c & 48)) return a(b);\n  X |= 1;\n\n  try {\n    if (a) return gg(99, a.bind(null, b));\n  } finally {\n    X = c, ig();\n  }\n};\n\nexports.hydrate = function (a, b, c) {\n  if (!rk(b)) throw Error(y(200));\n  return tk(null, a, b, !0, c);\n};\n\nexports.render = function (a, b, c) {\n  if (!rk(b)) throw Error(y(200));\n  return tk(null, a, b, !1, c);\n};\n\nexports.unmountComponentAtNode = function (a) {\n  if (!rk(a)) throw Error(y(40));\n  return a._reactRootContainer ? (Xj(function () {\n    tk(null, null, a, !1, function () {\n      a._reactRootContainer = null;\n      a[ff] = null;\n    });\n  }), !0) : !1;\n};\n\nexports.unstable_batchedUpdates = Wj;\n\nexports.unstable_createPortal = function (a, b) {\n  return uk(a, b, 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null);\n};\n\nexports.unstable_renderSubtreeIntoContainer = function (a, b, c, d) {\n  if (!rk(c)) throw Error(y(200));\n  if (null == a || void 0 === a._reactInternals) throw Error(y(38));\n  return tk(a, b, c, !1, d);\n};\n\nexports.version = "17.0.2";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///748\n')},116:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nfunction checkDCE() {\n  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function') {\n    return;\n  }\n\n  if (false) {}\n\n  try {\n    // Verify that the code above has been dead code eliminated (DCE'd).\n    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);\n  } catch (err) {\n    // DevTools shouldn't crash React, no matter what.\n    // We should still report in case we break this code.\n    console.error(err);\n  }\n}\n\nif (true) {\n  // DCE check should happen before ReactDOM bundle executes so that\n  // DevTools can report bad minification during injection.\n  checkDCE();\n  module.exports = __webpack_require__(748);\n} else {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE2LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLFNBQVNBLFFBQVQsR0FBb0I7QUFDbEI7QUFDQSxNQUNFLE9BQU9DLDhCQUFQLEtBQTBDLFdBQTFDLElBQ0EsT0FBT0EsOEJBQThCLENBQUNELFFBQXRDLEtBQW1ELFVBRnJELEVBR0U7QUFDQTtBQUNEOztBQUNELE1BQUlFLEtBQUosRUFBMkMsRUFTMUM7O0FBQ0QsTUFBSTtBQUNGO0FBQ0FELElBQUFBLDhCQUE4QixDQUFDRCxRQUEvQixDQUF3Q0EsUUFBeEM7QUFDRCxHQUhELENBR0UsT0FBT00sR0FBUCxFQUFZO0FBQ1o7QUFDQTtBQUNBQyxJQUFBQSxPQUFPLENBQUNDLEtBQVIsQ0FBY0YsR0FBZDtBQUNEO0FBQ0Y7O0FBRUQsSUFBSUosSUFBSixFQUEyQztBQUN6QztBQUNBO0FBQ0FGLEVBQUFBLFFBQVE7QUFDUlMsRUFBQUEseUNBQUE7QUFDRCxDQUxELE1BS08iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jcmFfbmV3Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcz84YmM4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiJdLCJuYW1lcyI6WyJjaGVja0RDRSIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsIkVycm9yIiwiZXJyIiwiY29uc29sZSIsImVycm9yIiwibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///116\n")},5:(__unused_webpack_module,exports)=>{"use strict";eval('/** @license React v16.13.1\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nfunction _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nvar b = "function" === typeof Symbol && Symbol.for,\n    c = b ? Symbol.for("react.element") : 60103,\n    d = b ? Symbol.for("react.portal") : 60106,\n    e = b ? Symbol.for("react.fragment") : 60107,\n    f = b ? Symbol.for("react.strict_mode") : 60108,\n    g = b ? Symbol.for("react.profiler") : 60114,\n    h = b ? Symbol.for("react.provider") : 60109,\n    k = b ? Symbol.for("react.context") : 60110,\n    l = b ? Symbol.for("react.async_mode") : 60111,\n    m = b ? Symbol.for("react.concurrent_mode") : 60111,\n    n = b ? Symbol.for("react.forward_ref") : 60112,\n    p = b ? Symbol.for("react.suspense") : 60113,\n    q = b ? Symbol.for("react.suspense_list") : 60120,\n    r = b ? Symbol.for("react.memo") : 60115,\n    t = b ? Symbol.for("react.lazy") : 60116,\n    v = b ? Symbol.for("react.block") : 60121,\n    w = b ? Symbol.for("react.fundamental") : 60117,\n    x = b ? Symbol.for("react.responder") : 60118,\n    y = b ? Symbol.for("react.scope") : 60119;\n\nfunction z(a) {\n  if ("object" === _typeof(a) && null !== a) {\n    var u = a.$$typeof;\n\n    switch (u) {\n      case c:\n        switch (a = a.type, a) {\n          case l:\n          case m:\n          case e:\n          case g:\n          case f:\n          case p:\n            return a;\n\n          default:\n            switch (a = a && a.$$typeof, a) {\n              case k:\n              case n:\n              case t:\n              case r:\n              case h:\n                return a;\n\n              default:\n                return u;\n            }\n\n        }\n\n      case d:\n        return u;\n    }\n  }\n}\n\nfunction A(a) {\n  return z(a) === m;\n}\n\nexports.AsyncMode = l;\nexports.ConcurrentMode = m;\nexports.ContextConsumer = k;\nexports.ContextProvider = h;\nexports.Element = c;\nexports.ForwardRef = n;\nexports.Fragment = e;\nexports.Lazy = t;\nexports.Memo = r;\nexports.Portal = d;\nexports.Profiler = g;\nexports.StrictMode = f;\nexports.Suspense = p;\n\nexports.isAsyncMode = function (a) {\n  return A(a) || z(a) === l;\n};\n\nexports.isConcurrentMode = A;\n\nexports.isContextConsumer = function (a) {\n  return z(a) === k;\n};\n\nexports.isContextProvider = function (a) {\n  return z(a) === h;\n};\n\nexports.isElement = function (a) {\n  return "object" === _typeof(a) && null !== a && a.$$typeof === c;\n};\n\nexports.isForwardRef = function (a) {\n  return z(a) === n;\n};\n\nexports.isFragment = function (a) {\n  return z(a) === e;\n};\n\nexports.isLazy = function (a) {\n  return z(a) === t;\n};\n\nexports.isMemo = function (a) {\n  return z(a) === r;\n};\n\nexports.isPortal = function (a) {\n  return z(a) === d;\n};\n\nexports.isProfiler = function (a) {\n  return z(a) === g;\n};\n\nexports.isStrictMode = function (a) {\n  return z(a) === f;\n};\n\nexports.isSuspense = function (a) {\n  return z(a) === p;\n};\n\nexports.isValidElementType = function (a) {\n  return "string" === typeof a || "function" === typeof a || a === e || a === m || a === g || a === f || a === p || a === q || "object" === _typeof(a) && null !== a && (a.$$typeof === t || a.$$typeof === r || a.$$typeof === h || a.$$typeof === k || a.$$typeof === n || a.$$typeof === w || a.$$typeof === x || a.$$typeof === y || a.$$typeof === v);\n};\n\nexports.typeOf = z;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n')},972:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nif (true) {\n  module.exports = __webpack_require__(5);\n} else {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTcyLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUlBLElBQUosRUFBMkM7QUFDekNHLEVBQUFBLHVDQUFBO0FBQ0QsQ0FGRCxNQUVPIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3JhX25ldy8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcz80Y2VjIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcycpO1xufVxuIl0sIm5hbWVzIjpbInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///972\n")},630:module=>{eval("module.exports = Array.isArray || function (arr) {\n  return Object.prototype.toString.call(arr) == '[object Array]';\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jcmFfbmV3Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcz9lZDA3Il0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJBcnJheSIsImlzQXJyYXkiLCJhcnIiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiXSwibWFwcGluZ3MiOiJBQUFBQSxNQUFNLENBQUNDLE9BQVAsR0FBaUJDLEtBQUssQ0FBQ0MsT0FBTixJQUFpQixVQUFVQyxHQUFWLEVBQWU7QUFDL0MsU0FBT0MsTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxRQUFqQixDQUEwQkMsSUFBMUIsQ0FBK0JKLEdBQS9CLEtBQXVDLGdCQUE5QztBQUNELENBRkQiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iXSwiZmlsZSI6IjYzMC5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///630\n")},540:(module,__unused_webpack_exports,__webpack_require__)=>{eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar isarray = __webpack_require__(630);\n/**\n * Expose `pathToRegexp`.\n */\n\n\nmodule.exports = pathToRegexp;\nmodule.exports.parse = parse;\nmodule.exports.compile = compile;\nmodule.exports.tokensToFunction = tokensToFunction;\nmodule.exports.tokensToRegExp = tokensToRegExp;\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\n\nvar PATH_REGEXP = new RegExp([// Match escaped characters that would otherwise appear in future matches.\n// This allows the user to escape special characters that won't transform.\n'(\\\\\\\\.)', // Match Express-style parameters and un-named parameters with a prefix\n// and optional suffixes. Matches appear as:\n//\n// \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\", undefined]\n// \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined, undefined]\n// \"/*\"            => [\"/\", undefined, undefined, undefined, undefined, \"*\"]\n'([\\\\/.])?(?:(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?|(\\\\*))'].join('|'), 'g');\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\n\nfunction parse(str, options) {\n  var tokens = [];\n  var key = 0;\n  var index = 0;\n  var path = '';\n  var defaultDelimiter = options && options.delimiter || '/';\n  var res;\n\n  while ((res = PATH_REGEXP.exec(str)) != null) {\n    var m = res[0];\n    var escaped = res[1];\n    var offset = res.index;\n    path += str.slice(index, offset);\n    index = offset + m.length; // Ignore already escaped sequences.\n\n    if (escaped) {\n      path += escaped[1];\n      continue;\n    }\n\n    var next = str[index];\n    var prefix = res[2];\n    var name = res[3];\n    var capture = res[4];\n    var group = res[5];\n    var modifier = res[6];\n    var asterisk = res[7]; // Push the current path onto the tokens.\n\n    if (path) {\n      tokens.push(path);\n      path = '';\n    }\n\n    var partial = prefix != null && next != null && next !== prefix;\n    var repeat = modifier === '+' || modifier === '*';\n    var optional = modifier === '?' || modifier === '*';\n    var delimiter = res[2] || defaultDelimiter;\n    var pattern = capture || group;\n    tokens.push({\n      name: name || key++,\n      prefix: prefix || '',\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      asterisk: !!asterisk,\n      pattern: pattern ? escapeGroup(pattern) : asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?'\n    });\n  } // Match any characters still remaining.\n\n\n  if (index < str.length) {\n    path += str.substr(index);\n  } // If the path exists, push it onto the end.\n\n\n  if (path) {\n    tokens.push(path);\n  }\n\n  return tokens;\n}\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\n\n\nfunction compile(str, options) {\n  return tokensToFunction(parse(str, options), options);\n}\n/**\n * Prettier encoding of URI path segments.\n *\n * @param  {string}\n * @return {string}\n */\n\n\nfunction encodeURIComponentPretty(str) {\n  return encodeURI(str).replace(/[\\/?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase();\n  });\n}\n/**\n * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.\n *\n * @param  {string}\n * @return {string}\n */\n\n\nfunction encodeAsterisk(str) {\n  return encodeURI(str).replace(/[?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase();\n  });\n}\n/**\n * Expose a method for transforming tokens into the path function.\n */\n\n\nfunction tokensToFunction(tokens, options) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length); // Compile all the patterns before compilation.\n\n  for (var i = 0; i < tokens.length; i++) {\n    if (_typeof(tokens[i]) === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$', flags(options));\n    }\n  }\n\n  return function (obj, opts) {\n    var path = '';\n    var data = obj || {};\n    var options = opts || {};\n    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent;\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i];\n\n      if (typeof token === 'string') {\n        path += token;\n        continue;\n      }\n\n      var value = data[token.name];\n      var segment;\n\n      if (value == null) {\n        if (token.optional) {\n          // Prepend partial segment prefixes.\n          if (token.partial) {\n            path += token.prefix;\n          }\n\n          continue;\n        } else {\n          throw new TypeError('Expected \"' + token.name + '\" to be defined');\n        }\n      }\n\n      if (isarray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but received `' + JSON.stringify(value) + '`');\n        }\n\n        if (value.length === 0) {\n          if (token.optional) {\n            continue;\n          } else {\n            throw new TypeError('Expected \"' + token.name + '\" to not be empty');\n          }\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j]);\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\", but received `' + JSON.stringify(segment) + '`');\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment;\n        }\n\n        continue;\n      }\n\n      segment = token.asterisk ? encodeAsterisk(value) : encode(value);\n\n      if (!matches[i].test(segment)) {\n        throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but received \"' + segment + '\"');\n      }\n\n      path += token.prefix + segment;\n    }\n\n    return path;\n  };\n}\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\n\n\nfunction escapeString(str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|\\/\\\\])/g, '\\\\$1');\n}\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\n\n\nfunction escapeGroup(group) {\n  return group.replace(/([=!:$\\/()])/g, '\\\\$1');\n}\n/**\n * Attach the keys as a property of the regexp.\n *\n * @param  {!RegExp} re\n * @param  {Array}   keys\n * @return {!RegExp}\n */\n\n\nfunction attachKeys(re, keys) {\n  re.keys = keys;\n  return re;\n}\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\n\n\nfunction flags(options) {\n  return options && options.sensitive ? '' : 'i';\n}\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {!Array}  keys\n * @return {!RegExp}\n */\n\n\nfunction regexpToRegexp(path, keys) {\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g);\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        asterisk: false,\n        pattern: null\n      });\n    }\n  }\n\n  return attachKeys(path, keys);\n}\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array}   keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\n\n\nfunction arrayToRegexp(path, keys, options) {\n  var parts = [];\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source);\n  }\n\n  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));\n  return attachKeys(regexp, keys);\n}\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {!Array}  keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\n\n\nfunction stringToRegexp(path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options);\n}\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}          tokens\n * @param  {(Array|Object)=} keys\n * @param  {Object=}         options\n * @return {!RegExp}\n */\n\n\nfunction tokensToRegExp(tokens, keys, options) {\n  if (!isarray(keys)) {\n    options = keys || options;\n    keys = [];\n  }\n\n  options = options || {};\n  var strict = options.strict;\n  var end = options.end !== false;\n  var route = ''; // Iterate over the tokens and create our regexp string.\n\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i];\n\n    if (typeof token === 'string') {\n      route += escapeString(token);\n    } else {\n      var prefix = escapeString(token.prefix);\n      var capture = '(?:' + token.pattern + ')';\n      keys.push(token);\n\n      if (token.repeat) {\n        capture += '(?:' + prefix + capture + ')*';\n      }\n\n      if (token.optional) {\n        if (!token.partial) {\n          capture = '(?:' + prefix + '(' + capture + '))?';\n        } else {\n          capture = prefix + '(' + capture + ')?';\n        }\n      } else {\n        capture = prefix + '(' + capture + ')';\n      }\n\n      route += capture;\n    }\n  }\n\n  var delimiter = escapeString(options.delimiter || '/');\n  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter; // In non-strict mode we allow a slash at the end of match. If the path to\n  // match already ends with a slash, we remove it for consistency. The slash\n  // is valid at the end of a path match, not in the middle. This is important\n  // in non-ending mode, where \"/test/\" shouldn't match \"/test//route\".\n\n  if (!strict) {\n    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?';\n  }\n\n  if (end) {\n    route += '$';\n  } else {\n    // In non-ending mode, we need the capturing groups to match as much as\n    // possible by using a positive lookahead to the end or next path segment.\n    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)';\n  }\n\n  return attachKeys(new RegExp('^' + route, flags(options)), keys);\n}\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {(Array|Object)=}       keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\n\n\nfunction pathToRegexp(path, keys, options) {\n  if (!isarray(keys)) {\n    options = keys || options;\n    keys = [];\n  }\n\n  options = options || {};\n\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, keys);\n  }\n\n  if (isarray(path)) {\n    return arrayToRegexp(path, keys, options);\n  }\n\n  return stringToRegexp(path, keys, options);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///540\n")},751:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('/** @license React v17.0.2\n * react.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nfunction _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nvar l = __webpack_require__(347),\n    n = 60103,\n    p = 60106;\n\nexports.Fragment = 60107;\nexports.StrictMode = 60108;\nexports.Profiler = 60114;\nvar q = 60109,\n    r = 60110,\n    t = 60112;\nexports.Suspense = 60113;\nvar u = 60115,\n    v = 60116;\n\nif ("function" === typeof Symbol && Symbol.for) {\n  var w = Symbol.for;\n  n = w("react.element");\n  p = w("react.portal");\n  exports.Fragment = w("react.fragment");\n  exports.StrictMode = w("react.strict_mode");\n  exports.Profiler = w("react.profiler");\n  q = w("react.provider");\n  r = w("react.context");\n  t = w("react.forward_ref");\n  exports.Suspense = w("react.suspense");\n  u = w("react.memo");\n  v = w("react.lazy");\n}\n\nvar x = "function" === typeof Symbol && Symbol.iterator;\n\nfunction y(a) {\n  if (null === a || "object" !== _typeof(a)) return null;\n  a = x && a[x] || a["@@iterator"];\n  return "function" === typeof a ? a : null;\n}\n\nfunction z(a) {\n  for (var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++) {\n    b += "&args[]=" + encodeURIComponent(arguments[c]);\n  }\n\n  return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";\n}\n\nvar A = {\n  isMounted: function isMounted() {\n    return !1;\n  },\n  enqueueForceUpdate: function enqueueForceUpdate() {},\n  enqueueReplaceState: function enqueueReplaceState() {},\n  enqueueSetState: function enqueueSetState() {}\n},\n    B = {};\n\nfunction C(a, b, c) {\n  this.props = a;\n  this.context = b;\n  this.refs = B;\n  this.updater = c || A;\n}\n\nC.prototype.isReactComponent = {};\n\nC.prototype.setState = function (a, b) {\n  if ("object" !== _typeof(a) && "function" !== typeof a && null != a) throw Error(z(85));\n  this.updater.enqueueSetState(this, a, b, "setState");\n};\n\nC.prototype.forceUpdate = function (a) {\n  this.updater.enqueueForceUpdate(this, a, "forceUpdate");\n};\n\nfunction D() {}\n\nD.prototype = C.prototype;\n\nfunction E(a, b, c) {\n  this.props = a;\n  this.context = b;\n  this.refs = B;\n  this.updater = c || A;\n}\n\nvar F = E.prototype = new D();\nF.constructor = E;\nl(F, C.prototype);\nF.isPureReactComponent = !0;\nvar G = {\n  current: null\n},\n    H = Object.prototype.hasOwnProperty,\n    I = {\n  key: !0,\n  ref: !0,\n  __self: !0,\n  __source: !0\n};\n\nfunction J(a, b, c) {\n  var e,\n      d = {},\n      k = null,\n      h = null;\n  if (null != b) for (e in void 0 !== b.ref && (h = b.ref), void 0 !== b.key && (k = "" + b.key), b) {\n    H.call(b, e) && !I.hasOwnProperty(e) && (d[e] = b[e]);\n  }\n  var g = arguments.length - 2;\n  if (1 === g) d.children = c;else if (1 < g) {\n    for (var f = Array(g), m = 0; m < g; m++) {\n      f[m] = arguments[m + 2];\n    }\n\n    d.children = f;\n  }\n  if (a && a.defaultProps) for (e in g = a.defaultProps, g) {\n    void 0 === d[e] && (d[e] = g[e]);\n  }\n  return {\n    $$typeof: n,\n    type: a,\n    key: k,\n    ref: h,\n    props: d,\n    _owner: G.current\n  };\n}\n\nfunction K(a, b) {\n  return {\n    $$typeof: n,\n    type: a.type,\n    key: b,\n    ref: a.ref,\n    props: a.props,\n    _owner: a._owner\n  };\n}\n\nfunction L(a) {\n  return "object" === _typeof(a) && null !== a && a.$$typeof === n;\n}\n\nfunction escape(a) {\n  var b = {\n    "=": "=0",\n    ":": "=2"\n  };\n  return "$" + a.replace(/[=:]/g, function (a) {\n    return b[a];\n  });\n}\n\nvar M = /\\/+/g;\n\nfunction N(a, b) {\n  return "object" === _typeof(a) && null !== a && null != a.key ? escape("" + a.key) : b.toString(36);\n}\n\nfunction O(a, b, c, e, d) {\n  var k = _typeof(a);\n\n  if ("undefined" === k || "boolean" === k) a = null;\n  var h = !1;\n  if (null === a) h = !0;else switch (k) {\n    case "string":\n    case "number":\n      h = !0;\n      break;\n\n    case "object":\n      switch (a.$$typeof) {\n        case n:\n        case p:\n          h = !0;\n      }\n\n  }\n  if (h) return h = a, d = d(h), a = "" === e ? "." + N(h, 0) : e, Array.isArray(d) ? (c = "", null != a && (c = a.replace(M, "$&/") + "/"), O(d, b, c, "", function (a) {\n    return a;\n  })) : null != d && (L(d) && (d = K(d, c + (!d.key || h && h.key === d.key ? "" : ("" + d.key).replace(M, "$&/") + "/") + a)), b.push(d)), 1;\n  h = 0;\n  e = "" === e ? "." : e + ":";\n  if (Array.isArray(a)) for (var g = 0; g < a.length; g++) {\n    k = a[g];\n    var f = e + N(k, g);\n    h += O(k, b, c, f, d);\n  } else if (f = y(a), "function" === typeof f) for (a = f.call(a), g = 0; !(k = a.next()).done;) {\n    k = k.value, f = e + N(k, g++), h += O(k, b, c, f, d);\n  } else if ("object" === k) throw b = "" + a, Error(z(31, "[object Object]" === b ? "object with keys {" + Object.keys(a).join(", ") + "}" : b));\n  return h;\n}\n\nfunction P(a, b, c) {\n  if (null == a) return a;\n  var e = [],\n      d = 0;\n  O(a, e, "", "", function (a) {\n    return b.call(c, a, d++);\n  });\n  return e;\n}\n\nfunction Q(a) {\n  if (-1 === a._status) {\n    var b = a._result;\n    b = b();\n    a._status = 0;\n    a._result = b;\n    b.then(function (b) {\n      0 === a._status && (b = b.default, a._status = 1, a._result = b);\n    }, function (b) {\n      0 === a._status && (a._status = 2, a._result = b);\n    });\n  }\n\n  if (1 === a._status) return a._result;\n  throw a._result;\n}\n\nvar R = {\n  current: null\n};\n\nfunction S() {\n  var a = R.current;\n  if (null === a) throw Error(z(321));\n  return a;\n}\n\nvar T = {\n  ReactCurrentDispatcher: R,\n  ReactCurrentBatchConfig: {\n    transition: 0\n  },\n  ReactCurrentOwner: G,\n  IsSomeRendererActing: {\n    current: !1\n  },\n  assign: l\n};\nexports.Children = {\n  map: P,\n  forEach: function forEach(a, b, c) {\n    P(a, function () {\n      b.apply(this, arguments);\n    }, c);\n  },\n  count: function count(a) {\n    var b = 0;\n    P(a, function () {\n      b++;\n    });\n    return b;\n  },\n  toArray: function toArray(a) {\n    return P(a, function (a) {\n      return a;\n    }) || [];\n  },\n  only: function only(a) {\n    if (!L(a)) throw Error(z(143));\n    return a;\n  }\n};\nexports.Component = C;\nexports.PureComponent = E;\nexports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = T;\n\nexports.cloneElement = function (a, b, c) {\n  if (null === a || void 0 === a) throw Error(z(267, a));\n  var e = l({}, a.props),\n      d = a.key,\n      k = a.ref,\n      h = a._owner;\n\n  if (null != b) {\n    void 0 !== b.ref && (k = b.ref, h = G.current);\n    void 0 !== b.key && (d = "" + b.key);\n    if (a.type && a.type.defaultProps) var g = a.type.defaultProps;\n\n    for (f in b) {\n      H.call(b, f) && !I.hasOwnProperty(f) && (e[f] = void 0 === b[f] && void 0 !== g ? g[f] : b[f]);\n    }\n  }\n\n  var f = arguments.length - 2;\n  if (1 === f) e.children = c;else if (1 < f) {\n    g = Array(f);\n\n    for (var m = 0; m < f; m++) {\n      g[m] = arguments[m + 2];\n    }\n\n    e.children = g;\n  }\n  return {\n    $$typeof: n,\n    type: a.type,\n    key: d,\n    ref: k,\n    props: e,\n    _owner: h\n  };\n};\n\nexports.createContext = function (a, b) {\n  void 0 === b && (b = null);\n  a = {\n    $$typeof: r,\n    _calculateChangedBits: b,\n    _currentValue: a,\n    _currentValue2: a,\n    _threadCount: 0,\n    Provider: null,\n    Consumer: null\n  };\n  a.Provider = {\n    $$typeof: q,\n    _context: a\n  };\n  return a.Consumer = a;\n};\n\nexports.createElement = J;\n\nexports.createFactory = function (a) {\n  var b = J.bind(null, a);\n  b.type = a;\n  return b;\n};\n\nexports.createRef = function () {\n  return {\n    current: null\n  };\n};\n\nexports.forwardRef = function (a) {\n  return {\n    $$typeof: t,\n    render: a\n  };\n};\n\nexports.isValidElement = L;\n\nexports.lazy = function (a) {\n  return {\n    $$typeof: v,\n    _payload: {\n      _status: -1,\n      _result: a\n    },\n    _init: Q\n  };\n};\n\nexports.memo = function (a, b) {\n  return {\n    $$typeof: u,\n    type: a,\n    compare: void 0 === b ? null : b\n  };\n};\n\nexports.useCallback = function (a, b) {\n  return S().useCallback(a, b);\n};\n\nexports.useContext = function (a, b) {\n  return S().useContext(a, b);\n};\n\nexports.useDebugValue = function () {};\n\nexports.useEffect = function (a, b) {\n  return S().useEffect(a, b);\n};\n\nexports.useImperativeHandle = function (a, b, c) {\n  return S().useImperativeHandle(a, b, c);\n};\n\nexports.useLayoutEffect = function (a, b) {\n  return S().useLayoutEffect(a, b);\n};\n\nexports.useMemo = function (a, b) {\n  return S().useMemo(a, b);\n};\n\nexports.useReducer = function (a, b, c) {\n  return S().useReducer(a, b, c);\n};\n\nexports.useRef = function (a) {\n  return S().useRef(a);\n};\n\nexports.useState = function (a) {\n  return S().useState(a);\n};\n\nexports.version = "17.0.2";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QWFDLENBQWIsRUFBZTtBQUFDLFNBQU93RSxDQUFDLEdBQUcyQyxtQkFBSixDQUF3QnRILENBQXhCLEVBQTBCRSxDQUExQixFQUE0QkMsQ0FBNUIsQ0FBUDtBQUFzQyxDQUFsRjs7QUFDL1huQix1QkFBQSxHQUF3QixVQUFTZ0IsQ0FBVCxFQUFXRSxDQUFYLEVBQWE7QUFBQyxTQUFPeUUsQ0FBQyxHQUFHNEMsZUFBSixDQUFvQnZILENBQXBCLEVBQXNCRSxDQUF0QixDQUFQO0FBQWdDLENBQXRFOztBQUF1RWxCLGVBQUEsR0FBZ0IsVUFBU2dCLENBQVQsRUFBV0UsQ0FBWCxFQUFhO0FBQUMsU0FBT3lFLENBQUMsR0FBRzZDLE9BQUosQ0FBWXhILENBQVosRUFBY0UsQ0FBZCxDQUFQO0FBQXdCLENBQXREOztBQUF1RGxCLGtCQUFBLEdBQW1CLFVBQVNnQixDQUFULEVBQVdFLENBQVgsRUFBYUMsQ0FBYixFQUFlO0FBQUMsU0FBT3dFLENBQUMsR0FBRzhDLFVBQUosQ0FBZXpILENBQWYsRUFBaUJFLENBQWpCLEVBQW1CQyxDQUFuQixDQUFQO0FBQTZCLENBQWhFOztBQUFpRW5CLGNBQUEsR0FBZSxVQUFTZ0IsQ0FBVCxFQUFXO0FBQUMsU0FBTzJFLENBQUMsR0FBRytDLE1BQUosQ0FBVzFILENBQVgsQ0FBUDtBQUFxQixDQUFoRDs7QUFBaURoQixnQkFBQSxHQUFpQixVQUFTZ0IsQ0FBVCxFQUFXO0FBQUMsU0FBTzJFLENBQUMsR0FBR2dELFFBQUosQ0FBYTNILENBQWIsQ0FBUDtBQUF1QixDQUFwRDs7QUFBcURoQixlQUFBLEdBQWdCLFFBQWhCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3JhX25ldy8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanM/YmUyNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQGxpY2Vuc2UgUmVhY3QgdjE3LjAuMlxuICogcmVhY3QucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3ZhciBsPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLG49NjAxMDMscD02MDEwNjtleHBvcnRzLkZyYWdtZW50PTYwMTA3O2V4cG9ydHMuU3RyaWN0TW9kZT02MDEwODtleHBvcnRzLlByb2ZpbGVyPTYwMTE0O3ZhciBxPTYwMTA5LHI9NjAxMTAsdD02MDExMjtleHBvcnRzLlN1c3BlbnNlPTYwMTEzO3ZhciB1PTYwMTE1LHY9NjAxMTY7XG5pZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yKXt2YXIgdz1TeW1ib2wuZm9yO249dyhcInJlYWN0LmVsZW1lbnRcIik7cD13KFwicmVhY3QucG9ydGFsXCIpO2V4cG9ydHMuRnJhZ21lbnQ9dyhcInJlYWN0LmZyYWdtZW50XCIpO2V4cG9ydHMuU3RyaWN0TW9kZT13KFwicmVhY3Quc3RyaWN0X21vZGVcIik7ZXhwb3J0cy5Qcm9maWxlcj13KFwicmVhY3QucHJvZmlsZXJcIik7cT13KFwicmVhY3QucHJvdmlkZXJcIik7cj13KFwicmVhY3QuY29udGV4dFwiKTt0PXcoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTtleHBvcnRzLlN1c3BlbnNlPXcoXCJyZWFjdC5zdXNwZW5zZVwiKTt1PXcoXCJyZWFjdC5tZW1vXCIpO3Y9dyhcInJlYWN0LmxhenlcIil9dmFyIHg9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO1xuZnVuY3Rpb24geShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9eCYmYVt4XXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfWZ1bmN0aW9uIHooYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9XG52YXIgQT17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX0sQj17fTtmdW5jdGlvbiBDKGEsYixjKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUI7dGhpcy51cGRhdGVyPWN8fEF9Qy5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtDLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWEpdGhyb3cgRXJyb3Ioeig4NSkpO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07Qy5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07XG5mdW5jdGlvbiBEKCl7fUQucHJvdG90eXBlPUMucHJvdG90eXBlO2Z1bmN0aW9uIEUoYSxiLGMpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9Qjt0aGlzLnVwZGF0ZXI9Y3x8QX12YXIgRj1FLnByb3RvdHlwZT1uZXcgRDtGLmNvbnN0cnVjdG9yPUU7bChGLEMucHJvdG90eXBlKTtGLmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBHPXtjdXJyZW50Om51bGx9LEg9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxJPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBKKGEsYixjKXt2YXIgZSxkPXt9LGs9bnVsbCxoPW51bGw7aWYobnVsbCE9Yilmb3IoZSBpbiB2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoaz1cIlwiK2Iua2V5KSxiKUguY2FsbChiLGUpJiYhSS5oYXNPd25Qcm9wZXJ0eShlKSYmKGRbZV09YltlXSk7dmFyIGc9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1nKWQuY2hpbGRyZW49YztlbHNlIGlmKDE8Zyl7Zm9yKHZhciBmPUFycmF5KGcpLG09MDttPGc7bSsrKWZbbV09YXJndW1lbnRzW20rMl07ZC5jaGlsZHJlbj1mfWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihlIGluIGc9YS5kZWZhdWx0UHJvcHMsZyl2b2lkIDA9PT1kW2VdJiYoZFtlXT1nW2VdKTtyZXR1cm57JCR0eXBlb2Y6bix0eXBlOmEsa2V5OmsscmVmOmgscHJvcHM6ZCxfb3duZXI6Ry5jdXJyZW50fX1cbmZ1bmN0aW9uIEsoYSxiKXtyZXR1cm57JCR0eXBlb2Y6bix0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9fWZ1bmN0aW9uIEwoYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PW59ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIj1cIjpcIj0wXCIsXCI6XCI6XCI9MlwifTtyZXR1cm5cIiRcIithLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBNPS9cXC8rL2c7ZnVuY3Rpb24gTihhLGIpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJm51bGwhPWEua2V5P2VzY2FwZShcIlwiK2Eua2V5KTpiLnRvU3RyaW5nKDM2KX1cbmZ1bmN0aW9uIE8oYSxiLGMsZSxkKXt2YXIgaz10eXBlb2YgYTtpZihcInVuZGVmaW5lZFwiPT09a3x8XCJib29sZWFuXCI9PT1rKWE9bnVsbDt2YXIgaD0hMTtpZihudWxsPT09YSloPSEwO2Vsc2Ugc3dpdGNoKGspe2Nhc2UgXCJzdHJpbmdcIjpjYXNlIFwibnVtYmVyXCI6aD0hMDticmVhaztjYXNlIFwib2JqZWN0XCI6c3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgbjpjYXNlIHA6aD0hMH19aWYoaClyZXR1cm4gaD1hLGQ9ZChoKSxhPVwiXCI9PT1lP1wiLlwiK04oaCwwKTplLEFycmF5LmlzQXJyYXkoZCk/KGM9XCJcIixudWxsIT1hJiYoYz1hLnJlcGxhY2UoTSxcIiQmL1wiKStcIi9cIiksTyhkLGIsYyxcIlwiLGZ1bmN0aW9uKGEpe3JldHVybiBhfSkpOm51bGwhPWQmJihMKGQpJiYoZD1LKGQsYysoIWQua2V5fHxoJiZoLmtleT09PWQua2V5P1wiXCI6KFwiXCIrZC5rZXkpLnJlcGxhY2UoTSxcIiQmL1wiKStcIi9cIikrYSkpLGIucHVzaChkKSksMTtoPTA7ZT1cIlwiPT09ZT9cIi5cIjplK1wiOlwiO2lmKEFycmF5LmlzQXJyYXkoYSkpZm9yKHZhciBnPVxuMDtnPGEubGVuZ3RoO2crKyl7az1hW2ddO3ZhciBmPWUrTihrLGcpO2grPU8oayxiLGMsZixkKX1lbHNlIGlmKGY9eShhKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksZz0wOyEoaz1hLm5leHQoKSkuZG9uZTspaz1rLnZhbHVlLGY9ZStOKGssZysrKSxoKz1PKGssYixjLGYsZCk7ZWxzZSBpZihcIm9iamVjdFwiPT09ayl0aHJvdyBiPVwiXCIrYSxFcnJvcih6KDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1iP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmIpKTtyZXR1cm4gaH1mdW5jdGlvbiBQKGEsYixjKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBlPVtdLGQ9MDtPKGEsZSxcIlwiLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGIuY2FsbChjLGEsZCsrKX0pO3JldHVybiBlfVxuZnVuY3Rpb24gUShhKXtpZigtMT09PWEuX3N0YXR1cyl7dmFyIGI9YS5fcmVzdWx0O2I9YigpO2EuX3N0YXR1cz0wO2EuX3Jlc3VsdD1iO2IudGhlbihmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYj1iLmRlZmF1bHQsYS5fc3RhdHVzPTEsYS5fcmVzdWx0PWIpfSxmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYS5fc3RhdHVzPTIsYS5fcmVzdWx0PWIpfSl9aWYoMT09PWEuX3N0YXR1cylyZXR1cm4gYS5fcmVzdWx0O3Rocm93IGEuX3Jlc3VsdDt9dmFyIFI9e2N1cnJlbnQ6bnVsbH07ZnVuY3Rpb24gUygpe3ZhciBhPVIuY3VycmVudDtpZihudWxsPT09YSl0aHJvdyBFcnJvcih6KDMyMSkpO3JldHVybiBhfXZhciBUPXtSZWFjdEN1cnJlbnREaXNwYXRjaGVyOlIsUmVhY3RDdXJyZW50QmF0Y2hDb25maWc6e3RyYW5zaXRpb246MH0sUmVhY3RDdXJyZW50T3duZXI6RyxJc1NvbWVSZW5kZXJlckFjdGluZzp7Y3VycmVudDohMX0sYXNzaWduOmx9O1xuZXhwb3J0cy5DaGlsZHJlbj17bWFwOlAsZm9yRWFjaDpmdW5jdGlvbihhLGIsYyl7UChhLGZ1bmN0aW9uKCl7Yi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LGMpfSxjb3VudDpmdW5jdGlvbihhKXt2YXIgYj0wO1AoYSxmdW5jdGlvbigpe2IrK30pO3JldHVybiBifSx0b0FycmF5OmZ1bmN0aW9uKGEpe3JldHVybiBQKGEsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KXx8W119LG9ubHk6ZnVuY3Rpb24oYSl7aWYoIUwoYSkpdGhyb3cgRXJyb3IoeigxNDMpKTtyZXR1cm4gYX19O2V4cG9ydHMuQ29tcG9uZW50PUM7ZXhwb3J0cy5QdXJlQ29tcG9uZW50PUU7ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD1UO1xuZXhwb3J0cy5jbG9uZUVsZW1lbnQ9ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGw9PT1hfHx2b2lkIDA9PT1hKXRocm93IEVycm9yKHooMjY3LGEpKTt2YXIgZT1sKHt9LGEucHJvcHMpLGQ9YS5rZXksaz1hLnJlZixoPWEuX293bmVyO2lmKG51bGwhPWIpe3ZvaWQgMCE9PWIucmVmJiYoaz1iLnJlZixoPUcuY3VycmVudCk7dm9pZCAwIT09Yi5rZXkmJihkPVwiXCIrYi5rZXkpO2lmKGEudHlwZSYmYS50eXBlLmRlZmF1bHRQcm9wcyl2YXIgZz1hLnR5cGUuZGVmYXVsdFByb3BzO2ZvcihmIGluIGIpSC5jYWxsKGIsZikmJiFJLmhhc093blByb3BlcnR5KGYpJiYoZVtmXT12b2lkIDA9PT1iW2ZdJiZ2b2lkIDAhPT1nP2dbZl06YltmXSl9dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWUuY2hpbGRyZW49YztlbHNlIGlmKDE8Zil7Zz1BcnJheShmKTtmb3IodmFyIG09MDttPGY7bSsrKWdbbV09YXJndW1lbnRzW20rMl07ZS5jaGlsZHJlbj1nfXJldHVybnskJHR5cGVvZjpuLHR5cGU6YS50eXBlLFxua2V5OmQscmVmOmsscHJvcHM6ZSxfb3duZXI6aH19O2V4cG9ydHMuY3JlYXRlQ29udGV4dD1mdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPW51bGwpO2E9eyQkdHlwZW9mOnIsX2NhbGN1bGF0ZUNoYW5nZWRCaXRzOmIsX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX3RocmVhZENvdW50OjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjpxLF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9O2V4cG9ydHMuY3JlYXRlRWxlbWVudD1KO2V4cG9ydHMuY3JlYXRlRmFjdG9yeT1mdW5jdGlvbihhKXt2YXIgYj1KLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn07ZXhwb3J0cy5jcmVhdGVSZWY9ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX07ZXhwb3J0cy5mb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp0LHJlbmRlcjphfX07ZXhwb3J0cy5pc1ZhbGlkRWxlbWVudD1MO1xuZXhwb3J0cy5sYXp5PWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp2LF9wYXlsb2FkOntfc3RhdHVzOi0xLF9yZXN1bHQ6YX0sX2luaXQ6UX19O2V4cG9ydHMubWVtbz1mdW5jdGlvbihhLGIpe3JldHVybnskJHR5cGVvZjp1LHR5cGU6YSxjb21wYXJlOnZvaWQgMD09PWI/bnVsbDpifX07ZXhwb3J0cy51c2VDYWxsYmFjaz1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlQ2FsbGJhY2soYSxiKX07ZXhwb3J0cy51c2VDb250ZXh0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VDb250ZXh0KGEsYil9O2V4cG9ydHMudXNlRGVidWdWYWx1ZT1mdW5jdGlvbigpe307ZXhwb3J0cy51c2VFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZUVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUltcGVyYXRpdmVIYW5kbGU9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBTKCkudXNlSW1wZXJhdGl2ZUhhbmRsZShhLGIsYyl9O1xuZXhwb3J0cy51c2VMYXlvdXRFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZUxheW91dEVmZmVjdChhLGIpfTtleHBvcnRzLnVzZU1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZU1lbW8oYSxiKX07ZXhwb3J0cy51c2VSZWR1Y2VyPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gUygpLnVzZVJlZHVjZXIoYSxiLGMpfTtleHBvcnRzLnVzZVJlZj1mdW5jdGlvbihhKXtyZXR1cm4gUygpLnVzZVJlZihhKX07ZXhwb3J0cy51c2VTdGF0ZT1mdW5jdGlvbihhKXtyZXR1cm4gUygpLnVzZVN0YXRlKGEpfTtleHBvcnRzLnZlcnNpb249XCIxNy4wLjJcIjtcbiJdLCJuYW1lcyI6WyJsIiwicmVxdWlyZSIsIm4iLCJwIiwiZXhwb3J0cyIsIkZyYWdtZW50IiwiU3RyaWN0TW9kZSIsIlByb2ZpbGVyIiwicSIsInIiLCJ0IiwiU3VzcGVuc2UiLCJ1IiwidiIsIlN5bWJvbCIsImZvciIsInciLCJ4IiwiaXRlcmF0b3IiLCJ5IiwiYSIsInoiLCJiIiwiYyIsImFyZ3VtZW50cyIsImxlbmd0aCIsImVuY29kZVVSSUNvbXBvbmVudCIsIkEiLCJpc01vdW50ZWQiLCJlbnF1ZXVlRm9yY2VVcGRhdGUiLCJlbnF1ZXVlUmVwbGFjZVN0YXRlIiwiZW5xdWV1ZVNldFN0YXRlIiwiQiIsIkMiLCJwcm9wcyIsImNvbnRleHQiLCJyZWZzIiwidXBkYXRlciIsInByb3RvdHlwZSIsImlzUmVhY3RDb21wb25lbnQiLCJzZXRTdGF0ZSIsIkVycm9yIiwiZm9yY2VVcGRhdGUiLCJEIiwiRSIsIkYiLCJjb25zdHJ1Y3RvciIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwiRyIsImN1cnJlbnQiLCJIIiwiT2JqZWN0IiwiaGFzT3duUHJvcGVydHkiLCJJIiwia2V5IiwicmVmIiwiX19zZWxmIiwiX19zb3VyY2UiLCJKIiwiZSIsImQiLCJrIiwiaCIsImNhbGwiLCJnIiwiY2hpbGRyZW4iLCJmIiwiQXJyYXkiLCJtIiwiZGVmYXVsdFByb3BzIiwiJCR0eXBlb2YiLCJ0eXBlIiwiX293bmVyIiwiSyIsIkwiLCJlc2NhcGUiLCJyZXBsYWNlIiwiTSIsIk4iLCJ0b1N0cmluZyIsIk8iLCJpc0FycmF5IiwicHVzaCIsIm5leHQiLCJkb25lIiwidmFsdWUiLCJrZXlzIiwiam9pbiIsIlAiLCJRIiwiX3N0YXR1cyIsIl9yZXN1bHQiLCJ0aGVuIiwiZGVmYXVsdCIsIlIiLCJTIiwiVCIsIlJlYWN0Q3VycmVudERpc3BhdGNoZXIiLCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyIsInRyYW5zaXRpb24iLCJSZWFjdEN1cnJlbnRPd25lciIsIklzU29tZVJlbmRlcmVyQWN0aW5nIiwiYXNzaWduIiwiQ2hpbGRyZW4iLCJtYXAiLCJmb3JFYWNoIiwiYXBwbHkiLCJjb3VudCIsInRvQXJyYXkiLCJvbmx5IiwiQ29tcG9uZW50IiwiUHVyZUNvbXBvbmVudCIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwiY2xvbmVFbGVtZW50IiwiY3JlYXRlQ29udGV4dCIsIl9jYWxjdWxhdGVDaGFuZ2VkQml0cyIsIl9jdXJyZW50VmFsdWUiLCJfY3VycmVudFZhbHVlMiIsIl90aHJlYWRDb3VudCIsIlByb3ZpZGVyIiwiQ29uc3VtZXIiLCJfY29udGV4dCIsImNyZWF0ZUVsZW1lbnQiLCJjcmVhdGVGYWN0b3J5IiwiYmluZCIsImNyZWF0ZVJlZiIsImZvcndhcmRSZWYiLCJyZW5kZXIiLCJpc1ZhbGlkRWxlbWVudCIsImxhenkiLCJfcGF5bG9hZCIsIl9pbml0IiwibWVtbyIsImNvbXBhcmUiLCJ1c2VDYWxsYmFjayIsInVzZUNvbnRleHQiLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlRWZmZWN0IiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsInVzZUxheW91dEVmZmVjdCIsInVzZU1lbW8iLCJ1c2VSZWR1Y2VyIiwidXNlUmVmIiwidXNlU3RhdGUiLCJ2ZXJzaW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///751\n')},466:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nif (true) {\n  module.exports = __webpack_require__(751);\n} else {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDY2LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUlBLElBQUosRUFBMkM7QUFDekNHLEVBQUFBLHlDQUFBO0FBQ0QsQ0FGRCxNQUVPIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3JhX25ldy8uL25vZGVfbW9kdWxlcy9yZWFjdC9pbmRleC5qcz9hYjViIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIl0sIm5hbWVzIjpbInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///466\n")},588:(module,__unused_webpack_exports,__webpack_require__)=>{eval('/* module decorator */ module = __webpack_require__.nmd(module);\nfunction _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar runtime = function (exports) {\n  "use strict";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n\n  var $Symbol = typeof Symbol === "function" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || "@@iterator";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";\n  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, "");\n  } catch (err) {\n    define = function define(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n    return generator;\n  }\n\n  exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there\'s no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don\'t have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n\n  function tryCatch(fn, obj, arg) {\n    try {\n      return {\n        type: "normal",\n        arg: fn.call(obj, arg)\n      };\n    } catch (err) {\n      return {\n        type: "throw",\n        arg: err\n      };\n    }\n  }\n\n  var GenStateSuspendedStart = "suspendedStart";\n  var GenStateSuspendedYield = "suspendedYield";\n  var GenStateExecuting = "executing";\n  var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n\n  var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n\n  function Generator() {}\n\n  function GeneratorFunction() {}\n\n  function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that\n  // don\'t natively support it.\n\n\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n\n  if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, "constructor", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);\n  GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"); // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n\n  function defineIteratorMethods(prototype) {\n    ["next", "throw", "return"].forEach(function (method) {\n      define(prototype, method, function (arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function (genFun) {\n    var ctor = typeof genFun === "function" && genFun.constructor;\n    return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can\n    // do is to check its .name property.\n    (ctor.displayName || ctor.name) === "GeneratorFunction" : false;\n  };\n\n  exports.mark = function (genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, "GeneratorFunction");\n    }\n\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  }; // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, "__await")` to determine if the yielded value is\n  // meant to be awaited.\n\n\n  exports.awrap = function (arg) {\n    return {\n      __await: arg\n    };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n\n      if (record.type === "throw") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n\n        if (value && _typeof(value) === "object" && hasOwn.call(value, "__await")) {\n          return PromiseImpl.resolve(value.__await).then(function (value) {\n            invoke("next", value, resolve, reject);\n          }, function (err) {\n            invoke("throw", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function (unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function (error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke("throw", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function (resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise = // If enqueue has been called before, then we want to wait until\n      // all previous Promises have been resolved before calling invoke,\n      // so that results are always delivered in the correct order. If\n      // enqueue has not been called before, then it is important to\n      // call invoke immediately, without waiting on a callback to fire,\n      // so that the async generator function has the opportunity to do\n      // any necessary setup in a predictable way. This predictability\n      // is why the Promise constructor synchronously invokes its\n      // executor callback, and why async functions synchronously\n      // execute code before the first await. Since we implement simple\n      // async functions in terms of async generators, it is especially\n      // important to get this right, even though it requires care.\n      previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later\n      // invocations of the iterator.\n      callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n    } // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n\n\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n\n  exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);\n    return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.\n    : iter.next().then(function (result) {\n      return result.done ? result.value : iter.next();\n    });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error("Generator is already running");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === "throw") {\n          throw arg;\n        } // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n\n\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === "next") {\n          // Setting context._sent for legacy support of Babel\'s\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n        } else if (context.method === "throw") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n        } else if (context.method === "return") {\n          context.abrupt("return", context.arg);\n        }\n\n        state = GenStateExecuting;\n        var record = tryCatch(innerFn, self, context);\n\n        if (record.type === "normal") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done ? GenStateCompleted : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n        } else if (record.type === "throw") {\n          state = GenStateCompleted; // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n\n          context.method = "throw";\n          context.arg = record.arg;\n        }\n      }\n    };\n  } // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n\n\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === "throw") {\n        // Note: ["return"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator["return"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = "return";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === "throw") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // "return" to "throw", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = "throw";\n        context.arg = new TypeError("The iterator does not provide a \'throw\' method");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === "throw") {\n      context.method = "throw";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (!info) {\n      context.method = "throw";\n      context.arg = new TypeError("iterator result is not an object");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).\n\n      context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was "next", forget context.arg since it has been\n      // "consumed" by the delegate iterator. If context.method was\n      // "return", allow the original .return call to continue in the\n      // outer generator.\n\n      if (context.method !== "return") {\n        context.method = "next";\n        context.arg = undefined;\n      }\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    } // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n\n\n    context.delegate = null;\n    return ContinueSentinel;\n  } // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n\n\n  defineIteratorMethods(Gp);\n  define(Gp, toStringTagSymbol, "Generator"); // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers\' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn\'t happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n\n  define(Gp, iteratorSymbol, function () {\n    return this;\n  });\n  define(Gp, "toString", function () {\n    return "[object Generator]";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = {\n      tryLoc: locs[0]\n    };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = "normal";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{\n      tryLoc: "root"\n    }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function (object) {\n    var keys = [];\n\n    for (var key in object) {\n      keys.push(key);\n    }\n\n    keys.reverse(); // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      } // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n\n\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === "function") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1,\n            next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n          return next;\n        };\n\n        return next.next = next;\n      }\n    } // Return an iterator with no values.\n\n\n    return {\n      next: doneResult\n    };\n  }\n\n  exports.values = values;\n\n  function doneResult() {\n    return {\n      value: undefined,\n      done: true\n    };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n    reset: function reset(skipTempReset) {\n      this.prev = 0;\n      this.next = 0; // Resetting context._sent for legacy support of Babel\'s\n      // function.sent implementation.\n\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n      this.method = "next";\n      this.arg = undefined;\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n    stop: function stop() {\n      this.done = true;\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n\n      if (rootRecord.type === "throw") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n    dispatchException: function dispatchException(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n\n      function handle(loc, caught) {\n        record.type = "throw";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = "next";\n          context.arg = undefined;\n        }\n\n        return !!caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === "root") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle("end");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, "catchLoc");\n          var hasFinally = hasOwn.call(entry, "finallyLoc");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n          } else {\n            throw new Error("try statement without catch or finally");\n          }\n        }\n      }\n    },\n    abrupt: function abrupt(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = "next";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n    complete: function complete(record, afterLoc) {\n      if (record.type === "throw") {\n        throw record.arg;\n      }\n\n      if (record.type === "break" || record.type === "continue") {\n        this.next = record.arg;\n      } else if (record.type === "return") {\n        this.rval = this.arg = record.arg;\n        this.method = "return";\n        this.next = "end";\n      } else if (record.type === "normal" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n    finish: function finish(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n    "catch": function _catch(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n\n          if (record.type === "throw") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n\n          return thrown;\n        }\n      } // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n\n\n      throw new Error("illegal catch attempt");\n    },\n    delegateYield: function delegateYield(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === "next") {\n        // Deliberately forget the last sent value so that we don\'t\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  }; // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n\n  return exports;\n}( // If this script is executing as a CommonJS module, use module.exports\n// as the regeneratorRuntime namespace. Otherwise create a new empty\n// object. Either way, the resulting object will be used to initialize\n// the regeneratorRuntime variable at the top of this file.\n( false ? 0 : _typeof(module)) === "object" ? module.exports : {});\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you\'ve misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you\'re not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if ((typeof globalThis === "undefined" ? "undefined" : _typeof(globalThis)) === "object") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function("r", "regeneratorRuntime = r")(runtime);\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LFVBQVAseUNBQU9BLFVBQVAsT0FBc0IsUUFBMUIsRUFBb0M7QUFDbENBLElBQUFBLFVBQVUsQ0FBQ0Ysa0JBQVgsR0FBZ0MvSSxPQUFoQztBQUNELEdBRkQsTUFFTztBQUNMa0osSUFBQUEsUUFBUSxDQUFDLEdBQUQsRUFBTSx3QkFBTixDQUFSLENBQXdDbEosT0FBeEM7QUFDRDtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3JhX25ldy8uL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanM/OTZjZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbnZhciBydW50aW1lID0gKGZ1bmN0aW9uIChleHBvcnRzKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBPcCA9IE9iamVjdC5wcm90b3R5cGU7XG4gIHZhciBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIHVuZGVmaW5lZDsgLy8gTW9yZSBjb21wcmVzc2libGUgdGhhbiB2b2lkIDAuXG4gIHZhciAkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sIDoge307XG4gIHZhciBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgXCJAQGl0ZXJhdG9yXCI7XG4gIHZhciBhc3luY0l0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCI7XG4gIHZhciB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG5cbiAgZnVuY3Rpb24gZGVmaW5lKG9iaiwga2V5LCB2YWx1ZSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIG9ialtrZXldO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gSUUgOCBoYXMgYSBicm9rZW4gT2JqZWN0LmRlZmluZVByb3BlcnR5IHRoYXQgb25seSB3b3JrcyBvbiBET00gb2JqZWN0cy5cbiAgICBkZWZpbmUoe30sIFwiXCIpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBkZWZpbmUgPSBmdW5jdGlvbihvYmosIGtleSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBvYmpba2V5XSA9IHZhbHVlO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBleHBvcnRzLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBkZWZpbmUoSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pO1xuXG4gIHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgdmFyIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO1xuICBpZiAoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgJiZcbiAgICAgIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPcCAmJlxuICAgICAgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSkge1xuICAgIC8vIFRoaXMgZW52aXJvbm1lbnQgaGFzIGEgbmF0aXZlICVJdGVyYXRvclByb3RvdHlwZSU7IHVzZSBpdCBpbnN0ZWFkXG4gICAgLy8gb2YgdGhlIHBvbHlmaWxsLlxuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cblxuICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPVxuICAgIEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gIGRlZmluZShHcCwgXCJjb25zdHJ1Y3RvclwiLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gIGRlZmluZShHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSwgXCJjb25zdHJ1Y3RvclwiLCBHZW5lcmF0b3JGdW5jdGlvbik7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gZGVmaW5lKFxuICAgIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLFxuICAgIHRvU3RyaW5nVGFnU3ltYm9sLFxuICAgIFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICApO1xuXG4gIC8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlXG4gIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIGRlZmluZShwcm90b3R5cGUsIG1ldGhvZCwgZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICB2YXIgY3RvciA9IHR5cGVvZiBnZW5GdW4gPT09IFwiZnVuY3Rpb25cIiAmJiBnZW5GdW4uY29uc3RydWN0b3I7XG4gICAgcmV0dXJuIGN0b3JcbiAgICAgID8gY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHxcbiAgICAgICAgLy8gRm9yIHRoZSBuYXRpdmUgR2VuZXJhdG9yRnVuY3Rpb24gY29uc3RydWN0b3IsIHRoZSBiZXN0IHdlIGNhblxuICAgICAgICAvLyBkbyBpcyB0byBjaGVjayBpdHMgLm5hbWUgcHJvcGVydHkuXG4gICAgICAgIChjdG9yLmRpc3BsYXlOYW1lIHx8IGN0b3IubmFtZSkgPT09IFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICAgICAgOiBmYWxzZTtcbiAgfTtcblxuICBleHBvcnRzLm1hcmsgPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoZ2VuRnVuLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdlbkZ1bi5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgICAgIGRlZmluZShnZW5GdW4sIHRvU3RyaW5nVGFnU3ltYm9sLCBcIkdlbmVyYXRvckZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7XG4gICAgcmV0dXJuIGdlbkZ1bjtcbiAgfTtcblxuICAvLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG9cbiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3RcbiAgLy8gYGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIilgIHRvIGRldGVybWluZSBpZiB0aGUgeWllbGRlZCB2YWx1ZSBpc1xuICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLlxuICBleHBvcnRzLmF3cmFwID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHsgX19hd2FpdDogYXJnIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IsIFByb21pc2VJbXBsKSB7XG4gICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpO1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgcmVqZWN0KHJlY29yZC5hcmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlY29yZC5hcmc7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZS5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJuZXh0XCIsIHZhbHVlLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgZXJyLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7XG4gICAgICAgICAgLy8gV2hlbiBhIHlpZWxkZWQgUHJvbWlzZSBpcyByZXNvbHZlZCwgaXRzIGZpbmFsIHZhbHVlIGJlY29tZXNcbiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGVcbiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi5cbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIC8vIElmIGEgcmVqZWN0ZWQgUHJvbWlzZSB3YXMgeWllbGRlZCwgdGhyb3cgdGhlIHJlamVjdGlvbiBiYWNrXG4gICAgICAgICAgLy8gaW50byB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIHNvIGl0IGNhbiBiZSBoYW5kbGVkIHRoZXJlLlxuICAgICAgICAgIHJldHVybiBpbnZva2UoXCJ0aHJvd1wiLCBlcnJvciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2VJbXBsKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1Byb21pc2UgPVxuICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsXG4gICAgICAgIC8vIGFsbCBwcmV2aW91cyBQcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYmVmb3JlIGNhbGxpbmcgaW52b2tlLFxuICAgICAgICAvLyBzbyB0aGF0IHJlc3VsdHMgYXJlIGFsd2F5cyBkZWxpdmVyZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIElmXG4gICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvXG4gICAgICAgIC8vIGNhbGwgaW52b2tlIGltbWVkaWF0ZWx5LCB3aXRob3V0IHdhaXRpbmcgb24gYSBjYWxsYmFjayB0byBmaXJlLFxuICAgICAgICAvLyBzbyB0aGF0IHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gaGFzIHRoZSBvcHBvcnR1bml0eSB0byBkb1xuICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5XG4gICAgICAgIC8vIGlzIHdoeSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3RvciBzeW5jaHJvbm91c2x5IGludm9rZXMgaXRzXG4gICAgICAgIC8vIGV4ZWN1dG9yIGNhbGxiYWNrLCBhbmQgd2h5IGFzeW5jIGZ1bmN0aW9ucyBzeW5jaHJvbm91c2x5XG4gICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlXG4gICAgICAgIC8vIGFzeW5jIGZ1bmN0aW9ucyBpbiB0ZXJtcyBvZiBhc3luYyBnZW5lcmF0b3JzLCBpdCBpcyBlc3BlY2lhbGx5XG4gICAgICAgIC8vIGltcG9ydGFudCB0byBnZXQgdGhpcyByaWdodCwgZXZlbiB0aG91Z2ggaXQgcmVxdWlyZXMgY2FyZS5cbiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsXG4gICAgICAgICAgLy8gQXZvaWQgcHJvcGFnYXRpbmcgZmFpbHVyZXMgdG8gUHJvbWlzZXMgcmV0dXJuZWQgYnkgbGF0ZXJcbiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmdcbiAgICAgICAgKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmaW5lIHRoZSB1bmlmaWVkIGhlbHBlciBtZXRob2QgdGhhdCBpcyB1c2VkIHRvIGltcGxlbWVudCAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS5cbiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlO1xuICB9XG5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTtcbiAgZGVmaW5lKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlLCBhc3luY0l0ZXJhdG9yU3ltYm9sLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pO1xuICBleHBvcnRzLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yO1xuXG4gIC8vIE5vdGUgdGhhdCBzaW1wbGUgYXN5bmMgZnVuY3Rpb25zIGFyZSBpbXBsZW1lbnRlZCBvbiB0b3Agb2ZcbiAgLy8gQXN5bmNJdGVyYXRvciBvYmplY3RzOyB0aGV5IGp1c3QgcmV0dXJuIGEgUHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9mXG4gIC8vIHRoZSBmaW5hbCByZXN1bHQgcHJvZHVjZWQgYnkgdGhlIGl0ZXJhdG9yLlxuICBleHBvcnRzLmFzeW5jID0gZnVuY3Rpb24oaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QsIFByb21pc2VJbXBsKSB7XG4gICAgaWYgKFByb21pc2VJbXBsID09PSB2b2lkIDApIFByb21pc2VJbXBsID0gUHJvbWlzZTtcblxuICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3IoXG4gICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSxcbiAgICAgIFByb21pc2VJbXBsXG4gICAgKTtcblxuICAgIHJldHVybiBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAvLyBOb3RlOiBbXCJyZXR1cm5cIl0gbXVzdCBiZSB1c2VkIGZvciBFUzMgcGFyc2luZyBjb21wYXRpYmlsaXR5LlxuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3JbXCJyZXR1cm5cIl0pIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcblxuICAgICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICAvLyBJZiBtYXliZUludm9rZURlbGVnYXRlKGNvbnRleHQpIGNoYW5nZWQgY29udGV4dC5tZXRob2QgZnJvbVxuICAgICAgICAgICAgLy8gXCJyZXR1cm5cIiB0byBcInRocm93XCIsIGxldCB0aGF0IG92ZXJyaWRlIHRoZSBUeXBlRXJyb3IgYmVsb3cuXG4gICAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcblxuICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuXG4gICAgaWYgKCEgaW5mbykge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKTtcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgaWYgKGluZm8uZG9uZSkge1xuICAgICAgLy8gQXNzaWduIHRoZSByZXN1bHQgb2YgdGhlIGZpbmlzaGVkIGRlbGVnYXRlIHRvIHRoZSB0ZW1wb3JhcnlcbiAgICAgIC8vIHZhcmlhYmxlIHNwZWNpZmllZCBieSBkZWxlZ2F0ZS5yZXN1bHROYW1lIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcblxuICAgICAgLy8gUmVzdW1lIGV4ZWN1dGlvbiBhdCB0aGUgZGVzaXJlZCBsb2NhdGlvbiAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcblxuICAgICAgLy8gSWYgY29udGV4dC5tZXRob2Qgd2FzIFwidGhyb3dcIiBidXQgdGhlIGRlbGVnYXRlIGhhbmRsZWQgdGhlXG4gICAgICAvLyBleGNlcHRpb24sIGxldCB0aGUgb3V0ZXIgZ2VuZXJhdG9yIHByb2NlZWQgbm9ybWFsbHkuIElmXG4gICAgICAvLyBjb250ZXh0Lm1ldGhvZCB3YXMgXCJuZXh0XCIsIGZvcmdldCBjb250ZXh0LmFyZyBzaW5jZSBpdCBoYXMgYmVlblxuICAgICAgLy8gXCJjb25zdW1lZFwiIGJ5IHRoZSBkZWxlZ2F0ZSBpdGVyYXRvci4gSWYgY29udGV4dC5tZXRob2Qgd2FzXG4gICAgICAvLyBcInJldHVyblwiLCBhbGxvdyB0aGUgb3JpZ2luYWwgLnJldHVybiBjYWxsIHRvIGNvbnRpbnVlIGluIHRoZVxuICAgICAgLy8gb3V0ZXIgZ2VuZXJhdG9yLlxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kICE9PSBcInJldHVyblwiKSB7XG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlLXlpZWxkIHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGRlbGVnYXRlIG1ldGhvZC5cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cblxuICAgIC8vIFRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBpcyBmaW5pc2hlZCwgc28gZm9yZ2V0IGl0IGFuZCBjb250aW51ZSB3aXRoXG4gICAgLy8gdGhlIG91dGVyIGdlbmVyYXRvci5cbiAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBkZWZpbmUoR3AsIHRvU3RyaW5nVGFnU3ltYm9sLCBcIkdlbmVyYXRvclwiKTtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIGRlZmluZShHcCwgaXRlcmF0b3JTeW1ib2wsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9KTtcblxuICBkZWZpbmUoR3AsIFwidG9TdHJpbmdcIiwgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XG4gICAgdmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTtcblxuICAgIGlmICgxIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoMiBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXTtcbiAgICAgIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXTtcbiAgICB9XG5cbiAgICB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7XG4gICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307XG4gICAgcmVjb3JkLnR5cGUgPSBcIm5vcm1hbFwiO1xuICAgIGRlbGV0ZSByZWNvcmQuYXJnO1xuICAgIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7XG4gIH1cblxuICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gVGhlIHJvb3QgZW50cnkgb2JqZWN0IChlZmZlY3RpdmVseSBhIHRyeSBzdGF0ZW1lbnQgd2l0aG91dCBhIGNhdGNoXG4gICAgLy8gb3IgYSBmaW5hbGx5IGJsb2NrKSBnaXZlcyB1cyBhIHBsYWNlIHRvIHN0b3JlIHZhbHVlcyB0aHJvd24gZnJvbVxuICAgIC8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC5cbiAgICB0aGlzLnRyeUVudHJpZXMgPSBbeyB0cnlMb2M6IFwicm9vdFwiIH1dO1xuICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTtcbiAgICB0aGlzLnJlc2V0KHRydWUpO1xuICB9XG5cbiAgZXhwb3J0cy5rZXlzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB9XG4gICAga2V5cy5yZXZlcnNlKCk7XG5cbiAgICAvLyBSYXRoZXIgdGhhbiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggYSBuZXh0IG1ldGhvZCwgd2Uga2VlcFxuICAgIC8vIHRoaW5ncyBzaW1wbGUgYW5kIHJldHVybiB0aGUgbmV4dCBmdW5jdGlvbiBpdHNlbGYuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB3aGlsZSAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7XG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgbmV4dC52YWx1ZSA9IGtleTtcbiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUbyBhdm9pZCBjcmVhdGluZyBhbiBhZGRpdGlvbmFsIG9iamVjdCwgd2UganVzdCBoYW5nIHRoZSAudmFsdWVcbiAgICAgIC8vIGFuZCAuZG9uZSBwcm9wZXJ0aWVzIG9mZiB0aGUgbmV4dCBmdW5jdGlvbiBvYmplY3QgaXRzZWxmLiBUaGlzXG4gICAgICAvLyBhbHNvIGVuc3VyZXMgdGhhdCB0aGUgbWluaWZpZXIgd2lsbCBub3QgYW5vbnltaXplIHRoZSBmdW5jdGlvbi5cbiAgICAgIG5leHQuZG9uZSA9IHRydWU7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbHVlcyhpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdO1xuICAgICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IGl0ZXJhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkge1xuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07XG4gICAgICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG5leHQuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYW4gaXRlcmF0b3Igd2l0aCBubyB2YWx1ZXMuXG4gICAgcmV0dXJuIHsgbmV4dDogZG9uZVJlc3VsdCB9O1xuICB9XG4gIGV4cG9ydHMudmFsdWVzID0gdmFsdWVzO1xuXG4gIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG5cbiAgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG5cbiAgICByZXNldDogZnVuY3Rpb24oc2tpcFRlbXBSZXNldCkge1xuICAgICAgdGhpcy5wcmV2ID0gMDtcbiAgICAgIHRoaXMubmV4dCA9IDA7XG4gICAgICAvLyBSZXNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpO1xuXG4gICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgICAgLy8gTm90IHN1cmUgYWJvdXQgdGhlIG9wdGltYWwgb3JkZXIgb2YgdGhlc2UgY29uZGl0aW9uczpcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmXG4gICAgICAgICAgICAgIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmXG4gICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcblxuICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcbiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247XG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcblxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSBcInRocm93XCI7XG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcblxuICAgICAgICBpZiAoY2F1Z2h0KSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRpc3BhdGNoZWQgZXhjZXB0aW9uIHdhcyBjYXVnaHQgYnkgYSBjYXRjaCBibG9jayxcbiAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gISEgY2F1Z2h0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gXCJyb290XCIpIHtcbiAgICAgICAgICAvLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZVxuICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xuICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XG4gICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uKHR5cGUsIGFyZykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmXG4gICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiZcbiAgICAgICAgICAodHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgIHR5cGUgPT09IFwiY29udGludWVcIikgJiZcbiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJlxuICAgICAgICAgIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZWNvcmQudHlwZSA9IHR5cGU7XG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xuXG4gICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xuICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY29tcGxldGUocmVjb3JkKTtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgcmVjb3JkLnR5cGUgPT09IFwiY29udGludWVcIikge1xuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICB0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gXCJlbmRcIjtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIgJiYgYWZ0ZXJMb2MpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH0sXG5cbiAgICBmaW5pc2g6IGZ1bmN0aW9uKGZpbmFsbHlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykge1xuICAgICAgICAgIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpO1xuICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24odHJ5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIHZhciB0aHJvd24gPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aHJvd247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGNvbnRleHQuY2F0Y2ggbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uXG4gICAgICAvLyBhcmd1bWVudCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEga25vd24gY2F0Y2ggYmxvY2suXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIik7XG4gICAgfSxcblxuICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uKGl0ZXJhYmxlLCByZXN1bHROYW1lLCBuZXh0TG9jKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlID0ge1xuICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSxcbiAgICAgICAgcmVzdWx0TmFtZTogcmVzdWx0TmFtZSxcbiAgICAgICAgbmV4dExvYzogbmV4dExvY1xuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndFxuICAgICAgICAvLyBhY2NpZGVudGFsbHkgcGFzcyBpdCBvbiB0byB0aGUgZGVsZWdhdGUuXG4gICAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH07XG5cbiAgLy8gUmVnYXJkbGVzcyBvZiB3aGV0aGVyIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZVxuICAvLyBvciBub3QsIHJldHVybiB0aGUgcnVudGltZSBvYmplY3Qgc28gdGhhdCB3ZSBjYW4gZGVjbGFyZSB0aGUgdmFyaWFibGVcbiAgLy8gcmVnZW5lcmF0b3JSdW50aW1lIGluIHRoZSBvdXRlciBzY29wZSwgd2hpY2ggYWxsb3dzIHRoaXMgbW9kdWxlIHRvIGJlXG4gIC8vIGluamVjdGVkIGVhc2lseSBieSBgYmluL3JlZ2VuZXJhdG9yIC0taW5jbHVkZS1ydW50aW1lIHNjcmlwdC5qc2AuXG4gIHJldHVybiBleHBvcnRzO1xuXG59KFxuICAvLyBJZiB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGUsIHVzZSBtb2R1bGUuZXhwb3J0c1xuICAvLyBhcyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIG5hbWVzcGFjZS4gT3RoZXJ3aXNlIGNyZWF0ZSBhIG5ldyBlbXB0eVxuICAvLyBvYmplY3QuIEVpdGhlciB3YXksIHRoZSByZXN1bHRpbmcgb2JqZWN0IHdpbGwgYmUgdXNlZCB0byBpbml0aWFsaXplXG4gIC8vIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgdmFyaWFibGUgYXQgdGhlIHRvcCBvZiB0aGlzIGZpbGUuXG4gIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgPyBtb2R1bGUuZXhwb3J0cyA6IHt9XG4pKTtcblxudHJ5IHtcbiAgcmVnZW5lcmF0b3JSdW50aW1lID0gcnVudGltZTtcbn0gY2F0Y2ggKGFjY2lkZW50YWxTdHJpY3RNb2RlKSB7XG4gIC8vIFRoaXMgbW9kdWxlIHNob3VsZCBub3QgYmUgcnVubmluZyBpbiBzdHJpY3QgbW9kZSwgc28gdGhlIGFib3ZlXG4gIC8vIGFzc2lnbm1lbnQgc2hvdWxkIGFsd2F5cyB3b3JrIHVubGVzcyBzb21ldGhpbmcgaXMgbWlzY29uZmlndXJlZC4gSnVzdFxuICAvLyBpbiBjYXNlIHJ1bnRpbWUuanMgYWNjaWRlbnRhbGx5IHJ1bnMgaW4gc3RyaWN0IG1vZGUsIGluIG1vZGVybiBlbmdpbmVzXG4gIC8vIHdlIGNhbiBleHBsaWNpdGx5IGFjY2VzcyBnbG9iYWxUaGlzLiBJbiBvbGRlciBlbmdpbmVzIHdlIGNhbiBlc2NhcGVcbiAgLy8gc3RyaWN0IG1vZGUgdXNpbmcgYSBnbG9iYWwgRnVuY3Rpb24gY2FsbC4gVGhpcyBjb3VsZCBjb25jZWl2YWJseSBmYWlsXG4gIC8vIGlmIGEgQ29udGVudCBTZWN1cml0eSBQb2xpY3kgZm9yYmlkcyB1c2luZyBGdW5jdGlvbiwgYnV0IGluIHRoYXQgY2FzZVxuICAvLyB0aGUgcHJvcGVyIHNvbHV0aW9uIGlzIHRvIGZpeCB0aGUgYWNjaWRlbnRhbCBzdHJpY3QgbW9kZSBwcm9ibGVtLiBJZlxuICAvLyB5b3UndmUgbWlzY29uZmlndXJlZCB5b3VyIGJ1bmRsZXIgdG8gZm9yY2Ugc3RyaWN0IG1vZGUgYW5kIGFwcGxpZWQgYVxuICAvLyBDU1AgdG8gZm9yYmlkIEZ1bmN0aW9uLCBhbmQgeW91J3JlIG5vdCB3aWxsaW5nIHRvIGZpeCBlaXRoZXIgb2YgdGhvc2VcbiAgLy8gcHJvYmxlbXMsIHBsZWFzZSBkZXRhaWwgeW91ciB1bmlxdWUgcHJlZGljYW1lbnQgaW4gYSBHaXRIdWIgaXNzdWUuXG4gIGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gXCJvYmplY3RcIikge1xuICAgIGdsb2JhbFRoaXMucmVnZW5lcmF0b3JSdW50aW1lID0gcnVudGltZTtcbiAgfSBlbHNlIHtcbiAgICBGdW5jdGlvbihcInJcIiwgXCJyZWdlbmVyYXRvclJ1bnRpbWUgPSByXCIpKHJ1bnRpbWUpO1xuICB9XG59XG4iXSwibmFtZXMiOlsicnVudGltZSIsImV4cG9ydHMiLCJPcCIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093biIsImhhc093blByb3BlcnR5IiwidW5kZWZpbmVkIiwiJFN5bWJvbCIsIlN5bWJvbCIsIml0ZXJhdG9yU3ltYm9sIiwiaXRlcmF0b3IiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwidG9TdHJpbmdUYWciLCJkZWZpbmUiLCJvYmoiLCJrZXkiLCJ2YWx1ZSIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiZXJyIiwid3JhcCIsImlubmVyRm4iLCJvdXRlckZuIiwic2VsZiIsInRyeUxvY3NMaXN0IiwicHJvdG9HZW5lcmF0b3IiLCJHZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJjcmVhdGUiLCJjb250ZXh0IiwiQ29udGV4dCIsIl9pbnZva2UiLCJtYWtlSW52b2tlTWV0aG9kIiwidHJ5Q2F0Y2giLCJmbiIsImFyZyIsInR5cGUiLCJjYWxsIiwiR2VuU3RhdGVTdXNwZW5kZWRTdGFydCIsIkdlblN0YXRlU3VzcGVuZGVkWWllbGQiLCJHZW5TdGF0ZUV4ZWN1dGluZyIsIkdlblN0YXRlQ29tcGxldGVkIiwiQ29udGludWVTZW50aW5lbCIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJJdGVyYXRvclByb3RvdHlwZSIsImdldFByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJOYXRpdmVJdGVyYXRvclByb3RvdHlwZSIsInZhbHVlcyIsIkdwIiwiZGlzcGxheU5hbWUiLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJmb3JFYWNoIiwibWV0aG9kIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImdlbkZ1biIsImN0b3IiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJtYXJrIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJhd3JhcCIsIl9fYXdhaXQiLCJBc3luY0l0ZXJhdG9yIiwiUHJvbWlzZUltcGwiLCJpbnZva2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicmVjb3JkIiwicmVzdWx0IiwidGhlbiIsInVud3JhcHBlZCIsImVycm9yIiwicHJldmlvdXNQcm9taXNlIiwiZW5xdWV1ZSIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwiYXN5bmMiLCJQcm9taXNlIiwiaXRlciIsIm5leHQiLCJkb25lIiwic3RhdGUiLCJFcnJvciIsImRvbmVSZXN1bHQiLCJkZWxlZ2F0ZSIsImRlbGVnYXRlUmVzdWx0IiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsInNlbnQiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiYWJydXB0IiwiVHlwZUVycm9yIiwiaW5mbyIsInJlc3VsdE5hbWUiLCJuZXh0TG9jIiwicHVzaFRyeUVudHJ5IiwibG9jcyIsImVudHJ5IiwidHJ5TG9jIiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWZ0ZXJMb2MiLCJ0cnlFbnRyaWVzIiwicHVzaCIsInJlc2V0VHJ5RW50cnkiLCJjb21wbGV0aW9uIiwicmVzZXQiLCJrZXlzIiwib2JqZWN0IiwicmV2ZXJzZSIsImxlbmd0aCIsInBvcCIsIml0ZXJhYmxlIiwiaXRlcmF0b3JNZXRob2QiLCJpc05hTiIsImkiLCJza2lwVGVtcFJlc2V0IiwicHJldiIsImNoYXJBdCIsInNsaWNlIiwic3RvcCIsInJvb3RFbnRyeSIsInJvb3RSZWNvcmQiLCJydmFsIiwiZXhjZXB0aW9uIiwiaGFuZGxlIiwibG9jIiwiY2F1Z2h0IiwiaGFzQ2F0Y2giLCJoYXNGaW5hbGx5IiwiZmluYWxseUVudHJ5IiwiY29tcGxldGUiLCJmaW5pc2giLCJ0aHJvd24iLCJkZWxlZ2F0ZVlpZWxkIiwibW9kdWxlIiwicmVnZW5lcmF0b3JSdW50aW1lIiwiYWNjaWRlbnRhbFN0cmljdE1vZGUiLCJnbG9iYWxUaGlzIiwiRnVuY3Rpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///588\n')},794:(__unused_webpack_module,exports)=>{"use strict";eval('/** @license React v0.20.2\n * scheduler.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nfunction _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nvar _f, g, h, k;\n\nif ("object" === (typeof performance === "undefined" ? "undefined" : _typeof(performance)) && "function" === typeof performance.now) {\n  var l = performance;\n\n  exports.unstable_now = function () {\n    return l.now();\n  };\n} else {\n  var p = Date,\n      q = p.now();\n\n  exports.unstable_now = function () {\n    return p.now() - q;\n  };\n}\n\nif ("undefined" === typeof window || "function" !== typeof MessageChannel) {\n  var t = null,\n      u = null,\n      w = function w() {\n    if (null !== t) try {\n      var a = exports.unstable_now();\n      t(!0, a);\n      t = null;\n    } catch (b) {\n      throw setTimeout(w, 0), b;\n    }\n  };\n\n  _f = function f(a) {\n    null !== t ? setTimeout(_f, 0, a) : (t = a, setTimeout(w, 0));\n  };\n\n  g = function g(a, b) {\n    u = setTimeout(a, b);\n  };\n\n  h = function h() {\n    clearTimeout(u);\n  };\n\n  exports.unstable_shouldYield = function () {\n    return !1;\n  };\n\n  k = exports.unstable_forceFrameRate = function () {};\n} else {\n  var x = window.setTimeout,\n      y = window.clearTimeout;\n\n  if ("undefined" !== typeof console) {\n    var z = window.cancelAnimationFrame;\n    "function" !== typeof window.requestAnimationFrame && console.error("This browser doesn\'t support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");\n    "function" !== typeof z && console.error("This browser doesn\'t support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");\n  }\n\n  var A = !1,\n      B = null,\n      C = -1,\n      D = 5,\n      E = 0;\n\n  exports.unstable_shouldYield = function () {\n    return exports.unstable_now() >= E;\n  };\n\n  k = function k() {};\n\n  exports.unstable_forceFrameRate = function (a) {\n    0 > a || 125 < a ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : D = 0 < a ? Math.floor(1E3 / a) : 5;\n  };\n\n  var F = new MessageChannel(),\n      G = F.port2;\n\n  F.port1.onmessage = function () {\n    if (null !== B) {\n      var a = exports.unstable_now();\n      E = a + D;\n\n      try {\n        B(!0, a) ? G.postMessage(null) : (A = !1, B = null);\n      } catch (b) {\n        throw G.postMessage(null), b;\n      }\n    } else A = !1;\n  };\n\n  _f = function _f(a) {\n    B = a;\n    A || (A = !0, G.postMessage(null));\n  };\n\n  g = function g(a, b) {\n    C = x(function () {\n      a(exports.unstable_now());\n    }, b);\n  };\n\n  h = function h() {\n    y(C);\n    C = -1;\n  };\n}\n\nfunction H(a, b) {\n  var c = a.length;\n  a.push(b);\n\n  a: for (;;) {\n    var d = c - 1 >>> 1,\n        e = a[d];\n    if (void 0 !== e && 0 < I(e, b)) a[d] = b, a[c] = e, c = d;else break a;\n  }\n}\n\nfunction J(a) {\n  a = a[0];\n  return void 0 === a ? null : a;\n}\n\nfunction K(a) {\n  var b = a[0];\n\n  if (void 0 !== b) {\n    var c = a.pop();\n\n    if (c !== b) {\n      a[0] = c;\n\n      a: for (var d = 0, e = a.length; d < e;) {\n        var m = 2 * (d + 1) - 1,\n            n = a[m],\n            v = m + 1,\n            r = a[v];\n        if (void 0 !== n && 0 > I(n, c)) void 0 !== r && 0 > I(r, n) ? (a[d] = r, a[v] = c, d = v) : (a[d] = n, a[m] = c, d = m);else if (void 0 !== r && 0 > I(r, c)) a[d] = r, a[v] = c, d = v;else break a;\n      }\n    }\n\n    return b;\n  }\n\n  return null;\n}\n\nfunction I(a, b) {\n  var c = a.sortIndex - b.sortIndex;\n  return 0 !== c ? c : a.id - b.id;\n}\n\nvar L = [],\n    M = [],\n    N = 1,\n    O = null,\n    P = 3,\n    Q = !1,\n    R = !1,\n    S = !1;\n\nfunction T(a) {\n  for (var b = J(M); null !== b;) {\n    if (null === b.callback) K(M);else if (b.startTime <= a) K(M), b.sortIndex = b.expirationTime, H(L, b);else break;\n    b = J(M);\n  }\n}\n\nfunction U(a) {\n  S = !1;\n  T(a);\n  if (!R) if (null !== J(L)) R = !0, _f(V);else {\n    var b = J(M);\n    null !== b && g(U, b.startTime - a);\n  }\n}\n\nfunction V(a, b) {\n  R = !1;\n  S && (S = !1, h());\n  Q = !0;\n  var c = P;\n\n  try {\n    T(b);\n\n    for (O = J(L); null !== O && (!(O.expirationTime > b) || a && !exports.unstable_shouldYield());) {\n      var d = O.callback;\n\n      if ("function" === typeof d) {\n        O.callback = null;\n        P = O.priorityLevel;\n        var e = d(O.expirationTime <= b);\n        b = exports.unstable_now();\n        "function" === typeof e ? O.callback = e : O === J(L) && K(L);\n        T(b);\n      } else K(L);\n\n      O = J(L);\n    }\n\n    if (null !== O) var m = !0;else {\n      var n = J(M);\n      null !== n && g(U, n.startTime - b);\n      m = !1;\n    }\n    return m;\n  } finally {\n    O = null, P = c, Q = !1;\n  }\n}\n\nvar W = k;\nexports.unstable_IdlePriority = 5;\nexports.unstable_ImmediatePriority = 1;\nexports.unstable_LowPriority = 4;\nexports.unstable_NormalPriority = 3;\nexports.unstable_Profiling = null;\nexports.unstable_UserBlockingPriority = 2;\n\nexports.unstable_cancelCallback = function (a) {\n  a.callback = null;\n};\n\nexports.unstable_continueExecution = function () {\n  R || Q || (R = !0, _f(V));\n};\n\nexports.unstable_getCurrentPriorityLevel = function () {\n  return P;\n};\n\nexports.unstable_getFirstCallbackNode = function () {\n  return J(L);\n};\n\nexports.unstable_next = function (a) {\n  switch (P) {\n    case 1:\n    case 2:\n    case 3:\n      var b = 3;\n      break;\n\n    default:\n      b = P;\n  }\n\n  var c = P;\n  P = b;\n\n  try {\n    return a();\n  } finally {\n    P = c;\n  }\n};\n\nexports.unstable_pauseExecution = function () {};\n\nexports.unstable_requestPaint = W;\n\nexports.unstable_runWithPriority = function (a, b) {\n  switch (a) {\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n      break;\n\n    default:\n      a = 3;\n  }\n\n  var c = P;\n  P = a;\n\n  try {\n    return b();\n  } finally {\n    P = c;\n  }\n};\n\nexports.unstable_scheduleCallback = function (a, b, c) {\n  var d = exports.unstable_now();\n  "object" === _typeof(c) && null !== c ? (c = c.delay, c = "number" === typeof c && 0 < c ? d + c : d) : c = d;\n\n  switch (a) {\n    case 1:\n      var e = -1;\n      break;\n\n    case 2:\n      e = 250;\n      break;\n\n    case 5:\n      e = 1073741823;\n      break;\n\n    case 4:\n      e = 1E4;\n      break;\n\n    default:\n      e = 5E3;\n  }\n\n  e = c + e;\n  a = {\n    id: N++,\n    callback: b,\n    priorityLevel: a,\n    startTime: c,\n    expirationTime: e,\n    sortIndex: -1\n  };\n  c > d ? (a.sortIndex = c, H(M, a), null === J(L) && a === J(M) && (S ? h() : S = !0, g(U, c - d))) : (a.sortIndex = e, H(L, a), R || Q || (R = !0, _f(V)));\n  return a;\n};\n\nexports.unstable_wrapCallback = function (a) {\n  var b = P;\n  return function () {\n    var c = P;\n    P = b;\n\n    try {\n      return a.apply(this, arguments);\n    } finally {\n      P = c;\n    }\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///794\n')},767:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nif (true) {\n  module.exports = __webpack_require__(794);\n} else {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzY3LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUlBLElBQUosRUFBMkM7QUFDekNHLEVBQUFBLHlDQUFBO0FBQ0QsQ0FGRCxNQUVPIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3JhX25ldy8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvaW5kZXguanM/NDAyOSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIl0sIm5hbWVzIjpbInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///767\n")},357:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar GetIntrinsic = __webpack_require__(584);\n\nvar callBound = __webpack_require__(648);\n\nvar inspect = __webpack_require__(291);\n\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar $WeakMap = GetIntrinsic('%WeakMap%', true);\nvar $Map = GetIntrinsic('%Map%', true);\nvar $weakMapGet = callBound('WeakMap.prototype.get', true);\nvar $weakMapSet = callBound('WeakMap.prototype.set', true);\nvar $weakMapHas = callBound('WeakMap.prototype.has', true);\nvar $mapGet = callBound('Map.prototype.get', true);\nvar $mapSet = callBound('Map.prototype.set', true);\nvar $mapHas = callBound('Map.prototype.has', true);\n/*\n * This function traverses the list returning the node corresponding to the\n * given key.\n *\n * That node is also moved to the head of the list, so that if it's accessed\n * again we don't need to traverse the whole list. By doing so, all the recently\n * used nodes can be accessed relatively quickly.\n */\n\nvar listGetNode = function listGetNode(list, key) {\n  // eslint-disable-line consistent-return\n  for (var prev = list, curr; (curr = prev.next) !== null; prev = curr) {\n    if (curr.key === key) {\n      prev.next = curr.next;\n      curr.next = list.next;\n      list.next = curr; // eslint-disable-line no-param-reassign\n\n      return curr;\n    }\n  }\n};\n\nvar listGet = function listGet(objects, key) {\n  var node = listGetNode(objects, key);\n  return node && node.value;\n};\n\nvar listSet = function listSet(objects, key, value) {\n  var node = listGetNode(objects, key);\n\n  if (node) {\n    node.value = value;\n  } else {\n    // Prepend the new node to the beginning of the list\n    objects.next = {\n      // eslint-disable-line no-param-reassign\n      key: key,\n      next: objects.next,\n      value: value\n    };\n  }\n};\n\nvar listHas = function listHas(objects, key) {\n  return !!listGetNode(objects, key);\n};\n\nmodule.exports = function getSideChannel() {\n  var $wm;\n  var $m;\n  var $o;\n  var channel = {\n    assert: function assert(key) {\n      if (!channel.has(key)) {\n        throw new $TypeError('Side channel does not contain ' + inspect(key));\n      }\n    },\n    get: function get(key) {\n      // eslint-disable-line consistent-return\n      if ($WeakMap && key && (_typeof(key) === 'object' || typeof key === 'function')) {\n        if ($wm) {\n          return $weakMapGet($wm, key);\n        }\n      } else if ($Map) {\n        if ($m) {\n          return $mapGet($m, key);\n        }\n      } else {\n        if ($o) {\n          // eslint-disable-line no-lonely-if\n          return listGet($o, key);\n        }\n      }\n    },\n    has: function has(key) {\n      if ($WeakMap && key && (_typeof(key) === 'object' || typeof key === 'function')) {\n        if ($wm) {\n          return $weakMapHas($wm, key);\n        }\n      } else if ($Map) {\n        if ($m) {\n          return $mapHas($m, key);\n        }\n      } else {\n        if ($o) {\n          // eslint-disable-line no-lonely-if\n          return listHas($o, key);\n        }\n      }\n\n      return false;\n    },\n    set: function set(key, value) {\n      if ($WeakMap && key && (_typeof(key) === 'object' || typeof key === 'function')) {\n        if (!$wm) {\n          $wm = new $WeakMap();\n        }\n\n        $weakMapSet($wm, key, value);\n      } else if ($Map) {\n        if (!$m) {\n          $m = new $Map();\n        }\n\n        $mapSet($m, key, value);\n      } else {\n        if (!$o) {\n          /*\n           * Initialize the linked list as an empty node, so that we don't have\n           * to special-case handling of the first node: we can always refer to\n           * it as (previous node).next, instead of something like (list).head\n           */\n          $o = {\n            key: {},\n            next: null\n          };\n        }\n\n        listSet($o, key, value);\n      }\n    }\n  };\n  return channel;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///357\n")},179:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";eval('\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(466);\n// EXTERNAL MODULE: ./node_modules/react-dom/index.js\nvar react_dom = __webpack_require__(116);\n// EXTERNAL MODULE: ./node_modules/regenerator-runtime/runtime.js\nvar runtime = __webpack_require__(588);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\nvar injectStylesIntoStyleTag = __webpack_require__(379);\nvar injectStylesIntoStyleTag_default = /*#__PURE__*/__webpack_require__.n(injectStylesIntoStyleTag);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleDomAPI.js\nvar styleDomAPI = __webpack_require__(795);\nvar styleDomAPI_default = /*#__PURE__*/__webpack_require__.n(styleDomAPI);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertBySelector.js\nvar insertBySelector = __webpack_require__(569);\nvar insertBySelector_default = /*#__PURE__*/__webpack_require__.n(insertBySelector);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\nvar setAttributesWithoutAttributes = __webpack_require__(565);\nvar setAttributesWithoutAttributes_default = /*#__PURE__*/__webpack_require__.n(setAttributesWithoutAttributes);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertStyleElement.js\nvar insertStyleElement = __webpack_require__(216);\nvar insertStyleElement_default = /*#__PURE__*/__webpack_require__.n(insertStyleElement);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleTagTransform.js\nvar styleTagTransform = __webpack_require__(589);\nvar styleTagTransform_default = /*#__PURE__*/__webpack_require__.n(styleTagTransform);\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/index.css\nvar cjs_js_src = __webpack_require__(579);\n;// CONCATENATED MODULE: ./src/index.css\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = (styleTagTransform_default());\noptions.setAttributes = (setAttributesWithoutAttributes_default());\n\n      options.insert = insertBySelector_default().bind(null, "head");\n    \noptions.domAPI = (styleDomAPI_default());\noptions.insertStyleElement = (insertStyleElement_default());\n\nvar update = injectStylesIntoStyleTag_default()(cjs_js_src/* default */.Z, options);\n\n\n\n\n       /* harmony default export */ const src = (cjs_js_src/* default */.Z && cjs_js_src/* default.locals */.Z.locals ? cjs_js_src/* default.locals */.Z.locals : undefined);\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/components/Button/Button.module.scss\nvar Button_module = __webpack_require__(369);\n;// CONCATENATED MODULE: ./src/components/Button/Button.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar Button_module_options = {};\n\nButton_module_options.styleTagTransform = (styleTagTransform_default());\nButton_module_options.setAttributes = (setAttributesWithoutAttributes_default());\n\n      Button_module_options.insert = insertBySelector_default().bind(null, "head");\n    \nButton_module_options.domAPI = (styleDomAPI_default());\nButton_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar Button_module_update = injectStylesIntoStyleTag_default()(Button_module/* default */.Z, Button_module_options);\n\n\n\n\n       /* harmony default export */ const Button_Button_module = (Button_module/* default */.Z && Button_module/* default.locals */.Z.locals ? Button_module/* default.locals */.Z.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/components/Button/Button.tsx\n\n\n\nvar Button = function Button(_ref) {\n  var onClick = _ref.onClick,\n      disabled = _ref.disabled,\n      children = _ref.children;\n  return /*#__PURE__*/react.createElement("button", {\n    onClick: onClick,\n    disabled: disabled,\n    className: Button_Button_module.button\n  }, children);\n};\n\n/* harmony default export */ const Button_Button = (/*#__PURE__*/react.memo(Button));\n;// CONCATENATED MODULE: ./src/components/Button/index.ts\n\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/styles/style.module.scss\nvar style_module = __webpack_require__(699);\n;// CONCATENATED MODULE: ./src/styles/style.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar style_module_options = {};\n\nstyle_module_options.styleTagTransform = (styleTagTransform_default());\nstyle_module_options.setAttributes = (setAttributesWithoutAttributes_default());\n\n      style_module_options.insert = insertBySelector_default().bind(null, "head");\n    \nstyle_module_options.domAPI = (styleDomAPI_default());\nstyle_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar style_module_update = injectStylesIntoStyleTag_default()(style_module/* default */.Z, style_module_options);\n\n\n\n\n       /* harmony default export */ const styles_style_module = (style_module/* default */.Z && style_module/* default.locals */.Z.locals ? style_module/* default.locals */.Z.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/components/Input/Input.tsx\n\n\n\nvar Input = function Input(_ref) {\n  var value = _ref.value,\n      placeholder = _ref.placeholder,\n      onChange = _ref.onChange,\n      isDisabled = _ref.isDisabled;\n  return /*#__PURE__*/react.createElement("input", {\n    value: value,\n    className: styles_style_module.search__input,\n    placeholder: placeholder,\n    onChange: onChange,\n    disabled: isDisabled\n  });\n};\n\n/* harmony default export */ const Input_Input = (Input);\n;// CONCATENATED MODULE: ./src/components/Input/index.ts\n\n\n;// CONCATENATED MODULE: ./src/components/ReposContext/ReposContext.tsx\n\n\nvar reposListContext = /*#__PURE__*/(0,react.createContext)({\n  reposListStore: null\n});\nvar Provider = reposListContext.Provider;\nvar useReposListContext = function useReposListContext() {\n  return (0,react.useContext)(reposListContext);\n};\n\nvar ReposContext = function ReposContext(_ref) {\n  var reposListStore = _ref.reposListStore,\n      children = _ref.children;\n  return /*#__PURE__*/react.createElement(Provider, {\n    value: {\n      reposListStore: reposListStore\n    }\n  }, children);\n};\n\n/* harmony default export */ const ReposContext_ReposContext = (ReposContext);\n;// CONCATENATED MODULE: ./src/components/SearchIcon/SearchIcon.tsx\n\n\nvar SearchIcon = function SearchIcon() {\n  return /*#__PURE__*/react.createElement("svg", {\n    width: "18",\n    height: "18",\n    viewBox: "0 0 18 18",\n    fill: "#000",\n    xmlns: "http://www.w3.org/2000/svg"\n  }, /*#__PURE__*/react.createElement("path", {\n    d: "M12.5 11H11.71L11.43 10.73C12.41 9.59 13 8.11 13 6.5C13 2.91 10.09 0 6.5 0C2.91 0 0 2.91 0 6.5C0 10.09 2.91 13 6.5 13C8.11 13 9.59 12.41 10.73 11.43L11 11.71V12.5L16 17.49L17.49 16L12.5 11ZM6.5 11C4.01 11 2 8.99 2 6.5C2 4.01 4.01 2 6.5 2C8.99 2 11 4.01 11 6.5C11 8.99 8.99 11 6.5 11Z",\n    fill: "white"\n  }));\n};\n\n/* harmony default export */ const SearchIcon_SearchIcon = (/*#__PURE__*/react.memo(SearchIcon));\n;// CONCATENATED MODULE: ./src/components/SearchIcon/index.ts\n\n;// CONCATENATED MODULE: ./src/utils/meta.ts\nvar Meta;\n\n(function (Meta) {\n  Meta["initial"] = "initial";\n  Meta["loading"] = "loading";\n  Meta["error"] = "error";\n  Meta["success"] = "success";\n})(Meta || (Meta = {}));\n;// CONCATENATED MODULE: ./src/utils/useLocalStore.ts\n\nvar useLocalStore = function useLocalStore(creator) {\n  var container = react.useRef(null);\n\n  if (container.current === null) {\n    container.current = creator();\n  }\n\n  react.useEffect(function () {\n    return function () {\n      var _container$current;\n\n      return (_container$current = container.current) === null || _container$current === void 0 ? void 0 : _container$current.destroy();\n    };\n  }, []);\n  return container.current;\n};\n;// CONCATENATED MODULE: ./node_modules/mobx/dist/mobx.esm.js\nfunction _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nvar niceErrors = {\n  0: "Invalid value for configuration \'enforceActions\', expected \'never\', \'always\' or \'observed\'",\n  1: function _(annotationType, key) {\n    return "Cannot apply \'" + annotationType + "\' to \'" + key.toString() + "\': Field not found.";\n  },\n\n  /*\r\n  2(prop) {\r\n      return `invalid decorator for \'${prop.toString()}\'`\r\n  },\r\n  3(prop) {\r\n      return `Cannot decorate \'${prop.toString()}\': action can only be used on properties with a function value.`\r\n  },\r\n  4(prop) {\r\n      return `Cannot decorate \'${prop.toString()}\': computed can only be used on getter properties.`\r\n  },\r\n  */\n  5: "\'keys()\' can only be used on observable objects, arrays, sets and maps",\n  6: "\'values()\' can only be used on observable objects, arrays, sets and maps",\n  7: "\'entries()\' can only be used on observable objects, arrays and maps",\n  8: "\'set()\' can only be used on observable objects, arrays and maps",\n  9: "\'remove()\' can only be used on observable objects, arrays and maps",\n  10: "\'has()\' can only be used on observable objects, arrays and maps",\n  11: "\'get()\' can only be used on observable objects, arrays and maps",\n  12: "Invalid annotation",\n  13: "Dynamic observable objects cannot be frozen",\n  14: "Intercept handlers should return nothing or a change object",\n  15: "Observable arrays cannot be frozen",\n  16: "Modification exception: the internal structure of an observable array was changed.",\n  17: function _(index, length) {\n    return "[mobx.array] Index out of bounds, " + index + " is larger than " + length;\n  },\n  18: "mobx.map requires Map polyfill for the current browser. Check babel-polyfill or core-js/es6/map.js",\n  19: function _(other) {\n    return "Cannot initialize from classes that inherit from Map: " + other.constructor.name;\n  },\n  20: function _(other) {\n    return "Cannot initialize map from " + other;\n  },\n  21: function _(dataStructure) {\n    return "Cannot convert to map from \'" + dataStructure + "\'";\n  },\n  22: "mobx.set requires Set polyfill for the current browser. Check babel-polyfill or core-js/es6/set.js",\n  23: "It is not possible to get index atoms from arrays",\n  24: function _(thing) {\n    return "Cannot obtain administration from " + thing;\n  },\n  25: function _(property, name) {\n    return "the entry \'" + property + "\' does not exist in the observable map \'" + name + "\'";\n  },\n  26: "please specify a property",\n  27: function _(property, name) {\n    return "no observable property \'" + property.toString() + "\' found on the observable object \'" + name + "\'";\n  },\n  28: function _(thing) {\n    return "Cannot obtain atom from " + thing;\n  },\n  29: "Expecting some object",\n  30: "invalid action stack. did you forget to finish an action?",\n  31: "missing option for computed: get",\n  32: function _(name, derivation) {\n    return "Cycle detected in computation " + name + ": " + derivation;\n  },\n  33: function _(name) {\n    return "The setter of computed value \'" + name + "\' is trying to update itself. Did you intend to update an _observable_ value, instead of the computed property?";\n  },\n  34: function _(name) {\n    return "[ComputedValue \'" + name + "\'] It is not possible to assign a new value to a computed value.";\n  },\n  35: "There are multiple, different versions of MobX active. Make sure MobX is loaded only once or use `configure({ isolateGlobalState: true })`",\n  36: "isolateGlobalState should be called before MobX is running any reactions",\n  37: function _(method) {\n    return "[mobx] `observableArray." + method + "()` mutates the array in-place, which is not allowed inside a derivation. Use `array.slice()." + method + "()` instead";\n  },\n  38: "\'ownKeys()\' can only be used on observable objects",\n  39: "\'defineProperty()\' can only be used on observable objects"\n};\nvar errors =  false ? 0 : {};\n\nfunction die(error) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  if (false) { var e; }\n\n  throw new Error(typeof error === "number" ? "[MobX] minified error nr: " + error + (args.length ? " " + args.map(String).join(",") : "") + ". Find the full error at: https://github.com/mobxjs/mobx/blob/main/packages/mobx/src/errors.ts" : "[MobX] " + error);\n}\n\nvar mockGlobal = {};\n\nfunction getGlobal() {\n  if (typeof globalThis !== "undefined") {\n    return globalThis;\n  }\n\n  if (typeof window !== "undefined") {\n    return window;\n  }\n\n  if (typeof __webpack_require__.g !== "undefined") {\n    return __webpack_require__.g;\n  }\n\n  if (typeof self !== "undefined") {\n    return self;\n  }\n\n  return mockGlobal;\n}\n\nvar mobx_esm_assign = Object.assign;\nvar getDescriptor = Object.getOwnPropertyDescriptor;\nvar defineProperty = Object.defineProperty;\nvar objectPrototype = Object.prototype;\nvar EMPTY_ARRAY = [];\nObject.freeze(EMPTY_ARRAY);\nvar EMPTY_OBJECT = {};\nObject.freeze(EMPTY_OBJECT);\nvar hasProxy = typeof Proxy !== "undefined";\nvar plainObjectString = /*#__PURE__*/Object.toString();\n\nfunction assertProxies() {\n  if (!hasProxy) {\n    die( false ? 0 : "Proxy not available");\n  }\n}\n\nfunction warnAboutProxyRequirement(msg) {\n  if (false) {}\n}\n\nfunction getNextId() {\n  return ++globalState.mobxGuid;\n}\n/**\r\n * Makes sure that the provided function is invoked at most once.\r\n */\n\n\nfunction once(func) {\n  var invoked = false;\n  return function () {\n    if (invoked) return;\n    invoked = true;\n    return func.apply(this, arguments);\n  };\n}\n\nvar noop = function noop() {};\n\nfunction isFunction(fn) {\n  return typeof fn === "function";\n}\n\nfunction isStringish(value) {\n  var t = _typeof(value);\n\n  switch (t) {\n    case "string":\n    case "symbol":\n    case "number":\n      return true;\n  }\n\n  return false;\n}\n\nfunction isObject(value) {\n  return value !== null && _typeof(value) === "object";\n}\n\nfunction isPlainObject(value) {\n  var _proto$constructor;\n\n  if (!isObject(value)) return false;\n  var proto = Object.getPrototypeOf(value);\n  if (proto == null) return true;\n  return ((_proto$constructor = proto.constructor) == null ? void 0 : _proto$constructor.toString()) === plainObjectString;\n} // https://stackoverflow.com/a/37865170\n\n\nfunction isGenerator(obj) {\n  var constructor = obj == null ? void 0 : obj.constructor;\n  if (!constructor) return false;\n  if ("GeneratorFunction" === constructor.name || "GeneratorFunction" === constructor.displayName) return true;\n  return false;\n}\n\nfunction addHiddenProp(object, propName, value) {\n  defineProperty(object, propName, {\n    enumerable: false,\n    writable: true,\n    configurable: true,\n    value: value\n  });\n}\n\nfunction addHiddenFinalProp(object, propName, value) {\n  defineProperty(object, propName, {\n    enumerable: false,\n    writable: false,\n    configurable: true,\n    value: value\n  });\n}\n\nfunction createInstanceofPredicate(name, theClass) {\n  var propName = "isMobX" + name;\n  theClass.prototype[propName] = true;\n  return function (x) {\n    return isObject(x) && x[propName] === true;\n  };\n}\n\nfunction isES6Map(thing) {\n  return thing instanceof Map;\n}\n\nfunction isES6Set(thing) {\n  return thing instanceof Set;\n}\n\nvar hasGetOwnPropertySymbols = typeof Object.getOwnPropertySymbols !== "undefined";\n/**\r\n * Returns the following: own enumerable keys and symbols.\r\n */\n\nfunction getPlainObjectKeys(object) {\n  var keys = Object.keys(object); // Not supported in IE, so there are not going to be symbol props anyway...\n\n  if (!hasGetOwnPropertySymbols) return keys;\n  var symbols = Object.getOwnPropertySymbols(object);\n  if (!symbols.length) return keys;\n  return [].concat(keys, symbols.filter(function (s) {\n    return objectPrototype.propertyIsEnumerable.call(object, s);\n  }));\n} // From Immer utils\n// Returns all own keys, including non-enumerable and symbolic\n\n\nvar ownKeys = typeof Reflect !== "undefined" && Reflect.ownKeys ? Reflect.ownKeys : hasGetOwnPropertySymbols ? function (obj) {\n  return Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj));\n} :\n/* istanbul ignore next */\nObject.getOwnPropertyNames;\n\nfunction stringifyKey(key) {\n  if (typeof key === "string") return key;\n  if (_typeof(key) === "symbol") return key.toString();\n  return new String(key).toString();\n}\n\nfunction toPrimitive(value) {\n  return value === null ? null : _typeof(value) === "object" ? "" + value : value;\n}\n\nfunction hasProp(target, prop) {\n  return objectPrototype.hasOwnProperty.call(target, prop);\n} // From Immer utils\n\n\nvar getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors(target) {\n  // Polyfill needed for Hermes and IE, see https://github.com/facebook/hermes/issues/274\n  var res = {}; // Note: without polyfill for ownKeys, symbols won\'t be picked up\n\n  ownKeys(target).forEach(function (key) {\n    res[key] = getDescriptor(target, key);\n  });\n  return res;\n};\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if ("value" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction mobx_esm_extends() {\n  mobx_esm_extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return mobx_esm_extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n  }\n\n  return self;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === "string") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === "Object" && o.constructor) n = o.constructor.name;\n  if (n === "Map" || n === "Set") return Array.from(o);\n  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {\n      if (it) o = it;\n      var i = 0;\n      return function () {\n        if (i >= o.length) return {\n          done: true\n        };\n        return {\n          done: false,\n          value: o[i++]\n        };\n      };\n    }\n\n    throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");\n  }\n\n  it = o[Symbol.iterator]();\n  return it.next.bind(it);\n}\n\nvar storedAnnotationsSymbol = /*#__PURE__*/Symbol("mobx-stored-annotations");\n/**\r\n * Creates a function that acts as\r\n * - decorator\r\n * - annotation object\r\n */\n\nfunction createDecoratorAnnotation(annotation) {\n  function decorator(target, property) {\n    storeAnnotation(target, property, annotation);\n  }\n\n  return Object.assign(decorator, annotation);\n}\n/**\r\n * Stores annotation to prototype,\r\n * so it can be inspected later by `makeObservable` called from constructor\r\n */\n\n\nfunction storeAnnotation(prototype, key, annotation) {\n  if (!hasProp(prototype, storedAnnotationsSymbol)) {\n    addHiddenProp(prototype, storedAnnotationsSymbol, mobx_esm_extends({}, prototype[storedAnnotationsSymbol]));\n  } // @override must override something\n\n\n  if (false) { var fieldName; } // Cannot re-decorate\n\n\n  assertNotDecorated(prototype, annotation, key); // Ignore override\n\n  if (!isOverride(annotation)) {\n    prototype[storedAnnotationsSymbol][key] = annotation;\n  }\n}\n\nfunction assertNotDecorated(prototype, annotation, key) {\n  if (false) { var requestedAnnotationType, currentAnnotationType, fieldName; }\n}\n/**\r\n * Collects annotations from prototypes and stores them on target (instance)\r\n */\n\n\nfunction collectStoredAnnotations(target) {\n  if (!hasProp(target, storedAnnotationsSymbol)) {\n    if (false) {} // We need a copy as we will remove annotation from the list once it\'s applied.\n\n\n    addHiddenProp(target, storedAnnotationsSymbol, mobx_esm_extends({}, target[storedAnnotationsSymbol]));\n  }\n\n  return target[storedAnnotationsSymbol];\n}\n\nvar $mobx = /*#__PURE__*/Symbol("mobx administration");\n\nvar Atom = /*#__PURE__*/function () {\n  // for effective unobserving. BaseAtom has true, for extra optimization, so its onBecomeUnobserved never gets called, because it\'s not needed\n\n  /**\r\n   * Create a new atom. For debugging purposes it is recommended to give it a name.\r\n   * The onBecomeObserved and onBecomeUnobserved callbacks can be used for resource management.\r\n   */\n  function Atom(name_) {\n    if (name_ === void 0) {\n      name_ =  false ? 0 : "Atom";\n    }\n\n    this.name_ = void 0;\n    this.isPendingUnobservation_ = false;\n    this.isBeingObserved_ = false;\n    this.observers_ = new Set();\n    this.diffValue_ = 0;\n    this.lastAccessedBy_ = 0;\n    this.lowestObserverState_ = IDerivationState_.NOT_TRACKING_;\n    this.onBOL = void 0;\n    this.onBUOL = void 0;\n    this.name_ = name_;\n  } // onBecomeObservedListeners\n\n\n  var _proto = Atom.prototype;\n\n  _proto.onBO = function onBO() {\n    if (this.onBOL) {\n      this.onBOL.forEach(function (listener) {\n        return listener();\n      });\n    }\n  };\n\n  _proto.onBUO = function onBUO() {\n    if (this.onBUOL) {\n      this.onBUOL.forEach(function (listener) {\n        return listener();\n      });\n    }\n  }\n  /**\r\n   * Invoke this method to notify mobx that your atom has been used somehow.\r\n   * Returns true if there is currently a reactive context.\r\n   */\n  ;\n\n  _proto.reportObserved = function reportObserved$1() {\n    return reportObserved(this);\n  }\n  /**\r\n   * Invoke this method _after_ this method has changed to signal mobx that all its observers should invalidate.\r\n   */\n  ;\n\n  _proto.reportChanged = function reportChanged() {\n    startBatch();\n    propagateChanged(this);\n    endBatch();\n  };\n\n  _proto.toString = function toString() {\n    return this.name_;\n  };\n\n  return Atom;\n}();\n\nvar isAtom = /*#__PURE__*/createInstanceofPredicate("Atom", Atom);\n\nfunction createAtom(name, onBecomeObservedHandler, onBecomeUnobservedHandler) {\n  if (onBecomeObservedHandler === void 0) {\n    onBecomeObservedHandler = noop;\n  }\n\n  if (onBecomeUnobservedHandler === void 0) {\n    onBecomeUnobservedHandler = noop;\n  }\n\n  var atom = new Atom(name); // default `noop` listener will not initialize the hook Set\n\n  if (onBecomeObservedHandler !== noop) {\n    onBecomeObserved(atom, onBecomeObservedHandler);\n  }\n\n  if (onBecomeUnobservedHandler !== noop) {\n    onBecomeUnobserved(atom, onBecomeUnobservedHandler);\n  }\n\n  return atom;\n}\n\nfunction identityComparer(a, b) {\n  return a === b;\n}\n\nfunction structuralComparer(a, b) {\n  return deepEqual(a, b);\n}\n\nfunction shallowComparer(a, b) {\n  return deepEqual(a, b, 1);\n}\n\nfunction defaultComparer(a, b) {\n  if (Object.is) return Object.is(a, b);\n  return a === b ? a !== 0 || 1 / a === 1 / b : a !== a && b !== b;\n}\n\nvar comparer = {\n  identity: identityComparer,\n  structural: structuralComparer,\n  "default": defaultComparer,\n  shallow: shallowComparer\n};\n\nfunction deepEnhancer(v, _, name) {\n  // it is an observable already, done\n  if (isObservable(v)) return v; // something that can be converted and mutated?\n\n  if (Array.isArray(v)) return mobx_esm_observable.array(v, {\n    name: name\n  });\n  if (isPlainObject(v)) return mobx_esm_observable.object(v, undefined, {\n    name: name\n  });\n  if (isES6Map(v)) return mobx_esm_observable.map(v, {\n    name: name\n  });\n  if (isES6Set(v)) return mobx_esm_observable.set(v, {\n    name: name\n  });\n\n  if (typeof v === "function" && !isAction(v) && !isFlow(v)) {\n    if (isGenerator(v)) {\n      return flow(v);\n    } else {\n      return autoAction(name, v);\n    }\n  }\n\n  return v;\n}\n\nfunction shallowEnhancer(v, _, name) {\n  if (v === undefined || v === null) return v;\n  if (isObservableObject(v) || isObservableArray(v) || isObservableMap(v) || isObservableSet(v)) return v;\n  if (Array.isArray(v)) return mobx_esm_observable.array(v, {\n    name: name,\n    deep: false\n  });\n  if (isPlainObject(v)) return mobx_esm_observable.object(v, undefined, {\n    name: name,\n    deep: false\n  });\n  if (isES6Map(v)) return mobx_esm_observable.map(v, {\n    name: name,\n    deep: false\n  });\n  if (isES6Set(v)) return mobx_esm_observable.set(v, {\n    name: name,\n    deep: false\n  });\n  if (false) {}\n}\n\nfunction referenceEnhancer(newValue) {\n  // never turn into an observable\n  return newValue;\n}\n\nfunction refStructEnhancer(v, oldValue) {\n  if (false) {}\n  if (deepEqual(v, oldValue)) return oldValue;\n  return v;\n}\n\nvar OVERRIDE = "override";\nvar override = /*#__PURE__*/createDecoratorAnnotation({\n  annotationType_: OVERRIDE,\n  make_: make_,\n  extend_: extend_\n});\n\nfunction isOverride(annotation) {\n  return annotation.annotationType_ === OVERRIDE;\n}\n\nfunction make_(adm, key) {\n  // Must not be plain object\n  if (false) {} // Must override something\n\n\n  if (false) {}\n\n  return 0\n  /* Cancel */\n  ;\n}\n\nfunction extend_(adm, key, descriptor, proxyTrap) {\n  die("\'" + this.annotationType_ + "\' can only be used with \'makeObservable\'");\n}\n\nfunction createActionAnnotation(name, options) {\n  return {\n    annotationType_: name,\n    options_: options,\n    make_: make_$1,\n    extend_: extend_$1\n  };\n}\n\nfunction make_$1(adm, key, descriptor, source) {\n  var _this$options_; // bound\n\n\n  if ((_this$options_ = this.options_) == null ? void 0 : _this$options_.bound) {\n    return this.extend_(adm, key, descriptor, false) === null ? 0\n    /* Cancel */\n    : 1\n    /* Break */\n    ;\n  } // own\n\n\n  if (source === adm.target_) {\n    return this.extend_(adm, key, descriptor, false) === null ? 0\n    /* Cancel */\n    : 2\n    /* Continue */\n    ;\n  } // prototype\n\n\n  if (isAction(descriptor.value)) {\n    // A prototype could have been annotated already by other constructor,\n    // rest of the proto chain must be annotated already\n    return 1\n    /* Break */\n    ;\n  }\n\n  var actionDescriptor = createActionDescriptor(adm, this, key, descriptor, false);\n  defineProperty(source, key, actionDescriptor);\n  return 2\n  /* Continue */\n  ;\n}\n\nfunction extend_$1(adm, key, descriptor, proxyTrap) {\n  var actionDescriptor = createActionDescriptor(adm, this, key, descriptor);\n  return adm.defineProperty_(key, actionDescriptor, proxyTrap);\n}\n\nfunction assertActionDescriptor(adm, _ref, key, _ref2) {\n  var annotationType_ = _ref.annotationType_;\n  var value = _ref2.value;\n\n  if (false) {}\n}\n\nfunction createActionDescriptor(adm, annotation, key, descriptor, // provides ability to disable safeDescriptors for prototypes\nsafeDescriptors) {\n  var _annotation$options_, _annotation$options_$, _annotation$options_2, _annotation$options_$2, _annotation$options_3;\n\n  if (safeDescriptors === void 0) {\n    safeDescriptors = globalState.safeDescriptors;\n  }\n\n  assertActionDescriptor(adm, annotation, key, descriptor);\n  var value = descriptor.value;\n\n  if ((_annotation$options_ = annotation.options_) == null ? void 0 : _annotation$options_.bound) {\n    var _adm$proxy_;\n\n    value = value.bind((_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_);\n  }\n\n  return {\n    value: createAction((_annotation$options_$ = (_annotation$options_2 = annotation.options_) == null ? void 0 : _annotation$options_2.name) != null ? _annotation$options_$ : key.toString(), value, (_annotation$options_$2 = (_annotation$options_3 = annotation.options_) == null ? void 0 : _annotation$options_3.autoAction) != null ? _annotation$options_$2 : false),\n    // Non-configurable for classes\n    // prevents accidental field redefinition in subclass\n    configurable: safeDescriptors ? adm.isPlainObject_ : true,\n    // https://github.com/mobxjs/mobx/pull/2641#issuecomment-737292058\n    enumerable: false,\n    // Non-obsevable, therefore non-writable\n    // Also prevents rewriting in subclass constructor\n    writable: safeDescriptors ? false : true\n  };\n}\n\nfunction createFlowAnnotation(name, options) {\n  return {\n    annotationType_: name,\n    options_: options,\n    make_: make_$2,\n    extend_: extend_$2\n  };\n}\n\nfunction make_$2(adm, key, descriptor, source) {\n  var _this$options_; // own\n\n\n  if (source === adm.target_) {\n    return this.extend_(adm, key, descriptor, false) === null ? 0\n    /* Cancel */\n    : 2\n    /* Continue */\n    ;\n  } // prototype\n  // bound - must annotate protos to support super.flow()\n\n\n  if (((_this$options_ = this.options_) == null ? void 0 : _this$options_.bound) && !isFlow(adm.target_[key])) {\n    if (this.extend_(adm, key, descriptor, false) === null) return 0\n    /* Cancel */\n    ;\n  }\n\n  if (isFlow(descriptor.value)) {\n    // A prototype could have been annotated already by other constructor,\n    // rest of the proto chain must be annotated already\n    return 1\n    /* Break */\n    ;\n  }\n\n  var flowDescriptor = createFlowDescriptor(adm, this, key, descriptor, false, false);\n  defineProperty(source, key, flowDescriptor);\n  return 2\n  /* Continue */\n  ;\n}\n\nfunction extend_$2(adm, key, descriptor, proxyTrap) {\n  var _this$options_2;\n\n  var flowDescriptor = createFlowDescriptor(adm, this, key, descriptor, (_this$options_2 = this.options_) == null ? void 0 : _this$options_2.bound);\n  return adm.defineProperty_(key, flowDescriptor, proxyTrap);\n}\n\nfunction assertFlowDescriptor(adm, _ref, key, _ref2) {\n  var annotationType_ = _ref.annotationType_;\n  var value = _ref2.value;\n\n  if (false) {}\n}\n\nfunction createFlowDescriptor(adm, annotation, key, descriptor, bound, // provides ability to disable safeDescriptors for prototypes\nsafeDescriptors) {\n  if (safeDescriptors === void 0) {\n    safeDescriptors = globalState.safeDescriptors;\n  }\n\n  assertFlowDescriptor(adm, annotation, key, descriptor);\n  var value = descriptor.value;\n\n  if (bound) {\n    var _adm$proxy_;\n\n    value = value.bind((_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_);\n  }\n\n  return {\n    value: flow(value),\n    // Non-configurable for classes\n    // prevents accidental field redefinition in subclass\n    configurable: safeDescriptors ? adm.isPlainObject_ : true,\n    // https://github.com/mobxjs/mobx/pull/2641#issuecomment-737292058\n    enumerable: false,\n    // Non-obsevable, therefore non-writable\n    // Also prevents rewriting in subclass constructor\n    writable: safeDescriptors ? false : true\n  };\n}\n\nfunction createComputedAnnotation(name, options) {\n  return {\n    annotationType_: name,\n    options_: options,\n    make_: make_$3,\n    extend_: extend_$3\n  };\n}\n\nfunction make_$3(adm, key, descriptor) {\n  return this.extend_(adm, key, descriptor, false) === null ? 0\n  /* Cancel */\n  : 1\n  /* Break */\n  ;\n}\n\nfunction extend_$3(adm, key, descriptor, proxyTrap) {\n  assertComputedDescriptor(adm, this, key, descriptor);\n  return adm.defineComputedProperty_(key, mobx_esm_extends({}, this.options_, {\n    get: descriptor.get,\n    set: descriptor.set\n  }), proxyTrap);\n}\n\nfunction assertComputedDescriptor(adm, _ref, key, _ref2) {\n  var annotationType_ = _ref.annotationType_;\n  var get = _ref2.get;\n\n  if (false) {}\n}\n\nfunction createObservableAnnotation(name, options) {\n  return {\n    annotationType_: name,\n    options_: options,\n    make_: make_$4,\n    extend_: extend_$4\n  };\n}\n\nfunction make_$4(adm, key, descriptor) {\n  return this.extend_(adm, key, descriptor, false) === null ? 0\n  /* Cancel */\n  : 1\n  /* Break */\n  ;\n}\n\nfunction extend_$4(adm, key, descriptor, proxyTrap) {\n  var _this$options_$enhanc, _this$options_;\n\n  assertObservableDescriptor(adm, this, key, descriptor);\n  return adm.defineObservableProperty_(key, descriptor.value, (_this$options_$enhanc = (_this$options_ = this.options_) == null ? void 0 : _this$options_.enhancer) != null ? _this$options_$enhanc : deepEnhancer, proxyTrap);\n}\n\nfunction assertObservableDescriptor(adm, _ref, key, descriptor) {\n  var annotationType_ = _ref.annotationType_;\n\n  if (false) {}\n}\n\nvar AUTO = "true";\nvar autoAnnotation = /*#__PURE__*/createAutoAnnotation();\n\nfunction createAutoAnnotation(options) {\n  return {\n    annotationType_: AUTO,\n    options_: options,\n    make_: make_$5,\n    extend_: extend_$5\n  };\n}\n\nfunction make_$5(adm, key, descriptor, source) {\n  var _this$options_3, _this$options_4; // getter -> computed\n\n\n  if (descriptor.get) {\n    return computed.make_(adm, key, descriptor, source);\n  } // lone setter -> action setter\n\n\n  if (descriptor.set) {\n    // TODO make action applicable to setter and delegate to action.make_\n    var set = createAction(key.toString(), descriptor.set); // own\n\n    if (source === adm.target_) {\n      return adm.defineProperty_(key, {\n        configurable: globalState.safeDescriptors ? adm.isPlainObject_ : true,\n        set: set\n      }) === null ? 0\n      /* Cancel */\n      : 2\n      /* Continue */\n      ;\n    } // proto\n\n\n    defineProperty(source, key, {\n      configurable: true,\n      set: set\n    });\n    return 2\n    /* Continue */\n    ;\n  } // function on proto -> autoAction/flow\n\n\n  if (source !== adm.target_ && typeof descriptor.value === "function") {\n    var _this$options_2;\n\n    if (isGenerator(descriptor.value)) {\n      var _this$options_;\n\n      var flowAnnotation = ((_this$options_ = this.options_) == null ? void 0 : _this$options_.autoBind) ? flow.bound : flow;\n      return flowAnnotation.make_(adm, key, descriptor, source);\n    }\n\n    var actionAnnotation = ((_this$options_2 = this.options_) == null ? void 0 : _this$options_2.autoBind) ? autoAction.bound : autoAction;\n    return actionAnnotation.make_(adm, key, descriptor, source);\n  } // other -> observable\n  // Copy props from proto as well, see test:\n  // "decorate should work with Object.create"\n\n\n  var observableAnnotation = ((_this$options_3 = this.options_) == null ? void 0 : _this$options_3.deep) === false ? mobx_esm_observable.ref : mobx_esm_observable; // if function respect autoBind option\n\n  if (typeof descriptor.value === "function" && ((_this$options_4 = this.options_) == null ? void 0 : _this$options_4.autoBind)) {\n    var _adm$proxy_;\n\n    descriptor.value = descriptor.value.bind((_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_);\n  }\n\n  return observableAnnotation.make_(adm, key, descriptor, source);\n}\n\nfunction extend_$5(adm, key, descriptor, proxyTrap) {\n  var _this$options_5, _this$options_6; // getter -> computed\n\n\n  if (descriptor.get) {\n    return computed.extend_(adm, key, descriptor, proxyTrap);\n  } // lone setter -> action setter\n\n\n  if (descriptor.set) {\n    // TODO make action applicable to setter and delegate to action.extend_\n    return adm.defineProperty_(key, {\n      configurable: globalState.safeDescriptors ? adm.isPlainObject_ : true,\n      set: createAction(key.toString(), descriptor.set)\n    }, proxyTrap);\n  } // other -> observable\n  // if function respect autoBind option\n\n\n  if (typeof descriptor.value === "function" && ((_this$options_5 = this.options_) == null ? void 0 : _this$options_5.autoBind)) {\n    var _adm$proxy_2;\n\n    descriptor.value = descriptor.value.bind((_adm$proxy_2 = adm.proxy_) != null ? _adm$proxy_2 : adm.target_);\n  }\n\n  var observableAnnotation = ((_this$options_6 = this.options_) == null ? void 0 : _this$options_6.deep) === false ? mobx_esm_observable.ref : mobx_esm_observable;\n  return observableAnnotation.extend_(adm, key, descriptor, proxyTrap);\n}\n\nvar OBSERVABLE = "observable";\nvar OBSERVABLE_REF = "observable.ref";\nvar OBSERVABLE_SHALLOW = "observable.shallow";\nvar OBSERVABLE_STRUCT = "observable.struct"; // Predefined bags of create observable options, to avoid allocating temporarily option objects\n// in the majority of cases\n\nvar defaultCreateObservableOptions = {\n  deep: true,\n  name: undefined,\n  defaultDecorator: undefined,\n  proxy: true\n};\nObject.freeze(defaultCreateObservableOptions);\n\nfunction asCreateObservableOptions(thing) {\n  return thing || defaultCreateObservableOptions;\n}\n\nvar observableAnnotation = /*#__PURE__*/createObservableAnnotation(OBSERVABLE);\nvar observableRefAnnotation = /*#__PURE__*/createObservableAnnotation(OBSERVABLE_REF, {\n  enhancer: referenceEnhancer\n});\nvar observableShallowAnnotation = /*#__PURE__*/createObservableAnnotation(OBSERVABLE_SHALLOW, {\n  enhancer: shallowEnhancer\n});\nvar observableStructAnnotation = /*#__PURE__*/createObservableAnnotation(OBSERVABLE_STRUCT, {\n  enhancer: refStructEnhancer\n});\nvar observableDecoratorAnnotation = /*#__PURE__*/createDecoratorAnnotation(observableAnnotation);\n\nfunction getEnhancerFromOptions(options) {\n  return options.deep === true ? deepEnhancer : options.deep === false ? referenceEnhancer : getEnhancerFromAnnotation(options.defaultDecorator);\n}\n\nfunction getAnnotationFromOptions(options) {\n  var _options$defaultDecor;\n\n  return options ? (_options$defaultDecor = options.defaultDecorator) != null ? _options$defaultDecor : createAutoAnnotation(options) : undefined;\n}\n\nfunction getEnhancerFromAnnotation(annotation) {\n  var _annotation$options_$, _annotation$options_;\n\n  return !annotation ? deepEnhancer : (_annotation$options_$ = (_annotation$options_ = annotation.options_) == null ? void 0 : _annotation$options_.enhancer) != null ? _annotation$options_$ : deepEnhancer;\n}\n/**\r\n * Turns an object, array or function into a reactive structure.\r\n * @param v the value which should become observable.\r\n */\n\n\nfunction createObservable(v, arg2, arg3) {\n  // @observable someProp;\n  if (isStringish(arg2)) {\n    storeAnnotation(v, arg2, observableAnnotation);\n    return;\n  } // already observable - ignore\n\n\n  if (isObservable(v)) return v; // plain object\n\n  if (isPlainObject(v)) return mobx_esm_observable.object(v, arg2, arg3); // Array\n\n  if (Array.isArray(v)) return mobx_esm_observable.array(v, arg2); // Map\n\n  if (isES6Map(v)) return mobx_esm_observable.map(v, arg2); // Set\n\n  if (isES6Set(v)) return mobx_esm_observable.set(v, arg2); // other object - ignore\n\n  if (_typeof(v) === "object" && v !== null) return v; // anything else\n\n  return mobx_esm_observable.box(v, arg2);\n}\n\nObject.assign(createObservable, observableDecoratorAnnotation);\nvar observableFactories = {\n  box: function box(value, options) {\n    var o = asCreateObservableOptions(options);\n    return new ObservableValue(value, getEnhancerFromOptions(o), o.name, true, o.equals);\n  },\n  array: function array(initialValues, options) {\n    var o = asCreateObservableOptions(options);\n    return (globalState.useProxies === false || o.proxy === false ? createLegacyArray : createObservableArray)(initialValues, getEnhancerFromOptions(o), o.name);\n  },\n  map: function map(initialValues, options) {\n    var o = asCreateObservableOptions(options);\n    return new ObservableMap(initialValues, getEnhancerFromOptions(o), o.name);\n  },\n  set: function set(initialValues, options) {\n    var o = asCreateObservableOptions(options);\n    return new ObservableSet(initialValues, getEnhancerFromOptions(o), o.name);\n  },\n  object: function object(props, decorators, options) {\n    return extendObservable(globalState.useProxies === false || (options == null ? void 0 : options.proxy) === false ? asObservableObject({}, options) : asDynamicObservableObject({}, options), props, decorators);\n  },\n  ref: /*#__PURE__*/createDecoratorAnnotation(observableRefAnnotation),\n  shallow: /*#__PURE__*/createDecoratorAnnotation(observableShallowAnnotation),\n  deep: observableDecoratorAnnotation,\n  struct: /*#__PURE__*/createDecoratorAnnotation(observableStructAnnotation)\n}; // eslint-disable-next-line\n\nvar mobx_esm_observable = /*#__PURE__*/mobx_esm_assign(createObservable, observableFactories);\nvar COMPUTED = "computed";\nvar COMPUTED_STRUCT = "computed.struct";\nvar computedAnnotation = /*#__PURE__*/createComputedAnnotation(COMPUTED);\nvar computedStructAnnotation = /*#__PURE__*/createComputedAnnotation(COMPUTED_STRUCT, {\n  equals: comparer.structural\n});\n/**\r\n * Decorator for class properties: @computed get value() { return expr; }.\r\n * For legacy purposes also invokable as ES5 observable created: `computed(() => expr)`;\r\n */\n\nvar computed = function computed(arg1, arg2) {\n  if (isStringish(arg2)) {\n    // @computed\n    return storeAnnotation(arg1, arg2, computedAnnotation);\n  }\n\n  if (isPlainObject(arg1)) {\n    // @computed({ options })\n    return createDecoratorAnnotation(createComputedAnnotation(COMPUTED, arg1));\n  } // computed(expr, options?)\n\n\n  if (false) {}\n\n  var opts = isPlainObject(arg2) ? arg2 : {};\n  opts.get = arg1;\n  opts.name || (opts.name = arg1.name || "");\n  /* for generated name */\n\n  return new ComputedValue(opts);\n};\n\nObject.assign(computed, computedAnnotation);\ncomputed.struct = /*#__PURE__*/createDecoratorAnnotation(computedStructAnnotation);\n\nvar _getDescriptor$config, _getDescriptor; // mobx versions\n\n\nvar currentActionId = 0;\nvar nextActionId = 1;\nvar isFunctionNameConfigurable = (_getDescriptor$config = (_getDescriptor = /*#__PURE__*/getDescriptor(function () {}, "name")) == null ? void 0 : _getDescriptor.configurable) != null ? _getDescriptor$config : false; // we can safely recycle this object\n\nvar tmpNameDescriptor = {\n  value: "action",\n  configurable: true,\n  writable: false,\n  enumerable: false\n};\n\nfunction createAction(actionName, fn, autoAction, ref) {\n  if (autoAction === void 0) {\n    autoAction = false;\n  }\n\n  if (false) {}\n\n  function res() {\n    return executeAction(actionName, autoAction, fn, ref || this, arguments);\n  }\n\n  res.isMobxAction = true;\n\n  if (isFunctionNameConfigurable) {\n    tmpNameDescriptor.value = actionName;\n    Object.defineProperty(res, "name", tmpNameDescriptor);\n  }\n\n  return res;\n}\n\nfunction executeAction(actionName, canRunAsDerivation, fn, scope, args) {\n  var runInfo = _startAction(actionName, canRunAsDerivation, scope, args);\n\n  try {\n    return fn.apply(scope, args);\n  } catch (err) {\n    runInfo.error_ = err;\n    throw err;\n  } finally {\n    _endAction(runInfo);\n  }\n}\n\nfunction _startAction(actionName, canRunAsDerivation, // true for autoAction\nscope, args) {\n  var notifySpy_ =  false && 0;\n  var startTime_ = 0;\n\n  if (false) { var flattenedArgs; }\n\n  var prevDerivation_ = globalState.trackingDerivation;\n  var runAsAction = !canRunAsDerivation || !prevDerivation_;\n  startBatch();\n  var prevAllowStateChanges_ = globalState.allowStateChanges; // by default preserve previous allow\n\n  if (runAsAction) {\n    untrackedStart();\n    prevAllowStateChanges_ = allowStateChangesStart(true);\n  }\n\n  var prevAllowStateReads_ = allowStateReadsStart(true);\n  var runInfo = {\n    runAsAction_: runAsAction,\n    prevDerivation_: prevDerivation_,\n    prevAllowStateChanges_: prevAllowStateChanges_,\n    prevAllowStateReads_: prevAllowStateReads_,\n    notifySpy_: notifySpy_,\n    startTime_: startTime_,\n    actionId_: nextActionId++,\n    parentActionId_: currentActionId\n  };\n  currentActionId = runInfo.actionId_;\n  return runInfo;\n}\n\nfunction _endAction(runInfo) {\n  if (currentActionId !== runInfo.actionId_) {\n    die(30);\n  }\n\n  currentActionId = runInfo.parentActionId_;\n\n  if (runInfo.error_ !== undefined) {\n    globalState.suppressReactionErrors = true;\n  }\n\n  allowStateChangesEnd(runInfo.prevAllowStateChanges_);\n  allowStateReadsEnd(runInfo.prevAllowStateReads_);\n  endBatch();\n  if (runInfo.runAsAction_) untrackedEnd(runInfo.prevDerivation_);\n\n  if (false) {}\n\n  globalState.suppressReactionErrors = false;\n}\n\nfunction allowStateChanges(allowStateChanges, func) {\n  var prev = allowStateChangesStart(allowStateChanges);\n\n  try {\n    return func();\n  } finally {\n    allowStateChangesEnd(prev);\n  }\n}\n\nfunction allowStateChangesStart(allowStateChanges) {\n  var prev = globalState.allowStateChanges;\n  globalState.allowStateChanges = allowStateChanges;\n  return prev;\n}\n\nfunction allowStateChangesEnd(prev) {\n  globalState.allowStateChanges = prev;\n}\n\nvar _Symbol$toPrimitive;\n\nvar CREATE = "create";\n_Symbol$toPrimitive = Symbol.toPrimitive;\n\nvar ObservableValue = /*#__PURE__*/function (_Atom) {\n  _inheritsLoose(ObservableValue, _Atom);\n\n  function ObservableValue(value, enhancer, name_, notifySpy, equals) {\n    var _this;\n\n    if (name_ === void 0) {\n      name_ =  false ? 0 : "ObservableValue";\n    }\n\n    if (notifySpy === void 0) {\n      notifySpy = true;\n    }\n\n    if (equals === void 0) {\n      equals = comparer["default"];\n    }\n\n    _this = _Atom.call(this, name_) || this;\n    _this.enhancer = void 0;\n    _this.name_ = void 0;\n    _this.equals = void 0;\n    _this.hasUnreportedChange_ = false;\n    _this.interceptors_ = void 0;\n    _this.changeListeners_ = void 0;\n    _this.value_ = void 0;\n    _this.dehancer = void 0;\n    _this.enhancer = enhancer;\n    _this.name_ = name_;\n    _this.equals = equals;\n    _this.value_ = enhancer(value, undefined, name_);\n\n    if (false) {}\n\n    return _this;\n  }\n\n  var _proto = ObservableValue.prototype;\n\n  _proto.dehanceValue = function dehanceValue(value) {\n    if (this.dehancer !== undefined) return this.dehancer(value);\n    return value;\n  };\n\n  _proto.set = function set(newValue) {\n    var oldValue = this.value_;\n    newValue = this.prepareNewValue_(newValue);\n\n    if (newValue !== globalState.UNCHANGED) {\n      var notifySpy = isSpyEnabled();\n\n      if (false) {}\n\n      this.setNewValue_(newValue);\n      if (false) {}\n    }\n  };\n\n  _proto.prepareNewValue_ = function prepareNewValue_(newValue) {\n    checkIfStateModificationsAreAllowed(this);\n\n    if (hasInterceptors(this)) {\n      var change = interceptChange(this, {\n        object: this,\n        type: UPDATE,\n        newValue: newValue\n      });\n      if (!change) return globalState.UNCHANGED;\n      newValue = change.newValue;\n    } // apply modifier\n\n\n    newValue = this.enhancer(newValue, this.value_, this.name_);\n    return this.equals(this.value_, newValue) ? globalState.UNCHANGED : newValue;\n  };\n\n  _proto.setNewValue_ = function setNewValue_(newValue) {\n    var oldValue = this.value_;\n    this.value_ = newValue;\n    this.reportChanged();\n\n    if (hasListeners(this)) {\n      notifyListeners(this, {\n        type: UPDATE,\n        object: this,\n        newValue: newValue,\n        oldValue: oldValue\n      });\n    }\n  };\n\n  _proto.get = function get() {\n    this.reportObserved();\n    return this.dehanceValue(this.value_);\n  };\n\n  _proto.intercept_ = function intercept_(handler) {\n    return registerInterceptor(this, handler);\n  };\n\n  _proto.observe_ = function observe_(listener, fireImmediately) {\n    if (fireImmediately) listener({\n      observableKind: "value",\n      debugObjectName: this.name_,\n      object: this,\n      type: UPDATE,\n      newValue: this.value_,\n      oldValue: undefined\n    });\n    return registerListener(this, listener);\n  };\n\n  _proto.raw = function raw() {\n    // used by MST ot get undehanced value\n    return this.value_;\n  };\n\n  _proto.toJSON = function toJSON() {\n    return this.get();\n  };\n\n  _proto.toString = function toString() {\n    return this.name_ + "[" + this.value_ + "]";\n  };\n\n  _proto.valueOf = function valueOf() {\n    return toPrimitive(this.get());\n  };\n\n  _proto[_Symbol$toPrimitive] = function () {\n    return this.valueOf();\n  };\n\n  return ObservableValue;\n}(Atom);\n\nvar isObservableValue = /*#__PURE__*/(/* unused pure expression or super */ null && (createInstanceofPredicate("ObservableValue", ObservableValue)));\n\nvar _Symbol$toPrimitive$1;\n/**\r\n * A node in the state dependency root that observes other nodes, and can be observed itself.\r\n *\r\n * ComputedValue will remember the result of the computation for the duration of the batch, or\r\n * while being observed.\r\n *\r\n * During this time it will recompute only when one of its direct dependencies changed,\r\n * but only when it is being accessed with `ComputedValue.get()`.\r\n *\r\n * Implementation description:\r\n * 1. First time it\'s being accessed it will compute and remember result\r\n *    give back remembered result until 2. happens\r\n * 2. First time any deep dependency change, propagate POSSIBLY_STALE to all observers, wait for 3.\r\n * 3. When it\'s being accessed, recompute if any shallow dependency changed.\r\n *    if result changed: propagate STALE to all observers, that were POSSIBLY_STALE from the last step.\r\n *    go to step 2. either way\r\n *\r\n * If at any point it\'s outside batch and it isn\'t observed: reset everything and go to 1.\r\n */\n\n\n_Symbol$toPrimitive$1 = Symbol.toPrimitive;\n\nvar ComputedValue = /*#__PURE__*/function () {\n  // nodes we are looking at. Our value depends on these nodes\n  // during tracking it\'s an array with new observed observers\n  // to check for cycles\n  // N.B: unminified as it is used by MST\n\n  /**\r\n   * Create a new computed value based on a function expression.\r\n   *\r\n   * The `name` property is for debug purposes only.\r\n   *\r\n   * The `equals` property specifies the comparer function to use to determine if a newly produced\r\n   * value differs from the previous value. Two comparers are provided in the library; `defaultComparer`\r\n   * compares based on identity comparison (===), and `structuralComparer` deeply compares the structure.\r\n   * Structural comparison can be convenient if you always produce a new aggregated object and\r\n   * don\'t want to notify observers if it is structurally the same.\r\n   * This is useful for working with vectors, mouse coordinates etc.\r\n   */\n  function ComputedValue(options) {\n    this.dependenciesState_ = IDerivationState_.NOT_TRACKING_;\n    this.observing_ = [];\n    this.newObserving_ = null;\n    this.isBeingObserved_ = false;\n    this.isPendingUnobservation_ = false;\n    this.observers_ = new Set();\n    this.diffValue_ = 0;\n    this.runId_ = 0;\n    this.lastAccessedBy_ = 0;\n    this.lowestObserverState_ = IDerivationState_.UP_TO_DATE_;\n    this.unboundDepsCount_ = 0;\n    this.value_ = new CaughtException(null);\n    this.name_ = void 0;\n    this.triggeredBy_ = void 0;\n    this.isComputing_ = false;\n    this.isRunningSetter_ = false;\n    this.derivation = void 0;\n    this.setter_ = void 0;\n    this.isTracing_ = TraceMode.NONE;\n    this.scope_ = void 0;\n    this.equals_ = void 0;\n    this.requiresReaction_ = void 0;\n    this.keepAlive_ = void 0;\n    this.onBOL = void 0;\n    this.onBUOL = void 0;\n    if (!options.get) die(31);\n    this.derivation = options.get;\n    this.name_ = options.name || ( false ? 0 : "ComputedValue");\n\n    if (options.set) {\n      this.setter_ = createAction( false ? 0 : "ComputedValue-setter", options.set);\n    }\n\n    this.equals_ = options.equals || (options.compareStructural || options.struct ? comparer.structural : comparer["default"]);\n    this.scope_ = options.context;\n    this.requiresReaction_ = !!options.requiresReaction;\n    this.keepAlive_ = !!options.keepAlive;\n  }\n\n  var _proto = ComputedValue.prototype;\n\n  _proto.onBecomeStale_ = function onBecomeStale_() {\n    propagateMaybeChanged(this);\n  };\n\n  _proto.onBO = function onBO() {\n    if (this.onBOL) {\n      this.onBOL.forEach(function (listener) {\n        return listener();\n      });\n    }\n  };\n\n  _proto.onBUO = function onBUO() {\n    if (this.onBUOL) {\n      this.onBUOL.forEach(function (listener) {\n        return listener();\n      });\n    }\n  }\n  /**\r\n   * Returns the current value of this computed value.\r\n   * Will evaluate its computation first if needed.\r\n   */\n  ;\n\n  _proto.get = function get() {\n    if (this.isComputing_) die(32, this.name_, this.derivation);\n\n    if (globalState.inBatch === 0 && // !globalState.trackingDerivatpion &&\n    this.observers_.size === 0 && !this.keepAlive_) {\n      if (shouldCompute(this)) {\n        this.warnAboutUntrackedRead_();\n        startBatch(); // See perf test \'computed memoization\'\n\n        this.value_ = this.computeValue_(false);\n        endBatch();\n      }\n    } else {\n      reportObserved(this);\n\n      if (shouldCompute(this)) {\n        var prevTrackingContext = globalState.trackingContext;\n        if (this.keepAlive_ && !prevTrackingContext) globalState.trackingContext = this;\n        if (this.trackAndCompute()) propagateChangeConfirmed(this);\n        globalState.trackingContext = prevTrackingContext;\n      }\n    }\n\n    var result = this.value_;\n    if (isCaughtException(result)) throw result.cause;\n    return result;\n  };\n\n  _proto.set = function set(value) {\n    if (this.setter_) {\n      if (this.isRunningSetter_) die(33, this.name_);\n      this.isRunningSetter_ = true;\n\n      try {\n        this.setter_.call(this.scope_, value);\n      } finally {\n        this.isRunningSetter_ = false;\n      }\n    } else die(34, this.name_);\n  };\n\n  _proto.trackAndCompute = function trackAndCompute() {\n    // N.B: unminified as it is used by MST\n    var oldValue = this.value_;\n    var wasSuspended =\n    /* see #1208 */\n    this.dependenciesState_ === IDerivationState_.NOT_TRACKING_;\n    var newValue = this.computeValue_(true);\n\n    if (false) {}\n\n    var changed = wasSuspended || isCaughtException(oldValue) || isCaughtException(newValue) || !this.equals_(oldValue, newValue);\n\n    if (changed) {\n      this.value_ = newValue;\n    }\n\n    return changed;\n  };\n\n  _proto.computeValue_ = function computeValue_(track) {\n    this.isComputing_ = true; // don\'t allow state changes during computation\n\n    var prev = allowStateChangesStart(false);\n    var res;\n\n    if (track) {\n      res = trackDerivedFunction(this, this.derivation, this.scope_);\n    } else {\n      if (globalState.disableErrorBoundaries === true) {\n        res = this.derivation.call(this.scope_);\n      } else {\n        try {\n          res = this.derivation.call(this.scope_);\n        } catch (e) {\n          res = new CaughtException(e);\n        }\n      }\n    }\n\n    allowStateChangesEnd(prev);\n    this.isComputing_ = false;\n    return res;\n  };\n\n  _proto.suspend_ = function suspend_() {\n    if (!this.keepAlive_) {\n      clearObserving(this);\n      this.value_ = undefined; // don\'t hold on to computed value!\n\n      if (false) {}\n    }\n  };\n\n  _proto.observe_ = function observe_(listener, fireImmediately) {\n    var _this = this;\n\n    var firstTime = true;\n    var prevValue = undefined;\n    return autorun(function () {\n      // TODO: why is this in a different place than the spyReport() function? in all other observables it\'s called in the same place\n      var newValue = _this.get();\n\n      if (!firstTime || fireImmediately) {\n        var prevU = untrackedStart();\n        listener({\n          observableKind: "computed",\n          debugObjectName: _this.name_,\n          type: UPDATE,\n          object: _this,\n          newValue: newValue,\n          oldValue: prevValue\n        });\n        untrackedEnd(prevU);\n      }\n\n      firstTime = false;\n      prevValue = newValue;\n    });\n  };\n\n  _proto.warnAboutUntrackedRead_ = function warnAboutUntrackedRead_() {\n    if (true) return;\n\n    if (this.isTracing_ !== TraceMode.NONE) {\n      console.log("[mobx.trace] Computed value \'" + this.name_ + "\' is being read outside a reactive context. Doing a full recompute.");\n    }\n\n    if (globalState.computedRequiresReaction || this.requiresReaction_) {\n      console.warn("[mobx] Computed value \'" + this.name_ + "\' is being read outside a reactive context. Doing a full recompute.");\n    }\n  };\n\n  _proto.toString = function toString() {\n    return this.name_ + "[" + this.derivation.toString() + "]";\n  };\n\n  _proto.valueOf = function valueOf() {\n    return toPrimitive(this.get());\n  };\n\n  _proto[_Symbol$toPrimitive$1] = function () {\n    return this.valueOf();\n  };\n\n  return ComputedValue;\n}();\n\nvar isComputedValue = /*#__PURE__*/createInstanceofPredicate("ComputedValue", ComputedValue);\nvar IDerivationState_;\n\n(function (IDerivationState_) {\n  // before being run or (outside batch and not being observed)\n  // at this point derivation is not holding any data about dependency tree\n  IDerivationState_[IDerivationState_["NOT_TRACKING_"] = -1] = "NOT_TRACKING_"; // no shallow dependency changed since last computation\n  // won\'t recalculate derivation\n  // this is what makes mobx fast\n\n  IDerivationState_[IDerivationState_["UP_TO_DATE_"] = 0] = "UP_TO_DATE_"; // some deep dependency changed, but don\'t know if shallow dependency changed\n  // will require to check first if UP_TO_DATE or POSSIBLY_STALE\n  // currently only ComputedValue will propagate POSSIBLY_STALE\n  //\n  // having this state is second big optimization:\n  // don\'t have to recompute on every dependency change, but only when it\'s needed\n\n  IDerivationState_[IDerivationState_["POSSIBLY_STALE_"] = 1] = "POSSIBLY_STALE_"; // A shallow dependency has changed since last computation and the derivation\n  // will need to recompute when it\'s needed next.\n\n  IDerivationState_[IDerivationState_["STALE_"] = 2] = "STALE_";\n})(IDerivationState_ || (IDerivationState_ = {}));\n\nvar TraceMode;\n\n(function (TraceMode) {\n  TraceMode[TraceMode["NONE"] = 0] = "NONE";\n  TraceMode[TraceMode["LOG"] = 1] = "LOG";\n  TraceMode[TraceMode["BREAK"] = 2] = "BREAK";\n})(TraceMode || (TraceMode = {}));\n\nvar CaughtException = function CaughtException(cause) {\n  this.cause = void 0;\n  this.cause = cause; // Empty\n};\n\nfunction isCaughtException(e) {\n  return e instanceof CaughtException;\n}\n/**\r\n * Finds out whether any dependency of the derivation has actually changed.\r\n * If dependenciesState is 1 then it will recalculate dependencies,\r\n * if any dependency changed it will propagate it by changing dependenciesState to 2.\r\n *\r\n * By iterating over the dependencies in the same order that they were reported and\r\n * stopping on the first change, all the recalculations are only called for ComputedValues\r\n * that will be tracked by derivation. That is because we assume that if the first x\r\n * dependencies of the derivation doesn\'t change then the derivation should run the same way\r\n * up until accessing x-th dependency.\r\n */\n\n\nfunction shouldCompute(derivation) {\n  switch (derivation.dependenciesState_) {\n    case IDerivationState_.UP_TO_DATE_:\n      return false;\n\n    case IDerivationState_.NOT_TRACKING_:\n    case IDerivationState_.STALE_:\n      return true;\n\n    case IDerivationState_.POSSIBLY_STALE_:\n      {\n        // state propagation can occur outside of action/reactive context #2195\n        var prevAllowStateReads = allowStateReadsStart(true);\n        var prevUntracked = untrackedStart(); // no need for those computeds to be reported, they will be picked up in trackDerivedFunction.\n\n        var obs = derivation.observing_,\n            l = obs.length;\n\n        for (var i = 0; i < l; i++) {\n          var obj = obs[i];\n\n          if (isComputedValue(obj)) {\n            if (globalState.disableErrorBoundaries) {\n              obj.get();\n            } else {\n              try {\n                obj.get();\n              } catch (e) {\n                // we are not interested in the value *or* exception at this moment, but if there is one, notify all\n                untrackedEnd(prevUntracked);\n                allowStateReadsEnd(prevAllowStateReads);\n                return true;\n              }\n            } // if ComputedValue `obj` actually changed it will be computed and propagated to its observers.\n            // and `derivation` is an observer of `obj`\n            // invariantShouldCompute(derivation)\n\n\n            if (derivation.dependenciesState_ === IDerivationState_.STALE_) {\n              untrackedEnd(prevUntracked);\n              allowStateReadsEnd(prevAllowStateReads);\n              return true;\n            }\n          }\n        }\n\n        changeDependenciesStateTo0(derivation);\n        untrackedEnd(prevUntracked);\n        allowStateReadsEnd(prevAllowStateReads);\n        return false;\n      }\n  }\n}\n\nfunction isComputingDerivation() {\n  return globalState.trackingDerivation !== null; // filter out actions inside computations\n}\n\nfunction checkIfStateModificationsAreAllowed(atom) {\n  if (true) {\n    return;\n  }\n\n  var hasObservers = atom.observers_.size > 0; // Should not be possible to change observed state outside strict mode, except during initialization, see #563\n\n  if (!globalState.allowStateChanges && (hasObservers || globalState.enforceActions === "always")) console.warn("[MobX] " + (globalState.enforceActions ? "Since strict-mode is enabled, changing (observed) observable values without using an action is not allowed. Tried to modify: " : "Side effects like changing state are not allowed at this point. Are you trying to modify state from, for example, a computed value or the render function of a React component? You can wrap side effects in \'runInAction\' (or decorate functions with \'action\') if needed. Tried to modify: ") + atom.name_);\n}\n\nfunction checkIfStateReadsAreAllowed(observable) {\n  if (false) {}\n}\n/**\r\n * Executes the provided function `f` and tracks which observables are being accessed.\r\n * The tracking information is stored on the `derivation` object and the derivation is registered\r\n * as observer of any of the accessed observables.\r\n */\n\n\nfunction trackDerivedFunction(derivation, f, context) {\n  var prevAllowStateReads = allowStateReadsStart(true); // pre allocate array allocation + room for variation in deps\n  // array will be trimmed by bindDependencies\n\n  changeDependenciesStateTo0(derivation);\n  derivation.newObserving_ = new Array(derivation.observing_.length + 100);\n  derivation.unboundDepsCount_ = 0;\n  derivation.runId_ = ++globalState.runId;\n  var prevTracking = globalState.trackingDerivation;\n  globalState.trackingDerivation = derivation;\n  globalState.inBatch++;\n  var result;\n\n  if (globalState.disableErrorBoundaries === true) {\n    result = f.call(context);\n  } else {\n    try {\n      result = f.call(context);\n    } catch (e) {\n      result = new CaughtException(e);\n    }\n  }\n\n  globalState.inBatch--;\n  globalState.trackingDerivation = prevTracking;\n  bindDependencies(derivation);\n  warnAboutDerivationWithoutDependencies(derivation);\n  allowStateReadsEnd(prevAllowStateReads);\n  return result;\n}\n\nfunction warnAboutDerivationWithoutDependencies(derivation) {\n  if (true) return;\n  if (derivation.observing_.length !== 0) return;\n\n  if (globalState.reactionRequiresObservable || derivation.requiresObservable_) {\n    console.warn("[mobx] Derivation \'" + derivation.name_ + "\' is created/updated without reading any observable value.");\n  }\n}\n/**\r\n * diffs newObserving with observing.\r\n * update observing to be newObserving with unique observables\r\n * notify observers that become observed/unobserved\r\n */\n\n\nfunction bindDependencies(derivation) {\n  // invariant(derivation.dependenciesState !== IDerivationState.NOT_TRACKING, "INTERNAL ERROR bindDependencies expects derivation.dependenciesState !== -1");\n  var prevObserving = derivation.observing_;\n  var observing = derivation.observing_ = derivation.newObserving_;\n  var lowestNewObservingDerivationState = IDerivationState_.UP_TO_DATE_; // Go through all new observables and check diffValue: (this list can contain duplicates):\n  //   0: first occurrence, change to 1 and keep it\n  //   1: extra occurrence, drop it\n\n  var i0 = 0,\n      l = derivation.unboundDepsCount_;\n\n  for (var i = 0; i < l; i++) {\n    var dep = observing[i];\n\n    if (dep.diffValue_ === 0) {\n      dep.diffValue_ = 1;\n      if (i0 !== i) observing[i0] = dep;\n      i0++;\n    } // Upcast is \'safe\' here, because if dep is IObservable, `dependenciesState` will be undefined,\n    // not hitting the condition\n\n\n    if (dep.dependenciesState_ > lowestNewObservingDerivationState) {\n      lowestNewObservingDerivationState = dep.dependenciesState_;\n    }\n  }\n\n  observing.length = i0;\n  derivation.newObserving_ = null; // newObserving shouldn\'t be needed outside tracking (statement moved down to work around FF bug, see #614)\n  // Go through all old observables and check diffValue: (it is unique after last bindDependencies)\n  //   0: it\'s not in new observables, unobserve it\n  //   1: it keeps being observed, don\'t want to notify it. change to 0\n\n  l = prevObserving.length;\n\n  while (l--) {\n    var _dep = prevObserving[l];\n\n    if (_dep.diffValue_ === 0) {\n      removeObserver(_dep, derivation);\n    }\n\n    _dep.diffValue_ = 0;\n  } // Go through all new observables and check diffValue: (now it should be unique)\n  //   0: it was set to 0 in last loop. don\'t need to do anything.\n  //   1: it wasn\'t observed, let\'s observe it. set back to 0\n\n\n  while (i0--) {\n    var _dep2 = observing[i0];\n\n    if (_dep2.diffValue_ === 1) {\n      _dep2.diffValue_ = 0;\n      addObserver(_dep2, derivation);\n    }\n  } // Some new observed derivations may become stale during this derivation computation\n  // so they have had no chance to propagate staleness (#916)\n\n\n  if (lowestNewObservingDerivationState !== IDerivationState_.UP_TO_DATE_) {\n    derivation.dependenciesState_ = lowestNewObservingDerivationState;\n    derivation.onBecomeStale_();\n  }\n}\n\nfunction clearObserving(derivation) {\n  // invariant(globalState.inBatch > 0, "INTERNAL ERROR clearObserving should be called only inside batch");\n  var obs = derivation.observing_;\n  derivation.observing_ = [];\n  var i = obs.length;\n\n  while (i--) {\n    removeObserver(obs[i], derivation);\n  }\n\n  derivation.dependenciesState_ = IDerivationState_.NOT_TRACKING_;\n}\n\nfunction untracked(action) {\n  var prev = untrackedStart();\n\n  try {\n    return action();\n  } finally {\n    untrackedEnd(prev);\n  }\n}\n\nfunction untrackedStart() {\n  var prev = globalState.trackingDerivation;\n  globalState.trackingDerivation = null;\n  return prev;\n}\n\nfunction untrackedEnd(prev) {\n  globalState.trackingDerivation = prev;\n}\n\nfunction allowStateReadsStart(allowStateReads) {\n  var prev = globalState.allowStateReads;\n  globalState.allowStateReads = allowStateReads;\n  return prev;\n}\n\nfunction allowStateReadsEnd(prev) {\n  globalState.allowStateReads = prev;\n}\n/**\r\n * needed to keep `lowestObserverState` correct. when changing from (2 or 1) to 0\r\n *\r\n */\n\n\nfunction changeDependenciesStateTo0(derivation) {\n  if (derivation.dependenciesState_ === IDerivationState_.UP_TO_DATE_) return;\n  derivation.dependenciesState_ = IDerivationState_.UP_TO_DATE_;\n  var obs = derivation.observing_;\n  var i = obs.length;\n\n  while (i--) {\n    obs[i].lowestObserverState_ = IDerivationState_.UP_TO_DATE_;\n  }\n}\n/**\r\n * These values will persist if global state is reset\r\n */\n\n\nvar persistentKeys = (/* unused pure expression or super */ null && (["mobxGuid", "spyListeners", "enforceActions", "computedRequiresReaction", "reactionRequiresObservable", "observableRequiresReaction", "allowStateReads", "disableErrorBoundaries", "runId", "UNCHANGED", "useProxies"]));\n\nvar MobXGlobals = function MobXGlobals() {\n  this.version = 6;\n  this.UNCHANGED = {};\n  this.trackingDerivation = null;\n  this.trackingContext = null;\n  this.runId = 0;\n  this.mobxGuid = 0;\n  this.inBatch = 0;\n  this.pendingUnobservations = [];\n  this.pendingReactions = [];\n  this.isRunningReactions = false;\n  this.allowStateChanges = false;\n  this.allowStateReads = true;\n  this.enforceActions = true;\n  this.spyListeners = [];\n  this.globalReactionErrorHandlers = [];\n  this.computedRequiresReaction = false;\n  this.reactionRequiresObservable = false;\n  this.observableRequiresReaction = false;\n  this.disableErrorBoundaries = false;\n  this.suppressReactionErrors = false;\n  this.useProxies = true;\n  this.verifyProxies = false;\n  this.safeDescriptors = true;\n};\n\nvar canMergeGlobalState = true;\nvar isolateCalled = false;\n\nvar globalState = /*#__PURE__*/function () {\n  var global = /*#__PURE__*/getGlobal();\n  if (global.__mobxInstanceCount > 0 && !global.__mobxGlobals) canMergeGlobalState = false;\n  if (global.__mobxGlobals && global.__mobxGlobals.version !== new MobXGlobals().version) canMergeGlobalState = false;\n\n  if (!canMergeGlobalState) {\n    setTimeout(function () {\n      if (!isolateCalled) {\n        die(35);\n      }\n    }, 1);\n    return new MobXGlobals();\n  } else if (global.__mobxGlobals) {\n    global.__mobxInstanceCount += 1;\n    if (!global.__mobxGlobals.UNCHANGED) global.__mobxGlobals.UNCHANGED = {}; // make merge backward compatible\n\n    return global.__mobxGlobals;\n  } else {\n    global.__mobxInstanceCount = 1;\n    return global.__mobxGlobals = /*#__PURE__*/new MobXGlobals();\n  }\n}();\n\nfunction isolateGlobalState() {\n  if (globalState.pendingReactions.length || globalState.inBatch || globalState.isRunningReactions) die(36);\n  isolateCalled = true;\n\n  if (canMergeGlobalState) {\n    var global = getGlobal();\n    if (--global.__mobxInstanceCount === 0) global.__mobxGlobals = undefined;\n    globalState = new MobXGlobals();\n  }\n}\n\nfunction getGlobalState() {\n  return globalState;\n}\n/**\r\n * For testing purposes only; this will break the internal state of existing observables,\r\n * but can be used to get back at a stable state after throwing errors\r\n */\n\n\nfunction resetGlobalState() {\n  var defaultGlobals = new MobXGlobals();\n\n  for (var key in defaultGlobals) {\n    if (persistentKeys.indexOf(key) === -1) globalState[key] = defaultGlobals[key];\n  }\n\n  globalState.allowStateChanges = !globalState.enforceActions;\n}\n\nfunction hasObservers(observable) {\n  return observable.observers_ && observable.observers_.size > 0;\n}\n\nfunction getObservers(observable) {\n  return observable.observers_;\n} // function invariantObservers(observable: IObservable) {\n//     const list = observable.observers\n//     const map = observable.observersIndexes\n//     const l = list.length\n//     for (let i = 0; i < l; i++) {\n//         const id = list[i].__mapid\n//         if (i) {\n//             invariant(map[id] === i, "INTERNAL ERROR maps derivation.__mapid to index in list") // for performance\n//         } else {\n//             invariant(!(id in map), "INTERNAL ERROR observer on index 0 shouldn\'t be held in map.") // for performance\n//         }\n//     }\n//     invariant(\n//         list.length === 0 || Object.keys(map).length === list.length - 1,\n//         "INTERNAL ERROR there is no junk in map"\n//     )\n// }\n\n\nfunction addObserver(observable, node) {\n  // invariant(node.dependenciesState !== -1, "INTERNAL ERROR, can add only dependenciesState !== -1");\n  // invariant(observable._observers.indexOf(node) === -1, "INTERNAL ERROR add already added node");\n  // invariantObservers(observable);\n  observable.observers_.add(node);\n  if (observable.lowestObserverState_ > node.dependenciesState_) observable.lowestObserverState_ = node.dependenciesState_; // invariantObservers(observable);\n  // invariant(observable._observers.indexOf(node) !== -1, "INTERNAL ERROR didn\'t add node");\n}\n\nfunction removeObserver(observable, node) {\n  // invariant(globalState.inBatch > 0, "INTERNAL ERROR, remove should be called only inside batch");\n  // invariant(observable._observers.indexOf(node) !== -1, "INTERNAL ERROR remove already removed node");\n  // invariantObservers(observable);\n  observable.observers_["delete"](node);\n\n  if (observable.observers_.size === 0) {\n    // deleting last observer\n    queueForUnobservation(observable);\n  } // invariantObservers(observable);\n  // invariant(observable._observers.indexOf(node) === -1, "INTERNAL ERROR remove already removed node2");\n\n}\n\nfunction queueForUnobservation(observable) {\n  if (observable.isPendingUnobservation_ === false) {\n    // invariant(observable._observers.length === 0, "INTERNAL ERROR, should only queue for unobservation unobserved observables");\n    observable.isPendingUnobservation_ = true;\n    globalState.pendingUnobservations.push(observable);\n  }\n}\n/**\r\n * Batch starts a transaction, at least for purposes of memoizing ComputedValues when nothing else does.\r\n * During a batch `onBecomeUnobserved` will be called at most once per observable.\r\n * Avoids unnecessary recalculations.\r\n */\n\n\nfunction startBatch() {\n  globalState.inBatch++;\n}\n\nfunction endBatch() {\n  if (--globalState.inBatch === 0) {\n    runReactions(); // the batch is actually about to finish, all unobserving should happen here.\n\n    var list = globalState.pendingUnobservations;\n\n    for (var i = 0; i < list.length; i++) {\n      var observable = list[i];\n      observable.isPendingUnobservation_ = false;\n\n      if (observable.observers_.size === 0) {\n        if (observable.isBeingObserved_) {\n          // if this observable had reactive observers, trigger the hooks\n          observable.isBeingObserved_ = false;\n          observable.onBUO();\n        }\n\n        if (observable instanceof ComputedValue) {\n          // computed values are automatically teared down when the last observer leaves\n          // this process happens recursively, this computed might be the last observabe of another, etc..\n          observable.suspend_();\n        }\n      }\n    }\n\n    globalState.pendingUnobservations = [];\n  }\n}\n\nfunction reportObserved(observable) {\n  checkIfStateReadsAreAllowed(observable);\n  var derivation = globalState.trackingDerivation;\n\n  if (derivation !== null) {\n    /**\r\n     * Simple optimization, give each derivation run an unique id (runId)\r\n     * Check if last time this observable was accessed the same runId is used\r\n     * if this is the case, the relation is already known\r\n     */\n    if (derivation.runId_ !== observable.lastAccessedBy_) {\n      observable.lastAccessedBy_ = derivation.runId_; // Tried storing newObserving, or observing, or both as Set, but performance didn\'t come close...\n\n      derivation.newObserving_[derivation.unboundDepsCount_++] = observable;\n\n      if (!observable.isBeingObserved_ && globalState.trackingContext) {\n        observable.isBeingObserved_ = true;\n        observable.onBO();\n      }\n    }\n\n    return true;\n  } else if (observable.observers_.size === 0 && globalState.inBatch > 0) {\n    queueForUnobservation(observable);\n  }\n\n  return false;\n} // function invariantLOS(observable: IObservable, msg: string) {\n//     // it\'s expensive so better not run it in produciton. but temporarily helpful for testing\n//     const min = getObservers(observable).reduce((a, b) => Math.min(a, b.dependenciesState), 2)\n//     if (min >= observable.lowestObserverState) return // <- the only assumption about `lowestObserverState`\n//     throw new Error(\n//         "lowestObserverState is wrong for " +\n//             msg +\n//             " because " +\n//             min +\n//             " < " +\n//             observable.lowestObserverState\n//     )\n// }\n\n/**\r\n * NOTE: current propagation mechanism will in case of self reruning autoruns behave unexpectedly\r\n * It will propagate changes to observers from previous run\r\n * It\'s hard or maybe impossible (with reasonable perf) to get it right with current approach\r\n * Hopefully self reruning autoruns aren\'t a feature people should depend on\r\n * Also most basic use cases should be ok\r\n */\n// Called by Atom when its value changes\n\n\nfunction propagateChanged(observable) {\n  // invariantLOS(observable, "changed start");\n  if (observable.lowestObserverState_ === IDerivationState_.STALE_) return;\n  observable.lowestObserverState_ = IDerivationState_.STALE_; // Ideally we use for..of here, but the downcompiled version is really slow...\n\n  observable.observers_.forEach(function (d) {\n    if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {\n      if (false) {}\n\n      d.onBecomeStale_();\n    }\n\n    d.dependenciesState_ = IDerivationState_.STALE_;\n  }); // invariantLOS(observable, "changed end");\n} // Called by ComputedValue when it recalculate and its value changed\n\n\nfunction propagateChangeConfirmed(observable) {\n  // invariantLOS(observable, "confirmed start");\n  if (observable.lowestObserverState_ === IDerivationState_.STALE_) return;\n  observable.lowestObserverState_ = IDerivationState_.STALE_;\n  observable.observers_.forEach(function (d) {\n    if (d.dependenciesState_ === IDerivationState_.POSSIBLY_STALE_) {\n      d.dependenciesState_ = IDerivationState_.STALE_;\n\n      if (false) {}\n    } else if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_ // this happens during computing of `d`, just keep lowestObserverState up to date.\n    ) {\n      observable.lowestObserverState_ = IDerivationState_.UP_TO_DATE_;\n    }\n  }); // invariantLOS(observable, "confirmed end");\n} // Used by computed when its dependency changed, but we don\'t wan\'t to immediately recompute.\n\n\nfunction propagateMaybeChanged(observable) {\n  // invariantLOS(observable, "maybe start");\n  if (observable.lowestObserverState_ !== IDerivationState_.UP_TO_DATE_) return;\n  observable.lowestObserverState_ = IDerivationState_.POSSIBLY_STALE_;\n  observable.observers_.forEach(function (d) {\n    if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {\n      d.dependenciesState_ = IDerivationState_.POSSIBLY_STALE_;\n      d.onBecomeStale_();\n    }\n  }); // invariantLOS(observable, "maybe end");\n}\n\nfunction logTraceInfo(derivation, observable) {\n  console.log("[mobx.trace] \'" + derivation.name_ + "\' is invalidated due to a change in: \'" + observable.name_ + "\'");\n\n  if (derivation.isTracing_ === TraceMode.BREAK) {\n    var lines = [];\n    printDepTree(getDependencyTree(derivation), lines, 1); // prettier-ignore\n\n    new Function("debugger;\\n/*\\nTracing \'" + derivation.name_ + "\'\\n\\nYou are entering this break point because derivation \'" + derivation.name_ + "\' is being traced and \'" + observable.name_ + "\' is now forcing it to update.\\nJust follow the stacktrace you should now see in the devtools to see precisely what piece of your code is causing this update\\nThe stackframe you are looking for is at least ~6-8 stack-frames up.\\n\\n" + (derivation instanceof ComputedValue ? derivation.derivation.toString().replace(/[*]\\//g, "/") : "") + "\\n\\nThe dependencies for this derivation are:\\n\\n" + lines.join("\\n") + "\\n*/\\n    ")();\n  }\n}\n\nfunction printDepTree(tree, lines, depth) {\n  if (lines.length >= 1000) {\n    lines.push("(and many more)");\n    return;\n  }\n\n  lines.push("" + new Array(depth).join("\\t") + tree.name); // MWE: not the fastest, but the easiest way :)\n\n  if (tree.dependencies) tree.dependencies.forEach(function (child) {\n    return printDepTree(child, lines, depth + 1);\n  });\n}\n\nvar Reaction = /*#__PURE__*/function () {\n  // nodes we are looking at. Our value depends on these nodes\n  function Reaction(name_, onInvalidate_, errorHandler_, requiresObservable_) {\n    if (name_ === void 0) {\n      name_ =  false ? 0 : "Reaction";\n    }\n\n    if (requiresObservable_ === void 0) {\n      requiresObservable_ = false;\n    }\n\n    this.name_ = void 0;\n    this.onInvalidate_ = void 0;\n    this.errorHandler_ = void 0;\n    this.requiresObservable_ = void 0;\n    this.observing_ = [];\n    this.newObserving_ = [];\n    this.dependenciesState_ = IDerivationState_.NOT_TRACKING_;\n    this.diffValue_ = 0;\n    this.runId_ = 0;\n    this.unboundDepsCount_ = 0;\n    this.isDisposed_ = false;\n    this.isScheduled_ = false;\n    this.isTrackPending_ = false;\n    this.isRunning_ = false;\n    this.isTracing_ = TraceMode.NONE;\n    this.name_ = name_;\n    this.onInvalidate_ = onInvalidate_;\n    this.errorHandler_ = errorHandler_;\n    this.requiresObservable_ = requiresObservable_;\n  }\n\n  var _proto = Reaction.prototype;\n\n  _proto.onBecomeStale_ = function onBecomeStale_() {\n    this.schedule_();\n  };\n\n  _proto.schedule_ = function schedule_() {\n    if (!this.isScheduled_) {\n      this.isScheduled_ = true;\n      globalState.pendingReactions.push(this);\n      runReactions();\n    }\n  };\n\n  _proto.isScheduled = function isScheduled() {\n    return this.isScheduled_;\n  }\n  /**\r\n   * internal, use schedule() if you intend to kick off a reaction\r\n   */\n  ;\n\n  _proto.runReaction_ = function runReaction_() {\n    if (!this.isDisposed_) {\n      startBatch();\n      this.isScheduled_ = false;\n      var prev = globalState.trackingContext;\n      globalState.trackingContext = this;\n\n      if (shouldCompute(this)) {\n        this.isTrackPending_ = true;\n\n        try {\n          this.onInvalidate_();\n\n          if (false) {}\n        } catch (e) {\n          this.reportExceptionInDerivation_(e);\n        }\n      }\n\n      globalState.trackingContext = prev;\n      endBatch();\n    }\n  };\n\n  _proto.track = function track(fn) {\n    if (this.isDisposed_) {\n      return; // console.warn("Reaction already disposed") // Note: Not a warning / error in mobx 4 either\n    }\n\n    startBatch();\n    var notify = isSpyEnabled();\n    var startTime;\n\n    if (false) {}\n\n    this.isRunning_ = true;\n    var prevReaction = globalState.trackingContext; // reactions could create reactions...\n\n    globalState.trackingContext = this;\n    var result = trackDerivedFunction(this, fn, undefined);\n    globalState.trackingContext = prevReaction;\n    this.isRunning_ = false;\n    this.isTrackPending_ = false;\n\n    if (this.isDisposed_) {\n      // disposed during last run. Clean up everything that was bound after the dispose call.\n      clearObserving(this);\n    }\n\n    if (isCaughtException(result)) this.reportExceptionInDerivation_(result.cause);\n\n    if (false) {}\n\n    endBatch();\n  };\n\n  _proto.reportExceptionInDerivation_ = function reportExceptionInDerivation_(error) {\n    var _this = this;\n\n    if (this.errorHandler_) {\n      this.errorHandler_(error, this);\n      return;\n    }\n\n    if (globalState.disableErrorBoundaries) throw error;\n    var message =  false ? 0 : "[mobx] uncaught error in \'" + this + "\'";\n\n    if (!globalState.suppressReactionErrors) {\n      console.error(message, error);\n      /** If debugging brought you here, please, read the above message :-). Tnx! */\n    } else if (false) {} // prettier-ignore\n\n\n    if (false) {}\n\n    globalState.globalReactionErrorHandlers.forEach(function (f) {\n      return f(error, _this);\n    });\n  };\n\n  _proto.dispose = function dispose() {\n    if (!this.isDisposed_) {\n      this.isDisposed_ = true;\n\n      if (!this.isRunning_) {\n        // if disposed while running, clean up later. Maybe not optimal, but rare case\n        startBatch();\n        clearObserving(this);\n        endBatch();\n      }\n    }\n  };\n\n  _proto.getDisposer_ = function getDisposer_() {\n    var r = this.dispose.bind(this);\n    r[$mobx] = this;\n    return r;\n  };\n\n  _proto.toString = function toString() {\n    return "Reaction[" + this.name_ + "]";\n  };\n\n  _proto.trace = function trace$1(enterBreakPoint) {\n    if (enterBreakPoint === void 0) {\n      enterBreakPoint = false;\n    }\n\n    trace(this, enterBreakPoint);\n  };\n\n  return Reaction;\n}();\n\nfunction onReactionError(handler) {\n  globalState.globalReactionErrorHandlers.push(handler);\n  return function () {\n    var idx = globalState.globalReactionErrorHandlers.indexOf(handler);\n    if (idx >= 0) globalState.globalReactionErrorHandlers.splice(idx, 1);\n  };\n}\n/**\r\n * Magic number alert!\r\n * Defines within how many times a reaction is allowed to re-trigger itself\r\n * until it is assumed that this is gonna be a never ending loop...\r\n */\n\n\nvar MAX_REACTION_ITERATIONS = 100;\n\nvar reactionScheduler = function reactionScheduler(f) {\n  return f();\n};\n\nfunction runReactions() {\n  // Trampolining, if runReactions are already running, new reactions will be picked up\n  if (globalState.inBatch > 0 || globalState.isRunningReactions) return;\n  reactionScheduler(runReactionsHelper);\n}\n\nfunction runReactionsHelper() {\n  globalState.isRunningReactions = true;\n  var allReactions = globalState.pendingReactions;\n  var iterations = 0; // While running reactions, new reactions might be triggered.\n  // Hence we work with two variables and check whether\n  // we converge to no remaining reactions after a while.\n\n  while (allReactions.length > 0) {\n    if (++iterations === MAX_REACTION_ITERATIONS) {\n      console.error( false ? 0 : "[mobx] cycle in reaction: " + allReactions[0]);\n      allReactions.splice(0); // clear reactions\n    }\n\n    var remainingReactions = allReactions.splice(0);\n\n    for (var i = 0, l = remainingReactions.length; i < l; i++) {\n      remainingReactions[i].runReaction_();\n    }\n  }\n\n  globalState.isRunningReactions = false;\n}\n\nvar isReaction = /*#__PURE__*/createInstanceofPredicate("Reaction", Reaction);\n\nfunction setReactionScheduler(fn) {\n  var baseScheduler = reactionScheduler;\n\n  reactionScheduler = function reactionScheduler(f) {\n    return fn(function () {\n      return baseScheduler(f);\n    });\n  };\n}\n\nfunction isSpyEnabled() {\n  return  false && 0;\n}\n\nfunction spyReport(event) {\n  if (true) return; // dead code elimination can do the rest\n\n  if (!globalState.spyListeners.length) return;\n  var listeners = globalState.spyListeners;\n\n  for (var i = 0, l = listeners.length; i < l; i++) {\n    listeners[i](event);\n  }\n}\n\nfunction spyReportStart(event) {\n  if (true) return;\n\n  var change = mobx_esm_extends({}, event, {\n    spyReportStart: true\n  });\n\n  spyReport(change);\n}\n\nvar END_EVENT = {\n  type: "report-end",\n  spyReportEnd: true\n};\n\nfunction spyReportEnd(change) {\n  if (true) return;\n  if (change) spyReport(mobx_esm_extends({}, change, {\n    type: "report-end",\n    spyReportEnd: true\n  }));else spyReport(END_EVENT);\n}\n\nfunction spy(listener) {\n  if (true) {\n    console.warn("[mobx.spy] Is a no-op in production builds");\n    return function () {};\n  } else {}\n}\n\nvar ACTION = "action";\nvar ACTION_BOUND = "action.bound";\nvar AUTOACTION = "autoAction";\nvar AUTOACTION_BOUND = "autoAction.bound";\nvar DEFAULT_ACTION_NAME = "<unnamed action>";\nvar actionAnnotation = /*#__PURE__*/createActionAnnotation(ACTION);\nvar actionBoundAnnotation = /*#__PURE__*/createActionAnnotation(ACTION_BOUND, {\n  bound: true\n});\nvar autoActionAnnotation = /*#__PURE__*/createActionAnnotation(AUTOACTION, {\n  autoAction: true\n});\nvar autoActionBoundAnnotation = /*#__PURE__*/createActionAnnotation(AUTOACTION_BOUND, {\n  autoAction: true,\n  bound: true\n});\n\nfunction createActionFactory(autoAction) {\n  var res = function action(arg1, arg2) {\n    // action(fn() {})\n    if (isFunction(arg1)) return createAction(arg1.name || DEFAULT_ACTION_NAME, arg1, autoAction); // action("name", fn() {})\n\n    if (isFunction(arg2)) return createAction(arg1, arg2, autoAction); // @action\n\n    if (isStringish(arg2)) {\n      return storeAnnotation(arg1, arg2, autoAction ? autoActionAnnotation : actionAnnotation);\n    } // action("name") & @action("name")\n\n\n    if (isStringish(arg1)) {\n      return createDecoratorAnnotation(createActionAnnotation(autoAction ? AUTOACTION : ACTION, {\n        name: arg1,\n        autoAction: autoAction\n      }));\n    }\n\n    if (false) {}\n  };\n\n  return res;\n}\n\nvar action = /*#__PURE__*/createActionFactory(false);\nObject.assign(action, actionAnnotation);\nvar autoAction = /*#__PURE__*/createActionFactory(true);\nObject.assign(autoAction, autoActionAnnotation);\naction.bound = /*#__PURE__*/createDecoratorAnnotation(actionBoundAnnotation);\nautoAction.bound = /*#__PURE__*/createDecoratorAnnotation(autoActionBoundAnnotation);\n\nfunction mobx_esm_runInAction(fn) {\n  return executeAction(fn.name || DEFAULT_ACTION_NAME, false, fn, this, undefined);\n}\n\nfunction isAction(thing) {\n  return isFunction(thing) && thing.isMobxAction === true;\n}\n/**\r\n * Creates a named reactive view and keeps it alive, so that the view is always\r\n * updated if one of the dependencies changes, even when the view is not further used by something else.\r\n * @param view The reactive view\r\n * @returns disposer function, which can be used to stop the view from being updated in the future.\r\n */\n\n\nfunction autorun(view, opts) {\n  var _opts$name, _opts;\n\n  if (opts === void 0) {\n    opts = EMPTY_OBJECT;\n  }\n\n  if (false) {}\n\n  var name = (_opts$name = (_opts = opts) == null ? void 0 : _opts.name) != null ? _opts$name :  false ? 0 : "Autorun";\n  var runSync = !opts.scheduler && !opts.delay;\n  var reaction;\n\n  if (runSync) {\n    // normal autorun\n    reaction = new Reaction(name, function () {\n      this.track(reactionRunner);\n    }, opts.onError, opts.requiresObservable);\n  } else {\n    var scheduler = createSchedulerFromOptions(opts); // debounced autorun\n\n    var isScheduled = false;\n    reaction = new Reaction(name, function () {\n      if (!isScheduled) {\n        isScheduled = true;\n        scheduler(function () {\n          isScheduled = false;\n          if (!reaction.isDisposed_) reaction.track(reactionRunner);\n        });\n      }\n    }, opts.onError, opts.requiresObservable);\n  }\n\n  function reactionRunner() {\n    view(reaction);\n  }\n\n  reaction.schedule_();\n  return reaction.getDisposer_();\n}\n\nvar run = function run(f) {\n  return f();\n};\n\nfunction createSchedulerFromOptions(opts) {\n  return opts.scheduler ? opts.scheduler : opts.delay ? function (f) {\n    return setTimeout(f, opts.delay);\n  } : run;\n}\n\nfunction reaction(expression, effect, opts) {\n  var _opts$name2;\n\n  if (opts === void 0) {\n    opts = EMPTY_OBJECT;\n  }\n\n  if (false) {}\n\n  var name = (_opts$name2 = opts.name) != null ? _opts$name2 :  false ? 0 : "Reaction";\n  var effectAction = action(name, opts.onError ? wrapErrorHandler(opts.onError, effect) : effect);\n  var runSync = !opts.scheduler && !opts.delay;\n  var scheduler = createSchedulerFromOptions(opts);\n  var firstTime = true;\n  var isScheduled = false;\n  var value;\n  var oldValue = undefined; // only an issue with fireImmediately\n\n  var equals = opts.compareStructural ? comparer.structural : opts.equals || comparer["default"];\n  var r = new Reaction(name, function () {\n    if (firstTime || runSync) {\n      reactionRunner();\n    } else if (!isScheduled) {\n      isScheduled = true;\n      scheduler(reactionRunner);\n    }\n  }, opts.onError, opts.requiresObservable);\n\n  function reactionRunner() {\n    isScheduled = false;\n    if (r.isDisposed_) return;\n    var changed = false;\n    r.track(function () {\n      var nextValue = allowStateChanges(false, function () {\n        return expression(r);\n      });\n      changed = firstTime || !equals(value, nextValue);\n      oldValue = value;\n      value = nextValue;\n    });\n    if (firstTime && opts.fireImmediately) effectAction(value, oldValue, r);else if (!firstTime && changed) effectAction(value, oldValue, r);\n    firstTime = false;\n  }\n\n  r.schedule_();\n  return r.getDisposer_();\n}\n\nfunction wrapErrorHandler(errorHandler, baseFn) {\n  return function () {\n    try {\n      return baseFn.apply(this, arguments);\n    } catch (e) {\n      errorHandler.call(this, e);\n    }\n  };\n}\n\nvar ON_BECOME_OBSERVED = "onBO";\nvar ON_BECOME_UNOBSERVED = "onBUO";\n\nfunction onBecomeObserved(thing, arg2, arg3) {\n  return interceptHook(ON_BECOME_OBSERVED, thing, arg2, arg3);\n}\n\nfunction onBecomeUnobserved(thing, arg2, arg3) {\n  return interceptHook(ON_BECOME_UNOBSERVED, thing, arg2, arg3);\n}\n\nfunction interceptHook(hook, thing, arg2, arg3) {\n  var atom = typeof arg3 === "function" ? getAtom(thing, arg2) : getAtom(thing);\n  var cb = isFunction(arg3) ? arg3 : arg2;\n  var listenersKey = hook + "L";\n\n  if (atom[listenersKey]) {\n    atom[listenersKey].add(cb);\n  } else {\n    atom[listenersKey] = new Set([cb]);\n  }\n\n  return function () {\n    var hookListeners = atom[listenersKey];\n\n    if (hookListeners) {\n      hookListeners["delete"](cb);\n\n      if (hookListeners.size === 0) {\n        delete atom[listenersKey];\n      }\n    }\n  };\n}\n\nvar NEVER = "never";\nvar ALWAYS = "always";\nvar OBSERVED = "observed"; // const IF_AVAILABLE = "ifavailable"\n\nfunction configure(options) {\n  if (options.isolateGlobalState === true) {\n    isolateGlobalState();\n  }\n\n  var useProxies = options.useProxies,\n      enforceActions = options.enforceActions;\n\n  if (useProxies !== undefined) {\n    globalState.useProxies = useProxies === ALWAYS ? true : useProxies === NEVER ? false : typeof Proxy !== "undefined";\n  }\n\n  if (useProxies === "ifavailable") globalState.verifyProxies = true;\n\n  if (enforceActions !== undefined) {\n    var ea = enforceActions === ALWAYS ? ALWAYS : enforceActions === OBSERVED;\n    globalState.enforceActions = ea;\n    globalState.allowStateChanges = ea === true || ea === ALWAYS ? false : true;\n  }\n\n  ["computedRequiresReaction", "reactionRequiresObservable", "observableRequiresReaction", "disableErrorBoundaries", "safeDescriptors"].forEach(function (key) {\n    if (key in options) globalState[key] = !!options[key];\n  });\n  globalState.allowStateReads = !globalState.observableRequiresReaction;\n\n  if (false) {}\n\n  if (options.reactionScheduler) {\n    setReactionScheduler(options.reactionScheduler);\n  }\n}\n\nfunction extendObservable(target, properties, annotations, options) {\n  if (false) {} // Pull descriptors first, so we don\'t have to deal with props added by administration ($mobx)\n\n\n  var descriptors = getOwnPropertyDescriptors(properties);\n  var adm = asObservableObject(target, options)[$mobx];\n  startBatch();\n\n  try {\n    ownKeys(descriptors).forEach(function (key) {\n      adm.extend_(key, descriptors[key], // must pass "undefined" for { key: undefined }\n      !annotations ? true : key in annotations ? annotations[key] : true);\n    });\n  } finally {\n    endBatch();\n  }\n\n  return target;\n}\n\nfunction getDependencyTree(thing, property) {\n  return nodeToDependencyTree(getAtom(thing, property));\n}\n\nfunction nodeToDependencyTree(node) {\n  var result = {\n    name: node.name_\n  };\n  if (node.observing_ && node.observing_.length > 0) result.dependencies = unique(node.observing_).map(nodeToDependencyTree);\n  return result;\n}\n\nfunction getObserverTree(thing, property) {\n  return nodeToObserverTree(getAtom(thing, property));\n}\n\nfunction nodeToObserverTree(node) {\n  var result = {\n    name: node.name_\n  };\n  if (hasObservers(node)) result.observers = Array.from(getObservers(node)).map(nodeToObserverTree);\n  return result;\n}\n\nfunction unique(list) {\n  return Array.from(new Set(list));\n}\n\nvar generatorId = 0;\n\nfunction FlowCancellationError() {\n  this.message = "FLOW_CANCELLED";\n}\n\nFlowCancellationError.prototype = /*#__PURE__*/Object.create(Error.prototype);\n\nfunction isFlowCancellationError(error) {\n  return error instanceof FlowCancellationError;\n}\n\nvar flowAnnotation = /*#__PURE__*/createFlowAnnotation("flow");\nvar flowBoundAnnotation = /*#__PURE__*/createFlowAnnotation("flow.bound", {\n  bound: true\n});\nvar flow = /*#__PURE__*/Object.assign(function flow(arg1, arg2) {\n  // @flow\n  if (isStringish(arg2)) {\n    return storeAnnotation(arg1, arg2, flowAnnotation);\n  } // flow(fn)\n\n\n  if (false) {}\n  var generator = arg1;\n  var name = generator.name || "<unnamed flow>"; // Implementation based on https://github.com/tj/co/blob/master/index.js\n\n  var res = function res() {\n    var ctx = this;\n    var args = arguments;\n    var runId = ++generatorId;\n    var gen = action(name + " - runid: " + runId + " - init", generator).apply(ctx, args);\n    var rejector;\n    var pendingPromise = undefined;\n    var promise = new Promise(function (resolve, reject) {\n      var stepId = 0;\n      rejector = reject;\n\n      function onFulfilled(res) {\n        pendingPromise = undefined;\n        var ret;\n\n        try {\n          ret = action(name + " - runid: " + runId + " - yield " + stepId++, gen.next).call(gen, res);\n        } catch (e) {\n          return reject(e);\n        }\n\n        next(ret);\n      }\n\n      function onRejected(err) {\n        pendingPromise = undefined;\n        var ret;\n\n        try {\n          ret = action(name + " - runid: " + runId + " - yield " + stepId++, gen["throw"]).call(gen, err);\n        } catch (e) {\n          return reject(e);\n        }\n\n        next(ret);\n      }\n\n      function next(ret) {\n        if (isFunction(ret == null ? void 0 : ret.then)) {\n          // an async iterator\n          ret.then(next, reject);\n          return;\n        }\n\n        if (ret.done) return resolve(ret.value);\n        pendingPromise = Promise.resolve(ret.value);\n        return pendingPromise.then(onFulfilled, onRejected);\n      }\n\n      onFulfilled(undefined); // kick off the process\n    });\n    promise.cancel = action(name + " - runid: " + runId + " - cancel", function () {\n      try {\n        if (pendingPromise) cancelPromise(pendingPromise); // Finally block can return (or yield) stuff..\n\n        var _res = gen["return"](undefined); // eat anything that promise would do, it\'s cancelled!\n\n\n        var yieldedPromise = Promise.resolve(_res.value);\n        yieldedPromise.then(noop, noop);\n        cancelPromise(yieldedPromise); // maybe it can be cancelled :)\n        // reject our original promise\n\n        rejector(new FlowCancellationError());\n      } catch (e) {\n        rejector(e); // there could be a throwing finally block\n      }\n    });\n    return promise;\n  };\n\n  res.isMobXFlow = true;\n  return res;\n}, flowAnnotation);\nflow.bound = /*#__PURE__*/createDecoratorAnnotation(flowBoundAnnotation);\n\nfunction cancelPromise(promise) {\n  if (isFunction(promise.cancel)) promise.cancel();\n}\n\nfunction flowResult(result) {\n  return result; // just tricking TypeScript :)\n}\n\nfunction isFlow(fn) {\n  return (fn == null ? void 0 : fn.isMobXFlow) === true;\n}\n\nfunction interceptReads(thing, propOrHandler, handler) {\n  var target;\n\n  if (isObservableMap(thing) || isObservableArray(thing) || isObservableValue(thing)) {\n    target = getAdministration(thing);\n  } else if (isObservableObject(thing)) {\n    if (false) {}\n    target = getAdministration(thing, propOrHandler);\n  } else if (false) {}\n\n  if (false) {}\n  target.dehancer = typeof propOrHandler === "function" ? propOrHandler : handler;\n  return function () {\n    target.dehancer = undefined;\n  };\n}\n\nfunction intercept(thing, propOrHandler, handler) {\n  if (isFunction(handler)) return interceptProperty(thing, propOrHandler, handler);else return interceptInterceptable(thing, propOrHandler);\n}\n\nfunction interceptInterceptable(thing, handler) {\n  return getAdministration(thing).intercept_(handler);\n}\n\nfunction interceptProperty(thing, property, handler) {\n  return getAdministration(thing, property).intercept_(handler);\n}\n\nfunction _isComputed(value, property) {\n  if (property !== undefined) {\n    if (isObservableObject(value) === false) return false;\n    if (!value[$mobx].values_.has(property)) return false;\n    var atom = getAtom(value, property);\n    return isComputedValue(atom);\n  }\n\n  return isComputedValue(value);\n}\n\nfunction isComputed(value) {\n  if (false) {}\n  return _isComputed(value);\n}\n\nfunction isComputedProp(value, propName) {\n  if (false) {}\n  return _isComputed(value, propName);\n}\n\nfunction _isObservable(value, property) {\n  if (!value) return false;\n\n  if (property !== undefined) {\n    if (false) {}\n\n    if (isObservableObject(value)) {\n      return value[$mobx].values_.has(property);\n    }\n\n    return false;\n  } // For first check, see #701\n\n\n  return isObservableObject(value) || !!value[$mobx] || isAtom(value) || isReaction(value) || isComputedValue(value);\n}\n\nfunction isObservable(value) {\n  if (false) {}\n  return _isObservable(value);\n}\n\nfunction isObservableProp(value, propName) {\n  if (false) {}\n  return _isObservable(value, propName);\n}\n\nfunction keys(obj) {\n  if (isObservableObject(obj)) {\n    return obj[$mobx].keys_();\n  }\n\n  if (isObservableMap(obj) || isObservableSet(obj)) {\n    return Array.from(obj.keys());\n  }\n\n  if (isObservableArray(obj)) {\n    return obj.map(function (_, index) {\n      return index;\n    });\n  }\n\n  die(5);\n}\n\nfunction values(obj) {\n  if (isObservableObject(obj)) {\n    return keys(obj).map(function (key) {\n      return obj[key];\n    });\n  }\n\n  if (isObservableMap(obj)) {\n    return keys(obj).map(function (key) {\n      return obj.get(key);\n    });\n  }\n\n  if (isObservableSet(obj)) {\n    return Array.from(obj.values());\n  }\n\n  if (isObservableArray(obj)) {\n    return obj.slice();\n  }\n\n  die(6);\n}\n\nfunction entries(obj) {\n  if (isObservableObject(obj)) {\n    return keys(obj).map(function (key) {\n      return [key, obj[key]];\n    });\n  }\n\n  if (isObservableMap(obj)) {\n    return keys(obj).map(function (key) {\n      return [key, obj.get(key)];\n    });\n  }\n\n  if (isObservableSet(obj)) {\n    return Array.from(obj.entries());\n  }\n\n  if (isObservableArray(obj)) {\n    return obj.map(function (key, index) {\n      return [index, key];\n    });\n  }\n\n  die(7);\n}\n\nfunction set(obj, key, value) {\n  if (arguments.length === 2 && !isObservableSet(obj)) {\n    startBatch();\n    var _values = key;\n\n    try {\n      for (var _key in _values) {\n        set(obj, _key, _values[_key]);\n      }\n    } finally {\n      endBatch();\n    }\n\n    return;\n  }\n\n  if (isObservableObject(obj)) {\n    obj[$mobx].set_(key, value);\n  } else if (isObservableMap(obj)) {\n    obj.set(key, value);\n  } else if (isObservableSet(obj)) {\n    obj.add(key);\n  } else if (isObservableArray(obj)) {\n    if (typeof key !== "number") key = parseInt(key, 10);\n    if (key < 0) die("Invalid index: \'" + key + "\'");\n    startBatch();\n    if (key >= obj.length) obj.length = key + 1;\n    obj[key] = value;\n    endBatch();\n  } else die(8);\n}\n\nfunction remove(obj, key) {\n  if (isObservableObject(obj)) {\n    obj[$mobx].delete_(key);\n  } else if (isObservableMap(obj)) {\n    obj["delete"](key);\n  } else if (isObservableSet(obj)) {\n    obj["delete"](key);\n  } else if (isObservableArray(obj)) {\n    if (typeof key !== "number") key = parseInt(key, 10);\n    obj.splice(key, 1);\n  } else {\n    die(9);\n  }\n}\n\nfunction has(obj, key) {\n  if (isObservableObject(obj)) {\n    return obj[$mobx].has_(key);\n  } else if (isObservableMap(obj)) {\n    return obj.has(key);\n  } else if (isObservableSet(obj)) {\n    return obj.has(key);\n  } else if (isObservableArray(obj)) {\n    return key >= 0 && key < obj.length;\n  }\n\n  die(10);\n}\n\nfunction get(obj, key) {\n  if (!has(obj, key)) return undefined;\n\n  if (isObservableObject(obj)) {\n    return obj[$mobx].get_(key);\n  } else if (isObservableMap(obj)) {\n    return obj.get(key);\n  } else if (isObservableArray(obj)) {\n    return obj[key];\n  }\n\n  die(11);\n}\n\nfunction apiDefineProperty(obj, key, descriptor) {\n  if (isObservableObject(obj)) {\n    return obj[$mobx].defineProperty_(key, descriptor);\n  }\n\n  die(39);\n}\n\nfunction apiOwnKeys(obj) {\n  if (isObservableObject(obj)) {\n    return obj[$mobx].ownKeys_();\n  }\n\n  die(38);\n}\n\nfunction observe(thing, propOrCb, cbOrFire, fireImmediately) {\n  if (isFunction(cbOrFire)) return observeObservableProperty(thing, propOrCb, cbOrFire, fireImmediately);else return observeObservable(thing, propOrCb, cbOrFire);\n}\n\nfunction observeObservable(thing, listener, fireImmediately) {\n  return getAdministration(thing).observe_(listener, fireImmediately);\n}\n\nfunction observeObservableProperty(thing, property, listener, fireImmediately) {\n  return getAdministration(thing, property).observe_(listener, fireImmediately);\n}\n\nfunction cache(map, key, value) {\n  map.set(key, value);\n  return value;\n}\n\nfunction toJSHelper(source, __alreadySeen) {\n  if (source == null || _typeof(source) !== "object" || source instanceof Date || !isObservable(source)) return source;\n  if (isObservableValue(source) || isComputedValue(source)) return toJSHelper(source.get(), __alreadySeen);\n\n  if (__alreadySeen.has(source)) {\n    return __alreadySeen.get(source);\n  }\n\n  if (isObservableArray(source)) {\n    var res = cache(__alreadySeen, source, new Array(source.length));\n    source.forEach(function (value, idx) {\n      res[idx] = toJSHelper(value, __alreadySeen);\n    });\n    return res;\n  }\n\n  if (isObservableSet(source)) {\n    var _res = cache(__alreadySeen, source, new Set());\n\n    source.forEach(function (value) {\n      _res.add(toJSHelper(value, __alreadySeen));\n    });\n    return _res;\n  }\n\n  if (isObservableMap(source)) {\n    var _res2 = cache(__alreadySeen, source, new Map());\n\n    source.forEach(function (value, key) {\n      _res2.set(key, toJSHelper(value, __alreadySeen));\n    });\n    return _res2;\n  } else {\n    // must be observable object\n    var _res3 = cache(__alreadySeen, source, {});\n\n    apiOwnKeys(source).forEach(function (key) {\n      if (objectPrototype.propertyIsEnumerable.call(source, key)) {\n        _res3[key] = toJSHelper(source[key], __alreadySeen);\n      }\n    });\n    return _res3;\n  }\n}\n/**\r\n * Basically, a deep clone, so that no reactive property will exist anymore.\r\n */\n\n\nfunction toJS(source, options) {\n  if (false) {}\n  return toJSHelper(source, new Map());\n}\n\nfunction trace() {\n  if (true) die("trace() is not available in production builds");\n  var enterBreakPoint = false;\n\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  if (typeof args[args.length - 1] === "boolean") enterBreakPoint = args.pop();\n  var derivation = getAtomFromArgs(args);\n\n  if (!derivation) {\n    return die("\'trace(break?)\' can only be used inside a tracked computed value or a Reaction. Consider passing in the computed value or reaction explicitly");\n  }\n\n  if (derivation.isTracing_ === TraceMode.NONE) {\n    console.log("[mobx.trace] \'" + derivation.name_ + "\' tracing enabled");\n  }\n\n  derivation.isTracing_ = enterBreakPoint ? TraceMode.BREAK : TraceMode.LOG;\n}\n\nfunction getAtomFromArgs(args) {\n  switch (args.length) {\n    case 0:\n      return globalState.trackingDerivation;\n\n    case 1:\n      return getAtom(args[0]);\n\n    case 2:\n      return getAtom(args[0], args[1]);\n  }\n}\n/**\r\n * During a transaction no views are updated until the end of the transaction.\r\n * The transaction will be run synchronously nonetheless.\r\n *\r\n * @param action a function that updates some reactive state\r\n * @returns any value that was returned by the \'action\' parameter.\r\n */\n\n\nfunction transaction(action, thisArg) {\n  if (thisArg === void 0) {\n    thisArg = undefined;\n  }\n\n  startBatch();\n\n  try {\n    return action.apply(thisArg);\n  } finally {\n    endBatch();\n  }\n}\n\nfunction when(predicate, arg1, arg2) {\n  if (arguments.length === 1 || arg1 && _typeof(arg1) === "object") return whenPromise(predicate, arg1);\n  return _when(predicate, arg1, arg2 || {});\n}\n\nfunction _when(predicate, effect, opts) {\n  var timeoutHandle;\n\n  if (typeof opts.timeout === "number") {\n    var error = new Error("WHEN_TIMEOUT");\n    timeoutHandle = setTimeout(function () {\n      if (!disposer[$mobx].isDisposed_) {\n        disposer();\n        if (opts.onError) opts.onError(error);else throw error;\n      }\n    }, opts.timeout);\n  }\n\n  opts.name =  false ? 0 : "When";\n  var effectAction = createAction( false ? 0 : "When-effect", effect); // eslint-disable-next-line\n\n  var disposer = autorun(function (r) {\n    // predicate should not change state\n    var cond = allowStateChanges(false, predicate);\n\n    if (cond) {\n      r.dispose();\n      if (timeoutHandle) clearTimeout(timeoutHandle);\n      effectAction();\n    }\n  }, opts);\n  return disposer;\n}\n\nfunction whenPromise(predicate, opts) {\n  if (false) {}\n  var cancel;\n  var res = new Promise(function (resolve, reject) {\n    var disposer = _when(predicate, resolve, mobx_esm_extends({}, opts, {\n      onError: reject\n    }));\n\n    cancel = function cancel() {\n      disposer();\n      reject("WHEN_CANCELLED");\n    };\n  });\n  res.cancel = cancel;\n  return res;\n}\n\nfunction getAdm(target) {\n  return target[$mobx];\n} // Optimization: we don\'t need the intermediate objects and could have a completely custom administration for DynamicObjects,\n// and skip either the internal values map, or the base object with its property descriptors!\n\n\nvar objectProxyTraps = {\n  has: function has(target, name) {\n    if (false) {}\n    return getAdm(target).has_(name);\n  },\n  get: function get(target, name) {\n    return getAdm(target).get_(name);\n  },\n  set: function set(target, name, value) {\n    var _getAdm$set_;\n\n    if (!isStringish(name)) return false;\n\n    if (false) {} // null (intercepted) -> true (success)\n\n\n    return (_getAdm$set_ = getAdm(target).set_(name, value, true)) != null ? _getAdm$set_ : true;\n  },\n  deleteProperty: function deleteProperty(target, name) {\n    var _getAdm$delete_;\n\n    if (false) {}\n\n    if (!isStringish(name)) return false; // null (intercepted) -> true (success)\n\n    return (_getAdm$delete_ = getAdm(target).delete_(name, true)) != null ? _getAdm$delete_ : true;\n  },\n  defineProperty: function defineProperty(target, name, descriptor) {\n    var _getAdm$definePropert;\n\n    if (false) {} // null (intercepted) -> true (success)\n\n\n    return (_getAdm$definePropert = getAdm(target).defineProperty_(name, descriptor)) != null ? _getAdm$definePropert : true;\n  },\n  ownKeys: function ownKeys(target) {\n    if (false) {}\n    return getAdm(target).ownKeys_();\n  },\n  preventExtensions: function preventExtensions(target) {\n    die(13);\n  }\n};\n\nfunction asDynamicObservableObject(target, options) {\n  var _target$$mobx, _target$$mobx$proxy_;\n\n  assertProxies();\n  target = asObservableObject(target, options);\n  return (_target$$mobx$proxy_ = (_target$$mobx = target[$mobx]).proxy_) != null ? _target$$mobx$proxy_ : _target$$mobx.proxy_ = new Proxy(target, objectProxyTraps);\n}\n\nfunction hasInterceptors(interceptable) {\n  return interceptable.interceptors_ !== undefined && interceptable.interceptors_.length > 0;\n}\n\nfunction registerInterceptor(interceptable, handler) {\n  var interceptors = interceptable.interceptors_ || (interceptable.interceptors_ = []);\n  interceptors.push(handler);\n  return once(function () {\n    var idx = interceptors.indexOf(handler);\n    if (idx !== -1) interceptors.splice(idx, 1);\n  });\n}\n\nfunction interceptChange(interceptable, change) {\n  var prevU = untrackedStart();\n\n  try {\n    // Interceptor can modify the array, copy it to avoid concurrent modification, see #1950\n    var interceptors = [].concat(interceptable.interceptors_ || []);\n\n    for (var i = 0, l = interceptors.length; i < l; i++) {\n      change = interceptors[i](change);\n      if (change && !change.type) die(14);\n      if (!change) break;\n    }\n\n    return change;\n  } finally {\n    untrackedEnd(prevU);\n  }\n}\n\nfunction hasListeners(listenable) {\n  return listenable.changeListeners_ !== undefined && listenable.changeListeners_.length > 0;\n}\n\nfunction registerListener(listenable, handler) {\n  var listeners = listenable.changeListeners_ || (listenable.changeListeners_ = []);\n  listeners.push(handler);\n  return once(function () {\n    var idx = listeners.indexOf(handler);\n    if (idx !== -1) listeners.splice(idx, 1);\n  });\n}\n\nfunction notifyListeners(listenable, change) {\n  var prevU = untrackedStart();\n  var listeners = listenable.changeListeners_;\n  if (!listeners) return;\n  listeners = listeners.slice();\n\n  for (var i = 0, l = listeners.length; i < l; i++) {\n    listeners[i](change);\n  }\n\n  untrackedEnd(prevU);\n}\n\nfunction makeObservable(target, annotations, options) {\n  var adm = asObservableObject(target, options)[$mobx];\n  startBatch();\n\n  try {\n    var _annotations; // Default to decorators\n\n\n    (_annotations = annotations) != null ? _annotations : annotations = collectStoredAnnotations(target); // Annotate\n\n    ownKeys(annotations).forEach(function (key) {\n      return adm.make_(key, annotations[key]);\n    });\n  } finally {\n    endBatch();\n  }\n\n  return target;\n} // proto[keysSymbol] = new Set<PropertyKey>()\n\n\nvar keysSymbol = /*#__PURE__*/(/* unused pure expression or super */ null && (Symbol("mobx-keys")));\n\nfunction makeAutoObservable(target, overrides, options) {\n  if (false) {} // Optimization: avoid visiting protos\n  // Assumes that annotation.make_/.extend_ works the same for plain objects\n\n\n  if (isPlainObject(target)) {\n    return extendObservable(target, target, overrides, options);\n  }\n\n  var adm = asObservableObject(target, options)[$mobx]; // Optimization: cache keys on proto\n  // Assumes makeAutoObservable can be called only once per object and can\'t be used in subclass\n\n  if (!target[keysSymbol]) {\n    var proto = Object.getPrototypeOf(target);\n    var keys = new Set([].concat(ownKeys(target), ownKeys(proto)));\n    keys["delete"]("constructor");\n    keys["delete"]($mobx);\n    addHiddenProp(proto, keysSymbol, keys);\n  }\n\n  startBatch();\n\n  try {\n    target[keysSymbol].forEach(function (key) {\n      return adm.make_(key, // must pass "undefined" for { key: undefined }\n      !overrides ? true : key in overrides ? overrides[key] : true);\n    });\n  } finally {\n    endBatch();\n  }\n\n  return target;\n}\n\nvar SPLICE = "splice";\nvar UPDATE = "update";\nvar MAX_SPLICE_SIZE = 10000; // See e.g. https://github.com/mobxjs/mobx/issues/859\n\nvar arrayTraps = {\n  get: function get(target, name) {\n    var adm = target[$mobx];\n    if (name === $mobx) return adm;\n    if (name === "length") return adm.getArrayLength_();\n\n    if (typeof name === "string" && !isNaN(name)) {\n      return adm.get_(parseInt(name));\n    }\n\n    if (hasProp(arrayExtensions, name)) {\n      return arrayExtensions[name];\n    }\n\n    return target[name];\n  },\n  set: function set(target, name, value) {\n    var adm = target[$mobx];\n\n    if (name === "length") {\n      adm.setArrayLength_(value);\n    }\n\n    if (_typeof(name) === "symbol" || isNaN(name)) {\n      target[name] = value;\n    } else {\n      // numeric string\n      adm.set_(parseInt(name), value);\n    }\n\n    return true;\n  },\n  preventExtensions: function preventExtensions() {\n    die(15);\n  }\n};\n\nvar ObservableArrayAdministration = /*#__PURE__*/function () {\n  // this is the prop that gets proxied, so can\'t replace it!\n  function ObservableArrayAdministration(name, enhancer, owned_, legacyMode_) {\n    if (name === void 0) {\n      name =  false ? 0 : "ObservableArray";\n    }\n\n    this.owned_ = void 0;\n    this.legacyMode_ = void 0;\n    this.atom_ = void 0;\n    this.values_ = [];\n    this.interceptors_ = void 0;\n    this.changeListeners_ = void 0;\n    this.enhancer_ = void 0;\n    this.dehancer = void 0;\n    this.proxy_ = void 0;\n    this.lastKnownLength_ = 0;\n    this.owned_ = owned_;\n    this.legacyMode_ = legacyMode_;\n    this.atom_ = new Atom(name);\n\n    this.enhancer_ = function (newV, oldV) {\n      return enhancer(newV, oldV,  false ? 0 : "ObservableArray[..]");\n    };\n  }\n\n  var _proto = ObservableArrayAdministration.prototype;\n\n  _proto.dehanceValue_ = function dehanceValue_(value) {\n    if (this.dehancer !== undefined) return this.dehancer(value);\n    return value;\n  };\n\n  _proto.dehanceValues_ = function dehanceValues_(values) {\n    if (this.dehancer !== undefined && values.length > 0) return values.map(this.dehancer);\n    return values;\n  };\n\n  _proto.intercept_ = function intercept_(handler) {\n    return registerInterceptor(this, handler);\n  };\n\n  _proto.observe_ = function observe_(listener, fireImmediately) {\n    if (fireImmediately === void 0) {\n      fireImmediately = false;\n    }\n\n    if (fireImmediately) {\n      listener({\n        observableKind: "array",\n        object: this.proxy_,\n        debugObjectName: this.atom_.name_,\n        type: "splice",\n        index: 0,\n        added: this.values_.slice(),\n        addedCount: this.values_.length,\n        removed: [],\n        removedCount: 0\n      });\n    }\n\n    return registerListener(this, listener);\n  };\n\n  _proto.getArrayLength_ = function getArrayLength_() {\n    this.atom_.reportObserved();\n    return this.values_.length;\n  };\n\n  _proto.setArrayLength_ = function setArrayLength_(newLength) {\n    if (typeof newLength !== "number" || newLength < 0) die("Out of range: " + newLength);\n    var currentLength = this.values_.length;\n    if (newLength === currentLength) return;else if (newLength > currentLength) {\n      var newItems = new Array(newLength - currentLength);\n\n      for (var i = 0; i < newLength - currentLength; i++) {\n        newItems[i] = undefined;\n      } // No Array.fill everywhere...\n\n\n      this.spliceWithArray_(currentLength, 0, newItems);\n    } else this.spliceWithArray_(newLength, currentLength - newLength);\n  };\n\n  _proto.updateArrayLength_ = function updateArrayLength_(oldLength, delta) {\n    if (oldLength !== this.lastKnownLength_) die(16);\n    this.lastKnownLength_ += delta;\n    if (this.legacyMode_ && delta > 0) reserveArrayBuffer(oldLength + delta + 1);\n  };\n\n  _proto.spliceWithArray_ = function spliceWithArray_(index, deleteCount, newItems) {\n    var _this = this;\n\n    checkIfStateModificationsAreAllowed(this.atom_);\n    var length = this.values_.length;\n    if (index === undefined) index = 0;else if (index > length) index = length;else if (index < 0) index = Math.max(0, length + index);\n    if (arguments.length === 1) deleteCount = length - index;else if (deleteCount === undefined || deleteCount === null) deleteCount = 0;else deleteCount = Math.max(0, Math.min(deleteCount, length - index));\n    if (newItems === undefined) newItems = EMPTY_ARRAY;\n\n    if (hasInterceptors(this)) {\n      var change = interceptChange(this, {\n        object: this.proxy_,\n        type: SPLICE,\n        index: index,\n        removedCount: deleteCount,\n        added: newItems\n      });\n      if (!change) return EMPTY_ARRAY;\n      deleteCount = change.removedCount;\n      newItems = change.added;\n    }\n\n    newItems = newItems.length === 0 ? newItems : newItems.map(function (v) {\n      return _this.enhancer_(v, undefined);\n    });\n\n    if (this.legacyMode_ || "production" !== "production") {\n      var lengthDelta = newItems.length - deleteCount;\n      this.updateArrayLength_(length, lengthDelta); // checks if internal array wasn\'t modified\n    }\n\n    var res = this.spliceItemsIntoValues_(index, deleteCount, newItems);\n    if (deleteCount !== 0 || newItems.length !== 0) this.notifyArraySplice_(index, newItems, res);\n    return this.dehanceValues_(res);\n  };\n\n  _proto.spliceItemsIntoValues_ = function spliceItemsIntoValues_(index, deleteCount, newItems) {\n    if (newItems.length < MAX_SPLICE_SIZE) {\n      var _this$values_;\n\n      return (_this$values_ = this.values_).splice.apply(_this$values_, [index, deleteCount].concat(newItems));\n    } else {\n      var res = this.values_.slice(index, index + deleteCount);\n      var oldItems = this.values_.slice(index + deleteCount);\n      this.values_.length = index + newItems.length - deleteCount;\n\n      for (var i = 0; i < newItems.length; i++) {\n        this.values_[index + i] = newItems[i];\n      }\n\n      for (var _i = 0; _i < oldItems.length; _i++) {\n        this.values_[index + newItems.length + _i] = oldItems[_i];\n      }\n\n      return res;\n    }\n  };\n\n  _proto.notifyArrayChildUpdate_ = function notifyArrayChildUpdate_(index, newValue, oldValue) {\n    var notifySpy = !this.owned_ && isSpyEnabled();\n    var notify = hasListeners(this);\n    var change = notify || notifySpy ? {\n      observableKind: "array",\n      object: this.proxy_,\n      type: UPDATE,\n      debugObjectName: this.atom_.name_,\n      index: index,\n      newValue: newValue,\n      oldValue: oldValue\n    } : null; // The reason why this is on right hand side here (and not above), is this way the uglifier will drop it, but it won\'t\n    // cause any runtime overhead in development mode without NODE_ENV set, unless spying is enabled\n\n    if (false) {}\n    this.atom_.reportChanged();\n    if (notify) notifyListeners(this, change);\n    if (false) {}\n  };\n\n  _proto.notifyArraySplice_ = function notifyArraySplice_(index, added, removed) {\n    var notifySpy = !this.owned_ && isSpyEnabled();\n    var notify = hasListeners(this);\n    var change = notify || notifySpy ? {\n      observableKind: "array",\n      object: this.proxy_,\n      debugObjectName: this.atom_.name_,\n      type: SPLICE,\n      index: index,\n      removed: removed,\n      added: added,\n      removedCount: removed.length,\n      addedCount: added.length\n    } : null;\n    if (false) {}\n    this.atom_.reportChanged(); // conform: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/observe\n\n    if (notify) notifyListeners(this, change);\n    if (false) {}\n  };\n\n  _proto.get_ = function get_(index) {\n    if (index < this.values_.length) {\n      this.atom_.reportObserved();\n      return this.dehanceValue_(this.values_[index]);\n    }\n\n    console.warn( false ? 0 : "[mobx.array] Attempt to read an array index (" + index + ") that is out of bounds (" + this.values_.length + "). Please check length first. Out of bound indices will not be tracked by MobX");\n  };\n\n  _proto.set_ = function set_(index, newValue) {\n    var values = this.values_;\n\n    if (index < values.length) {\n      // update at index in range\n      checkIfStateModificationsAreAllowed(this.atom_);\n      var oldValue = values[index];\n\n      if (hasInterceptors(this)) {\n        var change = interceptChange(this, {\n          type: UPDATE,\n          object: this.proxy_,\n          index: index,\n          newValue: newValue\n        });\n        if (!change) return;\n        newValue = change.newValue;\n      }\n\n      newValue = this.enhancer_(newValue, oldValue);\n      var changed = newValue !== oldValue;\n\n      if (changed) {\n        values[index] = newValue;\n        this.notifyArrayChildUpdate_(index, newValue, oldValue);\n      }\n    } else if (index === values.length) {\n      // add a new item\n      this.spliceWithArray_(index, 0, [newValue]);\n    } else {\n      // out of bounds\n      die(17, index, values.length);\n    }\n  };\n\n  return ObservableArrayAdministration;\n}();\n\nfunction createObservableArray(initialValues, enhancer, name, owned) {\n  if (name === void 0) {\n    name =  false ? 0 : "ObservableArray";\n  }\n\n  if (owned === void 0) {\n    owned = false;\n  }\n\n  assertProxies();\n  var adm = new ObservableArrayAdministration(name, enhancer, owned, false);\n  addHiddenFinalProp(adm.values_, $mobx, adm);\n  var proxy = new Proxy(adm.values_, arrayTraps);\n  adm.proxy_ = proxy;\n\n  if (initialValues && initialValues.length) {\n    var prev = allowStateChangesStart(true);\n    adm.spliceWithArray_(0, 0, initialValues);\n    allowStateChangesEnd(prev);\n  }\n\n  return proxy;\n} // eslint-disable-next-line\n\n\nvar arrayExtensions = {\n  clear: function clear() {\n    return this.splice(0);\n  },\n  replace: function replace(newItems) {\n    var adm = this[$mobx];\n    return adm.spliceWithArray_(0, adm.values_.length, newItems);\n  },\n  // Used by JSON.stringify\n  toJSON: function toJSON() {\n    return this.slice();\n  },\n\n  /*\r\n   * functions that do alter the internal structure of the array, (based on lib.es6.d.ts)\r\n   * since these functions alter the inner structure of the array, the have side effects.\r\n   * Because the have side effects, they should not be used in computed function,\r\n   * and for that reason the do not call dependencyState.notifyObserved\r\n   */\n  splice: function splice(index, deleteCount) {\n    for (var _len = arguments.length, newItems = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      newItems[_key - 2] = arguments[_key];\n    }\n\n    var adm = this[$mobx];\n\n    switch (arguments.length) {\n      case 0:\n        return [];\n\n      case 1:\n        return adm.spliceWithArray_(index);\n\n      case 2:\n        return adm.spliceWithArray_(index, deleteCount);\n    }\n\n    return adm.spliceWithArray_(index, deleteCount, newItems);\n  },\n  spliceWithArray: function spliceWithArray(index, deleteCount, newItems) {\n    return this[$mobx].spliceWithArray_(index, deleteCount, newItems);\n  },\n  push: function push() {\n    var adm = this[$mobx];\n\n    for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      items[_key2] = arguments[_key2];\n    }\n\n    adm.spliceWithArray_(adm.values_.length, 0, items);\n    return adm.values_.length;\n  },\n  pop: function pop() {\n    return this.splice(Math.max(this[$mobx].values_.length - 1, 0), 1)[0];\n  },\n  shift: function shift() {\n    return this.splice(0, 1)[0];\n  },\n  unshift: function unshift() {\n    var adm = this[$mobx];\n\n    for (var _len3 = arguments.length, items = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      items[_key3] = arguments[_key3];\n    }\n\n    adm.spliceWithArray_(0, 0, items);\n    return adm.values_.length;\n  },\n  reverse: function reverse() {\n    // reverse by default mutates in place before returning the result\n    // which makes it both a \'derivation\' and a \'mutation\'.\n    if (globalState.trackingDerivation) {\n      die(37, "reverse");\n    }\n\n    this.replace(this.slice().reverse());\n    return this;\n  },\n  sort: function sort() {\n    // sort by default mutates in place before returning the result\n    // which goes against all good practices. Let\'s not change the array in place!\n    if (globalState.trackingDerivation) {\n      die(37, "sort");\n    }\n\n    var copy = this.slice();\n    copy.sort.apply(copy, arguments);\n    this.replace(copy);\n    return this;\n  },\n  remove: function remove(value) {\n    var adm = this[$mobx];\n    var idx = adm.dehanceValues_(adm.values_).indexOf(value);\n\n    if (idx > -1) {\n      this.splice(idx, 1);\n      return true;\n    }\n\n    return false;\n  }\n};\n/**\r\n * Wrap function from prototype\r\n * Without this, everything works as well, but this works\r\n * faster as everything works on unproxied values\r\n */\n\naddArrayExtension("concat", simpleFunc);\naddArrayExtension("flat", simpleFunc);\naddArrayExtension("includes", simpleFunc);\naddArrayExtension("indexOf", simpleFunc);\naddArrayExtension("join", simpleFunc);\naddArrayExtension("lastIndexOf", simpleFunc);\naddArrayExtension("slice", simpleFunc);\naddArrayExtension("toString", simpleFunc);\naddArrayExtension("toLocaleString", simpleFunc); // map\n\naddArrayExtension("every", mapLikeFunc);\naddArrayExtension("filter", mapLikeFunc);\naddArrayExtension("find", mapLikeFunc);\naddArrayExtension("findIndex", mapLikeFunc);\naddArrayExtension("flatMap", mapLikeFunc);\naddArrayExtension("forEach", mapLikeFunc);\naddArrayExtension("map", mapLikeFunc);\naddArrayExtension("some", mapLikeFunc); // reduce\n\naddArrayExtension("reduce", reduceLikeFunc);\naddArrayExtension("reduceRight", reduceLikeFunc);\n\nfunction addArrayExtension(funcName, funcFactory) {\n  if (typeof Array.prototype[funcName] === "function") {\n    arrayExtensions[funcName] = funcFactory(funcName);\n  }\n} // Report and delegate to dehanced array\n\n\nfunction simpleFunc(funcName) {\n  return function () {\n    var adm = this[$mobx];\n    adm.atom_.reportObserved();\n    var dehancedValues = adm.dehanceValues_(adm.values_);\n    return dehancedValues[funcName].apply(dehancedValues, arguments);\n  };\n} // Make sure callbacks recieve correct array arg #2326\n\n\nfunction mapLikeFunc(funcName) {\n  return function (callback, thisArg) {\n    var _this2 = this;\n\n    var adm = this[$mobx];\n    adm.atom_.reportObserved();\n    var dehancedValues = adm.dehanceValues_(adm.values_);\n    return dehancedValues[funcName](function (element, index) {\n      return callback.call(thisArg, element, index, _this2);\n    });\n  };\n} // Make sure callbacks recieve correct array arg #2326\n\n\nfunction reduceLikeFunc(funcName) {\n  return function () {\n    var _this3 = this;\n\n    var adm = this[$mobx];\n    adm.atom_.reportObserved();\n    var dehancedValues = adm.dehanceValues_(adm.values_); // #2432 - reduce behavior depends on arguments.length\n\n    var callback = arguments[0];\n\n    arguments[0] = function (accumulator, currentValue, index) {\n      return callback(accumulator, currentValue, index, _this3);\n    };\n\n    return dehancedValues[funcName].apply(dehancedValues, arguments);\n  };\n}\n\nvar isObservableArrayAdministration = /*#__PURE__*/createInstanceofPredicate("ObservableArrayAdministration", ObservableArrayAdministration);\n\nfunction isObservableArray(thing) {\n  return isObject(thing) && isObservableArrayAdministration(thing[$mobx]);\n}\n\nvar _Symbol$iterator, _Symbol$toStringTag;\n\nvar ObservableMapMarker = {};\nvar ADD = "add";\nvar DELETE = "delete"; // just extend Map? See also https://gist.github.com/nestharus/13b4d74f2ef4a2f4357dbd3fc23c1e54\n// But: https://github.com/mobxjs/mobx/issues/1556\n\n_Symbol$iterator = Symbol.iterator;\n_Symbol$toStringTag = Symbol.toStringTag;\n\nvar ObservableMap = /*#__PURE__*/function () {\n  // hasMap, not hashMap >-).\n  function ObservableMap(initialData, enhancer_, name_) {\n    if (enhancer_ === void 0) {\n      enhancer_ = deepEnhancer;\n    }\n\n    if (name_ === void 0) {\n      name_ =  false ? 0 : "ObservableMap";\n    }\n\n    this.enhancer_ = void 0;\n    this.name_ = void 0;\n    this[$mobx] = ObservableMapMarker;\n    this.data_ = void 0;\n    this.hasMap_ = void 0;\n    this.keysAtom_ = void 0;\n    this.interceptors_ = void 0;\n    this.changeListeners_ = void 0;\n    this.dehancer = void 0;\n    this.enhancer_ = enhancer_;\n    this.name_ = name_;\n\n    if (!isFunction(Map)) {\n      die(18);\n    }\n\n    this.keysAtom_ = createAtom( false ? 0 : "ObservableMap.keys()");\n    this.data_ = new Map();\n    this.hasMap_ = new Map();\n    this.merge(initialData);\n  }\n\n  var _proto = ObservableMap.prototype;\n\n  _proto.has_ = function has_(key) {\n    return this.data_.has(key);\n  };\n\n  _proto.has = function has(key) {\n    var _this = this;\n\n    if (!globalState.trackingDerivation) return this.has_(key);\n    var entry = this.hasMap_.get(key);\n\n    if (!entry) {\n      var newEntry = entry = new ObservableValue(this.has_(key), referenceEnhancer,  false ? 0 : "ObservableMap.key?", false);\n      this.hasMap_.set(key, newEntry);\n      onBecomeUnobserved(newEntry, function () {\n        return _this.hasMap_["delete"](key);\n      });\n    }\n\n    return entry.get();\n  };\n\n  _proto.set = function set(key, value) {\n    var hasKey = this.has_(key);\n\n    if (hasInterceptors(this)) {\n      var change = interceptChange(this, {\n        type: hasKey ? UPDATE : ADD,\n        object: this,\n        newValue: value,\n        name: key\n      });\n      if (!change) return this;\n      value = change.newValue;\n    }\n\n    if (hasKey) {\n      this.updateValue_(key, value);\n    } else {\n      this.addValue_(key, value);\n    }\n\n    return this;\n  };\n\n  _proto["delete"] = function _delete(key) {\n    var _this2 = this;\n\n    checkIfStateModificationsAreAllowed(this.keysAtom_);\n\n    if (hasInterceptors(this)) {\n      var change = interceptChange(this, {\n        type: DELETE,\n        object: this,\n        name: key\n      });\n      if (!change) return false;\n    }\n\n    if (this.has_(key)) {\n      var notifySpy = isSpyEnabled();\n      var notify = hasListeners(this);\n\n      var _change = notify || notifySpy ? {\n        observableKind: "map",\n        debugObjectName: this.name_,\n        type: DELETE,\n        object: this,\n        oldValue: this.data_.get(key).value_,\n        name: key\n      } : null;\n\n      if (false) {}\n      transaction(function () {\n        _this2.keysAtom_.reportChanged();\n\n        _this2.updateHasMapEntry_(key, false);\n\n        var observable = _this2.data_.get(key);\n\n        observable.setNewValue_(undefined);\n\n        _this2.data_["delete"](key);\n      });\n      if (notify) notifyListeners(this, _change);\n      if (false) {}\n      return true;\n    }\n\n    return false;\n  };\n\n  _proto.updateHasMapEntry_ = function updateHasMapEntry_(key, value) {\n    var entry = this.hasMap_.get(key);\n\n    if (entry) {\n      entry.setNewValue_(value);\n    }\n  };\n\n  _proto.updateValue_ = function updateValue_(key, newValue) {\n    var observable = this.data_.get(key);\n    newValue = observable.prepareNewValue_(newValue);\n\n    if (newValue !== globalState.UNCHANGED) {\n      var notifySpy = isSpyEnabled();\n      var notify = hasListeners(this);\n      var change = notify || notifySpy ? {\n        observableKind: "map",\n        debugObjectName: this.name_,\n        type: UPDATE,\n        object: this,\n        oldValue: observable.value_,\n        name: key,\n        newValue: newValue\n      } : null;\n      if (false) {}\n      observable.setNewValue_(newValue);\n      if (notify) notifyListeners(this, change);\n      if (false) {}\n    }\n  };\n\n  _proto.addValue_ = function addValue_(key, newValue) {\n    var _this3 = this;\n\n    checkIfStateModificationsAreAllowed(this.keysAtom_);\n    transaction(function () {\n      var observable = new ObservableValue(newValue, _this3.enhancer_,  false ? 0 : "ObservableMap.key", false);\n\n      _this3.data_.set(key, observable);\n\n      newValue = observable.value_; // value might have been changed\n\n      _this3.updateHasMapEntry_(key, true);\n\n      _this3.keysAtom_.reportChanged();\n    });\n    var notifySpy = isSpyEnabled();\n    var notify = hasListeners(this);\n    var change = notify || notifySpy ? {\n      observableKind: "map",\n      debugObjectName: this.name_,\n      type: ADD,\n      object: this,\n      name: key,\n      newValue: newValue\n    } : null;\n    if (false) {}\n    if (notify) notifyListeners(this, change);\n    if (false) {}\n  };\n\n  _proto.get = function get(key) {\n    if (this.has(key)) return this.dehanceValue_(this.data_.get(key).get());\n    return this.dehanceValue_(undefined);\n  };\n\n  _proto.dehanceValue_ = function dehanceValue_(value) {\n    if (this.dehancer !== undefined) {\n      return this.dehancer(value);\n    }\n\n    return value;\n  };\n\n  _proto.keys = function keys() {\n    this.keysAtom_.reportObserved();\n    return this.data_.keys();\n  };\n\n  _proto.values = function values() {\n    var self = this;\n    var keys = this.keys();\n    return makeIterable({\n      next: function next() {\n        var _keys$next = keys.next(),\n            done = _keys$next.done,\n            value = _keys$next.value;\n\n        return {\n          done: done,\n          value: done ? undefined : self.get(value)\n        };\n      }\n    });\n  };\n\n  _proto.entries = function entries() {\n    var self = this;\n    var keys = this.keys();\n    return makeIterable({\n      next: function next() {\n        var _keys$next2 = keys.next(),\n            done = _keys$next2.done,\n            value = _keys$next2.value;\n\n        return {\n          done: done,\n          value: done ? undefined : [value, self.get(value)]\n        };\n      }\n    });\n  };\n\n  _proto[_Symbol$iterator] = function () {\n    return this.entries();\n  };\n\n  _proto.forEach = function forEach(callback, thisArg) {\n    for (var _iterator = _createForOfIteratorHelperLoose(this), _step; !(_step = _iterator()).done;) {\n      var _step$value = _step.value,\n          key = _step$value[0],\n          value = _step$value[1];\n      callback.call(thisArg, value, key, this);\n    }\n  }\n  /** Merge another object into this object, returns this. */\n  ;\n\n  _proto.merge = function merge(other) {\n    var _this4 = this;\n\n    if (isObservableMap(other)) {\n      other = new Map(other);\n    }\n\n    transaction(function () {\n      if (isPlainObject(other)) getPlainObjectKeys(other).forEach(function (key) {\n        return _this4.set(key, other[key]);\n      });else if (Array.isArray(other)) other.forEach(function (_ref) {\n        var key = _ref[0],\n            value = _ref[1];\n        return _this4.set(key, value);\n      });else if (isES6Map(other)) {\n        if (other.constructor !== Map) die(19, other);\n        other.forEach(function (value, key) {\n          return _this4.set(key, value);\n        });\n      } else if (other !== null && other !== undefined) die(20, other);\n    });\n    return this;\n  };\n\n  _proto.clear = function clear() {\n    var _this5 = this;\n\n    transaction(function () {\n      untracked(function () {\n        for (var _iterator2 = _createForOfIteratorHelperLoose(_this5.keys()), _step2; !(_step2 = _iterator2()).done;) {\n          var key = _step2.value;\n\n          _this5["delete"](key);\n        }\n      });\n    });\n  };\n\n  _proto.replace = function replace(values) {\n    var _this6 = this; // Implementation requirements:\n    // - respect ordering of replacement map\n    // - allow interceptors to run and potentially prevent individual operations\n    // - don\'t recreate observables that already exist in original map (so we don\'t destroy existing subscriptions)\n    // - don\'t _keysAtom.reportChanged if the keys of resulting map are indentical (order matters!)\n    // - note that result map may differ from replacement map due to the interceptors\n\n\n    transaction(function () {\n      // Convert to map so we can do quick key lookups\n      var replacementMap = convertToMap(values);\n      var orderedData = new Map(); // Used for optimization\n\n      var keysReportChangedCalled = false; // Delete keys that don\'t exist in replacement map\n      // if the key deletion is prevented by interceptor\n      // add entry at the beginning of the result map\n\n      for (var _iterator3 = _createForOfIteratorHelperLoose(_this6.data_.keys()), _step3; !(_step3 = _iterator3()).done;) {\n        var key = _step3.value; // Concurrently iterating/deleting keys\n        // iterator should handle this correctly\n\n        if (!replacementMap.has(key)) {\n          var deleted = _this6["delete"](key); // Was the key removed?\n\n\n          if (deleted) {\n            // _keysAtom.reportChanged() was already called\n            keysReportChangedCalled = true;\n          } else {\n            // Delete prevented by interceptor\n            var value = _this6.data_.get(key);\n\n            orderedData.set(key, value);\n          }\n        }\n      } // Merge entries\n\n\n      for (var _iterator4 = _createForOfIteratorHelperLoose(replacementMap.entries()), _step4; !(_step4 = _iterator4()).done;) {\n        var _step4$value = _step4.value,\n            _key = _step4$value[0],\n            _value = _step4$value[1]; // We will want to know whether a new key is added\n\n        var keyExisted = _this6.data_.has(_key); // Add or update value\n\n\n        _this6.set(_key, _value); // The addition could have been prevent by interceptor\n\n\n        if (_this6.data_.has(_key)) {\n          // The update could have been prevented by interceptor\n          // and also we want to preserve existing values\n          // so use value from _data map (instead of replacement map)\n          var _value2 = _this6.data_.get(_key);\n\n          orderedData.set(_key, _value2); // Was a new key added?\n\n          if (!keyExisted) {\n            // _keysAtom.reportChanged() was already called\n            keysReportChangedCalled = true;\n          }\n        }\n      } // Check for possible key order change\n\n\n      if (!keysReportChangedCalled) {\n        if (_this6.data_.size !== orderedData.size) {\n          // If size differs, keys are definitely modified\n          _this6.keysAtom_.reportChanged();\n        } else {\n          var iter1 = _this6.data_.keys();\n\n          var iter2 = orderedData.keys();\n          var next1 = iter1.next();\n          var next2 = iter2.next();\n\n          while (!next1.done) {\n            if (next1.value !== next2.value) {\n              _this6.keysAtom_.reportChanged();\n\n              break;\n            }\n\n            next1 = iter1.next();\n            next2 = iter2.next();\n          }\n        }\n      } // Use correctly ordered map\n\n\n      _this6.data_ = orderedData;\n    });\n    return this;\n  };\n\n  _proto.toString = function toString() {\n    return "[object ObservableMap]";\n  };\n\n  _proto.toJSON = function toJSON() {\n    return Array.from(this);\n  };\n  /**\r\n   * Observes this object. Triggers for the events \'add\', \'update\' and \'delete\'.\r\n   * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe\r\n   * for callback details\r\n   */\n\n\n  _proto.observe_ = function observe_(listener, fireImmediately) {\n    if (false) {}\n    return registerListener(this, listener);\n  };\n\n  _proto.intercept_ = function intercept_(handler) {\n    return registerInterceptor(this, handler);\n  };\n\n  _createClass(ObservableMap, [{\n    key: "size",\n    get: function get() {\n      this.keysAtom_.reportObserved();\n      return this.data_.size;\n    }\n  }, {\n    key: _Symbol$toStringTag,\n    get: function get() {\n      return "Map";\n    }\n  }]);\n\n  return ObservableMap;\n}(); // eslint-disable-next-line\n\n\nvar isObservableMap = /*#__PURE__*/createInstanceofPredicate("ObservableMap", ObservableMap);\n\nfunction convertToMap(dataStructure) {\n  if (isES6Map(dataStructure) || isObservableMap(dataStructure)) {\n    return dataStructure;\n  } else if (Array.isArray(dataStructure)) {\n    return new Map(dataStructure);\n  } else if (isPlainObject(dataStructure)) {\n    var map = new Map();\n\n    for (var key in dataStructure) {\n      map.set(key, dataStructure[key]);\n    }\n\n    return map;\n  } else {\n    return die(21, dataStructure);\n  }\n}\n\nvar _Symbol$iterator$1, _Symbol$toStringTag$1;\n\nvar ObservableSetMarker = {};\n_Symbol$iterator$1 = Symbol.iterator;\n_Symbol$toStringTag$1 = Symbol.toStringTag;\n\nvar ObservableSet = /*#__PURE__*/function () {\n  function ObservableSet(initialData, enhancer, name_) {\n    if (enhancer === void 0) {\n      enhancer = deepEnhancer;\n    }\n\n    if (name_ === void 0) {\n      name_ =  false ? 0 : "ObservableSet";\n    }\n\n    this.name_ = void 0;\n    this[$mobx] = ObservableSetMarker;\n    this.data_ = new Set();\n    this.atom_ = void 0;\n    this.changeListeners_ = void 0;\n    this.interceptors_ = void 0;\n    this.dehancer = void 0;\n    this.enhancer_ = void 0;\n    this.name_ = name_;\n\n    if (!isFunction(Set)) {\n      die(22);\n    }\n\n    this.atom_ = createAtom(this.name_);\n\n    this.enhancer_ = function (newV, oldV) {\n      return enhancer(newV, oldV, name_);\n    };\n\n    if (initialData) {\n      this.replace(initialData);\n    }\n  }\n\n  var _proto = ObservableSet.prototype;\n\n  _proto.dehanceValue_ = function dehanceValue_(value) {\n    if (this.dehancer !== undefined) {\n      return this.dehancer(value);\n    }\n\n    return value;\n  };\n\n  _proto.clear = function clear() {\n    var _this = this;\n\n    transaction(function () {\n      untracked(function () {\n        for (var _iterator = _createForOfIteratorHelperLoose(_this.data_.values()), _step; !(_step = _iterator()).done;) {\n          var value = _step.value;\n\n          _this["delete"](value);\n        }\n      });\n    });\n  };\n\n  _proto.forEach = function forEach(callbackFn, thisArg) {\n    for (var _iterator2 = _createForOfIteratorHelperLoose(this), _step2; !(_step2 = _iterator2()).done;) {\n      var value = _step2.value;\n      callbackFn.call(thisArg, value, value, this);\n    }\n  };\n\n  _proto.add = function add(value) {\n    var _this2 = this;\n\n    checkIfStateModificationsAreAllowed(this.atom_);\n\n    if (hasInterceptors(this)) {\n      var change = interceptChange(this, {\n        type: ADD,\n        object: this,\n        newValue: value\n      });\n      if (!change) return this; // ideally, value = change.value would be done here, so that values can be\n      // changed by interceptor. Same applies for other Set and Map api\'s.\n    }\n\n    if (!this.has(value)) {\n      transaction(function () {\n        _this2.data_.add(_this2.enhancer_(value, undefined));\n\n        _this2.atom_.reportChanged();\n      });\n      var notifySpy =  false && 0;\n      var notify = hasListeners(this);\n\n      var _change = notify || notifySpy ? {\n        observableKind: "set",\n        debugObjectName: this.name_,\n        type: ADD,\n        object: this,\n        newValue: value\n      } : null;\n\n      if (notifySpy && "production" !== "production") {}\n      if (notify) notifyListeners(this, _change);\n      if (notifySpy && "production" !== "production") {}\n    }\n\n    return this;\n  };\n\n  _proto["delete"] = function _delete(value) {\n    var _this3 = this;\n\n    if (hasInterceptors(this)) {\n      var change = interceptChange(this, {\n        type: DELETE,\n        object: this,\n        oldValue: value\n      });\n      if (!change) return false;\n    }\n\n    if (this.has(value)) {\n      var notifySpy =  false && 0;\n      var notify = hasListeners(this);\n\n      var _change2 = notify || notifySpy ? {\n        observableKind: "set",\n        debugObjectName: this.name_,\n        type: DELETE,\n        object: this,\n        oldValue: value\n      } : null;\n\n      if (notifySpy && "production" !== "production") {}\n      transaction(function () {\n        _this3.atom_.reportChanged();\n\n        _this3.data_["delete"](value);\n      });\n      if (notify) notifyListeners(this, _change2);\n      if (notifySpy && "production" !== "production") {}\n      return true;\n    }\n\n    return false;\n  };\n\n  _proto.has = function has(value) {\n    this.atom_.reportObserved();\n    return this.data_.has(this.dehanceValue_(value));\n  };\n\n  _proto.entries = function entries() {\n    var nextIndex = 0;\n    var keys = Array.from(this.keys());\n    var values = Array.from(this.values());\n    return makeIterable({\n      next: function next() {\n        var index = nextIndex;\n        nextIndex += 1;\n        return index < values.length ? {\n          value: [keys[index], values[index]],\n          done: false\n        } : {\n          done: true\n        };\n      }\n    });\n  };\n\n  _proto.keys = function keys() {\n    return this.values();\n  };\n\n  _proto.values = function values() {\n    this.atom_.reportObserved();\n    var self = this;\n    var nextIndex = 0;\n    var observableValues = Array.from(this.data_.values());\n    return makeIterable({\n      next: function next() {\n        return nextIndex < observableValues.length ? {\n          value: self.dehanceValue_(observableValues[nextIndex++]),\n          done: false\n        } : {\n          done: true\n        };\n      }\n    });\n  };\n\n  _proto.replace = function replace(other) {\n    var _this4 = this;\n\n    if (isObservableSet(other)) {\n      other = new Set(other);\n    }\n\n    transaction(function () {\n      if (Array.isArray(other)) {\n        _this4.clear();\n\n        other.forEach(function (value) {\n          return _this4.add(value);\n        });\n      } else if (isES6Set(other)) {\n        _this4.clear();\n\n        other.forEach(function (value) {\n          return _this4.add(value);\n        });\n      } else if (other !== null && other !== undefined) {\n        die("Cannot initialize set from " + other);\n      }\n    });\n    return this;\n  };\n\n  _proto.observe_ = function observe_(listener, fireImmediately) {\n    // ... \'fireImmediately\' could also be true?\n    if (false) {}\n    return registerListener(this, listener);\n  };\n\n  _proto.intercept_ = function intercept_(handler) {\n    return registerInterceptor(this, handler);\n  };\n\n  _proto.toJSON = function toJSON() {\n    return Array.from(this);\n  };\n\n  _proto.toString = function toString() {\n    return "[object ObservableSet]";\n  };\n\n  _proto[_Symbol$iterator$1] = function () {\n    return this.values();\n  };\n\n  _createClass(ObservableSet, [{\n    key: "size",\n    get: function get() {\n      this.atom_.reportObserved();\n      return this.data_.size;\n    }\n  }, {\n    key: _Symbol$toStringTag$1,\n    get: function get() {\n      return "Set";\n    }\n  }]);\n\n  return ObservableSet;\n}(); // eslint-disable-next-line\n\n\nvar isObservableSet = /*#__PURE__*/createInstanceofPredicate("ObservableSet", ObservableSet);\nvar descriptorCache = /*#__PURE__*/Object.create(null);\nvar REMOVE = "remove";\n\nvar ObservableObjectAdministration = /*#__PURE__*/function () {\n  function ObservableObjectAdministration(target_, values_, name_, // Used anytime annotation is not explicitely provided\n  defaultAnnotation_) {\n    if (values_ === void 0) {\n      values_ = new Map();\n    }\n\n    if (defaultAnnotation_ === void 0) {\n      defaultAnnotation_ = autoAnnotation;\n    }\n\n    this.target_ = void 0;\n    this.values_ = void 0;\n    this.name_ = void 0;\n    this.defaultAnnotation_ = void 0;\n    this.keysAtom_ = void 0;\n    this.changeListeners_ = void 0;\n    this.interceptors_ = void 0;\n    this.proxy_ = void 0;\n    this.isPlainObject_ = void 0;\n    this.appliedAnnotations_ = void 0;\n    this.pendingKeys_ = void 0;\n    this.target_ = target_;\n    this.values_ = values_;\n    this.name_ = name_;\n    this.defaultAnnotation_ = defaultAnnotation_;\n    this.keysAtom_ = new Atom( false ? 0 : "ObservableObject.keys"); // Optimization: we use this frequently\n\n    this.isPlainObject_ = isPlainObject(this.target_);\n\n    if (false) {}\n\n    if (false) {}\n  }\n\n  var _proto = ObservableObjectAdministration.prototype;\n\n  _proto.getObservablePropValue_ = function getObservablePropValue_(key) {\n    return this.values_.get(key).get();\n  };\n\n  _proto.setObservablePropValue_ = function setObservablePropValue_(key, newValue) {\n    var observable = this.values_.get(key);\n\n    if (observable instanceof ComputedValue) {\n      observable.set(newValue);\n      return true;\n    } // intercept\n\n\n    if (hasInterceptors(this)) {\n      var change = interceptChange(this, {\n        type: UPDATE,\n        object: this.proxy_ || this.target_,\n        name: key,\n        newValue: newValue\n      });\n      if (!change) return null;\n      newValue = change.newValue;\n    }\n\n    newValue = observable.prepareNewValue_(newValue); // notify spy & observers\n\n    if (newValue !== globalState.UNCHANGED) {\n      var notify = hasListeners(this);\n      var notifySpy =  false && 0;\n\n      var _change = notify || notifySpy ? {\n        type: UPDATE,\n        observableKind: "object",\n        debugObjectName: this.name_,\n        object: this.proxy_ || this.target_,\n        oldValue: observable.value_,\n        name: key,\n        newValue: newValue\n      } : null;\n\n      if (false) {}\n      observable.setNewValue_(newValue);\n      if (notify) notifyListeners(this, _change);\n      if (false) {}\n    }\n\n    return true;\n  };\n\n  _proto.get_ = function get_(key) {\n    if (globalState.trackingDerivation && !hasProp(this.target_, key)) {\n      // Key doesn\'t exist yet, subscribe for it in case it\'s added later\n      this.has_(key);\n    }\n\n    return this.target_[key];\n  }\n  /**\r\n   * @param {PropertyKey} key\r\n   * @param {any} value\r\n   * @param {Annotation|boolean} annotation true - use default annotation, false - copy as is\r\n   * @param {boolean} proxyTrap whether it\'s called from proxy trap\r\n   * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor\r\n   */\n  ;\n\n  _proto.set_ = function set_(key, value, proxyTrap) {\n    if (proxyTrap === void 0) {\n      proxyTrap = false;\n    } // Don\'t use .has(key) - we care about own\n\n\n    if (hasProp(this.target_, key)) {\n      // Existing prop\n      if (this.values_.has(key)) {\n        // Observable (can be intercepted)\n        return this.setObservablePropValue_(key, value);\n      } else if (proxyTrap) {\n        // Non-observable - proxy\n        return Reflect.set(this.target_, key, value);\n      } else {\n        // Non-observable\n        this.target_[key] = value;\n        return true;\n      }\n    } else {\n      // New prop\n      return this.extend_(key, {\n        value: value,\n        enumerable: true,\n        writable: true,\n        configurable: true\n      }, this.defaultAnnotation_, proxyTrap);\n    }\n  } // Trap for "in"\n  ;\n\n  _proto.has_ = function has_(key) {\n    if (!globalState.trackingDerivation) {\n      // Skip key subscription outside derivation\n      return key in this.target_;\n    }\n\n    this.pendingKeys_ || (this.pendingKeys_ = new Map());\n    var entry = this.pendingKeys_.get(key);\n\n    if (!entry) {\n      entry = new ObservableValue(key in this.target_, referenceEnhancer,  false ? 0 : "ObservableObject.key?", false);\n      this.pendingKeys_.set(key, entry);\n    }\n\n    return entry.get();\n  }\n  /**\r\n   * @param {PropertyKey} key\r\n   * @param {Annotation|boolean} annotation true - use default annotation, false - ignore prop\r\n   */\n  ;\n\n  _proto.make_ = function make_(key, annotation) {\n    if (annotation === true) {\n      annotation = this.defaultAnnotation_;\n    }\n\n    if (annotation === false) {\n      return;\n    }\n\n    assertAnnotable(this, annotation, key);\n\n    if (!(key in this.target_)) {\n      var _this$target_$storedA; // Throw on missing key, except for decorators:\n      // Decorator annotations are collected from whole prototype chain.\n      // When called from super() some props may not exist yet.\n      // However we don\'t have to worry about missing prop,\n      // because the decorator must have been applied to something.\n\n\n      if ((_this$target_$storedA = this.target_[storedAnnotationsSymbol]) == null ? void 0 : _this$target_$storedA[key]) {\n        return; // will be annotated by subclass constructor\n      } else {\n        die(1, annotation.annotationType_, this.name_ + "." + key.toString());\n      }\n    }\n\n    var source = this.target_;\n\n    while (source && source !== objectPrototype) {\n      var descriptor = getDescriptor(source, key);\n\n      if (descriptor) {\n        var outcome = annotation.make_(this, key, descriptor, source);\n        if (outcome === 0\n        /* Cancel */\n        ) return;\n        if (outcome === 1\n        /* Break */\n        ) break;\n      }\n\n      source = Object.getPrototypeOf(source);\n    }\n\n    recordAnnotationApplied(this, annotation, key);\n  }\n  /**\r\n   * @param {PropertyKey} key\r\n   * @param {PropertyDescriptor} descriptor\r\n   * @param {Annotation|boolean} annotation true - use default annotation, false - copy as is\r\n   * @param {boolean} proxyTrap whether it\'s called from proxy trap\r\n   * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor\r\n   */\n  ;\n\n  _proto.extend_ = function extend_(key, descriptor, annotation, proxyTrap) {\n    if (proxyTrap === void 0) {\n      proxyTrap = false;\n    }\n\n    if (annotation === true) {\n      annotation = this.defaultAnnotation_;\n    }\n\n    if (annotation === false) {\n      return this.defineProperty_(key, descriptor, proxyTrap);\n    }\n\n    assertAnnotable(this, annotation, key);\n    var outcome = annotation.extend_(this, key, descriptor, proxyTrap);\n\n    if (outcome) {\n      recordAnnotationApplied(this, annotation, key);\n    }\n\n    return outcome;\n  }\n  /**\r\n   * @param {PropertyKey} key\r\n   * @param {PropertyDescriptor} descriptor\r\n   * @param {boolean} proxyTrap whether it\'s called from proxy trap\r\n   * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor\r\n   */\n  ;\n\n  _proto.defineProperty_ = function defineProperty_(key, descriptor, proxyTrap) {\n    if (proxyTrap === void 0) {\n      proxyTrap = false;\n    }\n\n    try {\n      startBatch(); // Delete\n\n      var deleteOutcome = this.delete_(key);\n\n      if (!deleteOutcome) {\n        // Failure or intercepted\n        return deleteOutcome;\n      } // ADD interceptor\n\n\n      if (hasInterceptors(this)) {\n        var change = interceptChange(this, {\n          object: this.proxy_ || this.target_,\n          name: key,\n          type: ADD,\n          newValue: descriptor.value\n        });\n        if (!change) return null;\n        var newValue = change.newValue;\n\n        if (descriptor.value !== newValue) {\n          descriptor = mobx_esm_extends({}, descriptor, {\n            value: newValue\n          });\n        }\n      } // Define\n\n\n      if (proxyTrap) {\n        if (!Reflect.defineProperty(this.target_, key, descriptor)) {\n          return false;\n        }\n      } else {\n        defineProperty(this.target_, key, descriptor);\n      } // Notify\n\n\n      this.notifyPropertyAddition_(key, descriptor.value);\n    } finally {\n      endBatch();\n    }\n\n    return true;\n  } // If original descriptor becomes relevant, move this to annotation directly\n  ;\n\n  _proto.defineObservableProperty_ = function defineObservableProperty_(key, value, enhancer, proxyTrap) {\n    if (proxyTrap === void 0) {\n      proxyTrap = false;\n    }\n\n    try {\n      startBatch(); // Delete\n\n      var deleteOutcome = this.delete_(key);\n\n      if (!deleteOutcome) {\n        // Failure or intercepted\n        return deleteOutcome;\n      } // ADD interceptor\n\n\n      if (hasInterceptors(this)) {\n        var change = interceptChange(this, {\n          object: this.proxy_ || this.target_,\n          name: key,\n          type: ADD,\n          newValue: value\n        });\n        if (!change) return null;\n        value = change.newValue;\n      }\n\n      var cachedDescriptor = getCachedObservablePropDescriptor(key);\n      var descriptor = {\n        configurable: globalState.safeDescriptors ? this.isPlainObject_ : true,\n        enumerable: true,\n        get: cachedDescriptor.get,\n        set: cachedDescriptor.set\n      }; // Define\n\n      if (proxyTrap) {\n        if (!Reflect.defineProperty(this.target_, key, descriptor)) {\n          return false;\n        }\n      } else {\n        defineProperty(this.target_, key, descriptor);\n      }\n\n      var observable = new ObservableValue(value, enhancer,  false ? 0 : "ObservableObject.key", false);\n      this.values_.set(key, observable); // Notify (value possibly changed by ObservableValue)\n\n      this.notifyPropertyAddition_(key, observable.value_);\n    } finally {\n      endBatch();\n    }\n\n    return true;\n  } // If original descriptor becomes relevant, move this to annotation directly\n  ;\n\n  _proto.defineComputedProperty_ = function defineComputedProperty_(key, options, proxyTrap) {\n    if (proxyTrap === void 0) {\n      proxyTrap = false;\n    }\n\n    try {\n      startBatch(); // Delete\n\n      var deleteOutcome = this.delete_(key);\n\n      if (!deleteOutcome) {\n        // Failure or intercepted\n        return deleteOutcome;\n      } // ADD interceptor\n\n\n      if (hasInterceptors(this)) {\n        var change = interceptChange(this, {\n          object: this.proxy_ || this.target_,\n          name: key,\n          type: ADD,\n          newValue: undefined\n        });\n        if (!change) return null;\n      }\n\n      options.name || (options.name =  false ? 0 : "ObservableObject.key");\n      options.context = this.proxy_ || this.target_;\n      var cachedDescriptor = getCachedObservablePropDescriptor(key);\n      var descriptor = {\n        configurable: globalState.safeDescriptors ? this.isPlainObject_ : true,\n        enumerable: false,\n        get: cachedDescriptor.get,\n        set: cachedDescriptor.set\n      }; // Define\n\n      if (proxyTrap) {\n        if (!Reflect.defineProperty(this.target_, key, descriptor)) {\n          return false;\n        }\n      } else {\n        defineProperty(this.target_, key, descriptor);\n      }\n\n      this.values_.set(key, new ComputedValue(options)); // Notify\n\n      this.notifyPropertyAddition_(key, undefined);\n    } finally {\n      endBatch();\n    }\n\n    return true;\n  }\n  /**\r\n   * @param {PropertyKey} key\r\n   * @param {PropertyDescriptor} descriptor\r\n   * @param {boolean} proxyTrap whether it\'s called from proxy trap\r\n   * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor\r\n   */\n  ;\n\n  _proto.delete_ = function delete_(key, proxyTrap) {\n    if (proxyTrap === void 0) {\n      proxyTrap = false;\n    } // No such prop\n\n\n    if (!hasProp(this.target_, key)) {\n      return true;\n    } // Intercept\n\n\n    if (hasInterceptors(this)) {\n      var change = interceptChange(this, {\n        object: this.proxy_ || this.target_,\n        name: key,\n        type: REMOVE\n      }); // Cancelled\n\n      if (!change) return null;\n    } // Delete\n\n\n    try {\n      var _this$pendingKeys_, _this$pendingKeys_$ge;\n\n      startBatch();\n      var notify = hasListeners(this);\n      var notifySpy =  false && 0;\n      var observable = this.values_.get(key); // Value needed for spies/listeners\n\n      var value = undefined; // Optimization: don\'t pull the value unless we will need it\n\n      if (!observable && (notify || notifySpy)) {\n        var _getDescriptor;\n\n        value = (_getDescriptor = getDescriptor(this.target_, key)) == null ? void 0 : _getDescriptor.value;\n      } // delete prop (do first, may fail)\n\n\n      if (proxyTrap) {\n        if (!Reflect.deleteProperty(this.target_, key)) {\n          return false;\n        }\n      } else {\n        delete this.target_[key];\n      } // Allow re-annotating this field\n\n\n      if (false) {} // Clear observable\n\n\n      if (observable) {\n        this.values_["delete"](key); // for computed, value is undefined\n\n        if (observable instanceof ObservableValue) {\n          value = observable.value_;\n        } // Notify: autorun(() => obj[key]), see #1796\n\n\n        propagateChanged(observable);\n      } // Notify "keys/entries/values" observers\n\n\n      this.keysAtom_.reportChanged(); // Notify "has" observers\n      // "in" as it may still exist in proto\n\n      (_this$pendingKeys_ = this.pendingKeys_) == null ? void 0 : (_this$pendingKeys_$ge = _this$pendingKeys_.get(key)) == null ? void 0 : _this$pendingKeys_$ge.set(key in this.target_); // Notify spies/listeners\n\n      if (notify || notifySpy) {\n        var _change2 = {\n          type: REMOVE,\n          observableKind: "object",\n          object: this.proxy_ || this.target_,\n          debugObjectName: this.name_,\n          oldValue: value,\n          name: key\n        };\n        if (false) {}\n        if (notify) notifyListeners(this, _change2);\n        if (false) {}\n      }\n    } finally {\n      endBatch();\n    }\n\n    return true;\n  }\n  /**\r\n   * Observes this object. Triggers for the events \'add\', \'update\' and \'delete\'.\r\n   * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe\r\n   * for callback details\r\n   */\n  ;\n\n  _proto.observe_ = function observe_(callback, fireImmediately) {\n    if (false) {}\n    return registerListener(this, callback);\n  };\n\n  _proto.intercept_ = function intercept_(handler) {\n    return registerInterceptor(this, handler);\n  };\n\n  _proto.notifyPropertyAddition_ = function notifyPropertyAddition_(key, value) {\n    var _this$pendingKeys_2, _this$pendingKeys_2$g;\n\n    var notify = hasListeners(this);\n    var notifySpy =  false && 0;\n\n    if (notify || notifySpy) {\n      var change = notify || notifySpy ? {\n        type: ADD,\n        observableKind: "object",\n        debugObjectName: this.name_,\n        object: this.proxy_ || this.target_,\n        name: key,\n        newValue: value\n      } : null;\n      if (false) {}\n      if (notify) notifyListeners(this, change);\n      if (false) {}\n    }\n\n    (_this$pendingKeys_2 = this.pendingKeys_) == null ? void 0 : (_this$pendingKeys_2$g = _this$pendingKeys_2.get(key)) == null ? void 0 : _this$pendingKeys_2$g.set(true); // Notify "keys/entries/values" observers\n\n    this.keysAtom_.reportChanged();\n  };\n\n  _proto.ownKeys_ = function ownKeys_() {\n    this.keysAtom_.reportObserved();\n    return ownKeys(this.target_);\n  };\n\n  _proto.keys_ = function keys_() {\n    // Returns enumerable && own, but unfortunately keysAtom will report on ANY key change.\n    // There is no way to distinguish between Object.keys(object) and Reflect.ownKeys(object) - both are handled by ownKeys trap.\n    // We can either over-report in Object.keys(object) or under-report in Reflect.ownKeys(object)\n    // We choose to over-report in Object.keys(object), because:\n    // - typically it\'s used with simple data objects\n    // - when symbolic/non-enumerable keys are relevant Reflect.ownKeys works as expected\n    this.keysAtom_.reportObserved();\n    return Object.keys(this.target_);\n  };\n\n  return ObservableObjectAdministration;\n}();\n\nfunction asObservableObject(target, options) {\n  var _options$name;\n\n  if (false) {}\n\n  if (hasProp(target, $mobx)) {\n    if (false) {}\n\n    return target;\n  }\n\n  if (false) {}\n  var name = (_options$name = options == null ? void 0 : options.name) != null ? _options$name :  false ? 0 : "ObservableObject";\n  var adm = new ObservableObjectAdministration(target, new Map(), String(name), getAnnotationFromOptions(options));\n  addHiddenProp(target, $mobx, adm);\n  return target;\n}\n\nvar isObservableObjectAdministration = /*#__PURE__*/createInstanceofPredicate("ObservableObjectAdministration", ObservableObjectAdministration);\n\nfunction getCachedObservablePropDescriptor(key) {\n  return descriptorCache[key] || (descriptorCache[key] = {\n    get: function get() {\n      return this[$mobx].getObservablePropValue_(key);\n    },\n    set: function set(value) {\n      return this[$mobx].setObservablePropValue_(key, value);\n    }\n  });\n}\n\nfunction isObservableObject(thing) {\n  if (isObject(thing)) {\n    return isObservableObjectAdministration(thing[$mobx]);\n  }\n\n  return false;\n}\n\nfunction recordAnnotationApplied(adm, annotation, key) {\n  var _adm$target_$storedAn;\n\n  if (false) {} // Remove applied decorator annotation so we don\'t try to apply it again in subclass constructor\n\n\n  (_adm$target_$storedAn = adm.target_[storedAnnotationsSymbol]) == null ? true : delete _adm$target_$storedAn[key];\n}\n\nfunction assertAnnotable(adm, annotation, key) {\n  // Valid annotation\n  if (false) {}\n  /*\r\n  // Configurable, not sealed, not frozen\r\n  // Possibly not needed, just a little better error then the one thrown by engine.\r\n  // Cases where this would be useful the most (subclass field initializer) are not interceptable by this.\r\n  if (__DEV__) {\r\n      const configurable = getDescriptor(adm.target_, key)?.configurable\r\n      const frozen = Object.isFrozen(adm.target_)\r\n      const sealed = Object.isSealed(adm.target_)\r\n      if (!configurable || frozen || sealed) {\r\n          const fieldName = `${adm.name_}.${key.toString()}`\r\n          const requestedAnnotationType = annotation.annotationType_\r\n          let error = `Cannot apply \'${requestedAnnotationType}\' to \'${fieldName}\':`\r\n          if (frozen) {\r\n              error += `\\nObject is frozen.`\r\n          }\r\n          if (sealed) {\r\n              error += `\\nObject is sealed.`\r\n          }\r\n          if (!configurable) {\r\n              error += `\\nproperty is not configurable.`\r\n              // Mention only if caused by us to avoid confusion\r\n              if (hasProp(adm.appliedAnnotations!, key)) {\r\n                  error += `\\nTo prevent accidental re-definition of a field by a subclass, `\r\n                  error += `all annotated fields of non-plain objects (classes) are not configurable.`\r\n              }\r\n          }\r\n          die(error)\r\n      }\r\n  }\r\n  */\n  // Not annotated\n\n\n  if (false) { var requestedAnnotationType, currentAnnotationType, fieldName; }\n}\n/**\r\n * This array buffer contains two lists of properties, so that all arrays\r\n * can recycle their property definitions, which significantly improves performance of creating\r\n * properties on the fly.\r\n */\n\n\nvar OBSERVABLE_ARRAY_BUFFER_SIZE = 0; // Typescript workaround to make sure ObservableArray extends Array\n\nvar StubArray = function StubArray() {};\n\nfunction inherit(ctor, proto) {\n  if (Object.setPrototypeOf) {\n    Object.setPrototypeOf(ctor.prototype, proto);\n  } else if (ctor.prototype.__proto__ !== undefined) {\n    ctor.prototype.__proto__ = proto;\n  } else {\n    ctor.prototype = proto;\n  }\n}\n\ninherit(StubArray, Array.prototype); // Weex proto freeze protection was here,\n// but it is unclear why the hack is need as MobX never changed the prototype\n// anyway, so removed it in V6\n\nvar LegacyObservableArray = /*#__PURE__*/function (_StubArray) {\n  _inheritsLoose(LegacyObservableArray, _StubArray);\n\n  function LegacyObservableArray(initialValues, enhancer, name, owned) {\n    var _this;\n\n    if (name === void 0) {\n      name =  false ? 0 : "ObservableArray";\n    }\n\n    if (owned === void 0) {\n      owned = false;\n    }\n\n    _this = _StubArray.call(this) || this;\n    var adm = new ObservableArrayAdministration(name, enhancer, owned, true);\n    adm.proxy_ = _assertThisInitialized(_this);\n    addHiddenFinalProp(_assertThisInitialized(_this), $mobx, adm);\n\n    if (initialValues && initialValues.length) {\n      var prev = allowStateChangesStart(true); // @ts-ignore\n\n      _this.spliceWithArray(0, 0, initialValues);\n\n      allowStateChangesEnd(prev);\n    }\n\n    return _this;\n  }\n\n  var _proto = LegacyObservableArray.prototype;\n\n  _proto.concat = function concat() {\n    this[$mobx].atom_.reportObserved();\n\n    for (var _len = arguments.length, arrays = new Array(_len), _key = 0; _key < _len; _key++) {\n      arrays[_key] = arguments[_key];\n    }\n\n    return Array.prototype.concat.apply(this.slice(), //@ts-ignore\n    arrays.map(function (a) {\n      return isObservableArray(a) ? a.slice() : a;\n    }));\n  };\n\n  _proto[Symbol.iterator] = function () {\n    var self = this;\n    var nextIndex = 0;\n    return makeIterable({\n      next: function next() {\n        // @ts-ignore\n        return nextIndex < self.length ? {\n          value: self[nextIndex++],\n          done: false\n        } : {\n          done: true,\n          value: undefined\n        };\n      }\n    });\n  };\n\n  _createClass(LegacyObservableArray, [{\n    key: "length",\n    get: function get() {\n      return this[$mobx].getArrayLength_();\n    },\n    set: function set(newLength) {\n      this[$mobx].setArrayLength_(newLength);\n    }\n  }, {\n    key: Symbol.toStringTag,\n    get: function get() {\n      return "Array";\n    }\n  }]);\n\n  return LegacyObservableArray;\n}(StubArray);\n\nObject.entries(arrayExtensions).forEach(function (_ref) {\n  var prop = _ref[0],\n      fn = _ref[1];\n  if (prop !== "concat") addHiddenProp(LegacyObservableArray.prototype, prop, fn);\n});\n\nfunction createArrayEntryDescriptor(index) {\n  return {\n    enumerable: false,\n    configurable: true,\n    get: function get() {\n      return this[$mobx].get_(index);\n    },\n    set: function set(value) {\n      this[$mobx].set_(index, value);\n    }\n  };\n}\n\nfunction createArrayBufferItem(index) {\n  defineProperty(LegacyObservableArray.prototype, "" + index, createArrayEntryDescriptor(index));\n}\n\nfunction reserveArrayBuffer(max) {\n  if (max > OBSERVABLE_ARRAY_BUFFER_SIZE) {\n    for (var index = OBSERVABLE_ARRAY_BUFFER_SIZE; index < max + 100; index++) {\n      createArrayBufferItem(index);\n    }\n\n    OBSERVABLE_ARRAY_BUFFER_SIZE = max;\n  }\n}\n\nreserveArrayBuffer(1000);\n\nfunction createLegacyArray(initialValues, enhancer, name) {\n  return new LegacyObservableArray(initialValues, enhancer, name);\n}\n\nfunction getAtom(thing, property) {\n  if (_typeof(thing) === "object" && thing !== null) {\n    if (isObservableArray(thing)) {\n      if (property !== undefined) die(23);\n      return thing[$mobx].atom_;\n    }\n\n    if (isObservableSet(thing)) {\n      return thing[$mobx];\n    }\n\n    if (isObservableMap(thing)) {\n      if (property === undefined) return thing.keysAtom_;\n      var observable = thing.data_.get(property) || thing.hasMap_.get(property);\n      if (!observable) die(25, property, getDebugName(thing));\n      return observable;\n    }\n\n    if (isObservableObject(thing)) {\n      if (!property) return die(26);\n\n      var _observable = thing[$mobx].values_.get(property);\n\n      if (!_observable) die(27, property, getDebugName(thing));\n      return _observable;\n    }\n\n    if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) {\n      return thing;\n    }\n  } else if (isFunction(thing)) {\n    if (isReaction(thing[$mobx])) {\n      // disposer function\n      return thing[$mobx];\n    }\n  }\n\n  die(28);\n}\n\nfunction getAdministration(thing, property) {\n  if (!thing) die(29);\n  if (property !== undefined) return getAdministration(getAtom(thing, property));\n  if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) return thing;\n  if (isObservableMap(thing) || isObservableSet(thing)) return thing;\n  if (thing[$mobx]) return thing[$mobx];\n  die(24, thing);\n}\n\nfunction getDebugName(thing, property) {\n  var named;\n\n  if (property !== undefined) {\n    named = getAtom(thing, property);\n  } else if (isAction(thing)) {\n    return thing.name;\n  } else if (isObservableObject(thing) || isObservableMap(thing) || isObservableSet(thing)) {\n    named = getAdministration(thing);\n  } else {\n    // valid for arrays as well\n    named = getAtom(thing);\n  }\n\n  return named.name_;\n}\n\nvar mobx_esm_toString = objectPrototype.toString;\n\nfunction deepEqual(a, b, depth) {\n  if (depth === void 0) {\n    depth = -1;\n  }\n\n  return eq(a, b, depth);\n} // Copied from https://github.com/jashkenas/underscore/blob/5c237a7c682fb68fd5378203f0bf22dce1624854/underscore.js#L1186-L1289\n// Internal recursive comparison function for `isEqual`.\n\n\nfunction eq(a, b, depth, aStack, bStack) {\n  // Identical objects are equal. `0 === -0`, but they aren\'t identical.\n  // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n  if (a === b) return a !== 0 || 1 / a === 1 / b; // `null` or `undefined` only equal to itself (strict comparison).\n\n  if (a == null || b == null) return false; // `NaN`s are equivalent, but non-reflexive.\n\n  if (a !== a) return b !== b; // Exhaust primitive checks\n\n  var type = _typeof(a);\n\n  if (!isFunction(type) && type !== "object" && _typeof(b) != "object") return false; // Compare `[[Class]]` names.\n\n  var className = mobx_esm_toString.call(a);\n  if (className !== mobx_esm_toString.call(b)) return false;\n\n  switch (className) {\n    // Strings, numbers, regular expressions, dates, and booleans are compared by value.\n    case "[object RegExp]": // RegExps are coerced to strings for comparison (Note: \'\' + /a/i === \'/a/i\')\n\n    case "[object String]":\n      // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is\n      // equivalent to `new String("5")`.\n      return "" + a === "" + b;\n\n    case "[object Number]":\n      // `NaN`s are equivalent, but non-reflexive.\n      // Object(NaN) is equivalent to NaN.\n      if (+a !== +a) return +b !== +b; // An `egal` comparison is performed for other numeric values.\n\n      return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n\n    case "[object Date]":\n    case "[object Boolean]":\n      // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n      // millisecond representations. Note that invalid dates with millisecond representations\n      // of `NaN` are not equivalent.\n      return +a === +b;\n\n    case "[object Symbol]":\n      return typeof Symbol !== "undefined" && Symbol.valueOf.call(a) === Symbol.valueOf.call(b);\n\n    case "[object Map]":\n    case "[object Set]":\n      // Maps and Sets are unwrapped to arrays of entry-pairs, adding an incidental level.\n      // Hide this extra level by increasing the depth.\n      if (depth >= 0) {\n        depth++;\n      }\n\n      break;\n  } // Unwrap any wrapped objects.\n\n\n  a = unwrap(a);\n  b = unwrap(b);\n  var areArrays = className === "[object Array]";\n\n  if (!areArrays) {\n    if (_typeof(a) != "object" || _typeof(b) != "object") return false; // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n    // from different frames are.\n\n    var aCtor = a.constructor,\n        bCtor = b.constructor;\n\n    if (aCtor !== bCtor && !(isFunction(aCtor) && aCtor instanceof aCtor && isFunction(bCtor) && bCtor instanceof bCtor) && "constructor" in a && "constructor" in b) {\n      return false;\n    }\n  }\n\n  if (depth === 0) {\n    return false;\n  } else if (depth < 0) {\n    depth = -1;\n  } // Assume equality for cyclic structures. The algorithm for detecting cyclic\n  // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n  // Initializing stack of traversed objects.\n  // It\'s done here since we only need them for objects and arrays comparison.\n\n\n  aStack = aStack || [];\n  bStack = bStack || [];\n  var length = aStack.length;\n\n  while (length--) {\n    // Linear search. Performance is inversely proportional to the number of\n    // unique nested structures.\n    if (aStack[length] === a) return bStack[length] === b;\n  } // Add the first object to the stack of traversed objects.\n\n\n  aStack.push(a);\n  bStack.push(b); // Recursively compare objects and arrays.\n\n  if (areArrays) {\n    // Compare array lengths to determine if a deep comparison is necessary.\n    length = a.length;\n    if (length !== b.length) return false; // Deep compare the contents, ignoring non-numeric properties.\n\n    while (length--) {\n      if (!eq(a[length], b[length], depth - 1, aStack, bStack)) return false;\n    }\n  } else {\n    // Deep compare objects.\n    var keys = Object.keys(a);\n    var key;\n    length = keys.length; // Ensure that both objects contain the same number of properties before comparing deep equality.\n\n    if (Object.keys(b).length !== length) return false;\n\n    while (length--) {\n      // Deep compare each member\n      key = keys[length];\n      if (!(hasProp(b, key) && eq(a[key], b[key], depth - 1, aStack, bStack))) return false;\n    }\n  } // Remove the first object from the stack of traversed objects.\n\n\n  aStack.pop();\n  bStack.pop();\n  return true;\n}\n\nfunction unwrap(a) {\n  if (isObservableArray(a)) return a.slice();\n  if (isES6Map(a) || isObservableMap(a)) return Array.from(a.entries());\n  if (isES6Set(a) || isObservableSet(a)) return Array.from(a.entries());\n  return a;\n}\n\nfunction makeIterable(iterator) {\n  iterator[Symbol.iterator] = getSelf;\n  return iterator;\n}\n\nfunction getSelf() {\n  return this;\n}\n\nfunction isAnnotation(thing) {\n  return (// Can be function\n    thing instanceof Object && typeof thing.annotationType_ === "string" && isFunction(thing.make_) && isFunction(thing.extend_)\n  );\n}\n/**\r\n * (c) Michel Weststrate 2015 - 2020\r\n * MIT Licensed\r\n *\r\n * Welcome to the mobx sources! To get an global overview of how MobX internally works,\r\n * this is a good place to start:\r\n * https://medium.com/@mweststrate/becoming-fully-reactive-an-in-depth-explanation-of-mobservable-55995262a254#.xvbh6qd74\r\n *\r\n * Source folders:\r\n * ===============\r\n *\r\n * - api/     Most of the public static methods exposed by the module can be found here.\r\n * - core/    Implementation of the MobX algorithm; atoms, derivations, reactions, dependency trees, optimizations. Cool stuff can be found here.\r\n * - types/   All the magic that is need to have observable objects, arrays and values is in this folder. Including the modifiers like `asFlat`.\r\n * - utils/   Utility stuff.\r\n *\r\n */\n\n\n["Symbol", "Map", "Set"].forEach(function (m) {\n  var g = getGlobal();\n\n  if (typeof g[m] === "undefined") {\n    die("MobX requires global \'" + m + "\' to be available or polyfilled");\n  }\n});\n\nif ((typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__ === "undefined" ? "undefined" : _typeof(__MOBX_DEVTOOLS_GLOBAL_HOOK__)) === "object") {\n  // See: https://github.com/andykog/mobx-devtools/\n  __MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx({\n    spy: spy,\n    extras: {\n      getDebugName: getDebugName\n    },\n    $mobx: $mobx\n  });\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/assertEnvironment.js\n\n\n\nif (!react.useState) {\n  throw new Error("mobx-react-lite requires React with Hooks support");\n}\n\nif (!makeObservable) {\n  throw new Error("mobx-react-lite@3 requires mobx at least version 6 to be available");\n}\n;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/reactBatchedUpdates.js\n\n;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/observerBatching.js\n\nfunction defaultNoopBatch(callback) {\n  callback();\n}\nfunction observerBatching(reactionScheduler) {\n  if (!reactionScheduler) {\n    reactionScheduler = defaultNoopBatch;\n\n    if (false) {}\n  }\n\n  configure({\n    reactionScheduler: reactionScheduler\n  });\n}\nvar isObserverBatched = function isObserverBatched() {\n  if (false) {}\n\n  return true;\n};\n;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/printDebugValue.js\n\nfunction printDebugValue(v) {\n  return getDependencyTree(v);\n}\n;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/FinalizationRegistryWrapper.js\nvar FinalizationRegistryLocal = typeof FinalizationRegistry === "undefined" ? undefined : FinalizationRegistry;\n\n;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/reactionCleanupTrackingCommon.js\nfunction createTrackingData(reaction) {\n  var trackingData = {\n    reaction: reaction,\n    mounted: false,\n    changedBeforeMount: false,\n    cleanAt: Date.now() + CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS\n  };\n  return trackingData;\n}\n/**\n * The minimum time before we\'ll clean up a Reaction created in a render\n * for a component that hasn\'t managed to run its effects. This needs to\n * be big enough to ensure that a component won\'t turn up and have its\n * effects run without being re-rendered.\n */\n\nvar CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS = 10000;\n/**\n * The frequency with which we\'ll check for leaked reactions.\n */\n\nvar CLEANUP_TIMER_LOOP_MILLIS = 10000;\n;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/createReactionCleanupTrackingUsingFinalizationRegister.js\n\n/**\n * FinalizationRegistry-based uncommitted reaction cleanup\n */\n\nfunction createReactionCleanupTrackingUsingFinalizationRegister(FinalizationRegistry) {\n  var cleanupTokenToReactionTrackingMap = new Map();\n  var globalCleanupTokensCounter = 1;\n  var registry = new FinalizationRegistry(function cleanupFunction(token) {\n    var trackedReaction = cleanupTokenToReactionTrackingMap.get(token);\n\n    if (trackedReaction) {\n      trackedReaction.reaction.dispose();\n      cleanupTokenToReactionTrackingMap.delete(token);\n    }\n  });\n  return {\n    addReactionToTrack: function addReactionToTrack(reactionTrackingRef, reaction, objectRetainedByReact) {\n      var token = globalCleanupTokensCounter++;\n      registry.register(objectRetainedByReact, token, reactionTrackingRef);\n      reactionTrackingRef.current = createTrackingData(reaction);\n      reactionTrackingRef.current.finalizationRegistryCleanupToken = token;\n      cleanupTokenToReactionTrackingMap.set(token, reactionTrackingRef.current);\n      return reactionTrackingRef.current;\n    },\n    recordReactionAsCommitted: function recordReactionAsCommitted(reactionRef) {\n      registry.unregister(reactionRef);\n\n      if (reactionRef.current && reactionRef.current.finalizationRegistryCleanupToken) {\n        cleanupTokenToReactionTrackingMap.delete(reactionRef.current.finalizationRegistryCleanupToken);\n      }\n    },\n    forceCleanupTimerToRunNowForTests: function forceCleanupTimerToRunNowForTests() {// When FinalizationRegistry in use, this this is no-op\n    },\n    resetCleanupScheduleForTests: function resetCleanupScheduleForTests() {// When FinalizationRegistry in use, this this is no-op\n    }\n  };\n}\n;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/createTimerBasedReactionCleanupTracking.js\nvar __values = undefined && undefined.__values || function (o) {\n  var s = typeof Symbol === "function" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === "number") return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");\n};\n\n\n/**\n * timers, gc-style, uncommitted reaction cleanup\n */\n\nfunction createTimerBasedReactionCleanupTracking() {\n  /**\n   * Reactions created by components that have yet to be fully mounted.\n   */\n  var uncommittedReactionRefs = new Set();\n  /**\n   * Latest \'uncommitted reactions\' cleanup timer handle.\n   */\n\n  var reactionCleanupHandle;\n  /* istanbul ignore next */\n\n  /**\n   * Only to be used by test functions; do not export outside of mobx-react-lite\n   */\n\n  function forceCleanupTimerToRunNowForTests() {\n    // This allows us to control the execution of the cleanup timer\n    // to force it to run at awkward times in unit tests.\n    if (reactionCleanupHandle) {\n      clearTimeout(reactionCleanupHandle);\n      cleanUncommittedReactions();\n    }\n  }\n  /* istanbul ignore next */\n\n\n  function resetCleanupScheduleForTests() {\n    var e_1, _a;\n\n    if (uncommittedReactionRefs.size > 0) {\n      try {\n        for (var uncommittedReactionRefs_1 = __values(uncommittedReactionRefs), uncommittedReactionRefs_1_1 = uncommittedReactionRefs_1.next(); !uncommittedReactionRefs_1_1.done; uncommittedReactionRefs_1_1 = uncommittedReactionRefs_1.next()) {\n          var ref = uncommittedReactionRefs_1_1.value;\n          var tracking = ref.current;\n\n          if (tracking) {\n            tracking.reaction.dispose();\n            ref.current = null;\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (uncommittedReactionRefs_1_1 && !uncommittedReactionRefs_1_1.done && (_a = uncommittedReactionRefs_1.return)) _a.call(uncommittedReactionRefs_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      uncommittedReactionRefs.clear();\n    }\n\n    if (reactionCleanupHandle) {\n      clearTimeout(reactionCleanupHandle);\n      reactionCleanupHandle = undefined;\n    }\n  }\n\n  function ensureCleanupTimerRunning() {\n    if (reactionCleanupHandle === undefined) {\n      reactionCleanupHandle = setTimeout(cleanUncommittedReactions, CLEANUP_TIMER_LOOP_MILLIS);\n    }\n  }\n\n  function scheduleCleanupOfReactionIfLeaked(ref) {\n    uncommittedReactionRefs.add(ref);\n    ensureCleanupTimerRunning();\n  }\n\n  function recordReactionAsCommitted(reactionRef) {\n    uncommittedReactionRefs.delete(reactionRef);\n  }\n  /**\n   * Run by the cleanup timer to dispose any outstanding reactions\n   */\n\n\n  function cleanUncommittedReactions() {\n    reactionCleanupHandle = undefined; // Loop through all the candidate leaked reactions; those older\n    // than CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS get tidied.\n\n    var now = Date.now();\n    uncommittedReactionRefs.forEach(function (ref) {\n      var tracking = ref.current;\n\n      if (tracking) {\n        if (now >= tracking.cleanAt) {\n          // It\'s time to tidy up this leaked reaction.\n          tracking.reaction.dispose();\n          ref.current = null;\n          uncommittedReactionRefs.delete(ref);\n        }\n      }\n    });\n\n    if (uncommittedReactionRefs.size > 0) {\n      // We\'ve just finished a round of cleanups but there are still\n      // some leak candidates outstanding.\n      ensureCleanupTimerRunning();\n    }\n  }\n\n  return {\n    addReactionToTrack: function addReactionToTrack(reactionTrackingRef, reaction,\n    /**\n     * On timer based implementation we don\'t really need this object,\n     * but we keep the same api\n     */\n    objectRetainedByReact) {\n      reactionTrackingRef.current = createTrackingData(reaction);\n      scheduleCleanupOfReactionIfLeaked(reactionTrackingRef);\n      return reactionTrackingRef.current;\n    },\n    recordReactionAsCommitted: recordReactionAsCommitted,\n    forceCleanupTimerToRunNowForTests: forceCleanupTimerToRunNowForTests,\n    resetCleanupScheduleForTests: resetCleanupScheduleForTests\n  };\n}\n;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/reactionCleanupTracking.js\n\n\n\n\nvar _a = FinalizationRegistryLocal ? createReactionCleanupTrackingUsingFinalizationRegister(FinalizationRegistryLocal) : createTimerBasedReactionCleanupTracking(),\n    addReactionToTrack = _a.addReactionToTrack,\n    recordReactionAsCommitted = _a.recordReactionAsCommitted,\n    resetCleanupScheduleForTests = _a.resetCleanupScheduleForTests,\n    forceCleanupTimerToRunNowForTests = _a.forceCleanupTimerToRunNowForTests;\n\n\n;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/staticRendering.js\nvar globalIsUsingStaticRendering = false;\nfunction staticRendering_enableStaticRendering(enable) {\n  globalIsUsingStaticRendering = enable;\n}\nfunction isUsingStaticRendering() {\n  return globalIsUsingStaticRendering;\n}\n;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/useObserver.js\nvar __read = undefined && undefined.__read || function (o, n) {\n  var m = typeof Symbol === "function" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i["return"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\n\n\n\n\n\n\nfunction observerComponentNameFor(baseComponentName) {\n  return "observer" + baseComponentName;\n}\n/**\n * We use class to make it easier to detect in heap snapshots by name\n */\n\n\nvar ObjectToBeRetainedByReact = function () {\n  function ObjectToBeRetainedByReact() {}\n\n  return ObjectToBeRetainedByReact;\n}();\n\nfunction objectToBeRetainedByReactFactory() {\n  return new ObjectToBeRetainedByReact();\n}\n\nfunction useObserver(fn, baseComponentName) {\n  if (baseComponentName === void 0) {\n    baseComponentName = "observed";\n  }\n\n  if (isUsingStaticRendering()) {\n    return fn();\n  }\n\n  var _a = __read(react.useState(objectToBeRetainedByReactFactory), 1),\n      objectRetainedByReact = _a[0]; // Force update, see #2982\n\n\n  var _b = __read(react.useState(), 2),\n      setState = _b[1];\n\n  var forceUpdate = function forceUpdate() {\n    return setState([]);\n  }; // StrictMode/ConcurrentMode/Suspense may mean that our component is\n  // rendered and abandoned multiple times, so we need to track leaked\n  // Reactions.\n\n\n  var reactionTrackingRef = react.useRef(null);\n\n  if (!reactionTrackingRef.current) {\n    // First render for this component (or first time since a previous\n    // reaction from an abandoned render was disposed).\n    var newReaction = new Reaction(observerComponentNameFor(baseComponentName), function () {\n      // Observable has changed, meaning we want to re-render\n      // BUT if we\'re a component that hasn\'t yet got to the useEffect()\n      // stage, we might be a component that _started_ to render, but\n      // got dropped, and we don\'t want to make state changes then.\n      // (It triggers warnings in StrictMode, for a start.)\n      if (trackingData_1.mounted) {\n        // We have reached useEffect(), so we\'re mounted, and can trigger an update\n        forceUpdate();\n      } else {\n        // We haven\'t yet reached useEffect(), so we\'ll need to trigger a re-render\n        // when (and if) useEffect() arrives.\n        trackingData_1.changedBeforeMount = true;\n      }\n    });\n    var trackingData_1 = addReactionToTrack(reactionTrackingRef, newReaction, objectRetainedByReact);\n  }\n\n  var reaction = reactionTrackingRef.current.reaction;\n  react.useDebugValue(reaction, printDebugValue);\n  react.useEffect(function () {\n    // Called on first mount only\n    recordReactionAsCommitted(reactionTrackingRef);\n\n    if (reactionTrackingRef.current) {\n      // Great. We\'ve already got our reaction from our render;\n      // all we need to do is to record that it\'s now mounted,\n      // to allow future observable changes to trigger re-renders\n      reactionTrackingRef.current.mounted = true; // Got a change before first mount, force an update\n\n      if (reactionTrackingRef.current.changedBeforeMount) {\n        reactionTrackingRef.current.changedBeforeMount = false;\n        forceUpdate();\n      }\n    } else {\n      // The reaction we set up in our render has been disposed.\n      // This can be due to bad timings of renderings, e.g. our\n      // component was paused for a _very_ long time, and our\n      // reaction got cleaned up\n      // Re-create the reaction\n      reactionTrackingRef.current = {\n        reaction: new Reaction(observerComponentNameFor(baseComponentName), function () {\n          // We\'ve definitely already been mounted at this point\n          forceUpdate();\n        }),\n        mounted: true,\n        changedBeforeMount: false,\n        cleanAt: Infinity\n      };\n      forceUpdate();\n    }\n\n    return function () {\n      reactionTrackingRef.current.reaction.dispose();\n      reactionTrackingRef.current = null;\n    };\n  }, []); // render the original component, but have the\n  // reaction track the observables, so that rendering\n  // can be invalidated (see above) once a dependency changes\n\n  var rendering;\n  var exception;\n  reaction.track(function () {\n    try {\n      rendering = fn();\n    } catch (e) {\n      exception = e;\n    }\n  });\n\n  if (exception) {\n    throw exception; // re-throw any exceptions caught during rendering\n  }\n\n  return rendering;\n}\n;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/observer.js\nvar __assign = undefined && undefined.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\n\n\n // n.b. base case is not used for actual typings or exported in the typing files\n\nfunction observer(baseComponent, options) {\n  // The working of observer is explained step by step in this talk: https://www.youtube.com/watch?v=cPF4iBedoF0&feature=youtu.be&t=1307\n  if (isUsingStaticRendering()) {\n    return baseComponent;\n  }\n\n  var realOptions = __assign({\n    forwardRef: false\n  }, options);\n\n  var baseComponentName = baseComponent.displayName || baseComponent.name;\n\n  var wrappedComponent = function wrappedComponent(props, ref) {\n    return useObserver(function () {\n      return baseComponent(props, ref);\n    }, baseComponentName);\n  };\n\n  wrappedComponent.displayName = baseComponentName; // memo; we are not interested in deep updates\n  // in props; we assume that if deep objects are changed,\n  // this is in observables, which would have been tracked anyway\n\n  var memoComponent;\n\n  if (realOptions.forwardRef) {\n    // we have to use forwardRef here because:\n    // 1. it cannot go before memo, only after it\n    // 2. forwardRef converts the function into an actual component, so we can\'t let the baseComponent do it\n    //    since it wouldn\'t be a callable function anymore\n    memoComponent = /*#__PURE__*/(0,react.memo)( /*#__PURE__*/(0,react.forwardRef)(wrappedComponent));\n  } else {\n    memoComponent = /*#__PURE__*/(0,react.memo)(wrappedComponent);\n  }\n\n  copyStaticProperties(baseComponent, memoComponent);\n  memoComponent.displayName = baseComponentName;\n  return memoComponent;\n} // based on https://github.com/mridgway/hoist-non-react-statics/blob/master/src/index.js\n\nvar hoistBlackList = {\n  $$typeof: true,\n  render: true,\n  compare: true,\n  type: true\n};\n\nfunction copyStaticProperties(base, target) {\n  Object.keys(base).forEach(function (key) {\n    if (!hoistBlackList[key]) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key));\n    }\n  });\n}\n;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/ObserverComponent.js\nfunction ObserverComponent_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { ObserverComponent_typeof = function _typeof(obj) { return typeof obj; }; } else { ObserverComponent_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return ObserverComponent_typeof(obj); }\n\n\n\nfunction ObserverComponent(_a) {\n  var children = _a.children,\n      render = _a.render;\n  var component = children || render;\n\n  if (typeof component !== "function") {\n    return null;\n  }\n\n  return useObserver(component);\n}\n\nif (false) {}\n\nObserverComponent.displayName = "Observer";\n\n\nfunction ObserverPropsCheck(props, key, componentName, location, propFullName) {\n  var extraKey = key === "children" ? "render" : "children";\n  var hasProp = typeof props[key] === "function";\n  var hasExtraProp = typeof props[extraKey] === "function";\n\n  if (hasProp && hasExtraProp) {\n    return new Error("MobX Observer: Do not use children and render in the same time in`" + componentName);\n  }\n\n  if (hasProp || hasExtraProp) {\n    return null;\n  }\n\n  return new Error("Invalid prop `" + propFullName + "` of type `" + ObserverComponent_typeof(props[key]) + "` supplied to" + " `" + componentName + "`, expected `function`.");\n}\n;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/useLocalObservable.js\n\n\nfunction useLocalObservable(initializer, annotations) {\n  return useState(function () {\n    return observable(initializer(), annotations, {\n      autoBind: true\n    });\n  })[0];\n}\n;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/useAsObservableSource.js\nvar useAsObservableSource_read = undefined && undefined.__read || function (o, n) {\n  var m = typeof Symbol === "function" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i["return"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\n\n\n\nfunction useAsObservableSource_useAsObservableSource(current) {\n  if (false) {}\n\n  var _a = useAsObservableSource_read(useState(function () {\n    return observable(current, {}, {\n      deep: false\n    });\n  }), 1),\n      res = _a[0];\n\n  runInAction(function () {\n    Object.assign(res, current);\n  });\n  return res;\n}\n;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/useLocalStore.js\n\n\n\n\nfunction useLocalStore_useLocalStore(initializer, current) {\n  if (false) {}\n  var source = current && useAsObservableSource(current);\n  return useState(function () {\n    return observable(initializer(source), undefined, {\n      autoBind: true\n    });\n  })[0];\n}\n;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/index.js\n\n\n\n\n\n\nobserverBatching(react_dom.unstable_batchedUpdates);\n\n\n\n\n\n\n\nfunction es_useObserver(fn, baseComponentName) {\n  if (baseComponentName === void 0) {\n    baseComponentName = "observed";\n  }\n\n  if (false) {}\n\n  return useObserverOriginal(fn, baseComponentName);\n}\n\nfunction useStaticRendering(enable) {\n  if (false) {}\n\n  enableStaticRendering(enable);\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js\n\nfunction inheritsLoose_inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  _setPrototypeOf(subClass, superClass);\n}\n// EXTERNAL MODULE: ./node_modules/prop-types/index.js\nvar prop_types = __webpack_require__(74);\nvar prop_types_default = /*#__PURE__*/__webpack_require__.n(prop_types);\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js\nfunction extends_extends() {\n  extends_extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return extends_extends.apply(this, arguments);\n}\n;// CONCATENATED MODULE: ./node_modules/resolve-pathname/esm/resolve-pathname.js\nfunction isAbsolute(pathname) {\n  return pathname.charAt(0) === \'/\';\n} // About 1.5x faster than the two-arg version of Array#splice()\n\n\nfunction spliceOne(list, index) {\n  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {\n    list[i] = list[k];\n  }\n\n  list.pop();\n} // This implementation is based heavily on node\'s url.parse\n\n\nfunction resolvePathname(to, from) {\n  if (from === undefined) from = \'\';\n  var toParts = to && to.split(\'/\') || [];\n  var fromParts = from && from.split(\'/\') || [];\n  var isToAbs = to && isAbsolute(to);\n  var isFromAbs = from && isAbsolute(from);\n  var mustEndAbs = isToAbs || isFromAbs;\n\n  if (to && isAbsolute(to)) {\n    // to is absolute\n    fromParts = toParts;\n  } else if (toParts.length) {\n    // to is relative, drop the filename\n    fromParts.pop();\n    fromParts = fromParts.concat(toParts);\n  }\n\n  if (!fromParts.length) return \'/\';\n  var hasTrailingSlash;\n\n  if (fromParts.length) {\n    var last = fromParts[fromParts.length - 1];\n    hasTrailingSlash = last === \'.\' || last === \'..\' || last === \'\';\n  } else {\n    hasTrailingSlash = false;\n  }\n\n  var up = 0;\n\n  for (var i = fromParts.length; i >= 0; i--) {\n    var part = fromParts[i];\n\n    if (part === \'.\') {\n      spliceOne(fromParts, i);\n    } else if (part === \'..\') {\n      spliceOne(fromParts, i);\n      up++;\n    } else if (up) {\n      spliceOne(fromParts, i);\n      up--;\n    }\n  }\n\n  if (!mustEndAbs) for (; up--; up) {\n    fromParts.unshift(\'..\');\n  }\n  if (mustEndAbs && fromParts[0] !== \'\' && (!fromParts[0] || !isAbsolute(fromParts[0]))) fromParts.unshift(\'\');\n  var result = fromParts.join(\'/\');\n  if (hasTrailingSlash && result.substr(-1) !== \'/\') result += \'/\';\n  return result;\n}\n\n/* harmony default export */ const resolve_pathname = (resolvePathname);\n;// CONCATENATED MODULE: ./node_modules/value-equal/esm/value-equal.js\nfunction value_equal_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { value_equal_typeof = function _typeof(obj) { return typeof obj; }; } else { value_equal_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return value_equal_typeof(obj); }\n\nfunction value_equal_valueOf(obj) {\n  return obj.valueOf ? obj.valueOf() : Object.prototype.valueOf.call(obj);\n}\n\nfunction valueEqual(a, b) {\n  // Test for strict equality first.\n  if (a === b) return true; // Otherwise, if either of them == null they are not equal.\n\n  if (a == null || b == null) return false;\n\n  if (Array.isArray(a)) {\n    return Array.isArray(b) && a.length === b.length && a.every(function (item, index) {\n      return valueEqual(item, b[index]);\n    });\n  }\n\n  if (value_equal_typeof(a) === \'object\' || value_equal_typeof(b) === \'object\') {\n    var aValue = value_equal_valueOf(a);\n    var bValue = value_equal_valueOf(b);\n    if (aValue !== a || bValue !== b) return valueEqual(aValue, bValue);\n    return Object.keys(Object.assign({}, a, b)).every(function (key) {\n      return valueEqual(a[key], b[key]);\n    });\n  }\n\n  return false;\n}\n\n/* harmony default export */ const value_equal = (valueEqual);\n;// CONCATENATED MODULE: ./node_modules/tiny-invariant/dist/tiny-invariant.esm.js\nvar isProduction = "production" === \'production\';\nvar prefix = \'Invariant failed\';\n\nfunction tiny_invariant_esm_invariant(condition, message) {\n  if (condition) {\n    return;\n  }\n\n  if (isProduction) {\n    throw new Error(prefix);\n  }\n\n  throw new Error(prefix + ": " + (message || \'\'));\n}\n\n/* harmony default export */ const tiny_invariant_esm = (tiny_invariant_esm_invariant);\n;// CONCATENATED MODULE: ./node_modules/history/esm/history.js\nfunction history_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { history_typeof = function _typeof(obj) { return typeof obj; }; } else { history_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return history_typeof(obj); }\n\n\n\n\n\n\n\nfunction addLeadingSlash(path) {\n  return path.charAt(0) === \'/\' ? path : \'/\' + path;\n}\n\nfunction stripLeadingSlash(path) {\n  return path.charAt(0) === \'/\' ? path.substr(1) : path;\n}\n\nfunction hasBasename(path, prefix) {\n  return path.toLowerCase().indexOf(prefix.toLowerCase()) === 0 && \'/?#\'.indexOf(path.charAt(prefix.length)) !== -1;\n}\n\nfunction stripBasename(path, prefix) {\n  return hasBasename(path, prefix) ? path.substr(prefix.length) : path;\n}\n\nfunction stripTrailingSlash(path) {\n  return path.charAt(path.length - 1) === \'/\' ? path.slice(0, -1) : path;\n}\n\nfunction parsePath(path) {\n  var pathname = path || \'/\';\n  var search = \'\';\n  var hash = \'\';\n  var hashIndex = pathname.indexOf(\'#\');\n\n  if (hashIndex !== -1) {\n    hash = pathname.substr(hashIndex);\n    pathname = pathname.substr(0, hashIndex);\n  }\n\n  var searchIndex = pathname.indexOf(\'?\');\n\n  if (searchIndex !== -1) {\n    search = pathname.substr(searchIndex);\n    pathname = pathname.substr(0, searchIndex);\n  }\n\n  return {\n    pathname: pathname,\n    search: search === \'?\' ? \'\' : search,\n    hash: hash === \'#\' ? \'\' : hash\n  };\n}\n\nfunction createPath(location) {\n  var pathname = location.pathname,\n      search = location.search,\n      hash = location.hash;\n  var path = pathname || \'/\';\n  if (search && search !== \'?\') path += search.charAt(0) === \'?\' ? search : "?" + search;\n  if (hash && hash !== \'#\') path += hash.charAt(0) === \'#\' ? hash : "#" + hash;\n  return path;\n}\n\nfunction createLocation(path, state, key, currentLocation) {\n  var location;\n\n  if (typeof path === \'string\') {\n    // Two-arg form: push(path, state)\n    location = parsePath(path);\n    location.state = state;\n  } else {\n    // One-arg form: push(location)\n    location = extends_extends({}, path);\n    if (location.pathname === undefined) location.pathname = \'\';\n\n    if (location.search) {\n      if (location.search.charAt(0) !== \'?\') location.search = \'?\' + location.search;\n    } else {\n      location.search = \'\';\n    }\n\n    if (location.hash) {\n      if (location.hash.charAt(0) !== \'#\') location.hash = \'#\' + location.hash;\n    } else {\n      location.hash = \'\';\n    }\n\n    if (state !== undefined && location.state === undefined) location.state = state;\n  }\n\n  try {\n    location.pathname = decodeURI(location.pathname);\n  } catch (e) {\n    if (e instanceof URIError) {\n      throw new URIError(\'Pathname "\' + location.pathname + \'" could not be decoded. \' + \'This is likely caused by an invalid percent-encoding.\');\n    } else {\n      throw e;\n    }\n  }\n\n  if (key) location.key = key;\n\n  if (currentLocation) {\n    // Resolve incomplete/relative pathname relative to current location.\n    if (!location.pathname) {\n      location.pathname = currentLocation.pathname;\n    } else if (location.pathname.charAt(0) !== \'/\') {\n      location.pathname = resolve_pathname(location.pathname, currentLocation.pathname);\n    }\n  } else {\n    // When there is no prior location and pathname is empty, set it to /\n    if (!location.pathname) {\n      location.pathname = \'/\';\n    }\n  }\n\n  return location;\n}\n\nfunction locationsAreEqual(a, b) {\n  return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash && a.key === b.key && value_equal(a.state, b.state);\n}\n\nfunction createTransitionManager() {\n  var prompt = null;\n\n  function setPrompt(nextPrompt) {\n     false ? 0 : void 0;\n    prompt = nextPrompt;\n    return function () {\n      if (prompt === nextPrompt) prompt = null;\n    };\n  }\n\n  function confirmTransitionTo(location, action, getUserConfirmation, callback) {\n    // TODO: If another transition starts while we\'re still confirming\n    // the previous one, we may end up in a weird state. Figure out the\n    // best way to handle this.\n    if (prompt != null) {\n      var result = typeof prompt === \'function\' ? prompt(location, action) : prompt;\n\n      if (typeof result === \'string\') {\n        if (typeof getUserConfirmation === \'function\') {\n          getUserConfirmation(result, callback);\n        } else {\n           false ? 0 : void 0;\n          callback(true);\n        }\n      } else {\n        // Return false from a transition hook to cancel the transition.\n        callback(result !== false);\n      }\n    } else {\n      callback(true);\n    }\n  }\n\n  var listeners = [];\n\n  function appendListener(fn) {\n    var isActive = true;\n\n    function listener() {\n      if (isActive) fn.apply(void 0, arguments);\n    }\n\n    listeners.push(listener);\n    return function () {\n      isActive = false;\n      listeners = listeners.filter(function (item) {\n        return item !== listener;\n      });\n    };\n  }\n\n  function notifyListeners() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    listeners.forEach(function (listener) {\n      return listener.apply(void 0, args);\n    });\n  }\n\n  return {\n    setPrompt: setPrompt,\n    confirmTransitionTo: confirmTransitionTo,\n    appendListener: appendListener,\n    notifyListeners: notifyListeners\n  };\n}\n\nvar canUseDOM = !!(typeof window !== \'undefined\' && window.document && window.document.createElement);\n\nfunction getConfirmation(message, callback) {\n  callback(window.confirm(message)); // eslint-disable-line no-alert\n}\n/**\n * Returns true if the HTML5 history API is supported. Taken from Modernizr.\n *\n * https://github.com/Modernizr/Modernizr/blob/master/LICENSE\n * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js\n * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586\n */\n\n\nfunction supportsHistory() {\n  var ua = window.navigator.userAgent;\n  if ((ua.indexOf(\'Android 2.\') !== -1 || ua.indexOf(\'Android 4.0\') !== -1) && ua.indexOf(\'Mobile Safari\') !== -1 && ua.indexOf(\'Chrome\') === -1 && ua.indexOf(\'Windows Phone\') === -1) return false;\n  return window.history && \'pushState\' in window.history;\n}\n/**\n * Returns true if browser fires popstate on hash change.\n * IE10 and IE11 do not.\n */\n\n\nfunction supportsPopStateOnHashChange() {\n  return window.navigator.userAgent.indexOf(\'Trident\') === -1;\n}\n/**\n * Returns false if using go(n) with hash history causes a full page reload.\n */\n\n\nfunction supportsGoWithoutReloadUsingHash() {\n  return window.navigator.userAgent.indexOf(\'Firefox\') === -1;\n}\n/**\n * Returns true if a given popstate event is an extraneous WebKit event.\n * Accounts for the fact that Chrome on iOS fires real popstate events\n * containing undefined state when pressing the back button.\n */\n\n\nfunction isExtraneousPopstateEvent(event) {\n  return event.state === undefined && navigator.userAgent.indexOf(\'CriOS\') === -1;\n}\n\nvar PopStateEvent = \'popstate\';\nvar HashChangeEvent = \'hashchange\';\n\nfunction getHistoryState() {\n  try {\n    return window.history.state || {};\n  } catch (e) {\n    // IE 11 sometimes throws when accessing window.history.state\n    // See https://github.com/ReactTraining/history/pull/289\n    return {};\n  }\n}\n/**\n * Creates a history object that uses the HTML5 history API including\n * pushState, replaceState, and the popstate event.\n */\n\n\nfunction createBrowserHistory(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  !canUseDOM ?  false ? 0 : tiny_invariant_esm(false) : void 0;\n  var globalHistory = window.history;\n  var canUseHistory = supportsHistory();\n  var needsHashChangeListener = !supportsPopStateOnHashChange();\n  var _props = props,\n      _props$forceRefresh = _props.forceRefresh,\n      forceRefresh = _props$forceRefresh === void 0 ? false : _props$forceRefresh,\n      _props$getUserConfirm = _props.getUserConfirmation,\n      getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm,\n      _props$keyLength = _props.keyLength,\n      keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;\n  var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : \'\';\n\n  function getDOMLocation(historyState) {\n    var _ref = historyState || {},\n        key = _ref.key,\n        state = _ref.state;\n\n    var _window$location = window.location,\n        pathname = _window$location.pathname,\n        search = _window$location.search,\n        hash = _window$location.hash;\n    var path = pathname + search + hash;\n     false ? 0 : void 0;\n    if (basename) path = stripBasename(path, basename);\n    return createLocation(path, state, key);\n  }\n\n  function createKey() {\n    return Math.random().toString(36).substr(2, keyLength);\n  }\n\n  var transitionManager = createTransitionManager();\n\n  function setState(nextState) {\n    extends_extends(history, nextState);\n\n    history.length = globalHistory.length;\n    transitionManager.notifyListeners(history.location, history.action);\n  }\n\n  function handlePopState(event) {\n    // Ignore extraneous popstate events in WebKit.\n    if (isExtraneousPopstateEvent(event)) return;\n    handlePop(getDOMLocation(event.state));\n  }\n\n  function handleHashChange() {\n    handlePop(getDOMLocation(getHistoryState()));\n  }\n\n  var forceNextPop = false;\n\n  function handlePop(location) {\n    if (forceNextPop) {\n      forceNextPop = false;\n      setState();\n    } else {\n      var action = \'POP\';\n      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n        if (ok) {\n          setState({\n            action: action,\n            location: location\n          });\n        } else {\n          revertPop(location);\n        }\n      });\n    }\n  }\n\n  function revertPop(fromLocation) {\n    var toLocation = history.location; // TODO: We could probably make this more reliable by\n    // keeping a list of keys we\'ve seen in sessionStorage.\n    // Instead, we just default to 0 for keys we don\'t know.\n\n    var toIndex = allKeys.indexOf(toLocation.key);\n    if (toIndex === -1) toIndex = 0;\n    var fromIndex = allKeys.indexOf(fromLocation.key);\n    if (fromIndex === -1) fromIndex = 0;\n    var delta = toIndex - fromIndex;\n\n    if (delta) {\n      forceNextPop = true;\n      go(delta);\n    }\n  }\n\n  var initialLocation = getDOMLocation(getHistoryState());\n  var allKeys = [initialLocation.key]; // Public interface\n\n  function createHref(location) {\n    return basename + createPath(location);\n  }\n\n  function push(path, state) {\n     false ? 0 : void 0;\n    var action = \'PUSH\';\n    var location = createLocation(path, state, createKey(), history.location);\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (!ok) return;\n      var href = createHref(location);\n      var key = location.key,\n          state = location.state;\n\n      if (canUseHistory) {\n        globalHistory.pushState({\n          key: key,\n          state: state\n        }, null, href);\n\n        if (forceRefresh) {\n          window.location.href = href;\n        } else {\n          var prevIndex = allKeys.indexOf(history.location.key);\n          var nextKeys = allKeys.slice(0, prevIndex + 1);\n          nextKeys.push(location.key);\n          allKeys = nextKeys;\n          setState({\n            action: action,\n            location: location\n          });\n        }\n      } else {\n         false ? 0 : void 0;\n        window.location.href = href;\n      }\n    });\n  }\n\n  function replace(path, state) {\n     false ? 0 : void 0;\n    var action = \'REPLACE\';\n    var location = createLocation(path, state, createKey(), history.location);\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (!ok) return;\n      var href = createHref(location);\n      var key = location.key,\n          state = location.state;\n\n      if (canUseHistory) {\n        globalHistory.replaceState({\n          key: key,\n          state: state\n        }, null, href);\n\n        if (forceRefresh) {\n          window.location.replace(href);\n        } else {\n          var prevIndex = allKeys.indexOf(history.location.key);\n          if (prevIndex !== -1) allKeys[prevIndex] = location.key;\n          setState({\n            action: action,\n            location: location\n          });\n        }\n      } else {\n         false ? 0 : void 0;\n        window.location.replace(href);\n      }\n    });\n  }\n\n  function go(n) {\n    globalHistory.go(n);\n  }\n\n  function goBack() {\n    go(-1);\n  }\n\n  function goForward() {\n    go(1);\n  }\n\n  var listenerCount = 0;\n\n  function checkDOMListeners(delta) {\n    listenerCount += delta;\n\n    if (listenerCount === 1 && delta === 1) {\n      window.addEventListener(PopStateEvent, handlePopState);\n      if (needsHashChangeListener) window.addEventListener(HashChangeEvent, handleHashChange);\n    } else if (listenerCount === 0) {\n      window.removeEventListener(PopStateEvent, handlePopState);\n      if (needsHashChangeListener) window.removeEventListener(HashChangeEvent, handleHashChange);\n    }\n  }\n\n  var isBlocked = false;\n\n  function block(prompt) {\n    if (prompt === void 0) {\n      prompt = false;\n    }\n\n    var unblock = transitionManager.setPrompt(prompt);\n\n    if (!isBlocked) {\n      checkDOMListeners(1);\n      isBlocked = true;\n    }\n\n    return function () {\n      if (isBlocked) {\n        isBlocked = false;\n        checkDOMListeners(-1);\n      }\n\n      return unblock();\n    };\n  }\n\n  function listen(listener) {\n    var unlisten = transitionManager.appendListener(listener);\n    checkDOMListeners(1);\n    return function () {\n      checkDOMListeners(-1);\n      unlisten();\n    };\n  }\n\n  var history = {\n    length: globalHistory.length,\n    action: \'POP\',\n    location: initialLocation,\n    createHref: createHref,\n    push: push,\n    replace: replace,\n    go: go,\n    goBack: goBack,\n    goForward: goForward,\n    block: block,\n    listen: listen\n  };\n  return history;\n}\n\nvar HashChangeEvent$1 = \'hashchange\';\nvar HashPathCoders = {\n  hashbang: {\n    encodePath: function encodePath(path) {\n      return path.charAt(0) === \'!\' ? path : \'!/\' + stripLeadingSlash(path);\n    },\n    decodePath: function decodePath(path) {\n      return path.charAt(0) === \'!\' ? path.substr(1) : path;\n    }\n  },\n  noslash: {\n    encodePath: stripLeadingSlash,\n    decodePath: addLeadingSlash\n  },\n  slash: {\n    encodePath: addLeadingSlash,\n    decodePath: addLeadingSlash\n  }\n};\n\nfunction stripHash(url) {\n  var hashIndex = url.indexOf(\'#\');\n  return hashIndex === -1 ? url : url.slice(0, hashIndex);\n}\n\nfunction getHashPath() {\n  // We can\'t use window.location.hash here because it\'s not\n  // consistent across browsers - Firefox will pre-decode it!\n  var href = window.location.href;\n  var hashIndex = href.indexOf(\'#\');\n  return hashIndex === -1 ? \'\' : href.substring(hashIndex + 1);\n}\n\nfunction pushHashPath(path) {\n  window.location.hash = path;\n}\n\nfunction replaceHashPath(path) {\n  window.location.replace(stripHash(window.location.href) + \'#\' + path);\n}\n\nfunction createHashHistory(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  !canUseDOM ?  false ? 0 : tiny_invariant_esm(false) : void 0;\n  var globalHistory = window.history;\n  var canGoWithoutReload = supportsGoWithoutReloadUsingHash();\n  var _props = props,\n      _props$getUserConfirm = _props.getUserConfirmation,\n      getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm,\n      _props$hashType = _props.hashType,\n      hashType = _props$hashType === void 0 ? \'slash\' : _props$hashType;\n  var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : \'\';\n  var _HashPathCoders$hashT = HashPathCoders[hashType],\n      encodePath = _HashPathCoders$hashT.encodePath,\n      decodePath = _HashPathCoders$hashT.decodePath;\n\n  function getDOMLocation() {\n    var path = decodePath(getHashPath());\n     false ? 0 : void 0;\n    if (basename) path = stripBasename(path, basename);\n    return createLocation(path);\n  }\n\n  var transitionManager = createTransitionManager();\n\n  function setState(nextState) {\n    extends_extends(history, nextState);\n\n    history.length = globalHistory.length;\n    transitionManager.notifyListeners(history.location, history.action);\n  }\n\n  var forceNextPop = false;\n  var ignorePath = null;\n\n  function locationsAreEqual$$1(a, b) {\n    return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash;\n  }\n\n  function handleHashChange() {\n    var path = getHashPath();\n    var encodedPath = encodePath(path);\n\n    if (path !== encodedPath) {\n      // Ensure we always have a properly-encoded hash.\n      replaceHashPath(encodedPath);\n    } else {\n      var location = getDOMLocation();\n      var prevLocation = history.location;\n      if (!forceNextPop && locationsAreEqual$$1(prevLocation, location)) return; // A hashchange doesn\'t always == location change.\n\n      if (ignorePath === createPath(location)) return; // Ignore this change; we already setState in push/replace.\n\n      ignorePath = null;\n      handlePop(location);\n    }\n  }\n\n  function handlePop(location) {\n    if (forceNextPop) {\n      forceNextPop = false;\n      setState();\n    } else {\n      var action = \'POP\';\n      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n        if (ok) {\n          setState({\n            action: action,\n            location: location\n          });\n        } else {\n          revertPop(location);\n        }\n      });\n    }\n  }\n\n  function revertPop(fromLocation) {\n    var toLocation = history.location; // TODO: We could probably make this more reliable by\n    // keeping a list of paths we\'ve seen in sessionStorage.\n    // Instead, we just default to 0 for paths we don\'t know.\n\n    var toIndex = allPaths.lastIndexOf(createPath(toLocation));\n    if (toIndex === -1) toIndex = 0;\n    var fromIndex = allPaths.lastIndexOf(createPath(fromLocation));\n    if (fromIndex === -1) fromIndex = 0;\n    var delta = toIndex - fromIndex;\n\n    if (delta) {\n      forceNextPop = true;\n      go(delta);\n    }\n  } // Ensure the hash is encoded properly before doing anything else.\n\n\n  var path = getHashPath();\n  var encodedPath = encodePath(path);\n  if (path !== encodedPath) replaceHashPath(encodedPath);\n  var initialLocation = getDOMLocation();\n  var allPaths = [createPath(initialLocation)]; // Public interface\n\n  function createHref(location) {\n    var baseTag = document.querySelector(\'base\');\n    var href = \'\';\n\n    if (baseTag && baseTag.getAttribute(\'href\')) {\n      href = stripHash(window.location.href);\n    }\n\n    return href + \'#\' + encodePath(basename + createPath(location));\n  }\n\n  function push(path, state) {\n     false ? 0 : void 0;\n    var action = \'PUSH\';\n    var location = createLocation(path, undefined, undefined, history.location);\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (!ok) return;\n      var path = createPath(location);\n      var encodedPath = encodePath(basename + path);\n      var hashChanged = getHashPath() !== encodedPath;\n\n      if (hashChanged) {\n        // We cannot tell if a hashchange was caused by a PUSH, so we\'d\n        // rather setState here and ignore the hashchange. The caveat here\n        // is that other hash histories in the page will consider it a POP.\n        ignorePath = path;\n        pushHashPath(encodedPath);\n        var prevIndex = allPaths.lastIndexOf(createPath(history.location));\n        var nextPaths = allPaths.slice(0, prevIndex + 1);\n        nextPaths.push(path);\n        allPaths = nextPaths;\n        setState({\n          action: action,\n          location: location\n        });\n      } else {\n         false ? 0 : void 0;\n        setState();\n      }\n    });\n  }\n\n  function replace(path, state) {\n     false ? 0 : void 0;\n    var action = \'REPLACE\';\n    var location = createLocation(path, undefined, undefined, history.location);\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (!ok) return;\n      var path = createPath(location);\n      var encodedPath = encodePath(basename + path);\n      var hashChanged = getHashPath() !== encodedPath;\n\n      if (hashChanged) {\n        // We cannot tell if a hashchange was caused by a REPLACE, so we\'d\n        // rather setState here and ignore the hashchange. The caveat here\n        // is that other hash histories in the page will consider it a POP.\n        ignorePath = path;\n        replaceHashPath(encodedPath);\n      }\n\n      var prevIndex = allPaths.indexOf(createPath(history.location));\n      if (prevIndex !== -1) allPaths[prevIndex] = path;\n      setState({\n        action: action,\n        location: location\n      });\n    });\n  }\n\n  function go(n) {\n     false ? 0 : void 0;\n    globalHistory.go(n);\n  }\n\n  function goBack() {\n    go(-1);\n  }\n\n  function goForward() {\n    go(1);\n  }\n\n  var listenerCount = 0;\n\n  function checkDOMListeners(delta) {\n    listenerCount += delta;\n\n    if (listenerCount === 1 && delta === 1) {\n      window.addEventListener(HashChangeEvent$1, handleHashChange);\n    } else if (listenerCount === 0) {\n      window.removeEventListener(HashChangeEvent$1, handleHashChange);\n    }\n  }\n\n  var isBlocked = false;\n\n  function block(prompt) {\n    if (prompt === void 0) {\n      prompt = false;\n    }\n\n    var unblock = transitionManager.setPrompt(prompt);\n\n    if (!isBlocked) {\n      checkDOMListeners(1);\n      isBlocked = true;\n    }\n\n    return function () {\n      if (isBlocked) {\n        isBlocked = false;\n        checkDOMListeners(-1);\n      }\n\n      return unblock();\n    };\n  }\n\n  function listen(listener) {\n    var unlisten = transitionManager.appendListener(listener);\n    checkDOMListeners(1);\n    return function () {\n      checkDOMListeners(-1);\n      unlisten();\n    };\n  }\n\n  var history = {\n    length: globalHistory.length,\n    action: \'POP\',\n    location: initialLocation,\n    createHref: createHref,\n    push: push,\n    replace: replace,\n    go: go,\n    goBack: goBack,\n    goForward: goForward,\n    block: block,\n    listen: listen\n  };\n  return history;\n}\n\nfunction clamp(n, lowerBound, upperBound) {\n  return Math.min(Math.max(n, lowerBound), upperBound);\n}\n/**\n * Creates a history object that stores locations in memory.\n */\n\n\nfunction createMemoryHistory(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var _props = props,\n      getUserConfirmation = _props.getUserConfirmation,\n      _props$initialEntries = _props.initialEntries,\n      initialEntries = _props$initialEntries === void 0 ? [\'/\'] : _props$initialEntries,\n      _props$initialIndex = _props.initialIndex,\n      initialIndex = _props$initialIndex === void 0 ? 0 : _props$initialIndex,\n      _props$keyLength = _props.keyLength,\n      keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;\n  var transitionManager = createTransitionManager();\n\n  function setState(nextState) {\n    extends_extends(history, nextState);\n\n    history.length = history.entries.length;\n    transitionManager.notifyListeners(history.location, history.action);\n  }\n\n  function createKey() {\n    return Math.random().toString(36).substr(2, keyLength);\n  }\n\n  var index = clamp(initialIndex, 0, initialEntries.length - 1);\n  var entries = initialEntries.map(function (entry) {\n    return typeof entry === \'string\' ? createLocation(entry, undefined, createKey()) : createLocation(entry, undefined, entry.key || createKey());\n  }); // Public interface\n\n  var createHref = createPath;\n\n  function push(path, state) {\n     false ? 0 : void 0;\n    var action = \'PUSH\';\n    var location = createLocation(path, state, createKey(), history.location);\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (!ok) return;\n      var prevIndex = history.index;\n      var nextIndex = prevIndex + 1;\n      var nextEntries = history.entries.slice(0);\n\n      if (nextEntries.length > nextIndex) {\n        nextEntries.splice(nextIndex, nextEntries.length - nextIndex, location);\n      } else {\n        nextEntries.push(location);\n      }\n\n      setState({\n        action: action,\n        location: location,\n        index: nextIndex,\n        entries: nextEntries\n      });\n    });\n  }\n\n  function replace(path, state) {\n     false ? 0 : void 0;\n    var action = \'REPLACE\';\n    var location = createLocation(path, state, createKey(), history.location);\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (!ok) return;\n      history.entries[history.index] = location;\n      setState({\n        action: action,\n        location: location\n      });\n    });\n  }\n\n  function go(n) {\n    var nextIndex = clamp(history.index + n, 0, history.entries.length - 1);\n    var action = \'POP\';\n    var location = history.entries[nextIndex];\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (ok) {\n        setState({\n          action: action,\n          location: location,\n          index: nextIndex\n        });\n      } else {\n        // Mimic the behavior of DOM histories by\n        // causing a render after a cancelled POP.\n        setState();\n      }\n    });\n  }\n\n  function goBack() {\n    go(-1);\n  }\n\n  function goForward() {\n    go(1);\n  }\n\n  function canGo(n) {\n    var nextIndex = history.index + n;\n    return nextIndex >= 0 && nextIndex < history.entries.length;\n  }\n\n  function block(prompt) {\n    if (prompt === void 0) {\n      prompt = false;\n    }\n\n    return transitionManager.setPrompt(prompt);\n  }\n\n  function listen(listener) {\n    return transitionManager.appendListener(listener);\n  }\n\n  var history = {\n    length: entries.length,\n    action: \'POP\',\n    location: entries[index],\n    index: index,\n    entries: entries,\n    createHref: createHref,\n    push: push,\n    replace: replace,\n    go: go,\n    goBack: goBack,\n    goForward: goForward,\n    canGo: canGo,\n    block: block,\n    listen: listen\n  };\n  return history;\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/mini-create-react-context/dist/esm/index.js\n\n\n\n\nvar MAX_SIGNED_31_BIT_INT = 1073741823;\nvar commonjsGlobal = typeof globalThis !== \'undefined\' ? globalThis : typeof window !== \'undefined\' ? window : typeof __webpack_require__.g !== \'undefined\' ? __webpack_require__.g : {};\n\nfunction getUniqueId() {\n  var key = \'__global_unique_id__\';\n  return commonjsGlobal[key] = (commonjsGlobal[key] || 0) + 1;\n}\n\nfunction objectIs(x, y) {\n  if (x === y) {\n    return x !== 0 || 1 / x === 1 / y;\n  } else {\n    return x !== x && y !== y;\n  }\n}\n\nfunction createEventEmitter(value) {\n  var handlers = [];\n  return {\n    on: function on(handler) {\n      handlers.push(handler);\n    },\n    off: function off(handler) {\n      handlers = handlers.filter(function (h) {\n        return h !== handler;\n      });\n    },\n    get: function get() {\n      return value;\n    },\n    set: function set(newValue, changedBits) {\n      value = newValue;\n      handlers.forEach(function (handler) {\n        return handler(value, changedBits);\n      });\n    }\n  };\n}\n\nfunction onlyChild(children) {\n  return Array.isArray(children) ? children[0] : children;\n}\n\nfunction createReactContext(defaultValue, calculateChangedBits) {\n  var _Provider$childContex, _Consumer$contextType;\n\n  var contextProp = \'__create-react-context-\' + getUniqueId() + \'__\';\n\n  var Provider = /*#__PURE__*/function (_Component) {\n    inheritsLoose_inheritsLoose(Provider, _Component);\n\n    function Provider() {\n      var _this;\n\n      _this = _Component.apply(this, arguments) || this;\n      _this.emitter = createEventEmitter(_this.props.value);\n      return _this;\n    }\n\n    var _proto = Provider.prototype;\n\n    _proto.getChildContext = function getChildContext() {\n      var _ref;\n\n      return _ref = {}, _ref[contextProp] = this.emitter, _ref;\n    };\n\n    _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n      if (this.props.value !== nextProps.value) {\n        var oldValue = this.props.value;\n        var newValue = nextProps.value;\n        var changedBits;\n\n        if (objectIs(oldValue, newValue)) {\n          changedBits = 0;\n        } else {\n          changedBits = typeof calculateChangedBits === \'function\' ? calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;\n\n          if (false) {}\n\n          changedBits |= 0;\n\n          if (changedBits !== 0) {\n            this.emitter.set(nextProps.value, changedBits);\n          }\n        }\n      }\n    };\n\n    _proto.render = function render() {\n      return this.props.children;\n    };\n\n    return Provider;\n  }(react.Component);\n\n  Provider.childContextTypes = (_Provider$childContex = {}, _Provider$childContex[contextProp] = (prop_types_default()).object.isRequired, _Provider$childContex);\n\n  var Consumer = /*#__PURE__*/function (_Component2) {\n    inheritsLoose_inheritsLoose(Consumer, _Component2);\n\n    function Consumer() {\n      var _this2;\n\n      _this2 = _Component2.apply(this, arguments) || this;\n      _this2.state = {\n        value: _this2.getValue()\n      };\n\n      _this2.onUpdate = function (newValue, changedBits) {\n        var observedBits = _this2.observedBits | 0;\n\n        if ((observedBits & changedBits) !== 0) {\n          _this2.setState({\n            value: _this2.getValue()\n          });\n        }\n      };\n\n      return _this2;\n    }\n\n    var _proto2 = Consumer.prototype;\n\n    _proto2.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n      var observedBits = nextProps.observedBits;\n      this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;\n    };\n\n    _proto2.componentDidMount = function componentDidMount() {\n      if (this.context[contextProp]) {\n        this.context[contextProp].on(this.onUpdate);\n      }\n\n      var observedBits = this.props.observedBits;\n      this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;\n    };\n\n    _proto2.componentWillUnmount = function componentWillUnmount() {\n      if (this.context[contextProp]) {\n        this.context[contextProp].off(this.onUpdate);\n      }\n    };\n\n    _proto2.getValue = function getValue() {\n      if (this.context[contextProp]) {\n        return this.context[contextProp].get();\n      } else {\n        return defaultValue;\n      }\n    };\n\n    _proto2.render = function render() {\n      return onlyChild(this.props.children)(this.state.value);\n    };\n\n    return Consumer;\n  }(react.Component);\n\n  Consumer.contextTypes = (_Consumer$contextType = {}, _Consumer$contextType[contextProp] = (prop_types_default()).object, _Consumer$contextType);\n  return {\n    Provider: Provider,\n    Consumer: Consumer\n  };\n}\n\nvar index = react.createContext || createReactContext;\n/* harmony default export */ const esm = (index);\n// EXTERNAL MODULE: ./node_modules/react-router/node_modules/path-to-regexp/index.js\nvar path_to_regexp = __webpack_require__(540);\nvar path_to_regexp_default = /*#__PURE__*/__webpack_require__.n(path_to_regexp);\n// EXTERNAL MODULE: ./node_modules/react-is/index.js\nvar react_is = __webpack_require__(972);\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js\nfunction objectWithoutPropertiesLoose_objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n// EXTERNAL MODULE: ./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js\nvar hoist_non_react_statics_cjs = __webpack_require__(773);\n;// CONCATENATED MODULE: ./node_modules/react-router/esm/react-router.js\n\n\n\n\n\n\n\n\n\n\n\n // TODO: Replace with React.createContext once we can assume React 16+\n\nvar createNamedContext = function createNamedContext(name) {\n  var context = esm();\n  context.displayName = name;\n  return context;\n};\n\nvar historyContext = /*#__PURE__*/createNamedContext("Router-History");\nvar context = /*#__PURE__*/createNamedContext("Router");\n/**\n * The public API for putting history on context.\n */\n\nvar Router = /*#__PURE__*/function (_React$Component) {\n  inheritsLoose_inheritsLoose(Router, _React$Component);\n\n  Router.computeRootMatch = function computeRootMatch(pathname) {\n    return {\n      path: "/",\n      url: "/",\n      params: {},\n      isExact: pathname === "/"\n    };\n  };\n\n  function Router(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.state = {\n      location: props.history.location\n    }; // This is a bit of a hack. We have to start listening for location\n    // changes here in the constructor in case there are any <Redirect>s\n    // on the initial render. If there are, they will replace/push when\n    // they mount and since cDM fires in children before parents, we may\n    // get a new location before the <Router> is mounted.\n\n    _this._isMounted = false;\n    _this._pendingLocation = null;\n\n    if (!props.staticContext) {\n      _this.unlisten = props.history.listen(function (location) {\n        if (_this._isMounted) {\n          _this.setState({\n            location: location\n          });\n        } else {\n          _this._pendingLocation = location;\n        }\n      });\n    }\n\n    return _this;\n  }\n\n  var _proto = Router.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this._isMounted = true;\n\n    if (this._pendingLocation) {\n      this.setState({\n        location: this._pendingLocation\n      });\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    if (this.unlisten) {\n      this.unlisten();\n      this._isMounted = false;\n      this._pendingLocation = null;\n    }\n  };\n\n  _proto.render = function render() {\n    return /*#__PURE__*/react.createElement(context.Provider, {\n      value: {\n        history: this.props.history,\n        location: this.state.location,\n        match: Router.computeRootMatch(this.state.location.pathname),\n        staticContext: this.props.staticContext\n      }\n    }, /*#__PURE__*/react.createElement(historyContext.Provider, {\n      children: this.props.children || null,\n      value: this.props.history\n    }));\n  };\n\n  return Router;\n}(react.Component);\n\nif (false) {}\n/**\n * The public API for a <Router> that stores location in memory.\n */\n\n\nvar MemoryRouter = /*#__PURE__*/function (_React$Component) {\n  inheritsLoose_inheritsLoose(MemoryRouter, _React$Component);\n\n  function MemoryRouter() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.history = createMemoryHistory(_this.props);\n    return _this;\n  }\n\n  var _proto = MemoryRouter.prototype;\n\n  _proto.render = function render() {\n    return /*#__PURE__*/react.createElement(Router, {\n      history: this.history,\n      children: this.props.children\n    });\n  };\n\n  return MemoryRouter;\n}(react.Component);\n\nif (false) {}\n\nvar Lifecycle = /*#__PURE__*/function (_React$Component) {\n  inheritsLoose_inheritsLoose(Lifecycle, _React$Component);\n\n  function Lifecycle() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = Lifecycle.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    if (this.props.onMount) this.props.onMount.call(this, this);\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    if (this.props.onUpdate) this.props.onUpdate.call(this, this, prevProps);\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    if (this.props.onUnmount) this.props.onUnmount.call(this, this);\n  };\n\n  _proto.render = function render() {\n    return null;\n  };\n\n  return Lifecycle;\n}(react.Component);\n/**\n * The public API for prompting the user before navigating away from a screen.\n */\n\n\nfunction Prompt(_ref) {\n  var message = _ref.message,\n      _ref$when = _ref.when,\n      when = _ref$when === void 0 ? true : _ref$when;\n  return /*#__PURE__*/React.createElement(context.Consumer, null, function (context) {\n    !context ?  false ? 0 : invariant(false) : void 0;\n    if (!when || context.staticContext) return null;\n    var method = context.history.block;\n    return /*#__PURE__*/React.createElement(Lifecycle, {\n      onMount: function onMount(self) {\n        self.release = method(message);\n      },\n      onUpdate: function onUpdate(self, prevProps) {\n        if (prevProps.message !== message) {\n          self.release();\n          self.release = method(message);\n        }\n      },\n      onUnmount: function onUnmount(self) {\n        self.release();\n      },\n      message: message\n    });\n  });\n}\n\nif (false) { var messageType; }\n\nvar react_router_cache = {};\nvar cacheLimit = 10000;\nvar cacheCount = 0;\n\nfunction compilePath(path) {\n  if (react_router_cache[path]) return react_router_cache[path];\n  var generator = path_to_regexp_default().compile(path);\n\n  if (cacheCount < cacheLimit) {\n    react_router_cache[path] = generator;\n    cacheCount++;\n  }\n\n  return generator;\n}\n/**\n * Public API for generating a URL pathname from a path and parameters.\n */\n\n\nfunction generatePath(path, params) {\n  if (path === void 0) {\n    path = "/";\n  }\n\n  if (params === void 0) {\n    params = {};\n  }\n\n  return path === "/" ? path : compilePath(path)(params, {\n    pretty: true\n  });\n}\n/**\n * The public API for navigating programmatically with a component.\n */\n\n\nfunction Redirect(_ref) {\n  var computedMatch = _ref.computedMatch,\n      to = _ref.to,\n      _ref$push = _ref.push,\n      push = _ref$push === void 0 ? false : _ref$push;\n  return /*#__PURE__*/react.createElement(context.Consumer, null, function (context) {\n    !context ?  false ? 0 : tiny_invariant_esm(false) : void 0;\n    var history = context.history,\n        staticContext = context.staticContext;\n    var method = push ? history.push : history.replace;\n    var location = createLocation(computedMatch ? typeof to === "string" ? generatePath(to, computedMatch.params) : extends_extends({}, to, {\n      pathname: generatePath(to.pathname, computedMatch.params)\n    }) : to); // When rendering in a static context,\n    // set the new location immediately.\n\n    if (staticContext) {\n      method(location);\n      return null;\n    }\n\n    return /*#__PURE__*/react.createElement(Lifecycle, {\n      onMount: function onMount() {\n        method(location);\n      },\n      onUpdate: function onUpdate(self, prevProps) {\n        var prevLocation = createLocation(prevProps.to);\n\n        if (!locationsAreEqual(prevLocation, extends_extends({}, location, {\n          key: prevLocation.key\n        }))) {\n          method(location);\n        }\n      },\n      to: to\n    });\n  });\n}\n\nif (false) {}\n\nvar cache$1 = {};\nvar cacheLimit$1 = 10000;\nvar cacheCount$1 = 0;\n\nfunction compilePath$1(path, options) {\n  var cacheKey = "" + options.end + options.strict + options.sensitive;\n  var pathCache = cache$1[cacheKey] || (cache$1[cacheKey] = {});\n  if (pathCache[path]) return pathCache[path];\n  var keys = [];\n  var regexp = path_to_regexp_default()(path, keys, options);\n  var result = {\n    regexp: regexp,\n    keys: keys\n  };\n\n  if (cacheCount$1 < cacheLimit$1) {\n    pathCache[path] = result;\n    cacheCount$1++;\n  }\n\n  return result;\n}\n/**\n * Public API for matching a URL pathname to a path.\n */\n\n\nfunction matchPath(pathname, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (typeof options === "string" || Array.isArray(options)) {\n    options = {\n      path: options\n    };\n  }\n\n  var _options = options,\n      path = _options.path,\n      _options$exact = _options.exact,\n      exact = _options$exact === void 0 ? false : _options$exact,\n      _options$strict = _options.strict,\n      strict = _options$strict === void 0 ? false : _options$strict,\n      _options$sensitive = _options.sensitive,\n      sensitive = _options$sensitive === void 0 ? false : _options$sensitive;\n  var paths = [].concat(path);\n  return paths.reduce(function (matched, path) {\n    if (!path && path !== "") return null;\n    if (matched) return matched;\n\n    var _compilePath = compilePath$1(path, {\n      end: exact,\n      strict: strict,\n      sensitive: sensitive\n    }),\n        regexp = _compilePath.regexp,\n        keys = _compilePath.keys;\n\n    var match = regexp.exec(pathname);\n    if (!match) return null;\n    var url = match[0],\n        values = match.slice(1);\n    var isExact = pathname === url;\n    if (exact && !isExact) return null;\n    return {\n      path: path,\n      // the path used to match\n      url: path === "/" && url === "" ? "/" : url,\n      // the matched portion of the URL\n      isExact: isExact,\n      // whether or not we matched exactly\n      params: keys.reduce(function (memo, key, index) {\n        memo[key.name] = values[index];\n        return memo;\n      }, {})\n    };\n  }, null);\n}\n\nfunction isEmptyChildren(children) {\n  return react.Children.count(children) === 0;\n}\n\nfunction evalChildrenDev(children, props, path) {\n  var value = children(props);\n   false ? 0 : void 0;\n  return value || null;\n}\n/**\n * The public API for matching a single path and rendering.\n */\n\n\nvar Route = /*#__PURE__*/function (_React$Component) {\n  inheritsLoose_inheritsLoose(Route, _React$Component);\n\n  function Route() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = Route.prototype;\n\n  _proto.render = function render() {\n    var _this = this;\n\n    return /*#__PURE__*/react.createElement(context.Consumer, null, function (context$1) {\n      !context$1 ?  false ? 0 : tiny_invariant_esm(false) : void 0;\n      var location = _this.props.location || context$1.location;\n      var match = _this.props.computedMatch ? _this.props.computedMatch // <Switch> already computed the match for us\n      : _this.props.path ? matchPath(location.pathname, _this.props) : context$1.match;\n\n      var props = extends_extends({}, context$1, {\n        location: location,\n        match: match\n      });\n\n      var _this$props = _this.props,\n          children = _this$props.children,\n          component = _this$props.component,\n          render = _this$props.render; // Preact uses an empty array as children by\n      // default, so use null if that\'s the case.\n\n      if (Array.isArray(children) && isEmptyChildren(children)) {\n        children = null;\n      }\n\n      return /*#__PURE__*/react.createElement(context.Provider, {\n        value: props\n      }, props.match ? children ? typeof children === "function" ?  false ? 0 : children(props) : children : component ? /*#__PURE__*/react.createElement(component, props) : render ? render(props) : null : typeof children === "function" ?  false ? 0 : children(props) : null);\n    });\n  };\n\n  return Route;\n}(react.Component);\n\nif (false) {}\n\nfunction react_router_addLeadingSlash(path) {\n  return path.charAt(0) === "/" ? path : "/" + path;\n}\n\nfunction addBasename(basename, location) {\n  if (!basename) return location;\n  return extends_extends({}, location, {\n    pathname: react_router_addLeadingSlash(basename) + location.pathname\n  });\n}\n\nfunction react_router_stripBasename(basename, location) {\n  if (!basename) return location;\n  var base = react_router_addLeadingSlash(basename);\n  if (location.pathname.indexOf(base) !== 0) return location;\n  return extends_extends({}, location, {\n    pathname: location.pathname.substr(base.length)\n  });\n}\n\nfunction createURL(location) {\n  return typeof location === "string" ? location : createPath(location);\n}\n\nfunction staticHandler(methodName) {\n  return function () {\n     false ? 0 : tiny_invariant_esm(false);\n  };\n}\n\nfunction react_router_noop() {}\n/**\n * The public top-level API for a "static" <Router>, so-called because it\n * can\'t actually change the current location. Instead, it just records\n * location changes in a context object. Useful mainly in testing and\n * server-rendering scenarios.\n */\n\n\nvar StaticRouter = /*#__PURE__*/function (_React$Component) {\n  inheritsLoose_inheritsLoose(StaticRouter, _React$Component);\n\n  function StaticRouter() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n\n    _this.handlePush = function (location) {\n      return _this.navigateTo(location, "PUSH");\n    };\n\n    _this.handleReplace = function (location) {\n      return _this.navigateTo(location, "REPLACE");\n    };\n\n    _this.handleListen = function () {\n      return react_router_noop;\n    };\n\n    _this.handleBlock = function () {\n      return react_router_noop;\n    };\n\n    return _this;\n  }\n\n  var _proto = StaticRouter.prototype;\n\n  _proto.navigateTo = function navigateTo(location, action) {\n    var _this$props = this.props,\n        _this$props$basename = _this$props.basename,\n        basename = _this$props$basename === void 0 ? "" : _this$props$basename,\n        _this$props$context = _this$props.context,\n        context = _this$props$context === void 0 ? {} : _this$props$context;\n    context.action = action;\n    context.location = addBasename(basename, createLocation(location));\n    context.url = createURL(context.location);\n  };\n\n  _proto.render = function render() {\n    var _this$props2 = this.props,\n        _this$props2$basename = _this$props2.basename,\n        basename = _this$props2$basename === void 0 ? "" : _this$props2$basename,\n        _this$props2$context = _this$props2.context,\n        context = _this$props2$context === void 0 ? {} : _this$props2$context,\n        _this$props2$location = _this$props2.location,\n        location = _this$props2$location === void 0 ? "/" : _this$props2$location,\n        rest = objectWithoutPropertiesLoose_objectWithoutPropertiesLoose(_this$props2, ["basename", "context", "location"]);\n\n    var history = {\n      createHref: function createHref(path) {\n        return react_router_addLeadingSlash(basename + createURL(path));\n      },\n      action: "POP",\n      location: react_router_stripBasename(basename, createLocation(location)),\n      push: this.handlePush,\n      replace: this.handleReplace,\n      go: staticHandler("go"),\n      goBack: staticHandler("goBack"),\n      goForward: staticHandler("goForward"),\n      listen: this.handleListen,\n      block: this.handleBlock\n    };\n    return /*#__PURE__*/react.createElement(Router, extends_extends({}, rest, {\n      history: history,\n      staticContext: context\n    }));\n  };\n\n  return StaticRouter;\n}(react.Component);\n\nif (false) {}\n/**\n * The public API for rendering the first <Route> that matches.\n */\n\n\nvar Switch = /*#__PURE__*/function (_React$Component) {\n  inheritsLoose_inheritsLoose(Switch, _React$Component);\n\n  function Switch() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = Switch.prototype;\n\n  _proto.render = function render() {\n    var _this = this;\n\n    return /*#__PURE__*/react.createElement(context.Consumer, null, function (context) {\n      !context ?  false ? 0 : tiny_invariant_esm(false) : void 0;\n      var location = _this.props.location || context.location;\n      var element, match; // We use React.Children.forEach instead of React.Children.toArray().find()\n      // here because toArray adds keys to all child elements and we do not want\n      // to trigger an unmount/remount for two <Route>s that render the same\n      // component at different URLs.\n\n      react.Children.forEach(_this.props.children, function (child) {\n        if (match == null && /*#__PURE__*/react.isValidElement(child)) {\n          element = child;\n          var path = child.props.path || child.props.from;\n          match = path ? matchPath(location.pathname, extends_extends({}, child.props, {\n            path: path\n          })) : context.match;\n        }\n      });\n      return match ? /*#__PURE__*/react.cloneElement(element, {\n        location: location,\n        computedMatch: match\n      }) : null;\n    });\n  };\n\n  return Switch;\n}(react.Component);\n\nif (false) {}\n/**\n * A public higher-order component to access the imperative API\n */\n\n\nfunction withRouter(Component) {\n  var displayName = "withRouter(" + (Component.displayName || Component.name) + ")";\n\n  var C = function C(props) {\n    var wrappedComponentRef = props.wrappedComponentRef,\n        remainingProps = _objectWithoutPropertiesLoose(props, ["wrappedComponentRef"]);\n\n    return /*#__PURE__*/React.createElement(context.Consumer, null, function (context) {\n      !context ?  false ? 0 : invariant(false) : void 0;\n      return /*#__PURE__*/React.createElement(Component, _extends({}, remainingProps, context, {\n        ref: wrappedComponentRef\n      }));\n    });\n  };\n\n  C.displayName = displayName;\n  C.WrappedComponent = Component;\n\n  if (false) {}\n\n  return hoistStatics(C, Component);\n}\n\nvar useContext = react.useContext;\n\nfunction useHistory() {\n  if (false) {}\n\n  return useContext(historyContext);\n}\n\nfunction useLocation() {\n  if (false) {}\n\n  return useContext(context).location;\n}\n\nfunction useParams() {\n  if (false) {}\n\n  var match = useContext(context).match;\n  return match ? match.params : {};\n}\n\nfunction useRouteMatch(path) {\n  if (false) {}\n\n  var location = useLocation();\n  var match = useContext(context).match;\n  return path ? matchPath(location.pathname, path) : match;\n}\n\nif (false) { var secondaryBuildName, initialBuildName, buildNames, key, global; }\n\n\n;// CONCATENATED MODULE: ./node_modules/react-router-dom/esm/react-router-dom.js\n\n\n\n\n\n\n\n\n\n\n/**\n * The public API for a <Router> that uses HTML5 history.\n */\n\nvar BrowserRouter = /*#__PURE__*/function (_React$Component) {\n  inheritsLoose_inheritsLoose(BrowserRouter, _React$Component);\n\n  function BrowserRouter() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.history = createBrowserHistory(_this.props);\n    return _this;\n  }\n\n  var _proto = BrowserRouter.prototype;\n\n  _proto.render = function render() {\n    return /*#__PURE__*/react.createElement(Router, {\n      history: this.history,\n      children: this.props.children\n    });\n  };\n\n  return BrowserRouter;\n}(react.Component);\n\nif (false) {}\n/**\n * The public API for a <Router> that uses window.location.hash.\n */\n\n\nvar HashRouter = /*#__PURE__*/function (_React$Component) {\n  inheritsLoose_inheritsLoose(HashRouter, _React$Component);\n\n  function HashRouter() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.history = createHashHistory(_this.props);\n    return _this;\n  }\n\n  var _proto = HashRouter.prototype;\n\n  _proto.render = function render() {\n    return /*#__PURE__*/react.createElement(Router, {\n      history: this.history,\n      children: this.props.children\n    });\n  };\n\n  return HashRouter;\n}(react.Component);\n\nif (false) {}\n\nvar resolveToLocation = function resolveToLocation(to, currentLocation) {\n  return typeof to === "function" ? to(currentLocation) : to;\n};\n\nvar normalizeToLocation = function normalizeToLocation(to, currentLocation) {\n  return typeof to === "string" ? createLocation(to, null, null, currentLocation) : to;\n};\n\nvar forwardRefShim = function forwardRefShim(C) {\n  return C;\n};\n\nvar forwardRef = react.forwardRef;\n\nif (typeof forwardRef === "undefined") {\n  forwardRef = forwardRefShim;\n}\n\nfunction isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\nvar LinkAnchor = forwardRef(function (_ref, forwardedRef) {\n  var innerRef = _ref.innerRef,\n      navigate = _ref.navigate,\n      _onClick = _ref.onClick,\n      rest = objectWithoutPropertiesLoose_objectWithoutPropertiesLoose(_ref, ["innerRef", "navigate", "onClick"]);\n\n  var target = rest.target;\n\n  var props = extends_extends({}, rest, {\n    onClick: function onClick(event) {\n      try {\n        if (_onClick) _onClick(event);\n      } catch (ex) {\n        event.preventDefault();\n        throw ex;\n      }\n\n      if (!event.defaultPrevented && // onClick prevented default\n      event.button === 0 && ( // ignore everything but left clicks\n      !target || target === "_self") && // let browser handle "target=_blank" etc.\n      !isModifiedEvent(event) // ignore clicks with modifier keys\n      ) {\n        event.preventDefault();\n        navigate();\n      }\n    }\n  }); // React 15 compat\n\n\n  if (forwardRefShim !== forwardRef) {\n    props.ref = forwardedRef || innerRef;\n  } else {\n    props.ref = innerRef;\n  }\n  /* eslint-disable-next-line jsx-a11y/anchor-has-content */\n\n\n  return /*#__PURE__*/react.createElement("a", props);\n});\n\nif (false) {}\n/**\n * The public API for rendering a history-aware <a>.\n */\n\n\nvar Link = forwardRef(function (_ref2, forwardedRef) {\n  var _ref2$component = _ref2.component,\n      component = _ref2$component === void 0 ? LinkAnchor : _ref2$component,\n      replace = _ref2.replace,\n      to = _ref2.to,\n      innerRef = _ref2.innerRef,\n      rest = objectWithoutPropertiesLoose_objectWithoutPropertiesLoose(_ref2, ["component", "replace", "to", "innerRef"]);\n\n  return /*#__PURE__*/react.createElement(context.Consumer, null, function (context) {\n    !context ?  false ? 0 : tiny_invariant_esm(false) : void 0;\n    var history = context.history;\n    var location = normalizeToLocation(resolveToLocation(to, context.location), context.location);\n    var href = location ? history.createHref(location) : "";\n\n    var props = extends_extends({}, rest, {\n      href: href,\n      navigate: function navigate() {\n        var location = resolveToLocation(to, context.location);\n        var isDuplicateNavigation = createPath(context.location) === createPath(normalizeToLocation(location));\n        var method = replace || isDuplicateNavigation ? history.replace : history.push;\n        method(location);\n      }\n    }); // React 15 compat\n\n\n    if (forwardRefShim !== forwardRef) {\n      props.ref = forwardedRef || innerRef;\n    } else {\n      props.innerRef = innerRef;\n    }\n\n    return /*#__PURE__*/react.createElement(component, props);\n  });\n});\n\nif (false) { var refType, toType; }\n\nvar forwardRefShim$1 = function forwardRefShim(C) {\n  return C;\n};\n\nvar forwardRef$1 = react.forwardRef;\n\nif (typeof forwardRef$1 === "undefined") {\n  forwardRef$1 = forwardRefShim$1;\n}\n\nfunction joinClassnames() {\n  for (var _len = arguments.length, classnames = new Array(_len), _key = 0; _key < _len; _key++) {\n    classnames[_key] = arguments[_key];\n  }\n\n  return classnames.filter(function (i) {\n    return i;\n  }).join(" ");\n}\n/**\n * A <Link> wrapper that knows if it\'s "active" or not.\n */\n\n\nvar NavLink = forwardRef$1(function (_ref, forwardedRef) {\n  var _ref$ariaCurrent = _ref["aria-current"],\n      ariaCurrent = _ref$ariaCurrent === void 0 ? "page" : _ref$ariaCurrent,\n      _ref$activeClassName = _ref.activeClassName,\n      activeClassName = _ref$activeClassName === void 0 ? "active" : _ref$activeClassName,\n      activeStyle = _ref.activeStyle,\n      classNameProp = _ref.className,\n      exact = _ref.exact,\n      isActiveProp = _ref.isActive,\n      locationProp = _ref.location,\n      sensitive = _ref.sensitive,\n      strict = _ref.strict,\n      styleProp = _ref.style,\n      to = _ref.to,\n      innerRef = _ref.innerRef,\n      rest = objectWithoutPropertiesLoose_objectWithoutPropertiesLoose(_ref, ["aria-current", "activeClassName", "activeStyle", "className", "exact", "isActive", "location", "sensitive", "strict", "style", "to", "innerRef"]);\n\n  return /*#__PURE__*/react.createElement(context.Consumer, null, function (context) {\n    !context ?  false ? 0 : tiny_invariant_esm(false) : void 0;\n    var currentLocation = locationProp || context.location;\n    var toLocation = normalizeToLocation(resolveToLocation(to, currentLocation), currentLocation);\n    var path = toLocation.pathname; // Regex taken from: https://github.com/pillarjs/path-to-regexp/blob/master/index.js#L202\n\n    var escapedPath = path && path.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, "\\\\$1");\n    var match = escapedPath ? matchPath(currentLocation.pathname, {\n      path: escapedPath,\n      exact: exact,\n      sensitive: sensitive,\n      strict: strict\n    }) : null;\n    var isActive = !!(isActiveProp ? isActiveProp(match, currentLocation) : match);\n    var className = typeof classNameProp === "function" ? classNameProp(isActive) : classNameProp;\n    var style = typeof styleProp === "function" ? styleProp(isActive) : styleProp;\n\n    if (isActive) {\n      className = joinClassnames(className, activeClassName);\n      style = extends_extends({}, style, activeStyle);\n    }\n\n    var props = extends_extends({\n      "aria-current": isActive && ariaCurrent || null,\n      className: className,\n      style: style,\n      to: toLocation\n    }, rest); // React 15 compat\n\n\n    if (forwardRefShim$1 !== forwardRef$1) {\n      props.ref = forwardedRef || innerRef;\n    } else {\n      props.innerRef = innerRef;\n    }\n\n    return /*#__PURE__*/react.createElement(Link, props);\n  });\n});\n\nif (false) { var ariaCurrentType; }\n\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/components/RepoTile/RepoTile.module.scss\nvar RepoTile_module = __webpack_require__(326);\n;// CONCATENATED MODULE: ./src/components/RepoTile/RepoTile.module.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar RepoTile_module_options = {};\n\nRepoTile_module_options.styleTagTransform = (styleTagTransform_default());\nRepoTile_module_options.setAttributes = (setAttributesWithoutAttributes_default());\n\n      RepoTile_module_options.insert = insertBySelector_default().bind(null, "head");\n    \nRepoTile_module_options.domAPI = (styleDomAPI_default());\nRepoTile_module_options.insertStyleElement = (insertStyleElement_default());\n\nvar RepoTile_module_update = injectStylesIntoStyleTag_default()(RepoTile_module/* default */.Z, RepoTile_module_options);\n\n\n\n\n       /* harmony default export */ const RepoTile_RepoTile_module = (RepoTile_module/* default */.Z && RepoTile_module/* default.locals */.Z.locals ? RepoTile_module/* default.locals */.Z.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/components/Avatar/Avatar.tsx\n\n\n\nvar Avatar = function Avatar(_ref) {\n  var src = _ref.src,\n      alt = _ref.alt;\n  return /*#__PURE__*/react.createElement("div", {\n    className: RepoTile_RepoTile_module.repotile__avatar\n  }, src && /*#__PURE__*/react.createElement("img", {\n    src: src,\n    alt: alt\n  }), !src && alt);\n};\n\n/* harmony default export */ const Avatar_Avatar = (/*#__PURE__*/react.memo(Avatar));\n;// CONCATENATED MODULE: ./src/components/Avatar/index.ts\n\n;// CONCATENATED MODULE: ./src/components/StarIcon/StarIcon.tsx\n\n\nvar StarIcon = function StarIcon() {\n  return /*#__PURE__*/react.createElement("svg", {\n    width: "14",\n    height: "13",\n    viewBox: "0 0 14 13",\n    fill: "none",\n    xmlns: "http://www.w3.org/2000/svg"\n  }, /*#__PURE__*/react.createElement("path", {\n    fillRule: "evenodd",\n    clipRule: "evenodd",\n    d: "M6.99999 0.21875C7.1225 0.218671 7.24259 0.252887 7.34666 0.317526C7.45074 0.382165 7.53463 0.474645 7.58887 0.5845L9.23562 3.92262L12.9194 4.45812C13.0405 4.47572 13.1543 4.52686 13.248 4.60575C13.3416 4.68465 13.4112 4.78816 13.4491 4.90458C13.487 5.021 13.4915 5.1457 13.4622 5.26457C13.4329 5.38344 13.371 5.49175 13.2834 5.57725L10.6181 8.176L11.2472 11.844C11.268 11.9647 11.2546 12.0888 11.2085 12.2022C11.1624 12.3157 11.0854 12.414 10.9864 12.486C10.8873 12.558 10.7701 12.6009 10.648 12.6097C10.5258 12.6186 10.4036 12.5931 10.2952 12.5361L6.99999 10.8036L3.70474 12.5361C3.59641 12.593 3.47432 12.6185 3.35228 12.6096C3.23024 12.6008 3.1131 12.558 3.01409 12.4861C2.91508 12.4142 2.83813 12.3161 2.79195 12.2028C2.74577 12.0895 2.73219 11.9655 2.75274 11.8449L3.38274 8.17513L0.715741 5.57725C0.627862 5.49178 0.565678 5.38341 0.536237 5.26441C0.506795 5.14541 0.511273 5.02055 0.549163 4.90396C0.587053 4.78738 0.656839 4.68374 0.750615 4.60478C0.844391 4.52583 0.958406 4.47472 1.07974 4.45725L4.76349 3.92262L6.41112 0.5845C6.46535 0.474645 6.54925 0.382165 6.65332 0.317526C6.75739 0.252887 6.87748 0.218671 6.99999 0.21875ZM6.99999 2.35813L5.78812 4.8125C5.74105 4.90779 5.67156 4.99022 5.58559 5.05271C5.49963 5.1152 5.39978 5.15588 5.29462 5.17125L2.58474 5.565L4.54474 7.476C4.621 7.55026 4.67805 7.64195 4.71098 7.74316C4.7439 7.84438 4.75172 7.95209 4.73374 8.057L4.27174 10.7555L6.69462 9.4815C6.78879 9.43199 6.89359 9.40612 6.99999 9.40612C7.10639 9.40612 7.21119 9.43199 7.30537 9.4815L9.72912 10.7555L9.26537 8.057C9.24739 7.95209 9.2552 7.84438 9.28813 7.74316C9.32106 7.64195 9.37811 7.55026 9.45437 7.476L11.4144 5.56588L8.70537 5.17212C8.60021 5.15676 8.50035 5.11608 8.41439 5.05359C8.32843 4.9911 8.25893 4.90866 8.21187 4.81337L6.99999 2.35725V2.35813Z",\n    fill: "#FF9432"\n  }));\n};\n\n/* harmony default export */ const StarIcon_StarIcon = (/*#__PURE__*/react.memo(StarIcon));\n;// CONCATENATED MODULE: ./src/components/StarIcon/index.ts\n\n;// CONCATENATED MODULE: ./src/components/RepoTile/RepoTile.tsx\n\n\n\n\n\nvar RepoTile = function RepoTile(_ref) {\n  var item = _ref.item,\n      onClick = _ref.onClick;\n  var repoLink = "https://github.com/".concat(item.owner.login);\n  return /*#__PURE__*/react.createElement("div", {\n    className: RepoTile_RepoTile_module.repotile\n  }, /*#__PURE__*/react.createElement("div", {\n    className: RepoTile_RepoTile_module.repotile__content,\n    onClick: onClick\n  }, /*#__PURE__*/react.createElement(Avatar_Avatar, {\n    src: item.owner.avatarUrl,\n    alt: item.name[0]\n  }), /*#__PURE__*/react.createElement("div", {\n    className: RepoTile_RepoTile_module.repotile__info\n  }, /*#__PURE__*/react.createElement("div", {\n    className: RepoTile_RepoTile_module.repotile__heading\n  }, item.name), /*#__PURE__*/react.createElement("a", {\n    className: RepoTile_RepoTile_module.repotile__orgLink,\n    href: repoLink,\n    target: "_blank",\n    rel: "noreferrer"\n  }, item.owner.login), /*#__PURE__*/react.createElement("div", {\n    className: RepoTile_RepoTile_module.repotile__stats\n  }, /*#__PURE__*/react.createElement("div", {\n    className: RepoTile_RepoTile_module.repotile__stats__stars\n  }, /*#__PURE__*/react.createElement(StarIcon_StarIcon, null), item.stargazersCount), /*#__PURE__*/react.createElement("div", null, "Updated ", item.updatedAt.substr(0, 10))))));\n};\n\n/* harmony default export */ const RepoTile_RepoTile = (RepoTile);\n;// CONCATENATED MODULE: ./src/components/RepoTile/index.ts\n\n\n;// CONCATENATED MODULE: ./src/pages/ReposListPage/ReposListPage.tsx\n\n\n\n\n\n\nvar ReposListPage = function ReposListPage(_ref) {\n  var _context$reposListSto;\n\n  var list = _ref.list;\n  var context = useReposListContext();\n  return /*#__PURE__*/react.createElement("div", null, /*#__PURE__*/react.createElement("div", {\n    className: RepoTile_RepoTile_module.list\n  }, (_context$reposListSto = context.reposListStore) === null || _context$reposListSto === void 0 ? void 0 : _context$reposListSto.list.map(function (repo) {\n    return /*#__PURE__*/react.createElement("div", {\n      key: repo.id\n    }, /*#__PURE__*/react.createElement(Link, {\n      to: "/repos/".concat(repo.id)\n    }, /*#__PURE__*/react.createElement(RepoTile_RepoTile, {\n      onClick: function onClick() {},\n      item: repo\n    })));\n  })));\n};\n\n/* harmony default export */ const ReposListPage_ReposListPage = (/*#__PURE__*/react.memo(ReposListPage));\n;// CONCATENATED MODULE: ./src/pages/ReposListPage/index.ts\n\n// EXTERNAL MODULE: ./node_modules/qs/lib/index.js\nvar lib = __webpack_require__(520);\nvar lib_default = /*#__PURE__*/__webpack_require__.n(lib);\n;// CONCATENATED MODULE: ./src/shared/store/ApiStore/types.ts\n// Перечисление методов HTTP-запроса\nvar HTTPMethod; // Параметры запроса\n\n(function (HTTPMethod) {\n  HTTPMethod["GET"] = "GET";\n  HTTPMethod["POST"] = "POST";\n})(HTTPMethod || (HTTPMethod = {}));\n\n// Перечисление статусов ответа\nvar StatusHTTP; // Ответ API\n\n(function (StatusHTTP) {\n  StatusHTTP["OK"] = "200 OK";\n  StatusHTTP["NOT_FOUND"] = "404 Not Found";\n  StatusHTTP["ERROR"] = "ERROR";\n})(StatusHTTP || (StatusHTTP = {}));\n;// CONCATENATED MODULE: ./src/shared/store/ApiStore/ApiStore.ts\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || ApiStore_unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction ApiStore_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return ApiStore_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return ApiStore_arrayLikeToArray(o, minLen); }\n\nfunction ApiStore_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\n\nfunction ApiStore_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ApiStore_ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ApiStore_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction ApiStore_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction ApiStore_createClass(Constructor, protoProps, staticProps) { if (protoProps) ApiStore_defineProperties(Constructor.prototype, protoProps); if (staticProps) ApiStore_defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n\nvar ApiStore = /*#__PURE__*/function () {\n  function ApiStore(baseUrl) {\n    _classCallCheck(this, ApiStore);\n\n    this.baseUrl = void 0;\n    this.baseUrl = baseUrl;\n  } // формируем запрос, который хотим отправить\n\n\n  ApiStore_createClass(ApiStore, [{\n    key: "getReqData",\n    value: function getReqData(params) {\n      var endpoint = "".concat(this.baseUrl).concat(params.endpoint); // шаблонная строка\n      // формируем объект запроса\n\n      var req = {\n        method: params.method,\n        headers: _objectSpread({}, params.headers)\n      }; // формируем query-строку\n\n      if (params.method === HTTPMethod.GET) {\n        endpoint = "".concat(endpoint, "?").concat(lib_default().stringify(params.data));\n      } // формируем тело запроса\n\n\n      if (params.method === HTTPMethod.POST) {\n        req.body = JSON.stringify(params.data);\n        req.headers = _objectSpread(_objectSpread({}, req.headers), {}, {\n          "Content-Type": "application/json;charset=utf-8"\n        });\n      }\n\n      return [endpoint, req];\n    }\n  }, {\n    key: "request",\n    value: function () {\n      var _request = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(params) {\n        var _this$getReqData, _this$getReqData2, endpoint, req, response;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _this$getReqData = this.getReqData(params), _this$getReqData2 = _slicedToArray(_this$getReqData, 2), endpoint = _this$getReqData2[0], req = _this$getReqData2[1];\n                _context.next = 4;\n                return fetch(endpoint, req);\n\n              case 4:\n                response = _context.sent;\n\n                if (!response.ok) {\n                  _context.next = 11;\n                  break;\n                }\n\n                _context.next = 8;\n                return response.json();\n\n              case 8:\n                _context.t0 = _context.sent;\n                _context.t1 = response.status;\n                return _context.abrupt("return", {\n                  success: true,\n                  data: _context.t0,\n                  status: _context.t1\n                });\n\n              case 11:\n                _context.t2 = response.status;\n                _context.next = 14;\n                return response.json();\n\n              case 14:\n                _context.t3 = _context.sent;\n                return _context.abrupt("return", {\n                  success: false,\n                  status: _context.t2,\n                  data: _context.t3\n                });\n\n              case 18:\n                _context.prev = 18;\n                _context.t4 = _context["catch"](0);\n                return _context.abrupt("return", {\n                  success: false,\n                  data: _context.t4,\n                  status: StatusHTTP.ERROR\n                });\n\n              case 21:\n              case "end":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 18]]);\n      }));\n\n      function request(_x) {\n        return _request.apply(this, arguments);\n      }\n\n      return request;\n    }()\n  }]);\n\n  return ApiStore;\n}();\n\n\n;// CONCATENATED MODULE: ./src/shared/store/ApiStore/index.ts\n\n;// CONCATENATED MODULE: ./src/store/models/gitHub/gitHubRepoOwner.ts\nvar normalizeGitHubRepoOwner = function normalizeGitHubRepoOwner(from) {\n  return {\n    id: from.id,\n    url: from.url,\n    avatarUrl: from.avatar_url,\n    login: from.login\n  };\n};\n;// CONCATENATED MODULE: ./src/store/models/gitHub/repoItem.ts\n\nvar normalizeRepoItem = function normalizeRepoItem(from) {\n  return {\n    id: from.id,\n    url: from.url,\n    name: from.name,\n    stargazersCount: from.stargazers_count,\n    owner: normalizeGitHubRepoOwner(from.owner),\n    updatedAt: from.updated_at\n  };\n};\n;// CONCATENATED MODULE: ./src/store/RepoItemStore/RepoItemStore.ts\nfunction RepoItemStore_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction RepoItemStore_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { RepoItemStore_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { RepoItemStore_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\n\nfunction RepoItemStore_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction RepoItemStore_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction RepoItemStore_createClass(Constructor, protoProps, staticProps) { if (protoProps) RepoItemStore_defineProperties(Constructor.prototype, protoProps); if (staticProps) RepoItemStore_defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n\n\n\n\nvar RepoItemStore = /*#__PURE__*/function () {\n  function RepoItemStore() {\n    RepoItemStore_classCallCheck(this, RepoItemStore);\n\n    this.apiStore = new ApiStore("https://api.github.com");\n    this._repo = null;\n    this._meta = Meta.initial;\n    makeObservable(this, {\n      _repo: mobx_esm_observable.ref,\n      _meta: mobx_esm_observable,\n      repo: computed,\n      meta: computed\n    });\n  }\n\n  RepoItemStore_createClass(RepoItemStore, [{\n    key: "repo",\n    get: function get() {\n      return this._repo;\n    }\n  }, {\n    key: "meta",\n    get: function get() {\n      return this._meta;\n    }\n  }, {\n    key: "getRepo",\n    value: function () {\n      var _getRepo = RepoItemStore_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(id) {\n        var _this = this;\n\n        var endPoint, result;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                endPoint = "/repositories/".concat(id);\n                this._meta = Meta.loading;\n                this._repo = null;\n                _context.next = 5;\n                return this.apiStore.request({\n                  data: {},\n                  endpoint: endPoint,\n                  headers: {},\n                  method: HTTPMethod.GET\n                });\n\n              case 5:\n                result = _context.sent;\n                mobx_esm_runInAction(function () {\n                  if (!result.success) {\n                    _this._meta = Meta.error;\n                  }\n\n                  try {\n                    _this._meta = Meta.success;\n                    _this._repo = normalizeRepoItem(result.data);\n                    return;\n                  } catch (e) {\n                    _this._meta = Meta.error;\n                    _this._repo = null;\n                  }\n                });\n\n              case 7:\n              case "end":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getRepo(_x) {\n        return _getRepo.apply(this, arguments);\n      }\n\n      return getRepo;\n    }()\n  }, {\n    key: "destroy",\n    value: function destroy() {}\n  }]);\n\n  return RepoItemStore;\n}();\n\n\n;// CONCATENATED MODULE: ./src/store/RepoItemStore/index.ts\n\n;// CONCATENATED MODULE: ./src/pages/UserRepoPage/UserRepoPage.tsx\n\n\n\n\n\n\n\n\n\nvar UserRepoPage = function UserRepoPage() {\n  var repoItemStore = useLocalStore(function () {\n    return new RepoItemStore();\n  });\n\n  var _useParams = useParams(),\n      id = _useParams.id;\n\n  (0,react.useEffect)(function () {\n    if (id) repoItemStore.getRepo(id);\n  }, [repoItemStore]);\n  return /*#__PURE__*/react.createElement("div", null, repoItemStore.meta === Meta.success && repoItemStore.repo ? /*#__PURE__*/react.createElement(RepoTile_RepoTile, {\n    item: repoItemStore.repo,\n    onClick: function onClick() {}\n  }) : /*#__PURE__*/react.createElement("div", null, /*#__PURE__*/react.createElement("div", null, "\\u0422\\u0430\\u043A\\u043E\\u0433\\u043E \\u0440\\u0435\\u043F\\u043E\\u0437\\u0438\\u0442\\u043E\\u0440\\u0438\\u044F \\u043D\\u0435\\u0442 :c"), /*#__PURE__*/react.createElement("p", null, /*#__PURE__*/react.createElement(Link, {\n    to: "/repos"\n  }, "\\u041D\\u0430\\u0437\\u0430\\u0434"))));\n};\n\n/* harmony default export */ const UserRepoPage_UserRepoPage = (observer(UserRepoPage));\n;// CONCATENATED MODULE: ./src/pages/UserRepoPage/index.ts\n\n;// CONCATENATED MODULE: ./src/store/models/shared/collection.ts\nvar getInitialCollectionModel = function getInitialCollectionModel() {\n  return {\n    order: [],\n    entities: {}\n  };\n};\nvar normalizeCollection = function normalizeCollection(elements, getKeyForElement) {\n  var collection = getInitialCollectionModel();\n  elements.forEach(function (el) {\n    var id = getKeyForElement(el);\n    collection.order.push(id);\n    collection.entities[id] = el;\n  });\n  return collection;\n};\nvar linearizeCollection = function linearizeCollection(elements) {\n  return elements.order.map(function (el) {\n    return elements.entities[el];\n  });\n};\n;// CONCATENATED MODULE: ./src/store/ReposListStore/ReposListStore.ts\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = ReposListStore_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction ReposListStore_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return ReposListStore_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return ReposListStore_arrayLikeToArray(o, minLen); }\n\nfunction ReposListStore_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ReposListStore_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction ReposListStore_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { ReposListStore_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { ReposListStore_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\n\nfunction ReposListStore_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction ReposListStore_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction ReposListStore_createClass(Constructor, protoProps, staticProps) { if (protoProps) ReposListStore_defineProperties(Constructor.prototype, protoProps); if (staticProps) ReposListStore_defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n\n\n\n\n\nvar ReposListStore = /*#__PURE__*/function () {\n  function ReposListStore() {\n    ReposListStore_classCallCheck(this, ReposListStore);\n\n    this.apiStore = new ApiStore("https://api.github.com");\n    this._list = {\n      order: [],\n      entities: {}\n    };\n    this._meta = Meta.initial;\n    makeObservable(this, {\n      _list: mobx_esm_observable.ref,\n      _meta: mobx_esm_observable,\n      list: computed,\n      meta: computed,\n      getOrganizationReposList: action\n    });\n  }\n\n  ReposListStore_createClass(ReposListStore, [{\n    key: "list",\n    get: function get() {\n      return linearizeCollection(this._list);\n    }\n  }, {\n    key: "meta",\n    get: function get() {\n      return this._meta;\n    }\n  }, {\n    key: "getOrganizationReposList",\n    value: function () {\n      var _getOrganizationReposList = ReposListStore_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(params) {\n        var _this = this;\n\n        var response;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this._meta = Meta.loading;\n                this._list = getInitialCollectionModel();\n                _context.next = 4;\n                return this.apiStore.request({\n                  method: HTTPMethod.GET,\n                  data: {},\n                  headers: {},\n                  endpoint: "/orgs/".concat(params.orgName, "/repos")\n                });\n\n              case 4:\n                response = _context.sent;\n                mobx_esm_runInAction(function () {\n                  if (!response.success) {\n                    _this._meta = Meta.error;\n                  }\n\n                  try {\n                    var list = [];\n\n                    var _iterator = _createForOfIteratorHelper(response.data),\n                        _step;\n\n                    try {\n                      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                        var item = _step.value;\n                        list.push(normalizeRepoItem(item));\n                      }\n                    } catch (err) {\n                      _iterator.e(err);\n                    } finally {\n                      _iterator.f();\n                    }\n\n                    _this._meta = Meta.success;\n                    _this._list = normalizeCollection(list, function (listItem) {\n                      return listItem.id;\n                    });\n                    return;\n                  } catch (e) {\n                    // eslint-disable-next-line no-console\n                    console.log(e);\n                    _this._meta = Meta.error;\n                    _this._list = getInitialCollectionModel();\n                  }\n                });\n\n              case 6:\n              case "end":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getOrganizationReposList(_x) {\n        return _getOrganizationReposList.apply(this, arguments);\n      }\n\n      return getOrganizationReposList;\n    }()\n  }, {\n    key: "destroy",\n    value: function destroy() {}\n  }]);\n\n  return ReposListStore;\n}();\n\n\n;// CONCATENATED MODULE: ./src/store/ReposListStore/index.ts\n\n;// CONCATENATED MODULE: ./src/pages/ReposSearchPage/ReposSearchPage.tsx\nfunction ReposSearchPage_slicedToArray(arr, i) { return ReposSearchPage_arrayWithHoles(arr) || ReposSearchPage_iterableToArrayLimit(arr, i) || ReposSearchPage_unsupportedIterableToArray(arr, i) || ReposSearchPage_nonIterableRest(); }\n\nfunction ReposSearchPage_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction ReposSearchPage_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return ReposSearchPage_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return ReposSearchPage_arrayLikeToArray(o, minLen); }\n\nfunction ReposSearchPage_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ReposSearchPage_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction ReposSearchPage_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar ReposSearchPage = function ReposSearchPage() {\n  var reposListStore = useLocalStore(function () {\n    return new ReposListStore();\n  });\n\n  var _React$useState = react.useState(""),\n      _React$useState2 = ReposSearchPage_slicedToArray(_React$useState, 2),\n      value = _React$useState2[0],\n      onChange = _React$useState2[1];\n\n  var handleSearch = function handleSearch() {\n    reposListStore.getOrganizationReposList({\n      orgName: "ktsstudio"\n    });\n  };\n\n  var handleChange = react.useCallback(function (e) {\n    return onChange(e.target.value);\n  }, []);\n  react.useEffect(function () {\n    reposListStore.getOrganizationReposList({\n      orgName: "ktsstudio"\n    });\n  }, [reposListStore]);\n  return /*#__PURE__*/react.createElement(BrowserRouter, null, /*#__PURE__*/react.createElement("div", {\n    className: styles_style_module.body\n  }, /*#__PURE__*/react.createElement("div", {\n    className: styles_style_module.search\n  }, reposListStore.meta !== Meta.loading && /*#__PURE__*/react.createElement(Input_Input, {\n    value: value,\n    placeholder: "Введите название организации",\n    onChange: handleChange\n  }), reposListStore.meta === Meta.loading && /*#__PURE__*/react.createElement(Input_Input, {\n    value: value,\n    placeholder: "Введите название организации",\n    onChange: handleChange,\n    isDisabled: true\n  }), reposListStore.meta !== Meta.loading && /*#__PURE__*/react.createElement(Button_Button, {\n    disabled: false,\n    onClick: handleSearch\n  }, /*#__PURE__*/react.createElement(SearchIcon_SearchIcon, null)), reposListStore.meta === Meta.loading && /*#__PURE__*/react.createElement(Button_Button, {\n    disabled: true,\n    onClick: handleSearch\n  }, /*#__PURE__*/react.createElement(SearchIcon_SearchIcon, null))), /*#__PURE__*/react.createElement(Switch, null, /*#__PURE__*/react.createElement(Route, {\n    exact: true,\n    path: "/repos/:id",\n    component: UserRepoPage_UserRepoPage\n  }), /*#__PURE__*/react.createElement(ReposContext_ReposContext, {\n    reposListStore: reposListStore\n  }, /*#__PURE__*/react.createElement(Route, {\n    exact: true,\n    path: "/repos",\n    component: ReposListPage_ReposListPage\n  }), /*#__PURE__*/react.createElement(Redirect, {\n    to: "/repos"\n  })))));\n};\n\n/* harmony default export */ const ReposSearchPage_ReposSearchPage = (observer(ReposSearchPage));\n;// CONCATENATED MODULE: ./src/pages/ReposSearchPage/index.ts\n\n;// CONCATENATED MODULE: ./src/App/App.tsx\n\n // import ReposSearchPage from "pages/ReposSearchPage";\n\nvar App = function App() {\n  return /*#__PURE__*/react.createElement(ReposSearchPage_ReposSearchPage, null);\n};\n\n/* harmony default export */ const App_App = (App);\n;// CONCATENATED MODULE: ./src/config/configureMobX.ts\n\nconfigure({\n  useProxies: "ifavailable",\n  computedRequiresReaction: true,\n  reactionRequiresObservable: true,\n  observableRequiresReaction: true\n});\n;// CONCATENATED MODULE: ./src/index.tsx\n\n\n\n\n // import reportWebVitals from "./reportWebVitals";\n\n // import "layouts/style.css"; //new\n// import styles from "./style.module.scss"; //new\n// import "./root/root";\n\nreact_dom.render( /*#__PURE__*/react.createElement(react.StrictMode, null, /*#__PURE__*/react.createElement(App_App, null)), document.getElementById("root")); // reportWebVitals();\n\nif (false) {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RkE7QUFFQTtBQUVBO0FBQ0E7Q0FFQTs7Q0FFQTtBQUNBO0FBQ0E7O0FBRUFDLGdCQUFBLGVBQ0Usb0JBQUMsZ0JBQUQscUJBRUUsb0JBQUMsT0FBRCxPQUZGLENBREYsRUFLRTlVLFFBQVEsQ0FBQytVLGNBQVQsQ0FBd0IsTUFBeEIsQ0FMRixHQVFBOztBQUVBLElBQUlDLEtBQUosRUFBZ0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jcmFfbmV3Ly4vc3JjL2luZGV4LmNzcz9hMWFhIiwid2VicGFjazovL2NyYV9uZXcvLi9zcmMvY29tcG9uZW50cy9CdXR0b24vQnV0dG9uLm1vZHVsZS5zY3NzPzlmYmIiLCJ3ZWJwYWNrOi8vY3JhX25ldy8uL3NyYy9jb21wb25lbnRzL0J1dHRvbi9CdXR0b24udHN4PzBjNWEiLCJ3ZWJwYWNrOi8vY3JhX25ldy8uL3NyYy9jb21wb25lbnRzL0J1dHRvbi9pbmRleC50cz8wMWEyIiwid2VicGFjazovL2NyYV9uZXcvLi9zcmMvc3R5bGVzL3N0eWxlLm1vZHVsZS5zY3NzP2QzMzAiLCJ3ZWJwYWNrOi8vY3JhX25ldy8uL3NyYy9jb21wb25lbnRzL0lucHV0L0lucHV0LnRzeD9hMzRkIiwid2VicGFjazovL2NyYV9uZXcvLi9zcmMvY29tcG9uZW50cy9JbnB1dC9pbmRleC50cz9kNDdjIiwid2VicGFjazovL2NyYV9uZXcvLi9zcmMvY29tcG9uZW50cy9SZXBvc0NvbnRleHQvUmVwb3NDb250ZXh0LnRzeD8xMDgzIiwid2VicGFjazovL2NyYV9uZXcvLi9zcmMvY29tcG9uZW50cy9TZWFyY2hJY29uL1NlYXJjaEljb24udHN4P2Q4MjEiLCJ3ZWJwYWNrOi8vY3JhX25ldy8uL3NyYy9jb21wb25lbnRzL1NlYXJjaEljb24vaW5kZXgudHM/ZWJmNCIsIndlYnBhY2s6Ly9jcmFfbmV3Ly4vc3JjL3V0aWxzL21ldGEudHM/M2Y2YiIsIndlYnBhY2s6Ly9jcmFfbmV3Ly4vc3JjL3V0aWxzL3VzZUxvY2FsU3RvcmUudHM/OWFjMSIsIndlYnBhY2s6Ly9jcmFfbmV3Ly4uL3NyYy9lcnJvcnMudHM/M2Q1YiIsIndlYnBhY2s6Ly9jcmFfbmV3Ly4uL3NyYy91dGlscy9nbG9iYWwudHM/OTYxYyIsIndlYnBhY2s6Ly9jcmFfbmV3Ly4uL3NyYy91dGlscy91dGlscy50cz81NjA5Iiwid2VicGFjazovL2NyYV9uZXcvLi4vc3JjL2FwaS9kZWNvcmF0b3JzLnRzPzg4MDgiLCJ3ZWJwYWNrOi8vY3JhX25ldy8uLi9zcmMvY29yZS9hdG9tLnRzPzY3MGYiLCJ3ZWJwYWNrOi8vY3JhX25ldy8uLi9zcmMvdXRpbHMvY29tcGFyZXIudHM/YzRhZiIsIndlYnBhY2s6Ly9jcmFfbmV3Ly4uL3NyYy90eXBlcy9tb2RpZmllcnMudHM/N2NiZCIsIndlYnBhY2s6Ly9jcmFfbmV3Ly4uL3NyYy90eXBlcy9vdmVycmlkZWFubm90YXRpb24udHM/OWQyMSIsIndlYnBhY2s6Ly9jcmFfbmV3Ly4uL3NyYy90eXBlcy9hY3Rpb25hbm5vdGF0aW9uLnRzPzgxODMiLCJ3ZWJwYWNrOi8vY3JhX25ldy8uLi9zcmMvdHlwZXMvZmxvd2Fubm90YXRpb24udHM/MmZmOSIsIndlYnBhY2s6Ly9jcmFfbmV3Ly4uL3NyYy90eXBlcy9jb21wdXRlZGFubm90YXRpb24udHM/M2MyOSIsIndlYnBhY2s6Ly9jcmFfbmV3Ly4uL3NyYy90eXBlcy9vYnNlcnZhYmxlYW5ub3RhdGlvbi50cz82MTRmIiwid2VicGFjazovL2NyYV9uZXcvLi4vc3JjL3R5cGVzL2F1dG9hbm5vdGF0aW9uLnRzP2Y3MjYiLCJ3ZWJwYWNrOi8vY3JhX25ldy8uLi9zcmMvYXBpL29ic2VydmFibGUudHM/OWQ4MiIsIndlYnBhY2s6Ly9jcmFfbmV3Ly4uL3NyYy9hcGkvY29tcHV0ZWQudHM/ZjRmOCIsIndlYnBhY2s6Ly9jcmFfbmV3Ly4uL3NyYy9jb3JlL2FjdGlvbi50cz8yNzc1Iiwid2VicGFjazovL2NyYV9uZXcvLi4vc3JjL3R5cGVzL29ic2VydmFibGV2YWx1ZS50cz8wMzA5Iiwid2VicGFjazovL2NyYV9uZXcvLi4vc3JjL2NvcmUvY29tcHV0ZWR2YWx1ZS50cz84ZDg3Iiwid2VicGFjazovL2NyYV9uZXcvLi4vc3JjL2NvcmUvZGVyaXZhdGlvbi50cz9iOTlmIiwid2VicGFjazovL2NyYV9uZXcvLi4vc3JjL2NvcmUvZ2xvYmFsc3RhdGUudHM/YTIzNSIsIndlYnBhY2s6Ly9jcmFfbmV3Ly4uL3NyYy9jb3JlL29ic2VydmFibGUudHM/MWIwZCIsIndlYnBhY2s6Ly9jcmFfbmV3Ly4uL3NyYy9jb3JlL3JlYWN0aW9uLnRzPzQ2NzkiLCJ3ZWJwYWNrOi8vY3JhX25ldy8uLi9zcmMvY29yZS9zcHkudHM/ZDIzMSIsIndlYnBhY2s6Ly9jcmFfbmV3Ly4uL3NyYy9hcGkvYWN0aW9uLnRzP2RmYjUiLCJ3ZWJwYWNrOi8vY3JhX25ldy8uLi9zcmMvYXBpL2F1dG9ydW4udHM/NDZmNCIsIndlYnBhY2s6Ly9jcmFfbmV3Ly4uL3NyYy9hcGkvYmVjb21lLW9ic2VydmVkLnRzP2M5ZjgiLCJ3ZWJwYWNrOi8vY3JhX25ldy8uLi9zcmMvYXBpL2NvbmZpZ3VyZS50cz9lNDFjIiwid2VicGFjazovL2NyYV9uZXcvLi4vc3JjL2FwaS9leHRlbmRvYnNlcnZhYmxlLnRzPzZkZTIiLCJ3ZWJwYWNrOi8vY3JhX25ldy8uLi9zcmMvYXBpL2V4dHJhcy50cz83YWViIiwid2VicGFjazovL2NyYV9uZXcvLi4vc3JjL2FwaS9mbG93LnRzPzBmYWYiLCJ3ZWJwYWNrOi8vY3JhX25ldy8uLi9zcmMvYXBpL2ludGVyY2VwdC1yZWFkLnRzPzBmYTMiLCJ3ZWJwYWNrOi8vY3JhX25ldy8uLi9zcmMvYXBpL2ludGVyY2VwdC50cz8zODQ5Iiwid2VicGFjazovL2NyYV9uZXcvLi4vc3JjL2FwaS9pc2NvbXB1dGVkLnRzP2E1NjkiLCJ3ZWJwYWNrOi8vY3JhX25ldy8uLi9zcmMvYXBpL2lzb2JzZXJ2YWJsZS50cz8wN2E4Iiwid2VicGFjazovL2NyYV9uZXcvLi4vc3JjL2FwaS9vYmplY3QtYXBpLnRzP2MxOGEiLCJ3ZWJwYWNrOi8vY3JhX25ldy8uLi9zcmMvYXBpL29ic2VydmUudHM/ZDE2YyIsIndlYnBhY2s6Ly9jcmFfbmV3Ly4uL3NyYy9hcGkvdG9qcy50cz84YjY0Iiwid2VicGFjazovL2NyYV9uZXcvLi4vc3JjL2FwaS90cmFjZS50cz9jMmRlIiwid2VicGFjazovL2NyYV9uZXcvLi4vc3JjL2FwaS90cmFuc2FjdGlvbi50cz8wNjJhIiwid2VicGFjazovL2NyYV9uZXcvLi4vc3JjL2FwaS93aGVuLnRzPzNhYTciLCJ3ZWJwYWNrOi8vY3JhX25ldy8uLi9zcmMvdHlwZXMvZHluYW1pY29iamVjdC50cz8yZjAzIiwid2VicGFjazovL2NyYV9uZXcvLi4vc3JjL3R5cGVzL2ludGVyY2VwdC11dGlscy50cz9lOTcwIiwid2VicGFjazovL2NyYV9uZXcvLi4vc3JjL3R5cGVzL2xpc3Rlbi11dGlscy50cz8wOWE2Iiwid2VicGFjazovL2NyYV9uZXcvLi4vc3JjL2FwaS9tYWtlT2JzZXJ2YWJsZS50cz81YzE0Iiwid2VicGFjazovL2NyYV9uZXcvLi4vc3JjL3R5cGVzL29ic2VydmFibGVhcnJheS50cz81ZTRiIiwid2VicGFjazovL2NyYV9uZXcvLi4vc3JjL3R5cGVzL29ic2VydmFibGVtYXAudHM/YWU5OSIsIndlYnBhY2s6Ly9jcmFfbmV3Ly4uL3NyYy90eXBlcy9vYnNlcnZhYmxlc2V0LnRzPzViZDUiLCJ3ZWJwYWNrOi8vY3JhX25ldy8uLi9zcmMvdHlwZXMvb2JzZXJ2YWJsZW9iamVjdC50cz8wOTlmIiwid2VicGFjazovL2NyYV9uZXcvLi4vc3JjL3R5cGVzL2xlZ2FjeW9ic2VydmFibGVhcnJheS50cz84NzViIiwid2VicGFjazovL2NyYV9uZXcvLi4vc3JjL3R5cGVzL3R5cGUtdXRpbHMudHM/Yjg2MCIsIndlYnBhY2s6Ly9jcmFfbmV3Ly4uL3NyYy91dGlscy9lcS50cz85ZGFkIiwid2VicGFjazovL2NyYV9uZXcvLi4vc3JjL3V0aWxzL2l0ZXJhYmxlLnRzPzg2MDkiLCJ3ZWJwYWNrOi8vY3JhX25ldy8uLi9zcmMvYXBpL2Fubm90YXRpb24udHM/OTRmMSIsIndlYnBhY2s6Ly9jcmFfbmV3Ly4uL3NyYy9tb2J4LnRzPzFiMDEiLCJ3ZWJwYWNrOi8vY3JhX25ldy8uLi8uLi9zcmMvdXRpbHMvYXNzZXJ0RW52aXJvbm1lbnQudHM/ODNiYiIsIndlYnBhY2s6Ly9jcmFfbmV3Ly4uLy4uL3NyYy91dGlscy9yZWFjdEJhdGNoZWRVcGRhdGVzLnRzP2QwYzQiLCJ3ZWJwYWNrOi8vY3JhX25ldy8uLi8uLi9zcmMvdXRpbHMvb2JzZXJ2ZXJCYXRjaGluZy50cz82NjdjIiwid2VicGFjazovL2NyYV9uZXcvLi4vLi4vc3JjL3V0aWxzL3ByaW50RGVidWdWYWx1ZS50cz9lYmMxIiwid2VicGFjazovL2NyYV9uZXcvLi4vLi4vc3JjL3V0aWxzL0ZpbmFsaXphdGlvblJlZ2lzdHJ5V3JhcHBlci50cz80ZTY0Iiwid2VicGFjazovL2NyYV9uZXcvLi4vLi4vc3JjL3V0aWxzL3JlYWN0aW9uQ2xlYW51cFRyYWNraW5nQ29tbW9uLnRzPzlmZWYiLCJ3ZWJwYWNrOi8vY3JhX25ldy8uLi8uLi9zcmMvdXRpbHMvY3JlYXRlUmVhY3Rpb25DbGVhbnVwVHJhY2tpbmdVc2luZ0ZpbmFsaXphdGlvblJlZ2lzdGVyLnRzPzE3YmYiLCJ3ZWJwYWNrOi8vY3JhX25ldy8uLi8uLi9zcmMvdXRpbHMvY3JlYXRlVGltZXJCYXNlZFJlYWN0aW9uQ2xlYW51cFRyYWNraW5nLnRzPzk5NDAiLCJ3ZWJwYWNrOi8vY3JhX25ldy8uLi8uLi9zcmMvdXRpbHMvcmVhY3Rpb25DbGVhbnVwVHJhY2tpbmcudHM/YWFlMyIsIndlYnBhY2s6Ly9jcmFfbmV3Ly4uL3NyYy9zdGF0aWNSZW5kZXJpbmcudHM/ZjMxOCIsIndlYnBhY2s6Ly9jcmFfbmV3Ly4uL3NyYy91c2VPYnNlcnZlci50cz9jNjYyIiwid2VicGFjazovL2NyYV9uZXcvLi4vc3JjL29ic2VydmVyLnRzP2M5NDMiLCJ3ZWJwYWNrOi8vY3JhX25ldy8uLi9zcmMvT2JzZXJ2ZXJDb21wb25lbnQudHM/OWQ4MSIsIndlYnBhY2s6Ly9jcmFfbmV3Ly4uL3NyYy91c2VMb2NhbE9ic2VydmFibGUudHM/ZWNlNiIsIndlYnBhY2s6Ly9jcmFfbmV3Ly4uL3NyYy91c2VBc09ic2VydmFibGVTb3VyY2UudHM/MmY2MiIsIndlYnBhY2s6Ly9jcmFfbmV3Ly4uL3NyYy91c2VMb2NhbFN0b3JlLnRzPzI2ZmMiLCJ3ZWJwYWNrOi8vY3JhX25ldy8uLi9zcmMvaW5kZXgudHM/NmYzNyIsIndlYnBhY2s6Ly9jcmFfbmV3Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NldFByb3RvdHlwZU9mLmpzP2IzODAiLCJ3ZWJwYWNrOi8vY3JhX25ldy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlLmpzPzc0OGUiLCJ3ZWJwYWNrOi8vY3JhX25ldy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzLmpzP2MzMWQiLCJ3ZWJwYWNrOi8vY3JhX25ldy8uL25vZGVfbW9kdWxlcy9yZXNvbHZlLXBhdGhuYW1lL2VzbS9yZXNvbHZlLXBhdGhuYW1lLmpzPzk0MjEiLCJ3ZWJwYWNrOi8vY3JhX25ldy8uL25vZGVfbW9kdWxlcy92YWx1ZS1lcXVhbC9lc20vdmFsdWUtZXF1YWwuanM/YzYxOSIsIndlYnBhY2s6Ly9jcmFfbmV3Ly4vbm9kZV9tb2R1bGVzL3RpbnktaW52YXJpYW50L2Rpc3QvdGlueS1pbnZhcmlhbnQuZXNtLmpzP2Y1MWYiLCJ3ZWJwYWNrOi8vY3JhX25ldy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzbS9oaXN0b3J5LmpzPzJlMTAiLCJ3ZWJwYWNrOi8vY3JhX25ldy8uL25vZGVfbW9kdWxlcy9taW5pLWNyZWF0ZS1yZWFjdC1jb250ZXh0L2Rpc3QvZXNtL2luZGV4LmpzP2I0NDgiLCJ3ZWJwYWNrOi8vY3JhX25ldy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlLmpzP2NjYjUiLCJ3ZWJwYWNrOi8vY3JhX25ldy8uLi9tb2R1bGVzL2NyZWF0ZU5hbWVDb250ZXh0LmpzPzdiZTkiLCJ3ZWJwYWNrOi8vY3JhX25ldy8uLi9tb2R1bGVzL0hpc3RvcnlDb250ZXh0LmpzP2YyN2IiLCJ3ZWJwYWNrOi8vY3JhX25ldy8uLi9tb2R1bGVzL1JvdXRlckNvbnRleHQuanM/ZTU4YyIsIndlYnBhY2s6Ly9jcmFfbmV3Ly4uL21vZHVsZXMvUm91dGVyLmpzP2RiMmEiLCJ3ZWJwYWNrOi8vY3JhX25ldy8uLi9tb2R1bGVzL01lbW9yeVJvdXRlci5qcz83MmUyIiwid2VicGFjazovL2NyYV9uZXcvLi4vbW9kdWxlcy9MaWZlY3ljbGUuanM/OTRjOSIsIndlYnBhY2s6Ly9jcmFfbmV3Ly4uL21vZHVsZXMvUHJvbXB0LmpzPzViYjEiLCJ3ZWJwYWNrOi8vY3JhX25ldy8uLi9tb2R1bGVzL2dlbmVyYXRlUGF0aC5qcz81NjZjIiwid2VicGFjazovL2NyYV9uZXcvLi4vbW9kdWxlcy9SZWRpcmVjdC5qcz83MDBjIiwid2VicGFjazovL2NyYV9uZXcvLi4vbW9kdWxlcy9tYXRjaFBhdGguanM/MzYzZCIsIndlYnBhY2s6Ly9jcmFfbmV3Ly4uL21vZHVsZXMvUm91dGUuanM/ZDY1NCIsIndlYnBhY2s6Ly9jcmFfbmV3Ly4uL21vZHVsZXMvU3RhdGljUm91dGVyLmpzPzU3ZGYiLCJ3ZWJwYWNrOi8vY3JhX25ldy8uLi9tb2R1bGVzL1N3aXRjaC5qcz8xN2ExIiwid2VicGFjazovL2NyYV9uZXcvLi4vbW9kdWxlcy93aXRoUm91dGVyLmpzP2VhYzkiLCJ3ZWJwYWNrOi8vY3JhX25ldy8uLi9tb2R1bGVzL2hvb2tzLmpzPzI3MjEiLCJ3ZWJwYWNrOi8vY3JhX25ldy8uLi9tb2R1bGVzL2luZGV4LmpzPzhlODYiLCJ3ZWJwYWNrOi8vY3JhX25ldy8uLi9tb2R1bGVzL0Jyb3dzZXJSb3V0ZXIuanM/ZmM1NSIsIndlYnBhY2s6Ly9jcmFfbmV3Ly4uL21vZHVsZXMvSGFzaFJvdXRlci5qcz9iMjBiIiwid2VicGFjazovL2NyYV9uZXcvLi4vbW9kdWxlcy91dGlscy9sb2NhdGlvblV0aWxzLmpzP2FmYTIiLCJ3ZWJwYWNrOi8vY3JhX25ldy8uLi9tb2R1bGVzL0xpbmsuanM/N2Q5ZCIsIndlYnBhY2s6Ly9jcmFfbmV3Ly4uL21vZHVsZXMvTmF2TGluay5qcz9iNDU1Iiwid2VicGFjazovL2NyYV9uZXcvLi9zcmMvY29tcG9uZW50cy9SZXBvVGlsZS9SZXBvVGlsZS5tb2R1bGUuc2Nzcz8zMGYzIiwid2VicGFjazovL2NyYV9uZXcvLi9zcmMvY29tcG9uZW50cy9BdmF0YXIvQXZhdGFyLnRzeD8yN2U4Iiwid2VicGFjazovL2NyYV9uZXcvLi9zcmMvY29tcG9uZW50cy9BdmF0YXIvaW5kZXgudHM/NDc5YSIsIndlYnBhY2s6Ly9jcmFfbmV3Ly4vc3JjL2NvbXBvbmVudHMvU3Rhckljb24vU3Rhckljb24udHN4PzA4YjciLCJ3ZWJwYWNrOi8vY3JhX25ldy8uL3NyYy9jb21wb25lbnRzL1N0YXJJY29uL2luZGV4LnRzPzY4YWMiLCJ3ZWJwYWNrOi8vY3JhX25ldy8uL3NyYy9jb21wb25lbnRzL1JlcG9UaWxlL1JlcG9UaWxlLnRzeD8wZjYyIiwid2VicGFjazovL2NyYV9uZXcvLi9zcmMvY29tcG9uZW50cy9SZXBvVGlsZS9pbmRleC50cz80MmY1Iiwid2VicGFjazovL2NyYV9uZXcvLi9zcmMvcGFnZXMvUmVwb3NMaXN0UGFnZS9SZXBvc0xpc3RQYWdlLnRzeD9mM2IyIiwid2VicGFjazovL2NyYV9uZXcvLi9zcmMvcGFnZXMvUmVwb3NMaXN0UGFnZS9pbmRleC50cz83YjRmIiwid2VicGFjazovL2NyYV9uZXcvLi9zcmMvc2hhcmVkL3N0b3JlL0FwaVN0b3JlL3R5cGVzLnRzP2Y2ZDgiLCJ3ZWJwYWNrOi8vY3JhX25ldy8uL3NyYy9zaGFyZWQvc3RvcmUvQXBpU3RvcmUvQXBpU3RvcmUudHM/ODk1OSIsIndlYnBhY2s6Ly9jcmFfbmV3Ly4vc3JjL3NoYXJlZC9zdG9yZS9BcGlTdG9yZS9pbmRleC50cz8yYjkxIiwid2VicGFjazovL2NyYV9uZXcvLi9zcmMvc3RvcmUvbW9kZWxzL2dpdEh1Yi9naXRIdWJSZXBvT3duZXIudHM/M2RlMyIsIndlYnBhY2s6Ly9jcmFfbmV3Ly4vc3JjL3N0b3JlL21vZGVscy9naXRIdWIvcmVwb0l0ZW0udHM/NTJjZiIsIndlYnBhY2s6Ly9jcmFfbmV3Ly4vc3JjL3N0b3JlL1JlcG9JdGVtU3RvcmUvUmVwb0l0ZW1TdG9yZS50cz84NmE0Iiwid2VicGFjazovL2NyYV9uZXcvLi9zcmMvc3RvcmUvUmVwb0l0ZW1TdG9yZS9pbmRleC50cz9iYTY0Iiwid2VicGFjazovL2NyYV9uZXcvLi9zcmMvcGFnZXMvVXNlclJlcG9QYWdlL1VzZXJSZXBvUGFnZS50c3g/YmQxZiIsIndlYnBhY2s6Ly9jcmFfbmV3Ly4vc3JjL3BhZ2VzL1VzZXJSZXBvUGFnZS9pbmRleC50cz9iZjNiIiwid2VicGFjazovL2NyYV9uZXcvLi9zcmMvc3RvcmUvbW9kZWxzL3NoYXJlZC9jb2xsZWN0aW9uLnRzP2FiMWEiLCJ3ZWJwYWNrOi8vY3JhX25ldy8uL3NyYy9zdG9yZS9SZXBvc0xpc3RTdG9yZS9SZXBvc0xpc3RTdG9yZS50cz84MGFiIiwid2VicGFjazovL2NyYV9uZXcvLi9zcmMvc3RvcmUvUmVwb3NMaXN0U3RvcmUvaW5kZXgudHM/ZjcxYiIsIndlYnBhY2s6Ly9jcmFfbmV3Ly4vc3JjL3BhZ2VzL1JlcG9zU2VhcmNoUGFnZS9SZXBvc1NlYXJjaFBhZ2UudHN4PzYyODkiLCJ3ZWJwYWNrOi8vY3JhX25ldy8uL3NyYy9wYWdlcy9SZXBvc1NlYXJjaFBhZ2UvaW5kZXgudHM/Yjg2NyIsIndlYnBhY2s6Ly9jcmFfbmV3Ly4vc3JjL0FwcC9BcHAudHN4PzBhNmEiLCJ3ZWJwYWNrOi8vY3JhX25ldy8uL3NyYy9jb25maWcvY29uZmlndXJlTW9iWC50cz8zZjI3Iiwid2VicGFjazovL2NyYV9uZXcvLi9zcmMvaW5kZXgudHN4P2Q5ODYiXSwic291cmNlc0NvbnRlbnQiOlsiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMV0udXNlWzJdIS4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2luZGV4LmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1sxXS51c2VbMl0hLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5kZXguY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1swXS51c2VbMV0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsyXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9CdXR0b24ubW9kdWxlLnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1swXS51c2VbMV0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsyXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9CdXR0b24ubW9kdWxlLnNjc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCBzdHlsZXMgZnJvbSBcIi4vQnV0dG9uLm1vZHVsZS5zY3NzXCI7XG5cbmV4cG9ydCB0eXBlIEJ1dHRvblByb3BzID0ge1xuICBvbkNsaWNrOiAoZTogUmVhY3QuTW91c2VFdmVudCkgPT4gdm9pZDtcbiAgZGlzYWJsZWQ/OiBib29sZWFuO1xuICBjaGlsZHJlbjoge307XG59O1xuXG5jb25zdCBCdXR0b246IFJlYWN0LkZDPEJ1dHRvblByb3BzPiA9ICh7IG9uQ2xpY2ssIGRpc2FibGVkLCBjaGlsZHJlbiB9KSA9PiAoXG4gIDxidXR0b24gb25DbGljaz17b25DbGlja30gZGlzYWJsZWQ9e2Rpc2FibGVkfSBjbGFzc05hbWU9e3N0eWxlcy5idXR0b259PlxuICAgIHtjaGlsZHJlbn1cbiAgPC9idXR0b24+XG4pO1xuXG5leHBvcnQgZGVmYXVsdCBSZWFjdC5tZW1vKEJ1dHRvbik7XG4iLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSBcIi4vQnV0dG9uXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9CdXR0b25cIjtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMF0udXNlWzFdIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1swXS51c2VbMl0hLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUubW9kdWxlLnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1swXS51c2VbMV0hLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsyXSEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5tb2R1bGUuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHN0eWxlcyBmcm9tIFwic3R5bGVzL3N0eWxlLm1vZHVsZS5zY3NzXCI7XHJcblxyXG5leHBvcnQgdHlwZSBJbnB1dFByb3BzID0ge1xyXG4gIHZhbHVlOiBzdHJpbmc7XHJcbiAgcGxhY2Vob2xkZXI6IHN0cmluZztcclxuICBvbkNoYW5nZTogKGU6IFJlYWN0LkNoYW5nZUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiB2b2lkO1xyXG4gIGNsYXNzTmFtZT86IHN0cmluZztcclxuICBpc0Rpc2FibGVkPzogYm9vbGVhbjtcclxufTtcclxuXHJcbmNvbnN0IElucHV0OiBSZWFjdC5GQzxJbnB1dFByb3BzPiA9ICh7XHJcbiAgdmFsdWUsXHJcbiAgcGxhY2Vob2xkZXIsXHJcbiAgb25DaGFuZ2UsXHJcbiAgaXNEaXNhYmxlZCxcclxufSkgPT4gKFxyXG4gIDxpbnB1dFxyXG4gICAgdmFsdWU9e3ZhbHVlfVxyXG4gICAgY2xhc3NOYW1lPXtzdHlsZXMuc2VhcmNoX19pbnB1dH1cclxuICAgIHBsYWNlaG9sZGVyPXtwbGFjZWhvbGRlcn1cclxuICAgIG9uQ2hhbmdlPXtvbkNoYW5nZX1cclxuICAgIGRpc2FibGVkPXtpc0Rpc2FibGVkfVxyXG4gIC8+XHJcbik7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBJbnB1dDtcclxuIiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gXCIuL0lucHV0XCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL0lucHV0XCI7XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuXHJcbmltcG9ydCB7IGNyZWF0ZUNvbnRleHQsIHVzZUNvbnRleHQgfSBmcm9tIFwicmVhY3RcIjtcclxuXHJcbmltcG9ydCBSZXBvc0xpc3RTdG9yZSBmcm9tIFwic3RvcmUvUmVwb3NMaXN0U3RvcmVcIjtcclxuXHJcbmV4cG9ydCB0eXBlIFJlcG9zQ29udGV4dFByb3BzID0gUmVhY3QuUHJvcHNXaXRoQ2hpbGRyZW48e1xyXG4gIHJlcG9zTGlzdFN0b3JlOiBSZXBvc0xpc3RTdG9yZSB8IG51bGw7XHJcbn0+O1xyXG5cclxuY29uc3QgcmVwb3NMaXN0Q29udGV4dCA9IGNyZWF0ZUNvbnRleHQ8UmVwb3NDb250ZXh0UHJvcHM+KHtcclxuICByZXBvc0xpc3RTdG9yZTogbnVsbCxcclxufSk7XHJcblxyXG5jb25zdCBQcm92aWRlciA9IHJlcG9zTGlzdENvbnRleHQuUHJvdmlkZXI7XHJcblxyXG5leHBvcnQgY29uc3QgdXNlUmVwb3NMaXN0Q29udGV4dCA9ICgpID0+IHVzZUNvbnRleHQocmVwb3NMaXN0Q29udGV4dCk7XHJcblxyXG5jb25zdCBSZXBvc0NvbnRleHQ6IFJlYWN0LkZDPFJlcG9zQ29udGV4dFByb3BzPiA9ICh7XHJcbiAgcmVwb3NMaXN0U3RvcmUsXHJcbiAgY2hpbGRyZW4sXHJcbn0pID0+IHtcclxuICByZXR1cm4gPFByb3ZpZGVyIHZhbHVlPXt7IHJlcG9zTGlzdFN0b3JlIH19PntjaGlsZHJlbn08L1Byb3ZpZGVyPjtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFJlcG9zQ29udGV4dDtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5cclxuY29uc3QgU2VhcmNoSWNvbiA9ICgpID0+IChcclxuICA8c3ZnXHJcbiAgICB3aWR0aD1cIjE4XCJcclxuICAgIGhlaWdodD1cIjE4XCJcclxuICAgIHZpZXdCb3g9XCIwIDAgMTggMThcIlxyXG4gICAgZmlsbD1cIiMwMDBcIlxyXG4gICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXHJcbiAgPlxyXG4gICAgPHBhdGhcclxuICAgICAgZD1cIk0xMi41IDExSDExLjcxTDExLjQzIDEwLjczQzEyLjQxIDkuNTkgMTMgOC4xMSAxMyA2LjVDMTMgMi45MSAxMC4wOSAwIDYuNSAwQzIuOTEgMCAwIDIuOTEgMCA2LjVDMCAxMC4wOSAyLjkxIDEzIDYuNSAxM0M4LjExIDEzIDkuNTkgMTIuNDEgMTAuNzMgMTEuNDNMMTEgMTEuNzFWMTIuNUwxNiAxNy40OUwxNy40OSAxNkwxMi41IDExWk02LjUgMTFDNC4wMSAxMSAyIDguOTkgMiA2LjVDMiA0LjAxIDQuMDEgMiA2LjUgMkM4Ljk5IDIgMTEgNC4wMSAxMSA2LjVDMTEgOC45OSA4Ljk5IDExIDYuNSAxMVpcIlxyXG4gICAgICBmaWxsPVwid2hpdGVcIlxyXG4gICAgLz5cclxuICA8L3N2Zz5cclxuKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFJlYWN0Lm1lbW8oU2VhcmNoSWNvbik7XHJcbiIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tIFwiLi9TZWFyY2hJY29uXCI7XHJcbiIsImV4cG9ydCBlbnVtIE1ldGEge1xyXG4gIGluaXRpYWwgPSBcImluaXRpYWxcIixcclxuICBsb2FkaW5nID0gXCJsb2FkaW5nXCIsXHJcbiAgZXJyb3IgPSBcImVycm9yXCIsXHJcbiAgc3VjY2VzcyA9IFwic3VjY2Vzc1wiLFxyXG59XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUxvY2FsU3RvcmUge1xyXG4gIGRlc3Ryb3koKTogdm9pZDtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IHVzZUxvY2FsU3RvcmUgPSA8VCBleHRlbmRzIElMb2NhbFN0b3JlPihjcmVhdG9yOiAoKSA9PiBUKTogVCA9PiB7XHJcbiAgY29uc3QgY29udGFpbmVyID0gUmVhY3QudXNlUmVmPG51bGwgfCBUPihudWxsKTtcclxuXHJcbiAgaWYgKGNvbnRhaW5lci5jdXJyZW50ID09PSBudWxsKSB7XHJcbiAgICBjb250YWluZXIuY3VycmVudCA9IGNyZWF0b3IoKTtcclxuICB9XHJcblxyXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICByZXR1cm4gKCkgPT4gY29udGFpbmVyLmN1cnJlbnQ/LmRlc3Ryb3koKTtcclxuICB9LCBbXSk7XHJcblxyXG4gIHJldHVybiBjb250YWluZXIuY3VycmVudDtcclxufTtcclxuIiwiY29uc3QgbmljZUVycm9ycyA9IHtcbiAgICAwOiBgSW52YWxpZCB2YWx1ZSBmb3IgY29uZmlndXJhdGlvbiAnZW5mb3JjZUFjdGlvbnMnLCBleHBlY3RlZCAnbmV2ZXInLCAnYWx3YXlzJyBvciAnb2JzZXJ2ZWQnYCxcbiAgICAxKGFubm90YXRpb25UeXBlLCBrZXk6IFByb3BlcnR5S2V5KSB7XG4gICAgICAgIHJldHVybiBgQ2Fubm90IGFwcGx5ICcke2Fubm90YXRpb25UeXBlfScgdG8gJyR7a2V5LnRvU3RyaW5nKCl9JzogRmllbGQgbm90IGZvdW5kLmBcbiAgICB9LFxuICAgIC8qXG4gICAgMihwcm9wKSB7XG4gICAgICAgIHJldHVybiBgaW52YWxpZCBkZWNvcmF0b3IgZm9yICcke3Byb3AudG9TdHJpbmcoKX0nYFxuICAgIH0sXG4gICAgMyhwcm9wKSB7XG4gICAgICAgIHJldHVybiBgQ2Fubm90IGRlY29yYXRlICcke3Byb3AudG9TdHJpbmcoKX0nOiBhY3Rpb24gY2FuIG9ubHkgYmUgdXNlZCBvbiBwcm9wZXJ0aWVzIHdpdGggYSBmdW5jdGlvbiB2YWx1ZS5gXG4gICAgfSxcbiAgICA0KHByb3ApIHtcbiAgICAgICAgcmV0dXJuIGBDYW5ub3QgZGVjb3JhdGUgJyR7cHJvcC50b1N0cmluZygpfSc6IGNvbXB1dGVkIGNhbiBvbmx5IGJlIHVzZWQgb24gZ2V0dGVyIHByb3BlcnRpZXMuYFxuICAgIH0sXG4gICAgKi9cbiAgICA1OiBcIidrZXlzKCknIGNhbiBvbmx5IGJlIHVzZWQgb24gb2JzZXJ2YWJsZSBvYmplY3RzLCBhcnJheXMsIHNldHMgYW5kIG1hcHNcIixcbiAgICA2OiBcIid2YWx1ZXMoKScgY2FuIG9ubHkgYmUgdXNlZCBvbiBvYnNlcnZhYmxlIG9iamVjdHMsIGFycmF5cywgc2V0cyBhbmQgbWFwc1wiLFxuICAgIDc6IFwiJ2VudHJpZXMoKScgY2FuIG9ubHkgYmUgdXNlZCBvbiBvYnNlcnZhYmxlIG9iamVjdHMsIGFycmF5cyBhbmQgbWFwc1wiLFxuICAgIDg6IFwiJ3NldCgpJyBjYW4gb25seSBiZSB1c2VkIG9uIG9ic2VydmFibGUgb2JqZWN0cywgYXJyYXlzIGFuZCBtYXBzXCIsXG4gICAgOTogXCIncmVtb3ZlKCknIGNhbiBvbmx5IGJlIHVzZWQgb24gb2JzZXJ2YWJsZSBvYmplY3RzLCBhcnJheXMgYW5kIG1hcHNcIixcbiAgICAxMDogXCInaGFzKCknIGNhbiBvbmx5IGJlIHVzZWQgb24gb2JzZXJ2YWJsZSBvYmplY3RzLCBhcnJheXMgYW5kIG1hcHNcIixcbiAgICAxMTogXCInZ2V0KCknIGNhbiBvbmx5IGJlIHVzZWQgb24gb2JzZXJ2YWJsZSBvYmplY3RzLCBhcnJheXMgYW5kIG1hcHNcIixcbiAgICAxMjogYEludmFsaWQgYW5ub3RhdGlvbmAsXG4gICAgMTM6IGBEeW5hbWljIG9ic2VydmFibGUgb2JqZWN0cyBjYW5ub3QgYmUgZnJvemVuYCxcbiAgICAxNDogXCJJbnRlcmNlcHQgaGFuZGxlcnMgc2hvdWxkIHJldHVybiBub3RoaW5nIG9yIGEgY2hhbmdlIG9iamVjdFwiLFxuICAgIDE1OiBgT2JzZXJ2YWJsZSBhcnJheXMgY2Fubm90IGJlIGZyb3plbmAsXG4gICAgMTY6IGBNb2RpZmljYXRpb24gZXhjZXB0aW9uOiB0aGUgaW50ZXJuYWwgc3RydWN0dXJlIG9mIGFuIG9ic2VydmFibGUgYXJyYXkgd2FzIGNoYW5nZWQuYCxcbiAgICAxNyhpbmRleCwgbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBgW21vYnguYXJyYXldIEluZGV4IG91dCBvZiBib3VuZHMsICR7aW5kZXh9IGlzIGxhcmdlciB0aGFuICR7bGVuZ3RofWBcbiAgICB9LFxuICAgIDE4OiBcIm1vYngubWFwIHJlcXVpcmVzIE1hcCBwb2x5ZmlsbCBmb3IgdGhlIGN1cnJlbnQgYnJvd3Nlci4gQ2hlY2sgYmFiZWwtcG9seWZpbGwgb3IgY29yZS1qcy9lczYvbWFwLmpzXCIsXG4gICAgMTkob3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIFwiQ2Fubm90IGluaXRpYWxpemUgZnJvbSBjbGFzc2VzIHRoYXQgaW5oZXJpdCBmcm9tIE1hcDogXCIgKyBvdGhlci5jb25zdHJ1Y3Rvci5uYW1lXG4gICAgfSxcbiAgICAyMChvdGhlcikge1xuICAgICAgICByZXR1cm4gXCJDYW5ub3QgaW5pdGlhbGl6ZSBtYXAgZnJvbSBcIiArIG90aGVyXG4gICAgfSxcbiAgICAyMShkYXRhU3RydWN0dXJlKSB7XG4gICAgICAgIHJldHVybiBgQ2Fubm90IGNvbnZlcnQgdG8gbWFwIGZyb20gJyR7ZGF0YVN0cnVjdHVyZX0nYFxuICAgIH0sXG4gICAgMjI6IFwibW9ieC5zZXQgcmVxdWlyZXMgU2V0IHBvbHlmaWxsIGZvciB0aGUgY3VycmVudCBicm93c2VyLiBDaGVjayBiYWJlbC1wb2x5ZmlsbCBvciBjb3JlLWpzL2VzNi9zZXQuanNcIixcbiAgICAyMzogXCJJdCBpcyBub3QgcG9zc2libGUgdG8gZ2V0IGluZGV4IGF0b21zIGZyb20gYXJyYXlzXCIsXG4gICAgMjQodGhpbmcpIHtcbiAgICAgICAgcmV0dXJuIFwiQ2Fubm90IG9idGFpbiBhZG1pbmlzdHJhdGlvbiBmcm9tIFwiICsgdGhpbmdcbiAgICB9LFxuICAgIDI1KHByb3BlcnR5LCBuYW1lKSB7XG4gICAgICAgIHJldHVybiBgdGhlIGVudHJ5ICcke3Byb3BlcnR5fScgZG9lcyBub3QgZXhpc3QgaW4gdGhlIG9ic2VydmFibGUgbWFwICcke25hbWV9J2BcbiAgICB9LFxuICAgIDI2OiBcInBsZWFzZSBzcGVjaWZ5IGEgcHJvcGVydHlcIixcbiAgICAyNyhwcm9wZXJ0eSwgbmFtZSkge1xuICAgICAgICByZXR1cm4gYG5vIG9ic2VydmFibGUgcHJvcGVydHkgJyR7cHJvcGVydHkudG9TdHJpbmcoKX0nIGZvdW5kIG9uIHRoZSBvYnNlcnZhYmxlIG9iamVjdCAnJHtuYW1lfSdgXG4gICAgfSxcbiAgICAyOCh0aGluZykge1xuICAgICAgICByZXR1cm4gXCJDYW5ub3Qgb2J0YWluIGF0b20gZnJvbSBcIiArIHRoaW5nXG4gICAgfSxcbiAgICAyOTogXCJFeHBlY3Rpbmcgc29tZSBvYmplY3RcIixcbiAgICAzMDogXCJpbnZhbGlkIGFjdGlvbiBzdGFjay4gZGlkIHlvdSBmb3JnZXQgdG8gZmluaXNoIGFuIGFjdGlvbj9cIixcbiAgICAzMTogXCJtaXNzaW5nIG9wdGlvbiBmb3IgY29tcHV0ZWQ6IGdldFwiLFxuICAgIDMyKG5hbWUsIGRlcml2YXRpb24pIHtcbiAgICAgICAgcmV0dXJuIGBDeWNsZSBkZXRlY3RlZCBpbiBjb21wdXRhdGlvbiAke25hbWV9OiAke2Rlcml2YXRpb259YFxuICAgIH0sXG4gICAgMzMobmFtZSkge1xuICAgICAgICByZXR1cm4gYFRoZSBzZXR0ZXIgb2YgY29tcHV0ZWQgdmFsdWUgJyR7bmFtZX0nIGlzIHRyeWluZyB0byB1cGRhdGUgaXRzZWxmLiBEaWQgeW91IGludGVuZCB0byB1cGRhdGUgYW4gX29ic2VydmFibGVfIHZhbHVlLCBpbnN0ZWFkIG9mIHRoZSBjb21wdXRlZCBwcm9wZXJ0eT9gXG4gICAgfSxcbiAgICAzNChuYW1lKSB7XG4gICAgICAgIHJldHVybiBgW0NvbXB1dGVkVmFsdWUgJyR7bmFtZX0nXSBJdCBpcyBub3QgcG9zc2libGUgdG8gYXNzaWduIGEgbmV3IHZhbHVlIHRvIGEgY29tcHV0ZWQgdmFsdWUuYFxuICAgIH0sXG4gICAgMzU6IFwiVGhlcmUgYXJlIG11bHRpcGxlLCBkaWZmZXJlbnQgdmVyc2lvbnMgb2YgTW9iWCBhY3RpdmUuIE1ha2Ugc3VyZSBNb2JYIGlzIGxvYWRlZCBvbmx5IG9uY2Ugb3IgdXNlIGBjb25maWd1cmUoeyBpc29sYXRlR2xvYmFsU3RhdGU6IHRydWUgfSlgXCIsXG4gICAgMzY6IFwiaXNvbGF0ZUdsb2JhbFN0YXRlIHNob3VsZCBiZSBjYWxsZWQgYmVmb3JlIE1vYlggaXMgcnVubmluZyBhbnkgcmVhY3Rpb25zXCIsXG4gICAgMzcobWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBgW21vYnhdIFxcYG9ic2VydmFibGVBcnJheS4ke21ldGhvZH0oKVxcYCBtdXRhdGVzIHRoZSBhcnJheSBpbi1wbGFjZSwgd2hpY2ggaXMgbm90IGFsbG93ZWQgaW5zaWRlIGEgZGVyaXZhdGlvbi4gVXNlIFxcYGFycmF5LnNsaWNlKCkuJHttZXRob2R9KClcXGAgaW5zdGVhZGBcbiAgICB9LFxuICAgIDM4OiBcIidvd25LZXlzKCknIGNhbiBvbmx5IGJlIHVzZWQgb24gb2JzZXJ2YWJsZSBvYmplY3RzXCIsXG4gICAgMzk6IFwiJ2RlZmluZVByb3BlcnR5KCknIGNhbiBvbmx5IGJlIHVzZWQgb24gb2JzZXJ2YWJsZSBvYmplY3RzXCJcbn0gYXMgY29uc3RcblxuY29uc3QgZXJyb3JzOiB0eXBlb2YgbmljZUVycm9ycyA9IF9fREVWX18gPyBuaWNlRXJyb3JzIDogKHt9IGFzIGFueSlcblxuZXhwb3J0IGZ1bmN0aW9uIGRpZShlcnJvcjogc3RyaW5nIHwga2V5b2YgdHlwZW9mIGVycm9ycywgLi4uYXJnczogYW55W10pOiBuZXZlciB7XG4gICAgaWYgKF9fREVWX18pIHtcbiAgICAgICAgbGV0IGU6IGFueSA9IHR5cGVvZiBlcnJvciA9PT0gXCJzdHJpbmdcIiA/IGVycm9yIDogZXJyb3JzW2Vycm9yXVxuICAgICAgICBpZiAodHlwZW9mIGUgPT09IFwiZnVuY3Rpb25cIikgZSA9IGUuYXBwbHkobnVsbCwgYXJncyBhcyBhbnkpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgW01vYlhdICR7ZX1gKVxuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIHR5cGVvZiBlcnJvciA9PT0gXCJudW1iZXJcIlxuICAgICAgICAgICAgPyBgW01vYlhdIG1pbmlmaWVkIGVycm9yIG5yOiAke2Vycm9yfSR7XG4gICAgICAgICAgICAgICAgICBhcmdzLmxlbmd0aCA/IFwiIFwiICsgYXJncy5tYXAoU3RyaW5nKS5qb2luKFwiLFwiKSA6IFwiXCJcbiAgICAgICAgICAgICAgfS4gRmluZCB0aGUgZnVsbCBlcnJvciBhdDogaHR0cHM6Ly9naXRodWIuY29tL21vYnhqcy9tb2J4L2Jsb2IvbWFpbi9wYWNrYWdlcy9tb2J4L3NyYy9lcnJvcnMudHNgXG4gICAgICAgICAgICA6IGBbTW9iWF0gJHtlcnJvcn1gXG4gICAgKVxufVxuIiwiZGVjbGFyZSBjb25zdCB3aW5kb3c6IGFueVxuZGVjbGFyZSBjb25zdCBzZWxmOiBhbnlcblxuY29uc3QgbW9ja0dsb2JhbCA9IHt9XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRHbG9iYWwoKSB7XG4gICAgaWYgKHR5cGVvZiBnbG9iYWxUaGlzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHJldHVybiBnbG9iYWxUaGlzXG4gICAgfVxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHJldHVybiB3aW5kb3dcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIGdsb2JhbFxuICAgIH1cbiAgICBpZiAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIHNlbGZcbiAgICB9XG4gICAgcmV0dXJuIG1vY2tHbG9iYWxcbn1cbiIsImltcG9ydCB7IGdsb2JhbFN0YXRlLCBkaWUgfSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG4vLyBXZSBzaG9ydGVuIGFueXRoaW5nIHVzZWQgPiA1IHRpbWVzXG5leHBvcnQgY29uc3QgYXNzaWduID0gT2JqZWN0LmFzc2lnblxuZXhwb3J0IGNvbnN0IGdldERlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yXG5leHBvcnQgY29uc3QgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHlcbmV4cG9ydCBjb25zdCBvYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlXG5cbmV4cG9ydCBjb25zdCBFTVBUWV9BUlJBWSA9IFtdXG5PYmplY3QuZnJlZXplKEVNUFRZX0FSUkFZKVxuXG5leHBvcnQgY29uc3QgRU1QVFlfT0JKRUNUID0ge31cbk9iamVjdC5mcmVlemUoRU1QVFlfT0JKRUNUKVxuXG5leHBvcnQgaW50ZXJmYWNlIExhbWJkYSB7XG4gICAgKCk6IHZvaWRcbiAgICBuYW1lPzogc3RyaW5nXG59XG5cbmNvbnN0IGhhc1Byb3h5ID0gdHlwZW9mIFByb3h5ICE9PSBcInVuZGVmaW5lZFwiXG5jb25zdCBwbGFpbk9iamVjdFN0cmluZyA9IE9iamVjdC50b1N0cmluZygpXG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRQcm94aWVzKCkge1xuICAgIGlmICghaGFzUHJveHkpIHtcbiAgICAgICAgZGllKFxuICAgICAgICAgICAgX19ERVZfX1xuICAgICAgICAgICAgICAgID8gXCJgUHJveHlgIG9iamVjdHMgYXJlIG5vdCBhdmFpbGFibGUgaW4gdGhlIGN1cnJlbnQgZW52aXJvbm1lbnQuIFBsZWFzZSBjb25maWd1cmUgTW9iWCB0byBlbmFibGUgYSBmYWxsYmFjayBpbXBsZW1lbnRhdGlvbi5gXCJcbiAgICAgICAgICAgICAgICA6IFwiUHJveHkgbm90IGF2YWlsYWJsZVwiXG4gICAgICAgIClcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3YXJuQWJvdXRQcm94eVJlcXVpcmVtZW50KG1zZzogc3RyaW5nKSB7XG4gICAgaWYgKF9fREVWX18gJiYgZ2xvYmFsU3RhdGUudmVyaWZ5UHJveGllcykge1xuICAgICAgICBkaWUoXG4gICAgICAgICAgICBcIk1vYlggaXMgY3VycmVudGx5IGNvbmZpZ3VyZWQgdG8gYmUgYWJsZSB0byBydW4gaW4gRVM1IG1vZGUsIGJ1dCBpbiBFUzUgTW9iWCB3b24ndCBiZSBhYmxlIHRvIFwiICtcbiAgICAgICAgICAgICAgICBtc2dcbiAgICAgICAgKVxuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE5leHRJZCgpIHtcbiAgICByZXR1cm4gKytnbG9iYWxTdGF0ZS5tb2J4R3VpZFxufVxuXG4vKipcbiAqIE1ha2VzIHN1cmUgdGhhdCB0aGUgcHJvdmlkZWQgZnVuY3Rpb24gaXMgaW52b2tlZCBhdCBtb3N0IG9uY2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBvbmNlKGZ1bmM6IExhbWJkYSk6IExhbWJkYSB7XG4gICAgbGV0IGludm9rZWQgPSBmYWxzZVxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChpbnZva2VkKSByZXR1cm5cbiAgICAgICAgaW52b2tlZCA9IHRydWVcbiAgICAgICAgcmV0dXJuIChmdW5jIGFzIGFueSkuYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IG5vb3AgPSAoKSA9PiB7fVxuXG5leHBvcnQgZnVuY3Rpb24gaXNGdW5jdGlvbihmbjogYW55KTogZm4gaXMgRnVuY3Rpb24ge1xuICAgIHJldHVybiB0eXBlb2YgZm4gPT09IFwiZnVuY3Rpb25cIlxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNTdHJpbmcodmFsdWU6IGFueSk6IHZhbHVlIGlzIHN0cmluZyB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIlxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNTdHJpbmdpc2godmFsdWU6IGFueSk6IHZhbHVlIGlzIHN0cmluZyB8IG51bWJlciB8IHN5bWJvbCB7XG4gICAgY29uc3QgdCA9IHR5cGVvZiB2YWx1ZVxuICAgIHN3aXRjaCAodCkge1xuICAgICAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICAgIGNhc2UgXCJzeW1ib2xcIjpcbiAgICAgICAgY2FzZSBcIm51bWJlclwiOlxuICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc09iamVjdCh2YWx1ZTogYW55KTogdmFsdWUgaXMgT2JqZWN0IHtcbiAgICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gICAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHJldHVybiBmYWxzZVxuICAgIGNvbnN0IHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbHVlKVxuICAgIGlmIChwcm90byA9PSBudWxsKSByZXR1cm4gdHJ1ZVxuICAgIHJldHVybiBwcm90by5jb25zdHJ1Y3Rvcj8udG9TdHJpbmcoKSA9PT0gcGxhaW5PYmplY3RTdHJpbmdcbn1cblxuLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzM3ODY1MTcwXG5leHBvcnQgZnVuY3Rpb24gaXNHZW5lcmF0b3Iob2JqOiBhbnkpOiBib29sZWFuIHtcbiAgICBjb25zdCBjb25zdHJ1Y3RvciA9IG9iaj8uY29uc3RydWN0b3JcbiAgICBpZiAoIWNvbnN0cnVjdG9yKSByZXR1cm4gZmFsc2VcbiAgICBpZiAoXCJHZW5lcmF0b3JGdW5jdGlvblwiID09PSBjb25zdHJ1Y3Rvci5uYW1lIHx8IFwiR2VuZXJhdG9yRnVuY3Rpb25cIiA9PT0gY29uc3RydWN0b3IuZGlzcGxheU5hbWUpXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgcmV0dXJuIGZhbHNlXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRIaWRkZW5Qcm9wKG9iamVjdDogYW55LCBwcm9wTmFtZTogUHJvcGVydHlLZXksIHZhbHVlOiBhbnkpIHtcbiAgICBkZWZpbmVQcm9wZXJ0eShvYmplY3QsIHByb3BOYW1lLCB7XG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZVxuICAgIH0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRIaWRkZW5GaW5hbFByb3Aob2JqZWN0OiBhbnksIHByb3BOYW1lOiBQcm9wZXJ0eUtleSwgdmFsdWU6IGFueSkge1xuICAgIGRlZmluZVByb3BlcnR5KG9iamVjdCwgcHJvcE5hbWUsIHtcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZVxuICAgIH0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVJbnN0YW5jZW9mUHJlZGljYXRlPFQ+KFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICB0aGVDbGFzczogbmV3ICguLi5hcmdzOiBhbnlbXSkgPT4gVFxuKTogKHg6IGFueSkgPT4geCBpcyBUIHtcbiAgICBjb25zdCBwcm9wTmFtZSA9IFwiaXNNb2JYXCIgKyBuYW1lXG4gICAgdGhlQ2xhc3MucHJvdG90eXBlW3Byb3BOYW1lXSA9IHRydWVcbiAgICByZXR1cm4gZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgcmV0dXJuIGlzT2JqZWN0KHgpICYmIHhbcHJvcE5hbWVdID09PSB0cnVlXG4gICAgfSBhcyBhbnlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRVM2TWFwKHRoaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaW5nIGluc3RhbmNlb2YgTWFwXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0VTNlNldCh0aGluZyk6IHRoaW5nIGlzIFNldDxhbnk+IHtcbiAgICByZXR1cm4gdGhpbmcgaW5zdGFuY2VvZiBTZXRcbn1cblxuY29uc3QgaGFzR2V0T3duUHJvcGVydHlTeW1ib2xzID0gdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgIT09IFwidW5kZWZpbmVkXCJcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBmb2xsb3dpbmc6IG93biBlbnVtZXJhYmxlIGtleXMgYW5kIHN5bWJvbHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRQbGFpbk9iamVjdEtleXMob2JqZWN0KSB7XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdClcbiAgICAvLyBOb3Qgc3VwcG9ydGVkIGluIElFLCBzbyB0aGVyZSBhcmUgbm90IGdvaW5nIHRvIGJlIHN5bWJvbCBwcm9wcyBhbnl3YXkuLi5cbiAgICBpZiAoIWhhc0dldE93blByb3BlcnR5U3ltYm9scykgcmV0dXJuIGtleXNcbiAgICBjb25zdCBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpXG4gICAgaWYgKCFzeW1ib2xzLmxlbmd0aCkgcmV0dXJuIGtleXNcbiAgICByZXR1cm4gWy4uLmtleXMsIC4uLnN5bWJvbHMuZmlsdGVyKHMgPT4gb2JqZWN0UHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwob2JqZWN0LCBzKSldXG59XG5cbi8vIEZyb20gSW1tZXIgdXRpbHNcbi8vIFJldHVybnMgYWxsIG93biBrZXlzLCBpbmNsdWRpbmcgbm9uLWVudW1lcmFibGUgYW5kIHN5bWJvbGljXG5leHBvcnQgY29uc3Qgb3duS2V5czogKHRhcmdldDogYW55KSA9PiBQcm9wZXJ0eUtleVtdID1cbiAgICB0eXBlb2YgUmVmbGVjdCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBSZWZsZWN0Lm93bktleXNcbiAgICAgICAgPyBSZWZsZWN0Lm93bktleXNcbiAgICAgICAgOiBoYXNHZXRPd25Qcm9wZXJ0eVN5bWJvbHNcbiAgICAgICAgPyBvYmogPT4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKS5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmopIGFzIGFueSlcbiAgICAgICAgOiAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc1xuXG5leHBvcnQgZnVuY3Rpb24gc3RyaW5naWZ5S2V5KGtleTogYW55KTogc3RyaW5nIHtcbiAgICBpZiAodHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIGtleVxuICAgIGlmICh0eXBlb2Yga2V5ID09PSBcInN5bWJvbFwiKSByZXR1cm4ga2V5LnRvU3RyaW5nKClcbiAgICByZXR1cm4gbmV3IFN0cmluZyhrZXkpLnRvU3RyaW5nKClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvUHJpbWl0aXZlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSBudWxsID8gbnVsbCA6IHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiA/IFwiXCIgKyB2YWx1ZSA6IHZhbHVlXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNQcm9wKHRhcmdldDogT2JqZWN0LCBwcm9wOiBQcm9wZXJ0eUtleSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBvYmplY3RQcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0YXJnZXQsIHByb3ApXG59XG5cbi8vIEZyb20gSW1tZXIgdXRpbHNcbmV4cG9ydCBjb25zdCBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID1cbiAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyB8fFxuICAgIGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnModGFyZ2V0OiBhbnkpIHtcbiAgICAgICAgLy8gUG9seWZpbGwgbmVlZGVkIGZvciBIZXJtZXMgYW5kIElFLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2hlcm1lcy9pc3N1ZXMvMjc0XG4gICAgICAgIGNvbnN0IHJlczogYW55ID0ge31cbiAgICAgICAgLy8gTm90ZTogd2l0aG91dCBwb2x5ZmlsbCBmb3Igb3duS2V5cywgc3ltYm9scyB3b24ndCBiZSBwaWNrZWQgdXBcbiAgICAgICAgb3duS2V5cyh0YXJnZXQpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICAgIHJlc1trZXldID0gZ2V0RGVzY3JpcHRvcih0YXJnZXQsIGtleSlcbiAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuIHJlc1xuICAgIH1cbiIsImltcG9ydCB7IEFubm90YXRpb24sIGFkZEhpZGRlblByb3AsIEFubm90YXRpb25zTWFwLCBoYXNQcm9wLCBkaWUsIGlzT3ZlcnJpZGUgfSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5leHBvcnQgY29uc3Qgc3RvcmVkQW5ub3RhdGlvbnNTeW1ib2wgPSBTeW1ib2woXCJtb2J4LXN0b3JlZC1hbm5vdGF0aW9uc1wiKVxuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGFjdHMgYXNcbiAqIC0gZGVjb3JhdG9yXG4gKiAtIGFubm90YXRpb24gb2JqZWN0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEZWNvcmF0b3JBbm5vdGF0aW9uKGFubm90YXRpb246IEFubm90YXRpb24pOiBQcm9wZXJ0eURlY29yYXRvciAmIEFubm90YXRpb24ge1xuICAgIGZ1bmN0aW9uIGRlY29yYXRvcih0YXJnZXQsIHByb3BlcnR5KSB7XG4gICAgICAgIHN0b3JlQW5ub3RhdGlvbih0YXJnZXQsIHByb3BlcnR5LCBhbm5vdGF0aW9uKVxuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihkZWNvcmF0b3IsIGFubm90YXRpb24pXG59XG5cbi8qKlxuICogU3RvcmVzIGFubm90YXRpb24gdG8gcHJvdG90eXBlLFxuICogc28gaXQgY2FuIGJlIGluc3BlY3RlZCBsYXRlciBieSBgbWFrZU9ic2VydmFibGVgIGNhbGxlZCBmcm9tIGNvbnN0cnVjdG9yXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdG9yZUFubm90YXRpb24ocHJvdG90eXBlOiBhbnksIGtleTogUHJvcGVydHlLZXksIGFubm90YXRpb246IEFubm90YXRpb24pIHtcbiAgICBpZiAoIWhhc1Byb3AocHJvdG90eXBlLCBzdG9yZWRBbm5vdGF0aW9uc1N5bWJvbCkpIHtcbiAgICAgICAgYWRkSGlkZGVuUHJvcChwcm90b3R5cGUsIHN0b3JlZEFubm90YXRpb25zU3ltYm9sLCB7XG4gICAgICAgICAgICAvLyBJbmhlcml0IGFubm90YXRpb25zXG4gICAgICAgICAgICAuLi5wcm90b3R5cGVbc3RvcmVkQW5ub3RhdGlvbnNTeW1ib2xdXG4gICAgICAgIH0pXG4gICAgfVxuICAgIC8vIEBvdmVycmlkZSBtdXN0IG92ZXJyaWRlIHNvbWV0aGluZ1xuICAgIGlmIChfX0RFVl9fICYmIGlzT3ZlcnJpZGUoYW5ub3RhdGlvbikgJiYgIWhhc1Byb3AocHJvdG90eXBlW3N0b3JlZEFubm90YXRpb25zU3ltYm9sXSwga2V5KSkge1xuICAgICAgICBjb25zdCBmaWVsZE5hbWUgPSBgJHtwcm90b3R5cGUuY29uc3RydWN0b3IubmFtZX0ucHJvdG90eXBlLiR7a2V5LnRvU3RyaW5nKCl9YFxuICAgICAgICBkaWUoXG4gICAgICAgICAgICBgJyR7ZmllbGROYW1lfScgaXMgZGVjb3JhdGVkIHdpdGggJ292ZXJyaWRlJywgYCArXG4gICAgICAgICAgICAgICAgYGJ1dCBubyBzdWNoIGRlY29yYXRlZCBtZW1iZXIgd2FzIGZvdW5kIG9uIHByb3RvdHlwZS5gXG4gICAgICAgIClcbiAgICB9XG4gICAgLy8gQ2Fubm90IHJlLWRlY29yYXRlXG4gICAgYXNzZXJ0Tm90RGVjb3JhdGVkKHByb3RvdHlwZSwgYW5ub3RhdGlvbiwga2V5KVxuXG4gICAgLy8gSWdub3JlIG92ZXJyaWRlXG4gICAgaWYgKCFpc092ZXJyaWRlKGFubm90YXRpb24pKSB7XG4gICAgICAgIHByb3RvdHlwZVtzdG9yZWRBbm5vdGF0aW9uc1N5bWJvbF1ba2V5XSA9IGFubm90YXRpb25cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydE5vdERlY29yYXRlZChwcm90b3R5cGU6IG9iamVjdCwgYW5ub3RhdGlvbjogQW5ub3RhdGlvbiwga2V5OiBQcm9wZXJ0eUtleSkge1xuICAgIGlmIChfX0RFVl9fICYmICFpc092ZXJyaWRlKGFubm90YXRpb24pICYmIGhhc1Byb3AocHJvdG90eXBlW3N0b3JlZEFubm90YXRpb25zU3ltYm9sXSwga2V5KSkge1xuICAgICAgICBjb25zdCBmaWVsZE5hbWUgPSBgJHtwcm90b3R5cGUuY29uc3RydWN0b3IubmFtZX0ucHJvdG90eXBlLiR7a2V5LnRvU3RyaW5nKCl9YFxuICAgICAgICBjb25zdCBjdXJyZW50QW5ub3RhdGlvblR5cGUgPSBwcm90b3R5cGVbc3RvcmVkQW5ub3RhdGlvbnNTeW1ib2xdW2tleV0uYW5ub3RhdGlvblR5cGVfXG4gICAgICAgIGNvbnN0IHJlcXVlc3RlZEFubm90YXRpb25UeXBlID0gYW5ub3RhdGlvbi5hbm5vdGF0aW9uVHlwZV9cbiAgICAgICAgZGllKFxuICAgICAgICAgICAgYENhbm5vdCBhcHBseSAnQCR7cmVxdWVzdGVkQW5ub3RhdGlvblR5cGV9JyB0byAnJHtmaWVsZE5hbWV9JzpgICtcbiAgICAgICAgICAgICAgICBgXFxuVGhlIGZpZWxkIGlzIGFscmVhZHkgZGVjb3JhdGVkIHdpdGggJ0Ake2N1cnJlbnRBbm5vdGF0aW9uVHlwZX0nLmAgK1xuICAgICAgICAgICAgICAgIGBcXG5SZS1kZWNvcmF0aW5nIGZpZWxkcyBpcyBub3QgYWxsb3dlZC5gICtcbiAgICAgICAgICAgICAgICBgXFxuVXNlICdAb3ZlcnJpZGUnIGRlY29yYXRvciBmb3IgbWV0aG9kcyBvdmVycmlkZW4gYnkgc3ViY2xhc3MuYFxuICAgICAgICApXG4gICAgfVxufVxuXG4vKipcbiAqIENvbGxlY3RzIGFubm90YXRpb25zIGZyb20gcHJvdG90eXBlcyBhbmQgc3RvcmVzIHRoZW0gb24gdGFyZ2V0IChpbnN0YW5jZSlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbGxlY3RTdG9yZWRBbm5vdGF0aW9ucyh0YXJnZXQpOiBBbm5vdGF0aW9uc01hcDxhbnksIGFueT4ge1xuICAgIGlmICghaGFzUHJvcCh0YXJnZXQsIHN0b3JlZEFubm90YXRpb25zU3ltYm9sKSkge1xuICAgICAgICBpZiAoX19ERVZfXyAmJiAhdGFyZ2V0W3N0b3JlZEFubm90YXRpb25zU3ltYm9sXSkge1xuICAgICAgICAgICAgZGllKFxuICAgICAgICAgICAgICAgIGBObyBhbm5vdGF0aW9ucyB3ZXJlIHBhc3NlZCB0byBtYWtlT2JzZXJ2YWJsZSwgYnV0IG5vIGRlY29yYXRlZCBtZW1iZXJzIGhhdmUgYmVlbiBmb3VuZCBlaXRoZXJgXG4gICAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgICAgLy8gV2UgbmVlZCBhIGNvcHkgYXMgd2Ugd2lsbCByZW1vdmUgYW5ub3RhdGlvbiBmcm9tIHRoZSBsaXN0IG9uY2UgaXQncyBhcHBsaWVkLlxuICAgICAgICBhZGRIaWRkZW5Qcm9wKHRhcmdldCwgc3RvcmVkQW5ub3RhdGlvbnNTeW1ib2wsIHsgLi4udGFyZ2V0W3N0b3JlZEFubm90YXRpb25zU3ltYm9sXSB9KVxuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0W3N0b3JlZEFubm90YXRpb25zU3ltYm9sXVxufVxuIiwiaW1wb3J0IHtcbiAgICBJRGVyaXZhdGlvblN0YXRlXyxcbiAgICBJT2JzZXJ2YWJsZSxcbiAgICBJRGVyaXZhdGlvbixcbiAgICBjcmVhdGVJbnN0YW5jZW9mUHJlZGljYXRlLFxuICAgIGVuZEJhdGNoLFxuICAgIGdldE5leHRJZCxcbiAgICBub29wLFxuICAgIG9uQmVjb21lT2JzZXJ2ZWQsXG4gICAgb25CZWNvbWVVbm9ic2VydmVkLFxuICAgIHByb3BhZ2F0ZUNoYW5nZWQsXG4gICAgcmVwb3J0T2JzZXJ2ZWQsXG4gICAgc3RhcnRCYXRjaCxcbiAgICBMYW1iZGFcbn0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuZXhwb3J0IGNvbnN0ICRtb2J4ID0gU3ltYm9sKFwibW9ieCBhZG1pbmlzdHJhdGlvblwiKVxuXG5leHBvcnQgaW50ZXJmYWNlIElBdG9tIGV4dGVuZHMgSU9ic2VydmFibGUge1xuICAgIHJlcG9ydE9ic2VydmVkKClcbiAgICByZXBvcnRDaGFuZ2VkKClcbn1cblxuZXhwb3J0IGNsYXNzIEF0b20gaW1wbGVtZW50cyBJQXRvbSB7XG4gICAgaXNQZW5kaW5nVW5vYnNlcnZhdGlvbl8gPSBmYWxzZSAvLyBmb3IgZWZmZWN0aXZlIHVub2JzZXJ2aW5nLiBCYXNlQXRvbSBoYXMgdHJ1ZSwgZm9yIGV4dHJhIG9wdGltaXphdGlvbiwgc28gaXRzIG9uQmVjb21lVW5vYnNlcnZlZCBuZXZlciBnZXRzIGNhbGxlZCwgYmVjYXVzZSBpdCdzIG5vdCBuZWVkZWRcbiAgICBpc0JlaW5nT2JzZXJ2ZWRfID0gZmFsc2VcbiAgICBvYnNlcnZlcnNfID0gbmV3IFNldDxJRGVyaXZhdGlvbj4oKVxuXG4gICAgZGlmZlZhbHVlXyA9IDBcbiAgICBsYXN0QWNjZXNzZWRCeV8gPSAwXG4gICAgbG93ZXN0T2JzZXJ2ZXJTdGF0ZV8gPSBJRGVyaXZhdGlvblN0YXRlXy5OT1RfVFJBQ0tJTkdfXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IGF0b20uIEZvciBkZWJ1Z2dpbmcgcHVycG9zZXMgaXQgaXMgcmVjb21tZW5kZWQgdG8gZ2l2ZSBpdCBhIG5hbWUuXG4gICAgICogVGhlIG9uQmVjb21lT2JzZXJ2ZWQgYW5kIG9uQmVjb21lVW5vYnNlcnZlZCBjYWxsYmFja3MgY2FuIGJlIHVzZWQgZm9yIHJlc291cmNlIG1hbmFnZW1lbnQuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IocHVibGljIG5hbWVfID0gX19ERVZfXyA/IFwiQXRvbUBcIiArIGdldE5leHRJZCgpIDogXCJBdG9tXCIpIHt9XG5cbiAgICAvLyBvbkJlY29tZU9ic2VydmVkTGlzdGVuZXJzXG4gICAgcHVibGljIG9uQk9MOiBTZXQ8TGFtYmRhPiB8IHVuZGVmaW5lZFxuICAgIC8vIG9uQmVjb21lVW5vYnNlcnZlZExpc3RlbmVyc1xuICAgIHB1YmxpYyBvbkJVT0w6IFNldDxMYW1iZGE+IHwgdW5kZWZpbmVkXG5cbiAgICBwdWJsaWMgb25CTygpIHtcbiAgICAgICAgaWYgKHRoaXMub25CT0wpIHtcbiAgICAgICAgICAgIHRoaXMub25CT0wuZm9yRWFjaChsaXN0ZW5lciA9PiBsaXN0ZW5lcigpKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIG9uQlVPKCkge1xuICAgICAgICBpZiAodGhpcy5vbkJVT0wpIHtcbiAgICAgICAgICAgIHRoaXMub25CVU9MLmZvckVhY2gobGlzdGVuZXIgPT4gbGlzdGVuZXIoKSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEludm9rZSB0aGlzIG1ldGhvZCB0byBub3RpZnkgbW9ieCB0aGF0IHlvdXIgYXRvbSBoYXMgYmVlbiB1c2VkIHNvbWVob3cuXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZXJlIGlzIGN1cnJlbnRseSBhIHJlYWN0aXZlIGNvbnRleHQuXG4gICAgICovXG4gICAgcHVibGljIHJlcG9ydE9ic2VydmVkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gcmVwb3J0T2JzZXJ2ZWQodGhpcylcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2UgdGhpcyBtZXRob2QgX2FmdGVyXyB0aGlzIG1ldGhvZCBoYXMgY2hhbmdlZCB0byBzaWduYWwgbW9ieCB0aGF0IGFsbCBpdHMgb2JzZXJ2ZXJzIHNob3VsZCBpbnZhbGlkYXRlLlxuICAgICAqL1xuICAgIHB1YmxpYyByZXBvcnRDaGFuZ2VkKCkge1xuICAgICAgICBzdGFydEJhdGNoKClcbiAgICAgICAgcHJvcGFnYXRlQ2hhbmdlZCh0aGlzKVxuICAgICAgICBlbmRCYXRjaCgpXG4gICAgfVxuXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5hbWVfXG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgaXNBdG9tID0gY3JlYXRlSW5zdGFuY2VvZlByZWRpY2F0ZShcIkF0b21cIiwgQXRvbSlcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUF0b20oXG4gICAgbmFtZTogc3RyaW5nLFxuICAgIG9uQmVjb21lT2JzZXJ2ZWRIYW5kbGVyOiAoKSA9PiB2b2lkID0gbm9vcCxcbiAgICBvbkJlY29tZVVub2JzZXJ2ZWRIYW5kbGVyOiAoKSA9PiB2b2lkID0gbm9vcFxuKTogSUF0b20ge1xuICAgIGNvbnN0IGF0b20gPSBuZXcgQXRvbShuYW1lKVxuICAgIC8vIGRlZmF1bHQgYG5vb3BgIGxpc3RlbmVyIHdpbGwgbm90IGluaXRpYWxpemUgdGhlIGhvb2sgU2V0XG4gICAgaWYgKG9uQmVjb21lT2JzZXJ2ZWRIYW5kbGVyICE9PSBub29wKSB7XG4gICAgICAgIG9uQmVjb21lT2JzZXJ2ZWQoYXRvbSwgb25CZWNvbWVPYnNlcnZlZEhhbmRsZXIpXG4gICAgfVxuXG4gICAgaWYgKG9uQmVjb21lVW5vYnNlcnZlZEhhbmRsZXIgIT09IG5vb3ApIHtcbiAgICAgICAgb25CZWNvbWVVbm9ic2VydmVkKGF0b20sIG9uQmVjb21lVW5vYnNlcnZlZEhhbmRsZXIpXG4gICAgfVxuICAgIHJldHVybiBhdG9tXG59XG4iLCJpbXBvcnQgeyBkZWVwRXF1YWwgfSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5leHBvcnQgaW50ZXJmYWNlIElFcXVhbHNDb21wYXJlcjxUPiB7XG4gICAgKGE6IFQsIGI6IFQpOiBib29sZWFuXG59XG5cbmZ1bmN0aW9uIGlkZW50aXR5Q29tcGFyZXIoYTogYW55LCBiOiBhbnkpOiBib29sZWFuIHtcbiAgICByZXR1cm4gYSA9PT0gYlxufVxuXG5mdW5jdGlvbiBzdHJ1Y3R1cmFsQ29tcGFyZXIoYTogYW55LCBiOiBhbnkpOiBib29sZWFuIHtcbiAgICByZXR1cm4gZGVlcEVxdWFsKGEsIGIpXG59XG5cbmZ1bmN0aW9uIHNoYWxsb3dDb21wYXJlcihhOiBhbnksIGI6IGFueSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBkZWVwRXF1YWwoYSwgYiwgMSlcbn1cblxuZnVuY3Rpb24gZGVmYXVsdENvbXBhcmVyKGE6IGFueSwgYjogYW55KTogYm9vbGVhbiB7XG4gICAgaWYgKE9iamVjdC5pcykgcmV0dXJuIE9iamVjdC5pcyhhLCBiKVxuXG4gICAgcmV0dXJuIGEgPT09IGJcbiAgICAgICAgPyBhICE9PSAwIHx8IDEgLyBhID09PSAxIC8gYlxuICAgICAgICA6IGEgIT09IGEgJiYgYiAhPT0gYlxufVxuXG5leHBvcnQgY29uc3QgY29tcGFyZXIgPSB7XG4gICAgaWRlbnRpdHk6IGlkZW50aXR5Q29tcGFyZXIsXG4gICAgc3RydWN0dXJhbDogc3RydWN0dXJhbENvbXBhcmVyLFxuICAgIGRlZmF1bHQ6IGRlZmF1bHRDb21wYXJlcixcbiAgICBzaGFsbG93OiBzaGFsbG93Q29tcGFyZXJcbn1cbiIsImltcG9ydCB7XG4gICAgZGVlcEVxdWFsLFxuICAgIGlzRVM2TWFwLFxuICAgIGlzRVM2U2V0LFxuICAgIGlzT2JzZXJ2YWJsZSxcbiAgICBpc09ic2VydmFibGVBcnJheSxcbiAgICBpc09ic2VydmFibGVNYXAsXG4gICAgaXNPYnNlcnZhYmxlU2V0LFxuICAgIGlzT2JzZXJ2YWJsZU9iamVjdCxcbiAgICBpc1BsYWluT2JqZWN0LFxuICAgIG9ic2VydmFibGUsXG4gICAgZGllLFxuICAgIGlzQWN0aW9uLFxuICAgIGF1dG9BY3Rpb24sXG4gICAgZmxvdyxcbiAgICBpc0Zsb3csXG4gICAgaXNHZW5lcmF0b3Jcbn0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuZXhwb3J0IGludGVyZmFjZSBJRW5oYW5jZXI8VD4ge1xuICAgIChuZXdWYWx1ZTogVCwgb2xkVmFsdWU6IFQgfCB1bmRlZmluZWQsIG5hbWU6IHN0cmluZyk6IFRcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlZXBFbmhhbmNlcih2LCBfLCBuYW1lKSB7XG4gICAgLy8gaXQgaXMgYW4gb2JzZXJ2YWJsZSBhbHJlYWR5LCBkb25lXG4gICAgaWYgKGlzT2JzZXJ2YWJsZSh2KSkgcmV0dXJuIHZcblxuICAgIC8vIHNvbWV0aGluZyB0aGF0IGNhbiBiZSBjb252ZXJ0ZWQgYW5kIG11dGF0ZWQ/XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodikpIHJldHVybiBvYnNlcnZhYmxlLmFycmF5KHYsIHsgbmFtZSB9KVxuICAgIGlmIChpc1BsYWluT2JqZWN0KHYpKSByZXR1cm4gb2JzZXJ2YWJsZS5vYmplY3QodiwgdW5kZWZpbmVkLCB7IG5hbWUgfSlcbiAgICBpZiAoaXNFUzZNYXAodikpIHJldHVybiBvYnNlcnZhYmxlLm1hcCh2LCB7IG5hbWUgfSlcbiAgICBpZiAoaXNFUzZTZXQodikpIHJldHVybiBvYnNlcnZhYmxlLnNldCh2LCB7IG5hbWUgfSlcbiAgICBpZiAodHlwZW9mIHYgPT09IFwiZnVuY3Rpb25cIiAmJiAhaXNBY3Rpb24odikgJiYgIWlzRmxvdyh2KSkge1xuICAgICAgICBpZiAoaXNHZW5lcmF0b3IodikpIHtcbiAgICAgICAgICAgIHJldHVybiBmbG93KHYpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gYXV0b0FjdGlvbihuYW1lLCB2KVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaGFsbG93RW5oYW5jZXIodiwgXywgbmFtZSk6IGFueSB7XG4gICAgaWYgKHYgPT09IHVuZGVmaW5lZCB8fCB2ID09PSBudWxsKSByZXR1cm4gdlxuICAgIGlmIChpc09ic2VydmFibGVPYmplY3QodikgfHwgaXNPYnNlcnZhYmxlQXJyYXkodikgfHwgaXNPYnNlcnZhYmxlTWFwKHYpIHx8IGlzT2JzZXJ2YWJsZVNldCh2KSlcbiAgICAgICAgcmV0dXJuIHZcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2KSkgcmV0dXJuIG9ic2VydmFibGUuYXJyYXkodiwgeyBuYW1lLCBkZWVwOiBmYWxzZSB9KVxuICAgIGlmIChpc1BsYWluT2JqZWN0KHYpKSByZXR1cm4gb2JzZXJ2YWJsZS5vYmplY3QodiwgdW5kZWZpbmVkLCB7IG5hbWUsIGRlZXA6IGZhbHNlIH0pXG4gICAgaWYgKGlzRVM2TWFwKHYpKSByZXR1cm4gb2JzZXJ2YWJsZS5tYXAodiwgeyBuYW1lLCBkZWVwOiBmYWxzZSB9KVxuICAgIGlmIChpc0VTNlNldCh2KSkgcmV0dXJuIG9ic2VydmFibGUuc2V0KHYsIHsgbmFtZSwgZGVlcDogZmFsc2UgfSlcblxuICAgIGlmIChfX0RFVl9fKVxuICAgICAgICBkaWUoXG4gICAgICAgICAgICBcIlRoZSBzaGFsbG93IG1vZGlmaWVyIC8gZGVjb3JhdG9yIGNhbiBvbmx5IHVzZWQgaW4gY29tYmluYXRpb24gd2l0aCBhcnJheXMsIG9iamVjdHMsIG1hcHMgYW5kIHNldHNcIlxuICAgICAgICApXG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWZlcmVuY2VFbmhhbmNlcihuZXdWYWx1ZT8pIHtcbiAgICAvLyBuZXZlciB0dXJuIGludG8gYW4gb2JzZXJ2YWJsZVxuICAgIHJldHVybiBuZXdWYWx1ZVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVmU3RydWN0RW5oYW5jZXIodiwgb2xkVmFsdWUpOiBhbnkge1xuICAgIGlmIChfX0RFVl9fICYmIGlzT2JzZXJ2YWJsZSh2KSlcbiAgICAgICAgZGllKGBvYnNlcnZhYmxlLnN0cnVjdCBzaG91bGQgbm90IGJlIHVzZWQgd2l0aCBvYnNlcnZhYmxlIHZhbHVlc2ApXG4gICAgaWYgKGRlZXBFcXVhbCh2LCBvbGRWYWx1ZSkpIHJldHVybiBvbGRWYWx1ZVxuICAgIHJldHVybiB2XG59XG4iLCJpbXBvcnQge1xuICAgIGRpZSxcbiAgICBBbm5vdGF0aW9uLFxuICAgIGhhc1Byb3AsXG4gICAgY3JlYXRlRGVjb3JhdG9yQW5ub3RhdGlvbixcbiAgICBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24sXG4gICAgTWFrZVJlc3VsdFxufSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5jb25zdCBPVkVSUklERSA9IFwib3ZlcnJpZGVcIlxuXG5leHBvcnQgY29uc3Qgb3ZlcnJpZGU6IEFubm90YXRpb24gJiBQcm9wZXJ0eURlY29yYXRvciA9IGNyZWF0ZURlY29yYXRvckFubm90YXRpb24oe1xuICAgIGFubm90YXRpb25UeXBlXzogT1ZFUlJJREUsXG4gICAgbWFrZV8sXG4gICAgZXh0ZW5kX1xufSlcblxuZXhwb3J0IGZ1bmN0aW9uIGlzT3ZlcnJpZGUoYW5ub3RhdGlvbjogQW5ub3RhdGlvbik6IGJvb2xlYW4ge1xuICAgIHJldHVybiBhbm5vdGF0aW9uLmFubm90YXRpb25UeXBlXyA9PT0gT1ZFUlJJREVcbn1cblxuZnVuY3Rpb24gbWFrZV8oYWRtOiBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24sIGtleSk6IE1ha2VSZXN1bHQge1xuICAgIC8vIE11c3Qgbm90IGJlIHBsYWluIG9iamVjdFxuICAgIGlmIChfX0RFVl9fICYmIGFkbS5pc1BsYWluT2JqZWN0Xykge1xuICAgICAgICBkaWUoXG4gICAgICAgICAgICBgQ2Fubm90IGFwcGx5ICcke3RoaXMuYW5ub3RhdGlvblR5cGVffScgdG8gJyR7YWRtLm5hbWVffS4ke2tleS50b1N0cmluZygpfSc6YCArXG4gICAgICAgICAgICAgICAgYFxcbicke3RoaXMuYW5ub3RhdGlvblR5cGVffScgY2Fubm90IGJlIHVzZWQgb24gcGxhaW4gb2JqZWN0cy5gXG4gICAgICAgIClcbiAgICB9XG4gICAgLy8gTXVzdCBvdmVycmlkZSBzb21ldGhpbmdcbiAgICBpZiAoX19ERVZfXyAmJiAhaGFzUHJvcChhZG0uYXBwbGllZEFubm90YXRpb25zXyEsIGtleSkpIHtcbiAgICAgICAgZGllKFxuICAgICAgICAgICAgYCcke2FkbS5uYW1lX30uJHtrZXkudG9TdHJpbmcoKX0nIGlzIGFubm90YXRlZCB3aXRoICcke3RoaXMuYW5ub3RhdGlvblR5cGVffScsIGAgK1xuICAgICAgICAgICAgICAgIGBidXQgbm8gc3VjaCBhbm5vdGF0ZWQgbWVtYmVyIHdhcyBmb3VuZCBvbiBwcm90b3R5cGUuYFxuICAgICAgICApXG4gICAgfVxuICAgIHJldHVybiBNYWtlUmVzdWx0LkNhbmNlbFxufVxuXG5mdW5jdGlvbiBleHRlbmRfKGFkbSwga2V5LCBkZXNjcmlwdG9yLCBwcm94eVRyYXApOiBib29sZWFuIHtcbiAgICBkaWUoYCcke3RoaXMuYW5ub3RhdGlvblR5cGVffScgY2FuIG9ubHkgYmUgdXNlZCB3aXRoICdtYWtlT2JzZXJ2YWJsZSdgKVxufVxuIiwiaW1wb3J0IHtcbiAgICBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24sXG4gICAgY3JlYXRlQWN0aW9uLFxuICAgIGlzQWN0aW9uLFxuICAgIGRlZmluZVByb3BlcnR5LFxuICAgIGRpZSxcbiAgICBpc0Z1bmN0aW9uLFxuICAgIEFubm90YXRpb24sXG4gICAgZ2xvYmFsU3RhdGUsXG4gICAgTWFrZVJlc3VsdFxufSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQWN0aW9uQW5ub3RhdGlvbihuYW1lOiBzdHJpbmcsIG9wdGlvbnM/OiBvYmplY3QpOiBBbm5vdGF0aW9uIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBhbm5vdGF0aW9uVHlwZV86IG5hbWUsXG4gICAgICAgIG9wdGlvbnNfOiBvcHRpb25zLFxuICAgICAgICBtYWtlXyxcbiAgICAgICAgZXh0ZW5kX1xuICAgIH1cbn1cblxuZnVuY3Rpb24gbWFrZV8oXG4gICAgYWRtOiBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24sXG4gICAga2V5OiBQcm9wZXJ0eUtleSxcbiAgICBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3IsXG4gICAgc291cmNlOiBvYmplY3Rcbik6IE1ha2VSZXN1bHQge1xuICAgIC8vIGJvdW5kXG4gICAgaWYgKHRoaXMub3B0aW9uc18/LmJvdW5kKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmV4dGVuZF8oYWRtLCBrZXksIGRlc2NyaXB0b3IsIGZhbHNlKSA9PT0gbnVsbFxuICAgICAgICAgICAgPyBNYWtlUmVzdWx0LkNhbmNlbFxuICAgICAgICAgICAgOiBNYWtlUmVzdWx0LkJyZWFrXG4gICAgfVxuICAgIC8vIG93blxuICAgIGlmIChzb3VyY2UgPT09IGFkbS50YXJnZXRfKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmV4dGVuZF8oYWRtLCBrZXksIGRlc2NyaXB0b3IsIGZhbHNlKSA9PT0gbnVsbFxuICAgICAgICAgICAgPyBNYWtlUmVzdWx0LkNhbmNlbFxuICAgICAgICAgICAgOiBNYWtlUmVzdWx0LkNvbnRpbnVlXG4gICAgfVxuICAgIC8vIHByb3RvdHlwZVxuICAgIGlmIChpc0FjdGlvbihkZXNjcmlwdG9yLnZhbHVlKSkge1xuICAgICAgICAvLyBBIHByb3RvdHlwZSBjb3VsZCBoYXZlIGJlZW4gYW5ub3RhdGVkIGFscmVhZHkgYnkgb3RoZXIgY29uc3RydWN0b3IsXG4gICAgICAgIC8vIHJlc3Qgb2YgdGhlIHByb3RvIGNoYWluIG11c3QgYmUgYW5ub3RhdGVkIGFscmVhZHlcbiAgICAgICAgcmV0dXJuIE1ha2VSZXN1bHQuQnJlYWtcbiAgICB9XG4gICAgY29uc3QgYWN0aW9uRGVzY3JpcHRvciA9IGNyZWF0ZUFjdGlvbkRlc2NyaXB0b3IoYWRtLCB0aGlzLCBrZXksIGRlc2NyaXB0b3IsIGZhbHNlKVxuICAgIGRlZmluZVByb3BlcnR5KHNvdXJjZSwga2V5LCBhY3Rpb25EZXNjcmlwdG9yKVxuICAgIHJldHVybiBNYWtlUmVzdWx0LkNvbnRpbnVlXG59XG5cbmZ1bmN0aW9uIGV4dGVuZF8oXG4gICAgYWRtOiBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24sXG4gICAga2V5OiBQcm9wZXJ0eUtleSxcbiAgICBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3IsXG4gICAgcHJveHlUcmFwOiBib29sZWFuXG4pOiBib29sZWFuIHwgbnVsbCB7XG4gICAgY29uc3QgYWN0aW9uRGVzY3JpcHRvciA9IGNyZWF0ZUFjdGlvbkRlc2NyaXB0b3IoYWRtLCB0aGlzLCBrZXksIGRlc2NyaXB0b3IpXG4gICAgcmV0dXJuIGFkbS5kZWZpbmVQcm9wZXJ0eV8oa2V5LCBhY3Rpb25EZXNjcmlwdG9yLCBwcm94eVRyYXApXG59XG5cbmZ1bmN0aW9uIGFzc2VydEFjdGlvbkRlc2NyaXB0b3IoXG4gICAgYWRtOiBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24sXG4gICAgeyBhbm5vdGF0aW9uVHlwZV8gfTogQW5ub3RhdGlvbixcbiAgICBrZXk6IFByb3BlcnR5S2V5LFxuICAgIHsgdmFsdWUgfTogUHJvcGVydHlEZXNjcmlwdG9yXG4pIHtcbiAgICBpZiAoX19ERVZfXyAmJiAhaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICAgICAgZGllKFxuICAgICAgICAgICAgYENhbm5vdCBhcHBseSAnJHthbm5vdGF0aW9uVHlwZV99JyB0byAnJHthZG0ubmFtZV99LiR7a2V5LnRvU3RyaW5nKCl9JzpgICtcbiAgICAgICAgICAgICAgICBgXFxuJyR7YW5ub3RhdGlvblR5cGVffScgY2FuIG9ubHkgYmUgdXNlZCBvbiBwcm9wZXJ0aWVzIHdpdGggYSBmdW5jdGlvbiB2YWx1ZS5gXG4gICAgICAgIClcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVBY3Rpb25EZXNjcmlwdG9yKFxuICAgIGFkbTogT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uLFxuICAgIGFubm90YXRpb246IEFubm90YXRpb24sXG4gICAga2V5OiBQcm9wZXJ0eUtleSxcbiAgICBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3IsXG4gICAgLy8gcHJvdmlkZXMgYWJpbGl0eSB0byBkaXNhYmxlIHNhZmVEZXNjcmlwdG9ycyBmb3IgcHJvdG90eXBlc1xuICAgIHNhZmVEZXNjcmlwdG9yczogYm9vbGVhbiA9IGdsb2JhbFN0YXRlLnNhZmVEZXNjcmlwdG9yc1xuKSB7XG4gICAgYXNzZXJ0QWN0aW9uRGVzY3JpcHRvcihhZG0sIGFubm90YXRpb24sIGtleSwgZGVzY3JpcHRvcilcbiAgICBsZXQgeyB2YWx1ZSB9ID0gZGVzY3JpcHRvclxuICAgIGlmIChhbm5vdGF0aW9uLm9wdGlvbnNfPy5ib3VuZCkge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLmJpbmQoYWRtLnByb3h5XyA/PyBhZG0udGFyZ2V0XylcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWU6IGNyZWF0ZUFjdGlvbihcbiAgICAgICAgICAgIGFubm90YXRpb24ub3B0aW9uc18/Lm5hbWUgPz8ga2V5LnRvU3RyaW5nKCksXG4gICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgIGFubm90YXRpb24ub3B0aW9uc18/LmF1dG9BY3Rpb24gPz8gZmFsc2VcbiAgICAgICAgKSxcbiAgICAgICAgLy8gTm9uLWNvbmZpZ3VyYWJsZSBmb3IgY2xhc3Nlc1xuICAgICAgICAvLyBwcmV2ZW50cyBhY2NpZGVudGFsIGZpZWxkIHJlZGVmaW5pdGlvbiBpbiBzdWJjbGFzc1xuICAgICAgICBjb25maWd1cmFibGU6IHNhZmVEZXNjcmlwdG9ycyA/IGFkbS5pc1BsYWluT2JqZWN0XyA6IHRydWUsXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tb2J4anMvbW9ieC9wdWxsLzI2NDEjaXNzdWVjb21tZW50LTczNzI5MjA1OFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgLy8gTm9uLW9ic2V2YWJsZSwgdGhlcmVmb3JlIG5vbi13cml0YWJsZVxuICAgICAgICAvLyBBbHNvIHByZXZlbnRzIHJld3JpdGluZyBpbiBzdWJjbGFzcyBjb25zdHJ1Y3RvclxuICAgICAgICB3cml0YWJsZTogc2FmZURlc2NyaXB0b3JzID8gZmFsc2UgOiB0cnVlXG4gICAgfVxufVxuIiwiaW1wb3J0IHtcbiAgICBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24sXG4gICAgQW5ub3RhdGlvbixcbiAgICBkZWZpbmVQcm9wZXJ0eSxcbiAgICBkaWUsXG4gICAgZmxvdyxcbiAgICBpc0Zsb3csXG4gICAgaXNGdW5jdGlvbixcbiAgICBnbG9iYWxTdGF0ZSxcbiAgICBNYWtlUmVzdWx0XG59IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVGbG93QW5ub3RhdGlvbihuYW1lOiBzdHJpbmcsIG9wdGlvbnM/OiBvYmplY3QpOiBBbm5vdGF0aW9uIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBhbm5vdGF0aW9uVHlwZV86IG5hbWUsXG4gICAgICAgIG9wdGlvbnNfOiBvcHRpb25zLFxuICAgICAgICBtYWtlXyxcbiAgICAgICAgZXh0ZW5kX1xuICAgIH1cbn1cblxuZnVuY3Rpb24gbWFrZV8oXG4gICAgYWRtOiBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24sXG4gICAga2V5OiBQcm9wZXJ0eUtleSxcbiAgICBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3IsXG4gICAgc291cmNlOiBvYmplY3Rcbik6IE1ha2VSZXN1bHQge1xuICAgIC8vIG93blxuICAgIGlmIChzb3VyY2UgPT09IGFkbS50YXJnZXRfKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmV4dGVuZF8oYWRtLCBrZXksIGRlc2NyaXB0b3IsIGZhbHNlKSA9PT0gbnVsbFxuICAgICAgICAgICAgPyBNYWtlUmVzdWx0LkNhbmNlbFxuICAgICAgICAgICAgOiBNYWtlUmVzdWx0LkNvbnRpbnVlXG4gICAgfVxuICAgIC8vIHByb3RvdHlwZVxuICAgIC8vIGJvdW5kIC0gbXVzdCBhbm5vdGF0ZSBwcm90b3MgdG8gc3VwcG9ydCBzdXBlci5mbG93KClcbiAgICBpZiAodGhpcy5vcHRpb25zXz8uYm91bmQgJiYgIWlzRmxvdyhhZG0udGFyZ2V0X1trZXldKSkge1xuICAgICAgICBpZiAodGhpcy5leHRlbmRfKGFkbSwga2V5LCBkZXNjcmlwdG9yLCBmYWxzZSkgPT09IG51bGwpIHJldHVybiBNYWtlUmVzdWx0LkNhbmNlbFxuICAgIH1cbiAgICBpZiAoaXNGbG93KGRlc2NyaXB0b3IudmFsdWUpKSB7XG4gICAgICAgIC8vIEEgcHJvdG90eXBlIGNvdWxkIGhhdmUgYmVlbiBhbm5vdGF0ZWQgYWxyZWFkeSBieSBvdGhlciBjb25zdHJ1Y3RvcixcbiAgICAgICAgLy8gcmVzdCBvZiB0aGUgcHJvdG8gY2hhaW4gbXVzdCBiZSBhbm5vdGF0ZWQgYWxyZWFkeVxuICAgICAgICByZXR1cm4gTWFrZVJlc3VsdC5CcmVha1xuICAgIH1cbiAgICBjb25zdCBmbG93RGVzY3JpcHRvciA9IGNyZWF0ZUZsb3dEZXNjcmlwdG9yKGFkbSwgdGhpcywga2V5LCBkZXNjcmlwdG9yLCBmYWxzZSwgZmFsc2UpXG4gICAgZGVmaW5lUHJvcGVydHkoc291cmNlLCBrZXksIGZsb3dEZXNjcmlwdG9yKVxuICAgIHJldHVybiBNYWtlUmVzdWx0LkNvbnRpbnVlXG59XG5cbmZ1bmN0aW9uIGV4dGVuZF8oXG4gICAgYWRtOiBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24sXG4gICAga2V5OiBQcm9wZXJ0eUtleSxcbiAgICBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3IsXG4gICAgcHJveHlUcmFwOiBib29sZWFuXG4pOiBib29sZWFuIHwgbnVsbCB7XG4gICAgY29uc3QgZmxvd0Rlc2NyaXB0b3IgPSBjcmVhdGVGbG93RGVzY3JpcHRvcihhZG0sIHRoaXMsIGtleSwgZGVzY3JpcHRvciwgdGhpcy5vcHRpb25zXz8uYm91bmQpXG4gICAgcmV0dXJuIGFkbS5kZWZpbmVQcm9wZXJ0eV8oa2V5LCBmbG93RGVzY3JpcHRvciwgcHJveHlUcmFwKVxufVxuXG5mdW5jdGlvbiBhc3NlcnRGbG93RGVzY3JpcHRvcihcbiAgICBhZG06IE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbixcbiAgICB7IGFubm90YXRpb25UeXBlXyB9OiBBbm5vdGF0aW9uLFxuICAgIGtleTogUHJvcGVydHlLZXksXG4gICAgeyB2YWx1ZSB9OiBQcm9wZXJ0eURlc2NyaXB0b3Jcbikge1xuICAgIGlmIChfX0RFVl9fICYmICFpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgICAgICBkaWUoXG4gICAgICAgICAgICBgQ2Fubm90IGFwcGx5ICcke2Fubm90YXRpb25UeXBlX30nIHRvICcke2FkbS5uYW1lX30uJHtrZXkudG9TdHJpbmcoKX0nOmAgK1xuICAgICAgICAgICAgICAgIGBcXG4nJHthbm5vdGF0aW9uVHlwZV99JyBjYW4gb25seSBiZSB1c2VkIG9uIHByb3BlcnRpZXMgd2l0aCBhIGdlbmVyYXRvciBmdW5jdGlvbiB2YWx1ZS5gXG4gICAgICAgIClcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUZsb3dEZXNjcmlwdG9yKFxuICAgIGFkbTogT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uLFxuICAgIGFubm90YXRpb246IEFubm90YXRpb24sXG4gICAga2V5OiBQcm9wZXJ0eUtleSxcbiAgICBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3IsXG4gICAgYm91bmQ6IGJvb2xlYW4sXG4gICAgLy8gcHJvdmlkZXMgYWJpbGl0eSB0byBkaXNhYmxlIHNhZmVEZXNjcmlwdG9ycyBmb3IgcHJvdG90eXBlc1xuICAgIHNhZmVEZXNjcmlwdG9yczogYm9vbGVhbiA9IGdsb2JhbFN0YXRlLnNhZmVEZXNjcmlwdG9yc1xuKTogUHJvcGVydHlEZXNjcmlwdG9yIHtcbiAgICBhc3NlcnRGbG93RGVzY3JpcHRvcihhZG0sIGFubm90YXRpb24sIGtleSwgZGVzY3JpcHRvcilcbiAgICBsZXQgeyB2YWx1ZSB9ID0gZGVzY3JpcHRvclxuICAgIGlmIChib3VuZCkge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLmJpbmQoYWRtLnByb3h5XyA/PyBhZG0udGFyZ2V0XylcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWU6IGZsb3codmFsdWUpLFxuICAgICAgICAvLyBOb24tY29uZmlndXJhYmxlIGZvciBjbGFzc2VzXG4gICAgICAgIC8vIHByZXZlbnRzIGFjY2lkZW50YWwgZmllbGQgcmVkZWZpbml0aW9uIGluIHN1YmNsYXNzXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogc2FmZURlc2NyaXB0b3JzID8gYWRtLmlzUGxhaW5PYmplY3RfIDogdHJ1ZSxcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21vYnhqcy9tb2J4L3B1bGwvMjY0MSNpc3N1ZWNvbW1lbnQtNzM3MjkyMDU4XG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAvLyBOb24tb2JzZXZhYmxlLCB0aGVyZWZvcmUgbm9uLXdyaXRhYmxlXG4gICAgICAgIC8vIEFsc28gcHJldmVudHMgcmV3cml0aW5nIGluIHN1YmNsYXNzIGNvbnN0cnVjdG9yXG4gICAgICAgIHdyaXRhYmxlOiBzYWZlRGVzY3JpcHRvcnMgPyBmYWxzZSA6IHRydWVcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24sIGRpZSwgQW5ub3RhdGlvbiwgTWFrZVJlc3VsdCB9IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDb21wdXRlZEFubm90YXRpb24obmFtZTogc3RyaW5nLCBvcHRpb25zPzogb2JqZWN0KTogQW5ub3RhdGlvbiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYW5ub3RhdGlvblR5cGVfOiBuYW1lLFxuICAgICAgICBvcHRpb25zXzogb3B0aW9ucyxcbiAgICAgICAgbWFrZV8sXG4gICAgICAgIGV4dGVuZF9cbiAgICB9XG59XG5cbmZ1bmN0aW9uIG1ha2VfKFxuICAgIGFkbTogT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uLFxuICAgIGtleTogUHJvcGVydHlLZXksXG4gICAgZGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yXG4pOiBNYWtlUmVzdWx0IHtcbiAgICByZXR1cm4gdGhpcy5leHRlbmRfKGFkbSwga2V5LCBkZXNjcmlwdG9yLCBmYWxzZSkgPT09IG51bGwgPyBNYWtlUmVzdWx0LkNhbmNlbCA6IE1ha2VSZXN1bHQuQnJlYWtcbn1cblxuZnVuY3Rpb24gZXh0ZW5kXyhcbiAgICBhZG06IE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbixcbiAgICBrZXk6IFByb3BlcnR5S2V5LFxuICAgIGRlc2NyaXB0b3I6IFByb3BlcnR5RGVzY3JpcHRvcixcbiAgICBwcm94eVRyYXA6IGJvb2xlYW5cbik6IGJvb2xlYW4gfCBudWxsIHtcbiAgICBhc3NlcnRDb21wdXRlZERlc2NyaXB0b3IoYWRtLCB0aGlzLCBrZXksIGRlc2NyaXB0b3IpXG4gICAgcmV0dXJuIGFkbS5kZWZpbmVDb21wdXRlZFByb3BlcnR5XyhcbiAgICAgICAga2V5LFxuICAgICAgICB7XG4gICAgICAgICAgICAuLi50aGlzLm9wdGlvbnNfLFxuICAgICAgICAgICAgZ2V0OiBkZXNjcmlwdG9yLmdldCxcbiAgICAgICAgICAgIHNldDogZGVzY3JpcHRvci5zZXRcbiAgICAgICAgfSxcbiAgICAgICAgcHJveHlUcmFwXG4gICAgKVxufVxuXG5mdW5jdGlvbiBhc3NlcnRDb21wdXRlZERlc2NyaXB0b3IoXG4gICAgYWRtOiBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24sXG4gICAgeyBhbm5vdGF0aW9uVHlwZV8gfTogQW5ub3RhdGlvbixcbiAgICBrZXk6IFByb3BlcnR5S2V5LFxuICAgIHsgZ2V0IH06IFByb3BlcnR5RGVzY3JpcHRvclxuKSB7XG4gICAgaWYgKF9fREVWX18gJiYgIWdldCkge1xuICAgICAgICBkaWUoXG4gICAgICAgICAgICBgQ2Fubm90IGFwcGx5ICcke2Fubm90YXRpb25UeXBlX30nIHRvICcke2FkbS5uYW1lX30uJHtrZXkudG9TdHJpbmcoKX0nOmAgK1xuICAgICAgICAgICAgICAgIGBcXG4nJHthbm5vdGF0aW9uVHlwZV99JyBjYW4gb25seSBiZSB1c2VkIG9uIGdldHRlcigrc2V0dGVyKSBwcm9wZXJ0aWVzLmBcbiAgICAgICAgKVxuICAgIH1cbn1cbiIsImltcG9ydCB7XG4gICAgT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uLFxuICAgIGRlZXBFbmhhbmNlcixcbiAgICBkaWUsXG4gICAgQW5ub3RhdGlvbixcbiAgICBNYWtlUmVzdWx0XG59IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVPYnNlcnZhYmxlQW5ub3RhdGlvbihuYW1lOiBzdHJpbmcsIG9wdGlvbnM/OiBvYmplY3QpOiBBbm5vdGF0aW9uIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBhbm5vdGF0aW9uVHlwZV86IG5hbWUsXG4gICAgICAgIG9wdGlvbnNfOiBvcHRpb25zLFxuICAgICAgICBtYWtlXyxcbiAgICAgICAgZXh0ZW5kX1xuICAgIH1cbn1cblxuZnVuY3Rpb24gbWFrZV8oXG4gICAgYWRtOiBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24sXG4gICAga2V5OiBQcm9wZXJ0eUtleSxcbiAgICBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3Jcbik6IE1ha2VSZXN1bHQge1xuICAgIHJldHVybiB0aGlzLmV4dGVuZF8oYWRtLCBrZXksIGRlc2NyaXB0b3IsIGZhbHNlKSA9PT0gbnVsbCA/IE1ha2VSZXN1bHQuQ2FuY2VsIDogTWFrZVJlc3VsdC5CcmVha1xufVxuXG5mdW5jdGlvbiBleHRlbmRfKFxuICAgIGFkbTogT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uLFxuICAgIGtleTogUHJvcGVydHlLZXksXG4gICAgZGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yLFxuICAgIHByb3h5VHJhcDogYm9vbGVhblxuKTogYm9vbGVhbiB8IG51bGwge1xuICAgIGFzc2VydE9ic2VydmFibGVEZXNjcmlwdG9yKGFkbSwgdGhpcywga2V5LCBkZXNjcmlwdG9yKVxuICAgIHJldHVybiBhZG0uZGVmaW5lT2JzZXJ2YWJsZVByb3BlcnR5XyhcbiAgICAgICAga2V5LFxuICAgICAgICBkZXNjcmlwdG9yLnZhbHVlLFxuICAgICAgICB0aGlzLm9wdGlvbnNfPy5lbmhhbmNlciA/PyBkZWVwRW5oYW5jZXIsXG4gICAgICAgIHByb3h5VHJhcFxuICAgIClcbn1cblxuZnVuY3Rpb24gYXNzZXJ0T2JzZXJ2YWJsZURlc2NyaXB0b3IoXG4gICAgYWRtOiBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24sXG4gICAgeyBhbm5vdGF0aW9uVHlwZV8gfTogQW5ub3RhdGlvbixcbiAgICBrZXk6IFByb3BlcnR5S2V5LFxuICAgIGRlc2NyaXB0b3I6IFByb3BlcnR5RGVzY3JpcHRvclxuKSB7XG4gICAgaWYgKF9fREVWX18gJiYgIShcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikpIHtcbiAgICAgICAgZGllKFxuICAgICAgICAgICAgYENhbm5vdCBhcHBseSAnJHthbm5vdGF0aW9uVHlwZV99JyB0byAnJHthZG0ubmFtZV99LiR7a2V5LnRvU3RyaW5nKCl9JzpgICtcbiAgICAgICAgICAgICAgICBgXFxuJyR7YW5ub3RhdGlvblR5cGVffScgY2Fubm90IGJlIHVzZWQgb24gZ2V0dGVyL3NldHRlciBwcm9wZXJ0aWVzYFxuICAgICAgICApXG4gICAgfVxufVxuIiwiaW1wb3J0IHtcbiAgICBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24sXG4gICAgb2JzZXJ2YWJsZSxcbiAgICBBbm5vdGF0aW9uLFxuICAgIGRlZmluZVByb3BlcnR5LFxuICAgIGNyZWF0ZUFjdGlvbixcbiAgICBnbG9iYWxTdGF0ZSxcbiAgICBmbG93LFxuICAgIGNvbXB1dGVkLFxuICAgIGF1dG9BY3Rpb24sXG4gICAgaXNHZW5lcmF0b3IsXG4gICAgTWFrZVJlc3VsdFxufSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5jb25zdCBBVVRPID0gXCJ0cnVlXCJcblxuZXhwb3J0IGNvbnN0IGF1dG9Bbm5vdGF0aW9uOiBBbm5vdGF0aW9uID0gY3JlYXRlQXV0b0Fubm90YXRpb24oKVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQXV0b0Fubm90YXRpb24ob3B0aW9ucz86IG9iamVjdCk6IEFubm90YXRpb24ge1xuICAgIHJldHVybiB7XG4gICAgICAgIGFubm90YXRpb25UeXBlXzogQVVUTyxcbiAgICAgICAgb3B0aW9uc186IG9wdGlvbnMsXG4gICAgICAgIG1ha2VfLFxuICAgICAgICBleHRlbmRfXG4gICAgfVxufVxuXG5mdW5jdGlvbiBtYWtlXyhcbiAgICBhZG06IE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbixcbiAgICBrZXk6IFByb3BlcnR5S2V5LFxuICAgIGRlc2NyaXB0b3I6IFByb3BlcnR5RGVzY3JpcHRvcixcbiAgICBzb3VyY2U6IG9iamVjdFxuKTogTWFrZVJlc3VsdCB7XG4gICAgLy8gZ2V0dGVyIC0+IGNvbXB1dGVkXG4gICAgaWYgKGRlc2NyaXB0b3IuZ2V0KSB7XG4gICAgICAgIHJldHVybiBjb21wdXRlZC5tYWtlXyhhZG0sIGtleSwgZGVzY3JpcHRvciwgc291cmNlKVxuICAgIH1cbiAgICAvLyBsb25lIHNldHRlciAtPiBhY3Rpb24gc2V0dGVyXG4gICAgaWYgKGRlc2NyaXB0b3Iuc2V0KSB7XG4gICAgICAgIC8vIFRPRE8gbWFrZSBhY3Rpb24gYXBwbGljYWJsZSB0byBzZXR0ZXIgYW5kIGRlbGVnYXRlIHRvIGFjdGlvbi5tYWtlX1xuICAgICAgICBjb25zdCBzZXQgPSBjcmVhdGVBY3Rpb24oa2V5LnRvU3RyaW5nKCksIGRlc2NyaXB0b3Iuc2V0KSBhcyAodjogYW55KSA9PiB2b2lkXG4gICAgICAgIC8vIG93blxuICAgICAgICBpZiAoc291cmNlID09PSBhZG0udGFyZ2V0Xykge1xuICAgICAgICAgICAgcmV0dXJuIGFkbS5kZWZpbmVQcm9wZXJ0eV8oa2V5LCB7XG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiBnbG9iYWxTdGF0ZS5zYWZlRGVzY3JpcHRvcnMgPyBhZG0uaXNQbGFpbk9iamVjdF8gOiB0cnVlLFxuICAgICAgICAgICAgICAgIHNldFxuICAgICAgICAgICAgfSkgPT09IG51bGxcbiAgICAgICAgICAgICAgICA/IE1ha2VSZXN1bHQuQ2FuY2VsXG4gICAgICAgICAgICAgICAgOiBNYWtlUmVzdWx0LkNvbnRpbnVlXG4gICAgICAgIH1cbiAgICAgICAgLy8gcHJvdG9cbiAgICAgICAgZGVmaW5lUHJvcGVydHkoc291cmNlLCBrZXksIHtcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHNldFxuICAgICAgICB9KVxuICAgICAgICByZXR1cm4gTWFrZVJlc3VsdC5Db250aW51ZVxuICAgIH1cbiAgICAvLyBmdW5jdGlvbiBvbiBwcm90byAtPiBhdXRvQWN0aW9uL2Zsb3dcbiAgICBpZiAoc291cmNlICE9PSBhZG0udGFyZ2V0XyAmJiB0eXBlb2YgZGVzY3JpcHRvci52YWx1ZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGlmIChpc0dlbmVyYXRvcihkZXNjcmlwdG9yLnZhbHVlKSkge1xuICAgICAgICAgICAgY29uc3QgZmxvd0Fubm90YXRpb24gPSB0aGlzLm9wdGlvbnNfPy5hdXRvQmluZCA/IGZsb3cuYm91bmQgOiBmbG93XG4gICAgICAgICAgICByZXR1cm4gZmxvd0Fubm90YXRpb24ubWFrZV8oYWRtLCBrZXksIGRlc2NyaXB0b3IsIHNvdXJjZSlcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhY3Rpb25Bbm5vdGF0aW9uID0gdGhpcy5vcHRpb25zXz8uYXV0b0JpbmQgPyBhdXRvQWN0aW9uLmJvdW5kIDogYXV0b0FjdGlvblxuICAgICAgICByZXR1cm4gYWN0aW9uQW5ub3RhdGlvbi5tYWtlXyhhZG0sIGtleSwgZGVzY3JpcHRvciwgc291cmNlKVxuICAgIH1cbiAgICAvLyBvdGhlciAtPiBvYnNlcnZhYmxlXG4gICAgLy8gQ29weSBwcm9wcyBmcm9tIHByb3RvIGFzIHdlbGwsIHNlZSB0ZXN0OlxuICAgIC8vIFwiZGVjb3JhdGUgc2hvdWxkIHdvcmsgd2l0aCBPYmplY3QuY3JlYXRlXCJcbiAgICBsZXQgb2JzZXJ2YWJsZUFubm90YXRpb24gPSB0aGlzLm9wdGlvbnNfPy5kZWVwID09PSBmYWxzZSA/IG9ic2VydmFibGUucmVmIDogb2JzZXJ2YWJsZVxuICAgIC8vIGlmIGZ1bmN0aW9uIHJlc3BlY3QgYXV0b0JpbmQgb3B0aW9uXG4gICAgaWYgKHR5cGVvZiBkZXNjcmlwdG9yLnZhbHVlID09PSBcImZ1bmN0aW9uXCIgJiYgdGhpcy5vcHRpb25zXz8uYXV0b0JpbmQpIHtcbiAgICAgICAgZGVzY3JpcHRvci52YWx1ZSA9IGRlc2NyaXB0b3IudmFsdWUuYmluZChhZG0ucHJveHlfID8/IGFkbS50YXJnZXRfKVxuICAgIH1cbiAgICByZXR1cm4gb2JzZXJ2YWJsZUFubm90YXRpb24ubWFrZV8oYWRtLCBrZXksIGRlc2NyaXB0b3IsIHNvdXJjZSlcbn1cblxuZnVuY3Rpb24gZXh0ZW5kXyhcbiAgICBhZG06IE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbixcbiAgICBrZXk6IFByb3BlcnR5S2V5LFxuICAgIGRlc2NyaXB0b3I6IFByb3BlcnR5RGVzY3JpcHRvcixcbiAgICBwcm94eVRyYXA6IGJvb2xlYW5cbik6IGJvb2xlYW4gfCBudWxsIHtcbiAgICAvLyBnZXR0ZXIgLT4gY29tcHV0ZWRcbiAgICBpZiAoZGVzY3JpcHRvci5nZXQpIHtcbiAgICAgICAgcmV0dXJuIGNvbXB1dGVkLmV4dGVuZF8oYWRtLCBrZXksIGRlc2NyaXB0b3IsIHByb3h5VHJhcClcbiAgICB9XG4gICAgLy8gbG9uZSBzZXR0ZXIgLT4gYWN0aW9uIHNldHRlclxuICAgIGlmIChkZXNjcmlwdG9yLnNldCkge1xuICAgICAgICAvLyBUT0RPIG1ha2UgYWN0aW9uIGFwcGxpY2FibGUgdG8gc2V0dGVyIGFuZCBkZWxlZ2F0ZSB0byBhY3Rpb24uZXh0ZW5kX1xuICAgICAgICByZXR1cm4gYWRtLmRlZmluZVByb3BlcnR5XyhcbiAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IGdsb2JhbFN0YXRlLnNhZmVEZXNjcmlwdG9ycyA/IGFkbS5pc1BsYWluT2JqZWN0XyA6IHRydWUsXG4gICAgICAgICAgICAgICAgc2V0OiBjcmVhdGVBY3Rpb24oa2V5LnRvU3RyaW5nKCksIGRlc2NyaXB0b3Iuc2V0KSBhcyAodjogYW55KSA9PiB2b2lkXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHJveHlUcmFwXG4gICAgICAgIClcbiAgICB9XG4gICAgLy8gb3RoZXIgLT4gb2JzZXJ2YWJsZVxuICAgIC8vIGlmIGZ1bmN0aW9uIHJlc3BlY3QgYXV0b0JpbmQgb3B0aW9uXG4gICAgaWYgKHR5cGVvZiBkZXNjcmlwdG9yLnZhbHVlID09PSBcImZ1bmN0aW9uXCIgJiYgdGhpcy5vcHRpb25zXz8uYXV0b0JpbmQpIHtcbiAgICAgICAgZGVzY3JpcHRvci52YWx1ZSA9IGRlc2NyaXB0b3IudmFsdWUuYmluZChhZG0ucHJveHlfID8/IGFkbS50YXJnZXRfKVxuICAgIH1cbiAgICBsZXQgb2JzZXJ2YWJsZUFubm90YXRpb24gPSB0aGlzLm9wdGlvbnNfPy5kZWVwID09PSBmYWxzZSA/IG9ic2VydmFibGUucmVmIDogb2JzZXJ2YWJsZVxuICAgIHJldHVybiBvYnNlcnZhYmxlQW5ub3RhdGlvbi5leHRlbmRfKGFkbSwga2V5LCBkZXNjcmlwdG9yLCBwcm94eVRyYXApXG59XG4iLCJpbXBvcnQge1xuICAgIElFbmhhbmNlcixcbiAgICBJRXF1YWxzQ29tcGFyZXIsXG4gICAgSU9ic2VydmFibGVBcnJheSxcbiAgICBJT2JzZXJ2YWJsZU1hcEluaXRpYWxWYWx1ZXMsXG4gICAgSU9ic2VydmFibGVTZXRJbml0aWFsVmFsdWVzLFxuICAgIElPYnNlcnZhYmxlVmFsdWUsXG4gICAgT2JzZXJ2YWJsZU1hcCxcbiAgICBPYnNlcnZhYmxlU2V0LFxuICAgIE9ic2VydmFibGVWYWx1ZSxcbiAgICBhc0R5bmFtaWNPYnNlcnZhYmxlT2JqZWN0LFxuICAgIGNyZWF0ZU9ic2VydmFibGVBcnJheSxcbiAgICBkZWVwRW5oYW5jZXIsXG4gICAgZXh0ZW5kT2JzZXJ2YWJsZSxcbiAgICBpc0VTNk1hcCxcbiAgICBpc0VTNlNldCxcbiAgICBpc09ic2VydmFibGUsXG4gICAgaXNQbGFpbk9iamVjdCxcbiAgICByZWZlcmVuY2VFbmhhbmNlcixcbiAgICBBbm5vdGF0aW9uLFxuICAgIHNoYWxsb3dFbmhhbmNlcixcbiAgICByZWZTdHJ1Y3RFbmhhbmNlcixcbiAgICBBbm5vdGF0aW9uc01hcCxcbiAgICBhc09ic2VydmFibGVPYmplY3QsXG4gICAgc3RvcmVBbm5vdGF0aW9uLFxuICAgIGNyZWF0ZURlY29yYXRvckFubm90YXRpb24sXG4gICAgY3JlYXRlTGVnYWN5QXJyYXksXG4gICAgZ2xvYmFsU3RhdGUsXG4gICAgYXNzaWduLFxuICAgIGlzU3RyaW5naXNoLFxuICAgIGNyZWF0ZU9ic2VydmFibGVBbm5vdGF0aW9uLFxuICAgIGNyZWF0ZUF1dG9Bbm5vdGF0aW9uXG59IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbmV4cG9ydCBjb25zdCBPQlNFUlZBQkxFID0gXCJvYnNlcnZhYmxlXCJcbmV4cG9ydCBjb25zdCBPQlNFUlZBQkxFX1JFRiA9IFwib2JzZXJ2YWJsZS5yZWZcIlxuZXhwb3J0IGNvbnN0IE9CU0VSVkFCTEVfU0hBTExPVyA9IFwib2JzZXJ2YWJsZS5zaGFsbG93XCJcbmV4cG9ydCBjb25zdCBPQlNFUlZBQkxFX1NUUlVDVCA9IFwib2JzZXJ2YWJsZS5zdHJ1Y3RcIlxuXG5leHBvcnQgdHlwZSBDcmVhdGVPYnNlcnZhYmxlT3B0aW9ucyA9IHtcbiAgICBuYW1lPzogc3RyaW5nXG4gICAgZXF1YWxzPzogSUVxdWFsc0NvbXBhcmVyPGFueT5cbiAgICBkZWVwPzogYm9vbGVhblxuICAgIGRlZmF1bHREZWNvcmF0b3I/OiBBbm5vdGF0aW9uXG4gICAgcHJveHk/OiBib29sZWFuXG4gICAgYXV0b0JpbmQ/OiBib29sZWFuXG59XG5cbi8vIFByZWRlZmluZWQgYmFncyBvZiBjcmVhdGUgb2JzZXJ2YWJsZSBvcHRpb25zLCB0byBhdm9pZCBhbGxvY2F0aW5nIHRlbXBvcmFyaWx5IG9wdGlvbiBvYmplY3RzXG4vLyBpbiB0aGUgbWFqb3JpdHkgb2YgY2FzZXNcbmV4cG9ydCBjb25zdCBkZWZhdWx0Q3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnM6IENyZWF0ZU9ic2VydmFibGVPcHRpb25zID0ge1xuICAgIGRlZXA6IHRydWUsXG4gICAgbmFtZTogdW5kZWZpbmVkLFxuICAgIGRlZmF1bHREZWNvcmF0b3I6IHVuZGVmaW5lZCxcbiAgICBwcm94eTogdHJ1ZVxufVxuT2JqZWN0LmZyZWV6ZShkZWZhdWx0Q3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnMpXG5cbmV4cG9ydCBmdW5jdGlvbiBhc0NyZWF0ZU9ic2VydmFibGVPcHRpb25zKHRoaW5nOiBhbnkpOiBDcmVhdGVPYnNlcnZhYmxlT3B0aW9ucyB7XG4gICAgcmV0dXJuIHRoaW5nIHx8IGRlZmF1bHRDcmVhdGVPYnNlcnZhYmxlT3B0aW9uc1xufVxuXG5jb25zdCBvYnNlcnZhYmxlQW5ub3RhdGlvbiA9IGNyZWF0ZU9ic2VydmFibGVBbm5vdGF0aW9uKE9CU0VSVkFCTEUpXG5jb25zdCBvYnNlcnZhYmxlUmVmQW5ub3RhdGlvbiA9IGNyZWF0ZU9ic2VydmFibGVBbm5vdGF0aW9uKE9CU0VSVkFCTEVfUkVGLCB7XG4gICAgZW5oYW5jZXI6IHJlZmVyZW5jZUVuaGFuY2VyXG59KVxuY29uc3Qgb2JzZXJ2YWJsZVNoYWxsb3dBbm5vdGF0aW9uID0gY3JlYXRlT2JzZXJ2YWJsZUFubm90YXRpb24oT0JTRVJWQUJMRV9TSEFMTE9XLCB7XG4gICAgZW5oYW5jZXI6IHNoYWxsb3dFbmhhbmNlclxufSlcbmNvbnN0IG9ic2VydmFibGVTdHJ1Y3RBbm5vdGF0aW9uID0gY3JlYXRlT2JzZXJ2YWJsZUFubm90YXRpb24oT0JTRVJWQUJMRV9TVFJVQ1QsIHtcbiAgICBlbmhhbmNlcjogcmVmU3RydWN0RW5oYW5jZXJcbn0pXG5jb25zdCBvYnNlcnZhYmxlRGVjb3JhdG9yQW5ub3RhdGlvbiA9IGNyZWF0ZURlY29yYXRvckFubm90YXRpb24ob2JzZXJ2YWJsZUFubm90YXRpb24pXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRFbmhhbmNlckZyb21PcHRpb25zKG9wdGlvbnM6IENyZWF0ZU9ic2VydmFibGVPcHRpb25zKTogSUVuaGFuY2VyPGFueT4ge1xuICAgIHJldHVybiBvcHRpb25zLmRlZXAgPT09IHRydWVcbiAgICAgICAgPyBkZWVwRW5oYW5jZXJcbiAgICAgICAgOiBvcHRpb25zLmRlZXAgPT09IGZhbHNlXG4gICAgICAgID8gcmVmZXJlbmNlRW5oYW5jZXJcbiAgICAgICAgOiBnZXRFbmhhbmNlckZyb21Bbm5vdGF0aW9uKG9wdGlvbnMuZGVmYXVsdERlY29yYXRvcilcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEFubm90YXRpb25Gcm9tT3B0aW9ucyhcbiAgICBvcHRpb25zPzogQ3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnNcbik6IEFubm90YXRpb24gfCB1bmRlZmluZWQge1xuICAgIHJldHVybiBvcHRpb25zID8gb3B0aW9ucy5kZWZhdWx0RGVjb3JhdG9yID8/IGNyZWF0ZUF1dG9Bbm5vdGF0aW9uKG9wdGlvbnMpIDogdW5kZWZpbmVkXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRFbmhhbmNlckZyb21Bbm5vdGF0aW9uKGFubm90YXRpb24/OiBBbm5vdGF0aW9uKTogSUVuaGFuY2VyPGFueT4ge1xuICAgIHJldHVybiAhYW5ub3RhdGlvbiA/IGRlZXBFbmhhbmNlciA6IGFubm90YXRpb24ub3B0aW9uc18/LmVuaGFuY2VyID8/IGRlZXBFbmhhbmNlclxufVxuXG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCwgYXJyYXkgb3IgZnVuY3Rpb24gaW50byBhIHJlYWN0aXZlIHN0cnVjdHVyZS5cbiAqIEBwYXJhbSB2IHRoZSB2YWx1ZSB3aGljaCBzaG91bGQgYmVjb21lIG9ic2VydmFibGUuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZU9ic2VydmFibGUodjogYW55LCBhcmcyPzogYW55LCBhcmczPzogYW55KSB7XG4gICAgLy8gQG9ic2VydmFibGUgc29tZVByb3A7XG4gICAgaWYgKGlzU3RyaW5naXNoKGFyZzIpKSB7XG4gICAgICAgIHN0b3JlQW5ub3RhdGlvbih2LCBhcmcyLCBvYnNlcnZhYmxlQW5ub3RhdGlvbilcbiAgICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gYWxyZWFkeSBvYnNlcnZhYmxlIC0gaWdub3JlXG4gICAgaWYgKGlzT2JzZXJ2YWJsZSh2KSkgcmV0dXJuIHZcblxuICAgIC8vIHBsYWluIG9iamVjdFxuICAgIGlmIChpc1BsYWluT2JqZWN0KHYpKSByZXR1cm4gb2JzZXJ2YWJsZS5vYmplY3QodiwgYXJnMiwgYXJnMylcblxuICAgIC8vIEFycmF5XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodikpIHJldHVybiBvYnNlcnZhYmxlLmFycmF5KHYsIGFyZzIpXG5cbiAgICAvLyBNYXBcbiAgICBpZiAoaXNFUzZNYXAodikpIHJldHVybiBvYnNlcnZhYmxlLm1hcCh2LCBhcmcyKVxuXG4gICAgLy8gU2V0XG4gICAgaWYgKGlzRVM2U2V0KHYpKSByZXR1cm4gb2JzZXJ2YWJsZS5zZXQodiwgYXJnMilcblxuICAgIC8vIG90aGVyIG9iamVjdCAtIGlnbm9yZVxuICAgIGlmICh0eXBlb2YgdiA9PT0gXCJvYmplY3RcIiAmJiB2ICE9PSBudWxsKSByZXR1cm4gdlxuXG4gICAgLy8gYW55dGhpbmcgZWxzZVxuICAgIHJldHVybiBvYnNlcnZhYmxlLmJveCh2LCBhcmcyKVxufVxuT2JqZWN0LmFzc2lnbihjcmVhdGVPYnNlcnZhYmxlLCBvYnNlcnZhYmxlRGVjb3JhdG9yQW5ub3RhdGlvbilcblxuZXhwb3J0IGludGVyZmFjZSBJT2JzZXJ2YWJsZUZhY3RvcnkgZXh0ZW5kcyBBbm5vdGF0aW9uLCBQcm9wZXJ0eURlY29yYXRvciB7XG4gICAgPFQgPSBhbnk+KHZhbHVlOiBUW10sIG9wdGlvbnM/OiBDcmVhdGVPYnNlcnZhYmxlT3B0aW9ucyk6IElPYnNlcnZhYmxlQXJyYXk8VD5cbiAgICA8VCA9IGFueT4odmFsdWU6IFNldDxUPiwgb3B0aW9ucz86IENyZWF0ZU9ic2VydmFibGVPcHRpb25zKTogT2JzZXJ2YWJsZVNldDxUPlxuICAgIDxLID0gYW55LCBWID0gYW55Pih2YWx1ZTogTWFwPEssIFY+LCBvcHRpb25zPzogQ3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnMpOiBPYnNlcnZhYmxlTWFwPEssIFY+XG4gICAgPFQgZXh0ZW5kcyBvYmplY3Q+KFxuICAgICAgICB2YWx1ZTogVCxcbiAgICAgICAgZGVjb3JhdG9ycz86IEFubm90YXRpb25zTWFwPFQsIG5ldmVyPixcbiAgICAgICAgb3B0aW9ucz86IENyZWF0ZU9ic2VydmFibGVPcHRpb25zXG4gICAgKTogVFxuXG4gICAgYm94OiA8VCA9IGFueT4odmFsdWU/OiBULCBvcHRpb25zPzogQ3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnMpID0+IElPYnNlcnZhYmxlVmFsdWU8VD5cbiAgICBhcnJheTogPFQgPSBhbnk+KGluaXRpYWxWYWx1ZXM/OiBUW10sIG9wdGlvbnM/OiBDcmVhdGVPYnNlcnZhYmxlT3B0aW9ucykgPT4gSU9ic2VydmFibGVBcnJheTxUPlxuICAgIHNldDogPFQgPSBhbnk+KFxuICAgICAgICBpbml0aWFsVmFsdWVzPzogSU9ic2VydmFibGVTZXRJbml0aWFsVmFsdWVzPFQ+LFxuICAgICAgICBvcHRpb25zPzogQ3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnNcbiAgICApID0+IE9ic2VydmFibGVTZXQ8VD5cbiAgICBtYXA6IDxLID0gYW55LCBWID0gYW55PihcbiAgICAgICAgaW5pdGlhbFZhbHVlcz86IElPYnNlcnZhYmxlTWFwSW5pdGlhbFZhbHVlczxLLCBWPixcbiAgICAgICAgb3B0aW9ucz86IENyZWF0ZU9ic2VydmFibGVPcHRpb25zXG4gICAgKSA9PiBPYnNlcnZhYmxlTWFwPEssIFY+XG4gICAgb2JqZWN0OiA8VCA9IGFueT4oXG4gICAgICAgIHByb3BzOiBULFxuICAgICAgICBkZWNvcmF0b3JzPzogQW5ub3RhdGlvbnNNYXA8VCwgbmV2ZXI+LFxuICAgICAgICBvcHRpb25zPzogQ3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnNcbiAgICApID0+IFRcblxuICAgIC8qKlxuICAgICAqIERlY29yYXRvciB0aGF0IGNyZWF0ZXMgYW4gb2JzZXJ2YWJsZSB0aGF0IG9ubHkgb2JzZXJ2ZXMgdGhlIHJlZmVyZW5jZXMsIGJ1dCBkb2Vzbid0IHRyeSB0byB0dXJuIHRoZSBhc3NpZ25lZCB2YWx1ZSBpbnRvIGFuIG9ic2VydmFibGUudHMuXG4gICAgICovXG4gICAgcmVmOiBBbm5vdGF0aW9uICYgUHJvcGVydHlEZWNvcmF0b3JcbiAgICAvKipcbiAgICAgKiBEZWNvcmF0b3IgdGhhdCBjcmVhdGVzIGFuIG9ic2VydmFibGUgY29udmVydHMgaXRzIHZhbHVlIChvYmplY3RzLCBtYXBzIG9yIGFycmF5cykgaW50byBhIHNoYWxsb3cgb2JzZXJ2YWJsZSBzdHJ1Y3R1cmVcbiAgICAgKi9cbiAgICBzaGFsbG93OiBBbm5vdGF0aW9uICYgUHJvcGVydHlEZWNvcmF0b3JcbiAgICBkZWVwOiBBbm5vdGF0aW9uICYgUHJvcGVydHlEZWNvcmF0b3JcbiAgICBzdHJ1Y3Q6IEFubm90YXRpb24gJiBQcm9wZXJ0eURlY29yYXRvclxufVxuXG5jb25zdCBvYnNlcnZhYmxlRmFjdG9yaWVzOiBJT2JzZXJ2YWJsZUZhY3RvcnkgPSB7XG4gICAgYm94PFQgPSBhbnk+KHZhbHVlPzogVCwgb3B0aW9ucz86IENyZWF0ZU9ic2VydmFibGVPcHRpb25zKTogSU9ic2VydmFibGVWYWx1ZTxUPiB7XG4gICAgICAgIGNvbnN0IG8gPSBhc0NyZWF0ZU9ic2VydmFibGVPcHRpb25zKG9wdGlvbnMpXG4gICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZVZhbHVlKHZhbHVlLCBnZXRFbmhhbmNlckZyb21PcHRpb25zKG8pLCBvLm5hbWUsIHRydWUsIG8uZXF1YWxzKVxuICAgIH0sXG4gICAgYXJyYXk8VCA9IGFueT4oaW5pdGlhbFZhbHVlcz86IFRbXSwgb3B0aW9ucz86IENyZWF0ZU9ic2VydmFibGVPcHRpb25zKTogSU9ic2VydmFibGVBcnJheTxUPiB7XG4gICAgICAgIGNvbnN0IG8gPSBhc0NyZWF0ZU9ic2VydmFibGVPcHRpb25zKG9wdGlvbnMpXG4gICAgICAgIHJldHVybiAoZ2xvYmFsU3RhdGUudXNlUHJveGllcyA9PT0gZmFsc2UgfHwgby5wcm94eSA9PT0gZmFsc2VcbiAgICAgICAgICAgID8gY3JlYXRlTGVnYWN5QXJyYXlcbiAgICAgICAgICAgIDogY3JlYXRlT2JzZXJ2YWJsZUFycmF5KShpbml0aWFsVmFsdWVzLCBnZXRFbmhhbmNlckZyb21PcHRpb25zKG8pLCBvLm5hbWUpXG4gICAgfSxcbiAgICBtYXA8SyA9IGFueSwgViA9IGFueT4oXG4gICAgICAgIGluaXRpYWxWYWx1ZXM/OiBJT2JzZXJ2YWJsZU1hcEluaXRpYWxWYWx1ZXM8SywgVj4sXG4gICAgICAgIG9wdGlvbnM/OiBDcmVhdGVPYnNlcnZhYmxlT3B0aW9uc1xuICAgICk6IE9ic2VydmFibGVNYXA8SywgVj4ge1xuICAgICAgICBjb25zdCBvID0gYXNDcmVhdGVPYnNlcnZhYmxlT3B0aW9ucyhvcHRpb25zKVxuICAgICAgICByZXR1cm4gbmV3IE9ic2VydmFibGVNYXA8SywgVj4oaW5pdGlhbFZhbHVlcywgZ2V0RW5oYW5jZXJGcm9tT3B0aW9ucyhvKSwgby5uYW1lKVxuICAgIH0sXG4gICAgc2V0PFQgPSBhbnk+KFxuICAgICAgICBpbml0aWFsVmFsdWVzPzogSU9ic2VydmFibGVTZXRJbml0aWFsVmFsdWVzPFQ+LFxuICAgICAgICBvcHRpb25zPzogQ3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnNcbiAgICApOiBPYnNlcnZhYmxlU2V0PFQ+IHtcbiAgICAgICAgY29uc3QgbyA9IGFzQ3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnMob3B0aW9ucylcbiAgICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlU2V0PFQ+KGluaXRpYWxWYWx1ZXMsIGdldEVuaGFuY2VyRnJvbU9wdGlvbnMobyksIG8ubmFtZSlcbiAgICB9LFxuICAgIG9iamVjdDxUID0gYW55PihcbiAgICAgICAgcHJvcHM6IFQsXG4gICAgICAgIGRlY29yYXRvcnM/OiBBbm5vdGF0aW9uc01hcDxULCBuZXZlcj4sXG4gICAgICAgIG9wdGlvbnM/OiBDcmVhdGVPYnNlcnZhYmxlT3B0aW9uc1xuICAgICk6IFQge1xuICAgICAgICByZXR1cm4gZXh0ZW5kT2JzZXJ2YWJsZShcbiAgICAgICAgICAgIGdsb2JhbFN0YXRlLnVzZVByb3hpZXMgPT09IGZhbHNlIHx8IG9wdGlvbnM/LnByb3h5ID09PSBmYWxzZVxuICAgICAgICAgICAgICAgID8gYXNPYnNlcnZhYmxlT2JqZWN0KHt9LCBvcHRpb25zKVxuICAgICAgICAgICAgICAgIDogYXNEeW5hbWljT2JzZXJ2YWJsZU9iamVjdCh7fSwgb3B0aW9ucyksXG4gICAgICAgICAgICBwcm9wcyxcbiAgICAgICAgICAgIGRlY29yYXRvcnNcbiAgICAgICAgKVxuICAgIH0sXG4gICAgcmVmOiBjcmVhdGVEZWNvcmF0b3JBbm5vdGF0aW9uKG9ic2VydmFibGVSZWZBbm5vdGF0aW9uKSxcbiAgICBzaGFsbG93OiBjcmVhdGVEZWNvcmF0b3JBbm5vdGF0aW9uKG9ic2VydmFibGVTaGFsbG93QW5ub3RhdGlvbiksXG4gICAgZGVlcDogb2JzZXJ2YWJsZURlY29yYXRvckFubm90YXRpb24sXG4gICAgc3RydWN0OiBjcmVhdGVEZWNvcmF0b3JBbm5vdGF0aW9uKG9ic2VydmFibGVTdHJ1Y3RBbm5vdGF0aW9uKVxufSBhcyBhbnlcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5leHBvcnQgdmFyIG9ic2VydmFibGU6IElPYnNlcnZhYmxlRmFjdG9yeSA9IGFzc2lnbihjcmVhdGVPYnNlcnZhYmxlLCBvYnNlcnZhYmxlRmFjdG9yaWVzKVxuIiwiaW1wb3J0IHtcbiAgICBDb21wdXRlZFZhbHVlLFxuICAgIElDb21wdXRlZFZhbHVlT3B0aW9ucyxcbiAgICBBbm5vdGF0aW9uLFxuICAgIHN0b3JlQW5ub3RhdGlvbixcbiAgICBjcmVhdGVEZWNvcmF0b3JBbm5vdGF0aW9uLFxuICAgIGlzU3RyaW5naXNoLFxuICAgIGlzUGxhaW5PYmplY3QsXG4gICAgaXNGdW5jdGlvbixcbiAgICBkaWUsXG4gICAgSUNvbXB1dGVkVmFsdWUsXG4gICAgY3JlYXRlQ29tcHV0ZWRBbm5vdGF0aW9uLFxuICAgIGNvbXBhcmVyXG59IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbmV4cG9ydCBjb25zdCBDT01QVVRFRCA9IFwiY29tcHV0ZWRcIlxuZXhwb3J0IGNvbnN0IENPTVBVVEVEX1NUUlVDVCA9IFwiY29tcHV0ZWQuc3RydWN0XCJcblxuZXhwb3J0IGludGVyZmFjZSBJQ29tcHV0ZWRGYWN0b3J5IGV4dGVuZHMgQW5ub3RhdGlvbiwgUHJvcGVydHlEZWNvcmF0b3Ige1xuICAgIC8vIEBjb21wdXRlZChvcHRzKVxuICAgIDxUPihvcHRpb25zOiBJQ29tcHV0ZWRWYWx1ZU9wdGlvbnM8VD4pOiBBbm5vdGF0aW9uICYgUHJvcGVydHlEZWNvcmF0b3JcbiAgICAvLyBjb21wdXRlZChmbiwgb3B0cylcbiAgICA8VD4oZnVuYzogKCkgPT4gVCwgb3B0aW9ucz86IElDb21wdXRlZFZhbHVlT3B0aW9uczxUPik6IElDb21wdXRlZFZhbHVlPFQ+XG5cbiAgICBzdHJ1Y3Q6IEFubm90YXRpb24gJiBQcm9wZXJ0eURlY29yYXRvclxufVxuXG5jb25zdCBjb21wdXRlZEFubm90YXRpb24gPSBjcmVhdGVDb21wdXRlZEFubm90YXRpb24oQ09NUFVURUQpXG5jb25zdCBjb21wdXRlZFN0cnVjdEFubm90YXRpb24gPSBjcmVhdGVDb21wdXRlZEFubm90YXRpb24oQ09NUFVURURfU1RSVUNULCB7XG4gICAgZXF1YWxzOiBjb21wYXJlci5zdHJ1Y3R1cmFsXG59KVxuXG4vKipcbiAqIERlY29yYXRvciBmb3IgY2xhc3MgcHJvcGVydGllczogQGNvbXB1dGVkIGdldCB2YWx1ZSgpIHsgcmV0dXJuIGV4cHI7IH0uXG4gKiBGb3IgbGVnYWN5IHB1cnBvc2VzIGFsc28gaW52b2thYmxlIGFzIEVTNSBvYnNlcnZhYmxlIGNyZWF0ZWQ6IGBjb21wdXRlZCgoKSA9PiBleHByKWA7XG4gKi9cbmV4cG9ydCBjb25zdCBjb21wdXRlZDogSUNvbXB1dGVkRmFjdG9yeSA9IGZ1bmN0aW9uIGNvbXB1dGVkKGFyZzEsIGFyZzIpIHtcbiAgICBpZiAoaXNTdHJpbmdpc2goYXJnMikpIHtcbiAgICAgICAgLy8gQGNvbXB1dGVkXG4gICAgICAgIHJldHVybiBzdG9yZUFubm90YXRpb24oYXJnMSwgYXJnMiwgY29tcHV0ZWRBbm5vdGF0aW9uKVxuICAgIH1cbiAgICBpZiAoaXNQbGFpbk9iamVjdChhcmcxKSkge1xuICAgICAgICAvLyBAY29tcHV0ZWQoeyBvcHRpb25zIH0pXG4gICAgICAgIHJldHVybiBjcmVhdGVEZWNvcmF0b3JBbm5vdGF0aW9uKGNyZWF0ZUNvbXB1dGVkQW5ub3RhdGlvbihDT01QVVRFRCwgYXJnMSkpXG4gICAgfVxuXG4gICAgLy8gY29tcHV0ZWQoZXhwciwgb3B0aW9ucz8pXG4gICAgaWYgKF9fREVWX18pIHtcbiAgICAgICAgaWYgKCFpc0Z1bmN0aW9uKGFyZzEpKSBkaWUoXCJGaXJzdCBhcmd1bWVudCB0byBgY29tcHV0ZWRgIHNob3VsZCBiZSBhbiBleHByZXNzaW9uLlwiKVxuICAgICAgICBpZiAoaXNGdW5jdGlvbihhcmcyKSlcbiAgICAgICAgICAgIGRpZShcbiAgICAgICAgICAgICAgICBcIkEgc2V0dGVyIGFzIHNlY29uZCBhcmd1bWVudCBpcyBubyBsb25nZXIgc3VwcG9ydGVkLCB1c2UgYHsgc2V0OiBmbiB9YCBvcHRpb24gaW5zdGVhZFwiXG4gICAgICAgICAgICApXG4gICAgfVxuICAgIGNvbnN0IG9wdHM6IElDb21wdXRlZFZhbHVlT3B0aW9uczxhbnk+ID0gaXNQbGFpbk9iamVjdChhcmcyKSA/IGFyZzIgOiB7fVxuICAgIG9wdHMuZ2V0ID0gYXJnMVxuICAgIG9wdHMubmFtZSB8fD0gYXJnMS5uYW1lIHx8IFwiXCIgLyogZm9yIGdlbmVyYXRlZCBuYW1lICovXG5cbiAgICByZXR1cm4gbmV3IENvbXB1dGVkVmFsdWUob3B0cylcbn0gYXMgYW55XG5cbk9iamVjdC5hc3NpZ24oY29tcHV0ZWQsIGNvbXB1dGVkQW5ub3RhdGlvbilcblxuY29tcHV0ZWQuc3RydWN0ID0gY3JlYXRlRGVjb3JhdG9yQW5ub3RhdGlvbihjb21wdXRlZFN0cnVjdEFubm90YXRpb24pXG4iLCJpbXBvcnQge1xuICAgIElEZXJpdmF0aW9uLFxuICAgIGVuZEJhdGNoLFxuICAgIGdsb2JhbFN0YXRlLFxuICAgIGlzU3B5RW5hYmxlZCxcbiAgICBzcHlSZXBvcnRFbmQsXG4gICAgc3B5UmVwb3J0U3RhcnQsXG4gICAgc3RhcnRCYXRjaCxcbiAgICB1bnRyYWNrZWRFbmQsXG4gICAgdW50cmFja2VkU3RhcnQsXG4gICAgaXNGdW5jdGlvbixcbiAgICBhbGxvd1N0YXRlUmVhZHNTdGFydCxcbiAgICBhbGxvd1N0YXRlUmVhZHNFbmQsXG4gICAgQUNUSU9OLFxuICAgIEVNUFRZX0FSUkFZLFxuICAgIGRpZSxcbiAgICBnZXREZXNjcmlwdG9yXG59IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbi8vIHdlIGRvbid0IHVzZSBnbG9iYWxTdGF0ZSBmb3IgdGhlc2UgaW4gb3JkZXIgdG8gYXZvaWQgcG9zc2libGUgaXNzdWVzIHdpdGggbXVsdGlwbGVcbi8vIG1vYnggdmVyc2lvbnNcbmxldCBjdXJyZW50QWN0aW9uSWQgPSAwXG5sZXQgbmV4dEFjdGlvbklkID0gMVxuY29uc3QgaXNGdW5jdGlvbk5hbWVDb25maWd1cmFibGUgPSBnZXREZXNjcmlwdG9yKCgpID0+IHt9LCBcIm5hbWVcIik/LmNvbmZpZ3VyYWJsZSA/PyBmYWxzZVxuXG4vLyB3ZSBjYW4gc2FmZWx5IHJlY3ljbGUgdGhpcyBvYmplY3RcbmNvbnN0IHRtcE5hbWVEZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3IgPSB7XG4gICAgdmFsdWU6IFwiYWN0aW9uXCIsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICBlbnVtZXJhYmxlOiBmYWxzZVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQWN0aW9uKFxuICAgIGFjdGlvbk5hbWU6IHN0cmluZyxcbiAgICBmbjogRnVuY3Rpb24sXG4gICAgYXV0b0FjdGlvbjogYm9vbGVhbiA9IGZhbHNlLFxuICAgIHJlZj86IE9iamVjdFxuKTogRnVuY3Rpb24ge1xuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICAgIGlmICghaXNGdW5jdGlvbihmbikpIGRpZShcImBhY3Rpb25gIGNhbiBvbmx5IGJlIGludm9rZWQgb24gZnVuY3Rpb25zXCIpXG4gICAgICAgIGlmICh0eXBlb2YgYWN0aW9uTmFtZSAhPT0gXCJzdHJpbmdcIiB8fCAhYWN0aW9uTmFtZSlcbiAgICAgICAgICAgIGRpZShgYWN0aW9ucyBzaG91bGQgaGF2ZSB2YWxpZCBuYW1lcywgZ290OiAnJHthY3Rpb25OYW1lfSdgKVxuICAgIH1cbiAgICBmdW5jdGlvbiByZXMoKSB7XG4gICAgICAgIHJldHVybiBleGVjdXRlQWN0aW9uKGFjdGlvbk5hbWUsIGF1dG9BY3Rpb24sIGZuLCByZWYgfHwgdGhpcywgYXJndW1lbnRzKVxuICAgIH1cbiAgICByZXMuaXNNb2J4QWN0aW9uID0gdHJ1ZVxuICAgIGlmIChpc0Z1bmN0aW9uTmFtZUNvbmZpZ3VyYWJsZSkge1xuICAgICAgICB0bXBOYW1lRGVzY3JpcHRvci52YWx1ZSA9IGFjdGlvbk5hbWVcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcywgXCJuYW1lXCIsIHRtcE5hbWVEZXNjcmlwdG9yKVxuICAgIH1cbiAgICByZXR1cm4gcmVzXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleGVjdXRlQWN0aW9uKFxuICAgIGFjdGlvbk5hbWU6IHN0cmluZyxcbiAgICBjYW5SdW5Bc0Rlcml2YXRpb246IGJvb2xlYW4sXG4gICAgZm46IEZ1bmN0aW9uLFxuICAgIHNjb3BlPzogYW55LFxuICAgIGFyZ3M/OiBJQXJndW1lbnRzXG4pIHtcbiAgICBjb25zdCBydW5JbmZvID0gX3N0YXJ0QWN0aW9uKGFjdGlvbk5hbWUsIGNhblJ1bkFzRGVyaXZhdGlvbiwgc2NvcGUsIGFyZ3MpXG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHNjb3BlLCBhcmdzKVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBydW5JbmZvLmVycm9yXyA9IGVyclxuICAgICAgICB0aHJvdyBlcnJcbiAgICB9IGZpbmFsbHkge1xuICAgICAgICBfZW5kQWN0aW9uKHJ1bkluZm8pXG4gICAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElBY3Rpb25SdW5JbmZvIHtcbiAgICBwcmV2RGVyaXZhdGlvbl86IElEZXJpdmF0aW9uIHwgbnVsbFxuICAgIHByZXZBbGxvd1N0YXRlQ2hhbmdlc186IGJvb2xlYW5cbiAgICBwcmV2QWxsb3dTdGF0ZVJlYWRzXzogYm9vbGVhblxuICAgIG5vdGlmeVNweV86IGJvb2xlYW5cbiAgICBzdGFydFRpbWVfOiBudW1iZXJcbiAgICBlcnJvcl8/OiBhbnlcbiAgICBwYXJlbnRBY3Rpb25JZF86IG51bWJlclxuICAgIGFjdGlvbklkXzogbnVtYmVyXG4gICAgcnVuQXNBY3Rpb25fPzogYm9vbGVhblxufVxuXG5leHBvcnQgZnVuY3Rpb24gX3N0YXJ0QWN0aW9uKFxuICAgIGFjdGlvbk5hbWU6IHN0cmluZyxcbiAgICBjYW5SdW5Bc0Rlcml2YXRpb246IGJvb2xlYW4sIC8vIHRydWUgZm9yIGF1dG9BY3Rpb25cbiAgICBzY29wZTogYW55LFxuICAgIGFyZ3M/OiBJQXJndW1lbnRzXG4pOiBJQWN0aW9uUnVuSW5mbyB7XG4gICAgY29uc3Qgbm90aWZ5U3B5XyA9IF9fREVWX18gJiYgaXNTcHlFbmFibGVkKCkgJiYgISFhY3Rpb25OYW1lXG4gICAgbGV0IHN0YXJ0VGltZV86IG51bWJlciA9IDBcbiAgICBpZiAoX19ERVZfXyAmJiBub3RpZnlTcHlfKSB7XG4gICAgICAgIHN0YXJ0VGltZV8gPSBEYXRlLm5vdygpXG4gICAgICAgIGNvbnN0IGZsYXR0ZW5lZEFyZ3MgPSBhcmdzID8gQXJyYXkuZnJvbShhcmdzKSA6IEVNUFRZX0FSUkFZXG4gICAgICAgIHNweVJlcG9ydFN0YXJ0KHtcbiAgICAgICAgICAgIHR5cGU6IEFDVElPTixcbiAgICAgICAgICAgIG5hbWU6IGFjdGlvbk5hbWUsXG4gICAgICAgICAgICBvYmplY3Q6IHNjb3BlLFxuICAgICAgICAgICAgYXJndW1lbnRzOiBmbGF0dGVuZWRBcmdzXG4gICAgICAgIH0pXG4gICAgfVxuICAgIGNvbnN0IHByZXZEZXJpdmF0aW9uXyA9IGdsb2JhbFN0YXRlLnRyYWNraW5nRGVyaXZhdGlvblxuICAgIGNvbnN0IHJ1bkFzQWN0aW9uID0gIWNhblJ1bkFzRGVyaXZhdGlvbiB8fCAhcHJldkRlcml2YXRpb25fXG4gICAgc3RhcnRCYXRjaCgpXG4gICAgbGV0IHByZXZBbGxvd1N0YXRlQ2hhbmdlc18gPSBnbG9iYWxTdGF0ZS5hbGxvd1N0YXRlQ2hhbmdlcyAvLyBieSBkZWZhdWx0IHByZXNlcnZlIHByZXZpb3VzIGFsbG93XG4gICAgaWYgKHJ1bkFzQWN0aW9uKSB7XG4gICAgICAgIHVudHJhY2tlZFN0YXJ0KClcbiAgICAgICAgcHJldkFsbG93U3RhdGVDaGFuZ2VzXyA9IGFsbG93U3RhdGVDaGFuZ2VzU3RhcnQodHJ1ZSlcbiAgICB9XG4gICAgY29uc3QgcHJldkFsbG93U3RhdGVSZWFkc18gPSBhbGxvd1N0YXRlUmVhZHNTdGFydCh0cnVlKVxuICAgIGNvbnN0IHJ1bkluZm8gPSB7XG4gICAgICAgIHJ1bkFzQWN0aW9uXzogcnVuQXNBY3Rpb24sXG4gICAgICAgIHByZXZEZXJpdmF0aW9uXyxcbiAgICAgICAgcHJldkFsbG93U3RhdGVDaGFuZ2VzXyxcbiAgICAgICAgcHJldkFsbG93U3RhdGVSZWFkc18sXG4gICAgICAgIG5vdGlmeVNweV8sXG4gICAgICAgIHN0YXJ0VGltZV8sXG4gICAgICAgIGFjdGlvbklkXzogbmV4dEFjdGlvbklkKyssXG4gICAgICAgIHBhcmVudEFjdGlvbklkXzogY3VycmVudEFjdGlvbklkXG4gICAgfVxuICAgIGN1cnJlbnRBY3Rpb25JZCA9IHJ1bkluZm8uYWN0aW9uSWRfXG4gICAgcmV0dXJuIHJ1bkluZm9cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9lbmRBY3Rpb24ocnVuSW5mbzogSUFjdGlvblJ1bkluZm8pIHtcbiAgICBpZiAoY3VycmVudEFjdGlvbklkICE9PSBydW5JbmZvLmFjdGlvbklkXykge1xuICAgICAgICBkaWUoMzApXG4gICAgfVxuICAgIGN1cnJlbnRBY3Rpb25JZCA9IHJ1bkluZm8ucGFyZW50QWN0aW9uSWRfXG5cbiAgICBpZiAocnVuSW5mby5lcnJvcl8gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBnbG9iYWxTdGF0ZS5zdXBwcmVzc1JlYWN0aW9uRXJyb3JzID0gdHJ1ZVxuICAgIH1cbiAgICBhbGxvd1N0YXRlQ2hhbmdlc0VuZChydW5JbmZvLnByZXZBbGxvd1N0YXRlQ2hhbmdlc18pXG4gICAgYWxsb3dTdGF0ZVJlYWRzRW5kKHJ1bkluZm8ucHJldkFsbG93U3RhdGVSZWFkc18pXG4gICAgZW5kQmF0Y2goKVxuICAgIGlmIChydW5JbmZvLnJ1bkFzQWN0aW9uXykgdW50cmFja2VkRW5kKHJ1bkluZm8ucHJldkRlcml2YXRpb25fKVxuICAgIGlmIChfX0RFVl9fICYmIHJ1bkluZm8ubm90aWZ5U3B5Xykge1xuICAgICAgICBzcHlSZXBvcnRFbmQoeyB0aW1lOiBEYXRlLm5vdygpIC0gcnVuSW5mby5zdGFydFRpbWVfIH0pXG4gICAgfVxuICAgIGdsb2JhbFN0YXRlLnN1cHByZXNzUmVhY3Rpb25FcnJvcnMgPSBmYWxzZVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYWxsb3dTdGF0ZUNoYW5nZXM8VD4oYWxsb3dTdGF0ZUNoYW5nZXM6IGJvb2xlYW4sIGZ1bmM6ICgpID0+IFQpOiBUIHtcbiAgICBjb25zdCBwcmV2ID0gYWxsb3dTdGF0ZUNoYW5nZXNTdGFydChhbGxvd1N0YXRlQ2hhbmdlcylcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gZnVuYygpXG4gICAgfSBmaW5hbGx5IHtcbiAgICAgICAgYWxsb3dTdGF0ZUNoYW5nZXNFbmQocHJldilcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhbGxvd1N0YXRlQ2hhbmdlc1N0YXJ0KGFsbG93U3RhdGVDaGFuZ2VzOiBib29sZWFuKSB7XG4gICAgY29uc3QgcHJldiA9IGdsb2JhbFN0YXRlLmFsbG93U3RhdGVDaGFuZ2VzXG4gICAgZ2xvYmFsU3RhdGUuYWxsb3dTdGF0ZUNoYW5nZXMgPSBhbGxvd1N0YXRlQ2hhbmdlc1xuICAgIHJldHVybiBwcmV2XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhbGxvd1N0YXRlQ2hhbmdlc0VuZChwcmV2OiBib29sZWFuKSB7XG4gICAgZ2xvYmFsU3RhdGUuYWxsb3dTdGF0ZUNoYW5nZXMgPSBwcmV2XG59XG4iLCJpbXBvcnQge1xuICAgIEF0b20sXG4gICAgSUVuaGFuY2VyLFxuICAgIElJbnRlcmNlcHRhYmxlLFxuICAgIElFcXVhbHNDb21wYXJlcixcbiAgICBJSW50ZXJjZXB0b3IsXG4gICAgSUxpc3RlbmFibGUsXG4gICAgTGFtYmRhLFxuICAgIGNoZWNrSWZTdGF0ZU1vZGlmaWNhdGlvbnNBcmVBbGxvd2VkLFxuICAgIGNvbXBhcmVyLFxuICAgIGNyZWF0ZUluc3RhbmNlb2ZQcmVkaWNhdGUsXG4gICAgZ2V0TmV4dElkLFxuICAgIGhhc0ludGVyY2VwdG9ycyxcbiAgICBoYXNMaXN0ZW5lcnMsXG4gICAgaW50ZXJjZXB0Q2hhbmdlLFxuICAgIGlzU3B5RW5hYmxlZCxcbiAgICBub3RpZnlMaXN0ZW5lcnMsXG4gICAgcmVnaXN0ZXJJbnRlcmNlcHRvcixcbiAgICByZWdpc3Rlckxpc3RlbmVyLFxuICAgIHNweVJlcG9ydCxcbiAgICBzcHlSZXBvcnRFbmQsXG4gICAgc3B5UmVwb3J0U3RhcnQsXG4gICAgdG9QcmltaXRpdmUsXG4gICAgZ2xvYmFsU3RhdGUsXG4gICAgSVVOQ0hBTkdFRCxcbiAgICBVUERBVEVcbn0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuZXhwb3J0IGludGVyZmFjZSBJVmFsdWVXaWxsQ2hhbmdlPFQ+IHtcbiAgICBvYmplY3Q6IElPYnNlcnZhYmxlVmFsdWU8VD5cbiAgICB0eXBlOiBcInVwZGF0ZVwiXG4gICAgbmV3VmFsdWU6IFRcbn1cblxuZXhwb3J0IHR5cGUgSVZhbHVlRGlkQ2hhbmdlPFQgPSBhbnk+ID0ge1xuICAgIHR5cGU6IFwidXBkYXRlXCJcbiAgICBvYnNlcnZhYmxlS2luZDogXCJ2YWx1ZVwiXG4gICAgb2JqZWN0OiBJT2JzZXJ2YWJsZVZhbHVlPFQ+XG4gICAgZGVidWdPYmplY3ROYW1lOiBzdHJpbmdcbiAgICBuZXdWYWx1ZTogdW5rbm93blxuICAgIG9sZFZhbHVlOiB1bmtub3duXG59XG5leHBvcnQgdHlwZSBJQm94RGlkQ2hhbmdlPFQgPSBhbnk+ID1cbiAgICB8IHtcbiAgICAgICAgICB0eXBlOiBcImNyZWF0ZVwiXG4gICAgICAgICAgb2JzZXJ2YWJsZUtpbmQ6IFwidmFsdWVcIlxuICAgICAgICAgIG9iamVjdDogSU9ic2VydmFibGVWYWx1ZTxUPlxuICAgICAgICAgIGRlYnVnT2JqZWN0TmFtZTogc3RyaW5nXG4gICAgICAgICAgbmV3VmFsdWU6IHVua25vd25cbiAgICAgIH1cbiAgICB8IElWYWx1ZURpZENoYW5nZTxUPlxuXG5leHBvcnQgaW50ZXJmYWNlIElPYnNlcnZhYmxlVmFsdWU8VD4ge1xuICAgIGdldCgpOiBUXG4gICAgc2V0KHZhbHVlOiBUKTogdm9pZFxuICAgIGludGVyY2VwdF8oaGFuZGxlcjogSUludGVyY2VwdG9yPElWYWx1ZVdpbGxDaGFuZ2U8VD4+KTogTGFtYmRhXG4gICAgb2JzZXJ2ZV8obGlzdGVuZXI6IChjaGFuZ2U6IElWYWx1ZURpZENoYW5nZTxUPikgPT4gdm9pZCwgZmlyZUltbWVkaWF0ZWx5PzogYm9vbGVhbik6IExhbWJkYVxufVxuXG5jb25zdCBDUkVBVEUgPSBcImNyZWF0ZVwiXG5cbmV4cG9ydCBjbGFzcyBPYnNlcnZhYmxlVmFsdWU8VD5cbiAgICBleHRlbmRzIEF0b21cbiAgICBpbXBsZW1lbnRzIElPYnNlcnZhYmxlVmFsdWU8VD4sIElJbnRlcmNlcHRhYmxlPElWYWx1ZVdpbGxDaGFuZ2U8VD4+LCBJTGlzdGVuYWJsZSB7XG4gICAgaGFzVW5yZXBvcnRlZENoYW5nZV8gPSBmYWxzZVxuICAgIGludGVyY2VwdG9yc19cbiAgICBjaGFuZ2VMaXN0ZW5lcnNfXG4gICAgdmFsdWVfXG4gICAgZGVoYW5jZXI6IGFueVxuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHZhbHVlOiBULFxuICAgICAgICBwdWJsaWMgZW5oYW5jZXI6IElFbmhhbmNlcjxUPixcbiAgICAgICAgcHVibGljIG5hbWVfID0gX19ERVZfXyA/IFwiT2JzZXJ2YWJsZVZhbHVlQFwiICsgZ2V0TmV4dElkKCkgOiBcIk9ic2VydmFibGVWYWx1ZVwiLFxuICAgICAgICBub3RpZnlTcHkgPSB0cnVlLFxuICAgICAgICBwcml2YXRlIGVxdWFsczogSUVxdWFsc0NvbXBhcmVyPGFueT4gPSBjb21wYXJlci5kZWZhdWx0XG4gICAgKSB7XG4gICAgICAgIHN1cGVyKG5hbWVfKVxuICAgICAgICB0aGlzLnZhbHVlXyA9IGVuaGFuY2VyKHZhbHVlLCB1bmRlZmluZWQsIG5hbWVfKVxuICAgICAgICBpZiAoX19ERVZfXyAmJiBub3RpZnlTcHkgJiYgaXNTcHlFbmFibGVkKCkpIHtcbiAgICAgICAgICAgIC8vIG9ubHkgbm90aWZ5IHNweSBpZiB0aGlzIGlzIGEgc3RhbmQtYWxvbmUgb2JzZXJ2YWJsZVxuICAgICAgICAgICAgc3B5UmVwb3J0KHtcbiAgICAgICAgICAgICAgICB0eXBlOiBDUkVBVEUsXG4gICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLFxuICAgICAgICAgICAgICAgIG9ic2VydmFibGVLaW5kOiBcInZhbHVlXCIsXG4gICAgICAgICAgICAgICAgZGVidWdPYmplY3ROYW1lOiB0aGlzLm5hbWVfLFxuICAgICAgICAgICAgICAgIG5ld1ZhbHVlOiBcIlwiICsgdGhpcy52YWx1ZV9cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGRlaGFuY2VWYWx1ZSh2YWx1ZTogVCk6IFQge1xuICAgICAgICBpZiAodGhpcy5kZWhhbmNlciAhPT0gdW5kZWZpbmVkKSByZXR1cm4gdGhpcy5kZWhhbmNlcih2YWx1ZSlcbiAgICAgICAgcmV0dXJuIHZhbHVlXG4gICAgfVxuXG4gICAgcHVibGljIHNldChuZXdWYWx1ZTogVCkge1xuICAgICAgICBjb25zdCBvbGRWYWx1ZSA9IHRoaXMudmFsdWVfXG4gICAgICAgIG5ld1ZhbHVlID0gdGhpcy5wcmVwYXJlTmV3VmFsdWVfKG5ld1ZhbHVlKSBhcyBhbnlcbiAgICAgICAgaWYgKG5ld1ZhbHVlICE9PSBnbG9iYWxTdGF0ZS5VTkNIQU5HRUQpIHtcbiAgICAgICAgICAgIGNvbnN0IG5vdGlmeVNweSA9IGlzU3B5RW5hYmxlZCgpXG4gICAgICAgICAgICBpZiAoX19ERVZfXyAmJiBub3RpZnlTcHkpIHtcbiAgICAgICAgICAgICAgICBzcHlSZXBvcnRTdGFydCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFVQREFURSxcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBvYnNlcnZhYmxlS2luZDogXCJ2YWx1ZVwiLFxuICAgICAgICAgICAgICAgICAgICBkZWJ1Z09iamVjdE5hbWU6IHRoaXMubmFtZV8sXG4gICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBvbGRWYWx1ZVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnNldE5ld1ZhbHVlXyhuZXdWYWx1ZSlcbiAgICAgICAgICAgIGlmIChfX0RFVl9fICYmIG5vdGlmeVNweSkgc3B5UmVwb3J0RW5kKClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgcHJlcGFyZU5ld1ZhbHVlXyhuZXdWYWx1ZSk6IFQgfCBJVU5DSEFOR0VEIHtcbiAgICAgICAgY2hlY2tJZlN0YXRlTW9kaWZpY2F0aW9uc0FyZUFsbG93ZWQodGhpcylcbiAgICAgICAgaWYgKGhhc0ludGVyY2VwdG9ycyh0aGlzKSkge1xuICAgICAgICAgICAgY29uc3QgY2hhbmdlID0gaW50ZXJjZXB0Q2hhbmdlPElWYWx1ZVdpbGxDaGFuZ2U8VD4+KHRoaXMsIHtcbiAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMsXG4gICAgICAgICAgICAgICAgdHlwZTogVVBEQVRFLFxuICAgICAgICAgICAgICAgIG5ld1ZhbHVlXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgaWYgKCFjaGFuZ2UpIHJldHVybiBnbG9iYWxTdGF0ZS5VTkNIQU5HRURcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gY2hhbmdlLm5ld1ZhbHVlXG4gICAgICAgIH1cbiAgICAgICAgLy8gYXBwbHkgbW9kaWZpZXJcbiAgICAgICAgbmV3VmFsdWUgPSB0aGlzLmVuaGFuY2VyKG5ld1ZhbHVlLCB0aGlzLnZhbHVlXywgdGhpcy5uYW1lXylcbiAgICAgICAgcmV0dXJuIHRoaXMuZXF1YWxzKHRoaXMudmFsdWVfLCBuZXdWYWx1ZSkgPyBnbG9iYWxTdGF0ZS5VTkNIQU5HRUQgOiBuZXdWYWx1ZVxuICAgIH1cblxuICAgIHNldE5ld1ZhbHVlXyhuZXdWYWx1ZTogVCkge1xuICAgICAgICBjb25zdCBvbGRWYWx1ZSA9IHRoaXMudmFsdWVfXG4gICAgICAgIHRoaXMudmFsdWVfID0gbmV3VmFsdWVcbiAgICAgICAgdGhpcy5yZXBvcnRDaGFuZ2VkKClcbiAgICAgICAgaWYgKGhhc0xpc3RlbmVycyh0aGlzKSkge1xuICAgICAgICAgICAgbm90aWZ5TGlzdGVuZXJzKHRoaXMsIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBVUERBVEUsXG4gICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLFxuICAgICAgICAgICAgICAgIG5ld1ZhbHVlLFxuICAgICAgICAgICAgICAgIG9sZFZhbHVlXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGdldCgpOiBUIHtcbiAgICAgICAgdGhpcy5yZXBvcnRPYnNlcnZlZCgpXG4gICAgICAgIHJldHVybiB0aGlzLmRlaGFuY2VWYWx1ZSh0aGlzLnZhbHVlXylcbiAgICB9XG5cbiAgICBpbnRlcmNlcHRfKGhhbmRsZXI6IElJbnRlcmNlcHRvcjxJVmFsdWVXaWxsQ2hhbmdlPFQ+Pik6IExhbWJkYSB7XG4gICAgICAgIHJldHVybiByZWdpc3RlckludGVyY2VwdG9yKHRoaXMsIGhhbmRsZXIpXG4gICAgfVxuXG4gICAgb2JzZXJ2ZV8obGlzdGVuZXI6IChjaGFuZ2U6IElWYWx1ZURpZENoYW5nZTxUPikgPT4gdm9pZCwgZmlyZUltbWVkaWF0ZWx5PzogYm9vbGVhbik6IExhbWJkYSB7XG4gICAgICAgIGlmIChmaXJlSW1tZWRpYXRlbHkpXG4gICAgICAgICAgICBsaXN0ZW5lcih7XG4gICAgICAgICAgICAgICAgb2JzZXJ2YWJsZUtpbmQ6IFwidmFsdWVcIixcbiAgICAgICAgICAgICAgICBkZWJ1Z09iamVjdE5hbWU6IHRoaXMubmFtZV8sXG4gICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLFxuICAgICAgICAgICAgICAgIHR5cGU6IFVQREFURSxcbiAgICAgICAgICAgICAgICBuZXdWYWx1ZTogdGhpcy52YWx1ZV8sXG4gICAgICAgICAgICAgICAgb2xkVmFsdWU6IHVuZGVmaW5lZFxuICAgICAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuIHJlZ2lzdGVyTGlzdGVuZXIodGhpcywgbGlzdGVuZXIpXG4gICAgfVxuXG4gICAgcmF3KCkge1xuICAgICAgICAvLyB1c2VkIGJ5IE1TVCBvdCBnZXQgdW5kZWhhbmNlZCB2YWx1ZVxuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZV9cbiAgICB9XG5cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldCgpXG4gICAgfVxuXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBgJHt0aGlzLm5hbWVffVske3RoaXMudmFsdWVffV1gXG4gICAgfVxuXG4gICAgdmFsdWVPZigpOiBUIHtcbiAgICAgICAgcmV0dXJuIHRvUHJpbWl0aXZlKHRoaXMuZ2V0KCkpXG4gICAgfVxuXG4gICAgW1N5bWJvbC50b1ByaW1pdGl2ZV0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlT2YoKVxuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IGlzT2JzZXJ2YWJsZVZhbHVlID0gY3JlYXRlSW5zdGFuY2VvZlByZWRpY2F0ZShcIk9ic2VydmFibGVWYWx1ZVwiLCBPYnNlcnZhYmxlVmFsdWUpIGFzIChcbiAgICB4OiBhbnlcbikgPT4geCBpcyBJT2JzZXJ2YWJsZVZhbHVlPGFueT5cbiIsImltcG9ydCB7XG4gICAgQ2F1Z2h0RXhjZXB0aW9uLFxuICAgIElEZXJpdmF0aW9uLFxuICAgIElEZXJpdmF0aW9uU3RhdGVfLFxuICAgIElFcXVhbHNDb21wYXJlcixcbiAgICBJT2JzZXJ2YWJsZSxcbiAgICBMYW1iZGEsXG4gICAgVHJhY2VNb2RlLFxuICAgIGF1dG9ydW4sXG4gICAgY2xlYXJPYnNlcnZpbmcsXG4gICAgY29tcGFyZXIsXG4gICAgY3JlYXRlQWN0aW9uLFxuICAgIGNyZWF0ZUluc3RhbmNlb2ZQcmVkaWNhdGUsXG4gICAgZW5kQmF0Y2gsXG4gICAgZ2V0TmV4dElkLFxuICAgIGdsb2JhbFN0YXRlLFxuICAgIGlzQ2F1Z2h0RXhjZXB0aW9uLFxuICAgIGlzU3B5RW5hYmxlZCxcbiAgICBwcm9wYWdhdGVDaGFuZ2VDb25maXJtZWQsXG4gICAgcHJvcGFnYXRlTWF5YmVDaGFuZ2VkLFxuICAgIHJlcG9ydE9ic2VydmVkLFxuICAgIHNob3VsZENvbXB1dGUsXG4gICAgc3B5UmVwb3J0LFxuICAgIHN0YXJ0QmF0Y2gsXG4gICAgdG9QcmltaXRpdmUsXG4gICAgdHJhY2tEZXJpdmVkRnVuY3Rpb24sXG4gICAgdW50cmFja2VkRW5kLFxuICAgIHVudHJhY2tlZFN0YXJ0LFxuICAgIFVQREFURSxcbiAgICBkaWUsXG4gICAgYWxsb3dTdGF0ZUNoYW5nZXNTdGFydCxcbiAgICBhbGxvd1N0YXRlQ2hhbmdlc0VuZFxufSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5leHBvcnQgaW50ZXJmYWNlIElDb21wdXRlZFZhbHVlPFQ+IHtcbiAgICBnZXQoKTogVFxuICAgIHNldCh2YWx1ZTogVCk6IHZvaWRcbiAgICBvYnNlcnZlXyhsaXN0ZW5lcjogKGNoYW5nZTogSUNvbXB1dGVkRGlkQ2hhbmdlPFQ+KSA9PiB2b2lkLCBmaXJlSW1tZWRpYXRlbHk/OiBib29sZWFuKTogTGFtYmRhXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUNvbXB1dGVkVmFsdWVPcHRpb25zPFQ+IHtcbiAgICBnZXQ/OiAoKSA9PiBUXG4gICAgc2V0PzogKHZhbHVlOiBUKSA9PiB2b2lkXG4gICAgbmFtZT86IHN0cmluZ1xuICAgIGVxdWFscz86IElFcXVhbHNDb21wYXJlcjxUPlxuICAgIGNvbnRleHQ/OiBhbnlcbiAgICByZXF1aXJlc1JlYWN0aW9uPzogYm9vbGVhblxuICAgIGtlZXBBbGl2ZT86IGJvb2xlYW5cbn1cblxuZXhwb3J0IHR5cGUgSUNvbXB1dGVkRGlkQ2hhbmdlPFQgPSBhbnk+ID0ge1xuICAgIHR5cGU6IFwidXBkYXRlXCJcbiAgICBvYnNlcnZhYmxlS2luZDogXCJjb21wdXRlZFwiXG4gICAgb2JqZWN0OiB1bmtub3duXG4gICAgZGVidWdPYmplY3ROYW1lOiBzdHJpbmdcbiAgICBuZXdWYWx1ZTogVFxuICAgIG9sZFZhbHVlOiBUIHwgdW5kZWZpbmVkXG59XG5cbi8qKlxuICogQSBub2RlIGluIHRoZSBzdGF0ZSBkZXBlbmRlbmN5IHJvb3QgdGhhdCBvYnNlcnZlcyBvdGhlciBub2RlcywgYW5kIGNhbiBiZSBvYnNlcnZlZCBpdHNlbGYuXG4gKlxuICogQ29tcHV0ZWRWYWx1ZSB3aWxsIHJlbWVtYmVyIHRoZSByZXN1bHQgb2YgdGhlIGNvbXB1dGF0aW9uIGZvciB0aGUgZHVyYXRpb24gb2YgdGhlIGJhdGNoLCBvclxuICogd2hpbGUgYmVpbmcgb2JzZXJ2ZWQuXG4gKlxuICogRHVyaW5nIHRoaXMgdGltZSBpdCB3aWxsIHJlY29tcHV0ZSBvbmx5IHdoZW4gb25lIG9mIGl0cyBkaXJlY3QgZGVwZW5kZW5jaWVzIGNoYW5nZWQsXG4gKiBidXQgb25seSB3aGVuIGl0IGlzIGJlaW5nIGFjY2Vzc2VkIHdpdGggYENvbXB1dGVkVmFsdWUuZ2V0KClgLlxuICpcbiAqIEltcGxlbWVudGF0aW9uIGRlc2NyaXB0aW9uOlxuICogMS4gRmlyc3QgdGltZSBpdCdzIGJlaW5nIGFjY2Vzc2VkIGl0IHdpbGwgY29tcHV0ZSBhbmQgcmVtZW1iZXIgcmVzdWx0XG4gKiAgICBnaXZlIGJhY2sgcmVtZW1iZXJlZCByZXN1bHQgdW50aWwgMi4gaGFwcGVuc1xuICogMi4gRmlyc3QgdGltZSBhbnkgZGVlcCBkZXBlbmRlbmN5IGNoYW5nZSwgcHJvcGFnYXRlIFBPU1NJQkxZX1NUQUxFIHRvIGFsbCBvYnNlcnZlcnMsIHdhaXQgZm9yIDMuXG4gKiAzLiBXaGVuIGl0J3MgYmVpbmcgYWNjZXNzZWQsIHJlY29tcHV0ZSBpZiBhbnkgc2hhbGxvdyBkZXBlbmRlbmN5IGNoYW5nZWQuXG4gKiAgICBpZiByZXN1bHQgY2hhbmdlZDogcHJvcGFnYXRlIFNUQUxFIHRvIGFsbCBvYnNlcnZlcnMsIHRoYXQgd2VyZSBQT1NTSUJMWV9TVEFMRSBmcm9tIHRoZSBsYXN0IHN0ZXAuXG4gKiAgICBnbyB0byBzdGVwIDIuIGVpdGhlciB3YXlcbiAqXG4gKiBJZiBhdCBhbnkgcG9pbnQgaXQncyBvdXRzaWRlIGJhdGNoIGFuZCBpdCBpc24ndCBvYnNlcnZlZDogcmVzZXQgZXZlcnl0aGluZyBhbmQgZ28gdG8gMS5cbiAqL1xuZXhwb3J0IGNsYXNzIENvbXB1dGVkVmFsdWU8VD4gaW1wbGVtZW50cyBJT2JzZXJ2YWJsZSwgSUNvbXB1dGVkVmFsdWU8VD4sIElEZXJpdmF0aW9uIHtcbiAgICBkZXBlbmRlbmNpZXNTdGF0ZV8gPSBJRGVyaXZhdGlvblN0YXRlXy5OT1RfVFJBQ0tJTkdfXG4gICAgb2JzZXJ2aW5nXzogSU9ic2VydmFibGVbXSA9IFtdIC8vIG5vZGVzIHdlIGFyZSBsb29raW5nIGF0LiBPdXIgdmFsdWUgZGVwZW5kcyBvbiB0aGVzZSBub2Rlc1xuICAgIG5ld09ic2VydmluZ18gPSBudWxsIC8vIGR1cmluZyB0cmFja2luZyBpdCdzIGFuIGFycmF5IHdpdGggbmV3IG9ic2VydmVkIG9ic2VydmVyc1xuICAgIGlzQmVpbmdPYnNlcnZlZF8gPSBmYWxzZVxuICAgIGlzUGVuZGluZ1Vub2JzZXJ2YXRpb25fOiBib29sZWFuID0gZmFsc2VcbiAgICBvYnNlcnZlcnNfID0gbmV3IFNldDxJRGVyaXZhdGlvbj4oKVxuICAgIGRpZmZWYWx1ZV8gPSAwXG4gICAgcnVuSWRfID0gMFxuICAgIGxhc3RBY2Nlc3NlZEJ5XyA9IDBcbiAgICBsb3dlc3RPYnNlcnZlclN0YXRlXyA9IElEZXJpdmF0aW9uU3RhdGVfLlVQX1RPX0RBVEVfXG4gICAgdW5ib3VuZERlcHNDb3VudF8gPSAwXG4gICAgcHJvdGVjdGVkIHZhbHVlXzogVCB8IHVuZGVmaW5lZCB8IENhdWdodEV4Y2VwdGlvbiA9IG5ldyBDYXVnaHRFeGNlcHRpb24obnVsbClcbiAgICBuYW1lXzogc3RyaW5nXG4gICAgdHJpZ2dlcmVkQnlfPzogc3RyaW5nXG4gICAgaXNDb21wdXRpbmdfOiBib29sZWFuID0gZmFsc2UgLy8gdG8gY2hlY2sgZm9yIGN5Y2xlc1xuICAgIGlzUnVubmluZ1NldHRlcl86IGJvb2xlYW4gPSBmYWxzZVxuICAgIGRlcml2YXRpb246ICgpID0+IFQgLy8gTi5COiB1bm1pbmlmaWVkIGFzIGl0IGlzIHVzZWQgYnkgTVNUXG4gICAgc2V0dGVyXz86ICh2YWx1ZTogVCkgPT4gdm9pZFxuICAgIGlzVHJhY2luZ186IFRyYWNlTW9kZSA9IFRyYWNlTW9kZS5OT05FXG4gICAgc2NvcGVfOiBPYmplY3QgfCB1bmRlZmluZWRcbiAgICBwcml2YXRlIGVxdWFsc186IElFcXVhbHNDb21wYXJlcjxhbnk+XG4gICAgcHJpdmF0ZSByZXF1aXJlc1JlYWN0aW9uXzogYm9vbGVhblxuICAgIGtlZXBBbGl2ZV86IGJvb2xlYW5cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBjb21wdXRlZCB2YWx1ZSBiYXNlZCBvbiBhIGZ1bmN0aW9uIGV4cHJlc3Npb24uXG4gICAgICpcbiAgICAgKiBUaGUgYG5hbWVgIHByb3BlcnR5IGlzIGZvciBkZWJ1ZyBwdXJwb3NlcyBvbmx5LlxuICAgICAqXG4gICAgICogVGhlIGBlcXVhbHNgIHByb3BlcnR5IHNwZWNpZmllcyB0aGUgY29tcGFyZXIgZnVuY3Rpb24gdG8gdXNlIHRvIGRldGVybWluZSBpZiBhIG5ld2x5IHByb2R1Y2VkXG4gICAgICogdmFsdWUgZGlmZmVycyBmcm9tIHRoZSBwcmV2aW91cyB2YWx1ZS4gVHdvIGNvbXBhcmVycyBhcmUgcHJvdmlkZWQgaW4gdGhlIGxpYnJhcnk7IGBkZWZhdWx0Q29tcGFyZXJgXG4gICAgICogY29tcGFyZXMgYmFzZWQgb24gaWRlbnRpdHkgY29tcGFyaXNvbiAoPT09KSwgYW5kIGBzdHJ1Y3R1cmFsQ29tcGFyZXJgIGRlZXBseSBjb21wYXJlcyB0aGUgc3RydWN0dXJlLlxuICAgICAqIFN0cnVjdHVyYWwgY29tcGFyaXNvbiBjYW4gYmUgY29udmVuaWVudCBpZiB5b3UgYWx3YXlzIHByb2R1Y2UgYSBuZXcgYWdncmVnYXRlZCBvYmplY3QgYW5kXG4gICAgICogZG9uJ3Qgd2FudCB0byBub3RpZnkgb2JzZXJ2ZXJzIGlmIGl0IGlzIHN0cnVjdHVyYWxseSB0aGUgc2FtZS5cbiAgICAgKiBUaGlzIGlzIHVzZWZ1bCBmb3Igd29ya2luZyB3aXRoIHZlY3RvcnMsIG1vdXNlIGNvb3JkaW5hdGVzIGV0Yy5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zOiBJQ29tcHV0ZWRWYWx1ZU9wdGlvbnM8VD4pIHtcbiAgICAgICAgaWYgKCFvcHRpb25zLmdldCkgZGllKDMxKVxuICAgICAgICB0aGlzLmRlcml2YXRpb24gPSBvcHRpb25zLmdldCFcbiAgICAgICAgdGhpcy5uYW1lXyA9IG9wdGlvbnMubmFtZSB8fCAoX19ERVZfXyA/IFwiQ29tcHV0ZWRWYWx1ZUBcIiArIGdldE5leHRJZCgpIDogXCJDb21wdXRlZFZhbHVlXCIpXG4gICAgICAgIGlmIChvcHRpb25zLnNldCkge1xuICAgICAgICAgICAgdGhpcy5zZXR0ZXJfID0gY3JlYXRlQWN0aW9uKFxuICAgICAgICAgICAgICAgIF9fREVWX18gPyB0aGlzLm5hbWVfICsgXCItc2V0dGVyXCIgOiBcIkNvbXB1dGVkVmFsdWUtc2V0dGVyXCIsXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5zZXRcbiAgICAgICAgICAgICkgYXMgYW55XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lcXVhbHNfID1cbiAgICAgICAgICAgIG9wdGlvbnMuZXF1YWxzIHx8XG4gICAgICAgICAgICAoKG9wdGlvbnMgYXMgYW55KS5jb21wYXJlU3RydWN0dXJhbCB8fCAob3B0aW9ucyBhcyBhbnkpLnN0cnVjdFxuICAgICAgICAgICAgICAgID8gY29tcGFyZXIuc3RydWN0dXJhbFxuICAgICAgICAgICAgICAgIDogY29tcGFyZXIuZGVmYXVsdClcbiAgICAgICAgdGhpcy5zY29wZV8gPSBvcHRpb25zLmNvbnRleHRcbiAgICAgICAgdGhpcy5yZXF1aXJlc1JlYWN0aW9uXyA9ICEhb3B0aW9ucy5yZXF1aXJlc1JlYWN0aW9uXG4gICAgICAgIHRoaXMua2VlcEFsaXZlXyA9ICEhb3B0aW9ucy5rZWVwQWxpdmVcbiAgICB9XG5cbiAgICBvbkJlY29tZVN0YWxlXygpIHtcbiAgICAgICAgcHJvcGFnYXRlTWF5YmVDaGFuZ2VkKHRoaXMpXG4gICAgfVxuXG4gICAgcHVibGljIG9uQk9MOiBTZXQ8TGFtYmRhPiB8IHVuZGVmaW5lZFxuICAgIHB1YmxpYyBvbkJVT0w6IFNldDxMYW1iZGE+IHwgdW5kZWZpbmVkXG5cbiAgICBwdWJsaWMgb25CTygpIHtcbiAgICAgICAgaWYgKHRoaXMub25CT0wpIHtcbiAgICAgICAgICAgIHRoaXMub25CT0wuZm9yRWFjaChsaXN0ZW5lciA9PiBsaXN0ZW5lcigpKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIG9uQlVPKCkge1xuICAgICAgICBpZiAodGhpcy5vbkJVT0wpIHtcbiAgICAgICAgICAgIHRoaXMub25CVU9MLmZvckVhY2gobGlzdGVuZXIgPT4gbGlzdGVuZXIoKSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGN1cnJlbnQgdmFsdWUgb2YgdGhpcyBjb21wdXRlZCB2YWx1ZS5cbiAgICAgKiBXaWxsIGV2YWx1YXRlIGl0cyBjb21wdXRhdGlvbiBmaXJzdCBpZiBuZWVkZWQuXG4gICAgICovXG4gICAgcHVibGljIGdldCgpOiBUIHtcbiAgICAgICAgaWYgKHRoaXMuaXNDb21wdXRpbmdfKSBkaWUoMzIsIHRoaXMubmFtZV8sIHRoaXMuZGVyaXZhdGlvbilcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgZ2xvYmFsU3RhdGUuaW5CYXRjaCA9PT0gMCAmJlxuICAgICAgICAgICAgLy8gIWdsb2JhbFN0YXRlLnRyYWNraW5nRGVyaXZhdHBpb24gJiZcbiAgICAgICAgICAgIHRoaXMub2JzZXJ2ZXJzXy5zaXplID09PSAwICYmXG4gICAgICAgICAgICAhdGhpcy5rZWVwQWxpdmVfXG4gICAgICAgICkge1xuICAgICAgICAgICAgaWYgKHNob3VsZENvbXB1dGUodGhpcykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLndhcm5BYm91dFVudHJhY2tlZFJlYWRfKClcbiAgICAgICAgICAgICAgICBzdGFydEJhdGNoKCkgLy8gU2VlIHBlcmYgdGVzdCAnY29tcHV0ZWQgbWVtb2l6YXRpb24nXG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZV8gPSB0aGlzLmNvbXB1dGVWYWx1ZV8oZmFsc2UpXG4gICAgICAgICAgICAgICAgZW5kQmF0Y2goKVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVwb3J0T2JzZXJ2ZWQodGhpcylcbiAgICAgICAgICAgIGlmIChzaG91bGRDb21wdXRlKHRoaXMpKSB7XG4gICAgICAgICAgICAgICAgbGV0IHByZXZUcmFja2luZ0NvbnRleHQgPSBnbG9iYWxTdGF0ZS50cmFja2luZ0NvbnRleHRcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5rZWVwQWxpdmVfICYmICFwcmV2VHJhY2tpbmdDb250ZXh0KSBnbG9iYWxTdGF0ZS50cmFja2luZ0NvbnRleHQgPSB0aGlzXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudHJhY2tBbmRDb21wdXRlKCkpIHByb3BhZ2F0ZUNoYW5nZUNvbmZpcm1lZCh0aGlzKVxuICAgICAgICAgICAgICAgIGdsb2JhbFN0YXRlLnRyYWNraW5nQ29udGV4dCA9IHByZXZUcmFja2luZ0NvbnRleHRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLnZhbHVlXyFcblxuICAgICAgICBpZiAoaXNDYXVnaHRFeGNlcHRpb24ocmVzdWx0KSkgdGhyb3cgcmVzdWx0LmNhdXNlXG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0KHZhbHVlOiBUKSB7XG4gICAgICAgIGlmICh0aGlzLnNldHRlcl8pIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzUnVubmluZ1NldHRlcl8pIGRpZSgzMywgdGhpcy5uYW1lXylcbiAgICAgICAgICAgIHRoaXMuaXNSdW5uaW5nU2V0dGVyXyA9IHRydWVcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXR0ZXJfLmNhbGwodGhpcy5zY29wZV8sIHZhbHVlKVxuICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICB0aGlzLmlzUnVubmluZ1NldHRlcl8gPSBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgZGllKDM0LCB0aGlzLm5hbWVfKVxuICAgIH1cblxuICAgIHRyYWNrQW5kQ29tcHV0ZSgpOiBib29sZWFuIHtcbiAgICAgICAgLy8gTi5COiB1bm1pbmlmaWVkIGFzIGl0IGlzIHVzZWQgYnkgTVNUXG4gICAgICAgIGNvbnN0IG9sZFZhbHVlID0gdGhpcy52YWx1ZV9cbiAgICAgICAgY29uc3Qgd2FzU3VzcGVuZGVkID1cbiAgICAgICAgICAgIC8qIHNlZSAjMTIwOCAqLyB0aGlzLmRlcGVuZGVuY2llc1N0YXRlXyA9PT0gSURlcml2YXRpb25TdGF0ZV8uTk9UX1RSQUNLSU5HX1xuICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IHRoaXMuY29tcHV0ZVZhbHVlXyh0cnVlKVxuXG4gICAgICAgIGlmIChfX0RFVl9fICYmIGlzU3B5RW5hYmxlZCgpKSB7XG4gICAgICAgICAgICBzcHlSZXBvcnQoe1xuICAgICAgICAgICAgICAgIG9ic2VydmFibGVLaW5kOiBcImNvbXB1dGVkXCIsXG4gICAgICAgICAgICAgICAgZGVidWdPYmplY3ROYW1lOiB0aGlzLm5hbWVfLFxuICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcy5zY29wZV8sXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1cGRhdGVcIixcbiAgICAgICAgICAgICAgICBvbGRWYWx1ZTogdGhpcy52YWx1ZV8sXG4gICAgICAgICAgICAgICAgbmV3VmFsdWVcbiAgICAgICAgICAgIH0gYXMgSUNvbXB1dGVkRGlkQ2hhbmdlKVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY2hhbmdlZCA9XG4gICAgICAgICAgICB3YXNTdXNwZW5kZWQgfHxcbiAgICAgICAgICAgIGlzQ2F1Z2h0RXhjZXB0aW9uKG9sZFZhbHVlKSB8fFxuICAgICAgICAgICAgaXNDYXVnaHRFeGNlcHRpb24obmV3VmFsdWUpIHx8XG4gICAgICAgICAgICAhdGhpcy5lcXVhbHNfKG9sZFZhbHVlLCBuZXdWYWx1ZSlcblxuICAgICAgICBpZiAoY2hhbmdlZCkge1xuICAgICAgICAgICAgdGhpcy52YWx1ZV8gPSBuZXdWYWx1ZVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNoYW5nZWRcbiAgICB9XG5cbiAgICBjb21wdXRlVmFsdWVfKHRyYWNrOiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMuaXNDb21wdXRpbmdfID0gdHJ1ZVxuICAgICAgICAvLyBkb24ndCBhbGxvdyBzdGF0ZSBjaGFuZ2VzIGR1cmluZyBjb21wdXRhdGlvblxuICAgICAgICBjb25zdCBwcmV2ID0gYWxsb3dTdGF0ZUNoYW5nZXNTdGFydChmYWxzZSlcbiAgICAgICAgbGV0IHJlczogVCB8IENhdWdodEV4Y2VwdGlvblxuICAgICAgICBpZiAodHJhY2spIHtcbiAgICAgICAgICAgIHJlcyA9IHRyYWNrRGVyaXZlZEZ1bmN0aW9uKHRoaXMsIHRoaXMuZGVyaXZhdGlvbiwgdGhpcy5zY29wZV8pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoZ2xvYmFsU3RhdGUuZGlzYWJsZUVycm9yQm91bmRhcmllcyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHJlcyA9IHRoaXMuZGVyaXZhdGlvbi5jYWxsKHRoaXMuc2NvcGVfKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXMgPSB0aGlzLmRlcml2YXRpb24uY2FsbCh0aGlzLnNjb3BlXylcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcyA9IG5ldyBDYXVnaHRFeGNlcHRpb24oZSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYWxsb3dTdGF0ZUNoYW5nZXNFbmQocHJldilcbiAgICAgICAgdGhpcy5pc0NvbXB1dGluZ18gPSBmYWxzZVxuICAgICAgICByZXR1cm4gcmVzXG4gICAgfVxuXG4gICAgc3VzcGVuZF8oKSB7XG4gICAgICAgIGlmICghdGhpcy5rZWVwQWxpdmVfKSB7XG4gICAgICAgICAgICBjbGVhck9ic2VydmluZyh0aGlzKVxuICAgICAgICAgICAgdGhpcy52YWx1ZV8gPSB1bmRlZmluZWQgLy8gZG9uJ3QgaG9sZCBvbiB0byBjb21wdXRlZCB2YWx1ZSFcbiAgICAgICAgICAgIGlmIChfX0RFVl9fICYmIHRoaXMuaXNUcmFjaW5nXyAhPT0gVHJhY2VNb2RlLk5PTkUpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgICAgICAgICAgICAgYFttb2J4LnRyYWNlXSBDb21wdXRlZCB2YWx1ZSAnJHt0aGlzLm5hbWVffScgd2FzIHN1c3BlbmRlZCBhbmQgaXQgd2lsbCByZWNvbXB1dGUgb24gdGhlIG5leHQgYWNjZXNzLmBcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvYnNlcnZlXyhsaXN0ZW5lcjogKGNoYW5nZTogSUNvbXB1dGVkRGlkQ2hhbmdlPFQ+KSA9PiB2b2lkLCBmaXJlSW1tZWRpYXRlbHk/OiBib29sZWFuKTogTGFtYmRhIHtcbiAgICAgICAgbGV0IGZpcnN0VGltZSA9IHRydWVcbiAgICAgICAgbGV0IHByZXZWYWx1ZTogVCB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZFxuICAgICAgICByZXR1cm4gYXV0b3J1bigoKSA9PiB7XG4gICAgICAgICAgICAvLyBUT0RPOiB3aHkgaXMgdGhpcyBpbiBhIGRpZmZlcmVudCBwbGFjZSB0aGFuIHRoZSBzcHlSZXBvcnQoKSBmdW5jdGlvbj8gaW4gYWxsIG90aGVyIG9ic2VydmFibGVzIGl0J3MgY2FsbGVkIGluIHRoZSBzYW1lIHBsYWNlXG4gICAgICAgICAgICBsZXQgbmV3VmFsdWUgPSB0aGlzLmdldCgpXG4gICAgICAgICAgICBpZiAoIWZpcnN0VGltZSB8fCBmaXJlSW1tZWRpYXRlbHkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwcmV2VSA9IHVudHJhY2tlZFN0YXJ0KClcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcih7XG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmFibGVLaW5kOiBcImNvbXB1dGVkXCIsXG4gICAgICAgICAgICAgICAgICAgIGRlYnVnT2JqZWN0TmFtZTogdGhpcy5uYW1lXyxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogVVBEQVRFLFxuICAgICAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBvbGRWYWx1ZTogcHJldlZhbHVlXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB1bnRyYWNrZWRFbmQocHJldlUpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaXJzdFRpbWUgPSBmYWxzZVxuICAgICAgICAgICAgcHJldlZhbHVlID0gbmV3VmFsdWVcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICB3YXJuQWJvdXRVbnRyYWNrZWRSZWFkXygpIHtcbiAgICAgICAgaWYgKCFfX0RFVl9fKSByZXR1cm5cbiAgICAgICAgaWYgKHRoaXMuaXNUcmFjaW5nXyAhPT0gVHJhY2VNb2RlLk5PTkUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICAgICAgICAgIGBbbW9ieC50cmFjZV0gQ29tcHV0ZWQgdmFsdWUgJyR7dGhpcy5uYW1lX30nIGlzIGJlaW5nIHJlYWQgb3V0c2lkZSBhIHJlYWN0aXZlIGNvbnRleHQuIERvaW5nIGEgZnVsbCByZWNvbXB1dGUuYFxuICAgICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICAgIGlmIChnbG9iYWxTdGF0ZS5jb21wdXRlZFJlcXVpcmVzUmVhY3Rpb24gfHwgdGhpcy5yZXF1aXJlc1JlYWN0aW9uXykge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgICAgIGBbbW9ieF0gQ29tcHV0ZWQgdmFsdWUgJyR7dGhpcy5uYW1lX30nIGlzIGJlaW5nIHJlYWQgb3V0c2lkZSBhIHJlYWN0aXZlIGNvbnRleHQuIERvaW5nIGEgZnVsbCByZWNvbXB1dGUuYFxuICAgICAgICAgICAgKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBgJHt0aGlzLm5hbWVffVske3RoaXMuZGVyaXZhdGlvbi50b1N0cmluZygpfV1gXG4gICAgfVxuXG4gICAgdmFsdWVPZigpOiBUIHtcbiAgICAgICAgcmV0dXJuIHRvUHJpbWl0aXZlKHRoaXMuZ2V0KCkpXG4gICAgfVxuXG4gICAgW1N5bWJvbC50b1ByaW1pdGl2ZV0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlT2YoKVxuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IGlzQ29tcHV0ZWRWYWx1ZSA9IGNyZWF0ZUluc3RhbmNlb2ZQcmVkaWNhdGUoXCJDb21wdXRlZFZhbHVlXCIsIENvbXB1dGVkVmFsdWUpXG4iLCJpbXBvcnQge1xuICAgIElBdG9tLFxuICAgIElEZXBUcmVlTm9kZSxcbiAgICBJT2JzZXJ2YWJsZSxcbiAgICBhZGRPYnNlcnZlcixcbiAgICBnbG9iYWxTdGF0ZSxcbiAgICBpc0NvbXB1dGVkVmFsdWUsXG4gICAgcmVtb3ZlT2JzZXJ2ZXJcbn0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuZXhwb3J0IGVudW0gSURlcml2YXRpb25TdGF0ZV8ge1xuICAgIC8vIGJlZm9yZSBiZWluZyBydW4gb3IgKG91dHNpZGUgYmF0Y2ggYW5kIG5vdCBiZWluZyBvYnNlcnZlZClcbiAgICAvLyBhdCB0aGlzIHBvaW50IGRlcml2YXRpb24gaXMgbm90IGhvbGRpbmcgYW55IGRhdGEgYWJvdXQgZGVwZW5kZW5jeSB0cmVlXG4gICAgTk9UX1RSQUNLSU5HXyA9IC0xLFxuICAgIC8vIG5vIHNoYWxsb3cgZGVwZW5kZW5jeSBjaGFuZ2VkIHNpbmNlIGxhc3QgY29tcHV0YXRpb25cbiAgICAvLyB3b24ndCByZWNhbGN1bGF0ZSBkZXJpdmF0aW9uXG4gICAgLy8gdGhpcyBpcyB3aGF0IG1ha2VzIG1vYnggZmFzdFxuICAgIFVQX1RPX0RBVEVfID0gMCxcbiAgICAvLyBzb21lIGRlZXAgZGVwZW5kZW5jeSBjaGFuZ2VkLCBidXQgZG9uJ3Qga25vdyBpZiBzaGFsbG93IGRlcGVuZGVuY3kgY2hhbmdlZFxuICAgIC8vIHdpbGwgcmVxdWlyZSB0byBjaGVjayBmaXJzdCBpZiBVUF9UT19EQVRFIG9yIFBPU1NJQkxZX1NUQUxFXG4gICAgLy8gY3VycmVudGx5IG9ubHkgQ29tcHV0ZWRWYWx1ZSB3aWxsIHByb3BhZ2F0ZSBQT1NTSUJMWV9TVEFMRVxuICAgIC8vXG4gICAgLy8gaGF2aW5nIHRoaXMgc3RhdGUgaXMgc2Vjb25kIGJpZyBvcHRpbWl6YXRpb246XG4gICAgLy8gZG9uJ3QgaGF2ZSB0byByZWNvbXB1dGUgb24gZXZlcnkgZGVwZW5kZW5jeSBjaGFuZ2UsIGJ1dCBvbmx5IHdoZW4gaXQncyBuZWVkZWRcbiAgICBQT1NTSUJMWV9TVEFMRV8gPSAxLFxuICAgIC8vIEEgc2hhbGxvdyBkZXBlbmRlbmN5IGhhcyBjaGFuZ2VkIHNpbmNlIGxhc3QgY29tcHV0YXRpb24gYW5kIHRoZSBkZXJpdmF0aW9uXG4gICAgLy8gd2lsbCBuZWVkIHRvIHJlY29tcHV0ZSB3aGVuIGl0J3MgbmVlZGVkIG5leHQuXG4gICAgU1RBTEVfID0gMlxufVxuXG5leHBvcnQgZW51bSBUcmFjZU1vZGUge1xuICAgIE5PTkUsXG4gICAgTE9HLFxuICAgIEJSRUFLXG59XG5cbi8qKlxuICogQSBkZXJpdmF0aW9uIGlzIGV2ZXJ5dGhpbmcgdGhhdCBjYW4gYmUgZGVyaXZlZCBmcm9tIHRoZSBzdGF0ZSAoYWxsIHRoZSBhdG9tcykgaW4gYSBwdXJlIG1hbm5lci5cbiAqIFNlZSBodHRwczovL21lZGl1bS5jb20vQG13ZXN0c3RyYXRlL2JlY29taW5nLWZ1bGx5LXJlYWN0aXZlLWFuLWluLWRlcHRoLWV4cGxhbmF0aW9uLW9mLW1vYnNlcnZhYmxlLTU1OTk1MjYyYTI1NCMueHZiaDZxZDc0XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSURlcml2YXRpb24gZXh0ZW5kcyBJRGVwVHJlZU5vZGUge1xuICAgIG9ic2VydmluZ186IElPYnNlcnZhYmxlW11cbiAgICBuZXdPYnNlcnZpbmdfOiBudWxsIHwgSU9ic2VydmFibGVbXVxuICAgIGRlcGVuZGVuY2llc1N0YXRlXzogSURlcml2YXRpb25TdGF0ZV9cbiAgICAvKipcbiAgICAgKiBJZCBvZiB0aGUgY3VycmVudCBydW4gb2YgYSBkZXJpdmF0aW9uLiBFYWNoIHRpbWUgdGhlIGRlcml2YXRpb24gaXMgdHJhY2tlZFxuICAgICAqIHRoaXMgbnVtYmVyIGlzIGluY3JlYXNlZCBieSBvbmUuIFRoaXMgbnVtYmVyIGlzIGdsb2JhbGx5IHVuaXF1ZVxuICAgICAqL1xuICAgIHJ1bklkXzogbnVtYmVyXG4gICAgLyoqXG4gICAgICogYW1vdW50IG9mIGRlcGVuZGVuY2llcyB1c2VkIGJ5IHRoZSBkZXJpdmF0aW9uIGluIHRoaXMgcnVuLCB3aGljaCBoYXMgbm90IGJlZW4gYm91bmQgeWV0LlxuICAgICAqL1xuICAgIHVuYm91bmREZXBzQ291bnRfOiBudW1iZXJcbiAgICBvbkJlY29tZVN0YWxlXygpOiB2b2lkXG4gICAgaXNUcmFjaW5nXzogVHJhY2VNb2RlXG5cbiAgICAvKipcbiAgICAgKiAgd2FybiBpZiB0aGUgZGVyaXZhdGlvbiBoYXMgbm8gZGVwZW5kZW5jaWVzIGFmdGVyIGNyZWF0aW9uL3VwZGF0ZVxuICAgICAqL1xuICAgIHJlcXVpcmVzT2JzZXJ2YWJsZV8/OiBib29sZWFuXG59XG5cbmV4cG9ydCBjbGFzcyBDYXVnaHRFeGNlcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBjYXVzZTogYW55KSB7XG4gICAgICAgIC8vIEVtcHR5XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNDYXVnaHRFeGNlcHRpb24oZTogYW55KTogZSBpcyBDYXVnaHRFeGNlcHRpb24ge1xuICAgIHJldHVybiBlIGluc3RhbmNlb2YgQ2F1Z2h0RXhjZXB0aW9uXG59XG5cbi8qKlxuICogRmluZHMgb3V0IHdoZXRoZXIgYW55IGRlcGVuZGVuY3kgb2YgdGhlIGRlcml2YXRpb24gaGFzIGFjdHVhbGx5IGNoYW5nZWQuXG4gKiBJZiBkZXBlbmRlbmNpZXNTdGF0ZSBpcyAxIHRoZW4gaXQgd2lsbCByZWNhbGN1bGF0ZSBkZXBlbmRlbmNpZXMsXG4gKiBpZiBhbnkgZGVwZW5kZW5jeSBjaGFuZ2VkIGl0IHdpbGwgcHJvcGFnYXRlIGl0IGJ5IGNoYW5naW5nIGRlcGVuZGVuY2llc1N0YXRlIHRvIDIuXG4gKlxuICogQnkgaXRlcmF0aW5nIG92ZXIgdGhlIGRlcGVuZGVuY2llcyBpbiB0aGUgc2FtZSBvcmRlciB0aGF0IHRoZXkgd2VyZSByZXBvcnRlZCBhbmRcbiAqIHN0b3BwaW5nIG9uIHRoZSBmaXJzdCBjaGFuZ2UsIGFsbCB0aGUgcmVjYWxjdWxhdGlvbnMgYXJlIG9ubHkgY2FsbGVkIGZvciBDb21wdXRlZFZhbHVlc1xuICogdGhhdCB3aWxsIGJlIHRyYWNrZWQgYnkgZGVyaXZhdGlvbi4gVGhhdCBpcyBiZWNhdXNlIHdlIGFzc3VtZSB0aGF0IGlmIHRoZSBmaXJzdCB4XG4gKiBkZXBlbmRlbmNpZXMgb2YgdGhlIGRlcml2YXRpb24gZG9lc24ndCBjaGFuZ2UgdGhlbiB0aGUgZGVyaXZhdGlvbiBzaG91bGQgcnVuIHRoZSBzYW1lIHdheVxuICogdXAgdW50aWwgYWNjZXNzaW5nIHgtdGggZGVwZW5kZW5jeS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNob3VsZENvbXB1dGUoZGVyaXZhdGlvbjogSURlcml2YXRpb24pOiBib29sZWFuIHtcbiAgICBzd2l0Y2ggKGRlcml2YXRpb24uZGVwZW5kZW5jaWVzU3RhdGVfKSB7XG4gICAgICAgIGNhc2UgSURlcml2YXRpb25TdGF0ZV8uVVBfVE9fREFURV86XG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgY2FzZSBJRGVyaXZhdGlvblN0YXRlXy5OT1RfVFJBQ0tJTkdfOlxuICAgICAgICBjYXNlIElEZXJpdmF0aW9uU3RhdGVfLlNUQUxFXzpcbiAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIGNhc2UgSURlcml2YXRpb25TdGF0ZV8uUE9TU0lCTFlfU1RBTEVfOiB7XG4gICAgICAgICAgICAvLyBzdGF0ZSBwcm9wYWdhdGlvbiBjYW4gb2NjdXIgb3V0c2lkZSBvZiBhY3Rpb24vcmVhY3RpdmUgY29udGV4dCAjMjE5NVxuICAgICAgICAgICAgY29uc3QgcHJldkFsbG93U3RhdGVSZWFkcyA9IGFsbG93U3RhdGVSZWFkc1N0YXJ0KHRydWUpXG4gICAgICAgICAgICBjb25zdCBwcmV2VW50cmFja2VkID0gdW50cmFja2VkU3RhcnQoKSAvLyBubyBuZWVkIGZvciB0aG9zZSBjb21wdXRlZHMgdG8gYmUgcmVwb3J0ZWQsIHRoZXkgd2lsbCBiZSBwaWNrZWQgdXAgaW4gdHJhY2tEZXJpdmVkRnVuY3Rpb24uXG4gICAgICAgICAgICBjb25zdCBvYnMgPSBkZXJpdmF0aW9uLm9ic2VydmluZ18sXG4gICAgICAgICAgICAgICAgbCA9IG9icy5sZW5ndGhcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgb2JqID0gb2JzW2ldXG4gICAgICAgICAgICAgICAgaWYgKGlzQ29tcHV0ZWRWYWx1ZShvYmopKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChnbG9iYWxTdGF0ZS5kaXNhYmxlRXJyb3JCb3VuZGFyaWVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYmouZ2V0KClcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLmdldCgpXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2UgYXJlIG5vdCBpbnRlcmVzdGVkIGluIHRoZSB2YWx1ZSAqb3IqIGV4Y2VwdGlvbiBhdCB0aGlzIG1vbWVudCwgYnV0IGlmIHRoZXJlIGlzIG9uZSwgbm90aWZ5IGFsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVudHJhY2tlZEVuZChwcmV2VW50cmFja2VkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbG93U3RhdGVSZWFkc0VuZChwcmV2QWxsb3dTdGF0ZVJlYWRzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgQ29tcHV0ZWRWYWx1ZSBgb2JqYCBhY3R1YWxseSBjaGFuZ2VkIGl0IHdpbGwgYmUgY29tcHV0ZWQgYW5kIHByb3BhZ2F0ZWQgdG8gaXRzIG9ic2VydmVycy5cbiAgICAgICAgICAgICAgICAgICAgLy8gYW5kIGBkZXJpdmF0aW9uYCBpcyBhbiBvYnNlcnZlciBvZiBgb2JqYFxuICAgICAgICAgICAgICAgICAgICAvLyBpbnZhcmlhbnRTaG91bGRDb21wdXRlKGRlcml2YXRpb24pXG4gICAgICAgICAgICAgICAgICAgIGlmICgoZGVyaXZhdGlvbi5kZXBlbmRlbmNpZXNTdGF0ZV8gYXMgYW55KSA9PT0gSURlcml2YXRpb25TdGF0ZV8uU1RBTEVfKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1bnRyYWNrZWRFbmQocHJldlVudHJhY2tlZClcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbG93U3RhdGVSZWFkc0VuZChwcmV2QWxsb3dTdGF0ZVJlYWRzKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNoYW5nZURlcGVuZGVuY2llc1N0YXRlVG8wKGRlcml2YXRpb24pXG4gICAgICAgICAgICB1bnRyYWNrZWRFbmQocHJldlVudHJhY2tlZClcbiAgICAgICAgICAgIGFsbG93U3RhdGVSZWFkc0VuZChwcmV2QWxsb3dTdGF0ZVJlYWRzKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0NvbXB1dGluZ0Rlcml2YXRpb24oKSB7XG4gICAgcmV0dXJuIGdsb2JhbFN0YXRlLnRyYWNraW5nRGVyaXZhdGlvbiAhPT0gbnVsbCAvLyBmaWx0ZXIgb3V0IGFjdGlvbnMgaW5zaWRlIGNvbXB1dGF0aW9uc1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tJZlN0YXRlTW9kaWZpY2F0aW9uc0FyZUFsbG93ZWQoYXRvbTogSUF0b20pIHtcbiAgICBpZiAoIV9fREVWX18pIHtcbiAgICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNvbnN0IGhhc09ic2VydmVycyA9IGF0b20ub2JzZXJ2ZXJzXy5zaXplID4gMFxuICAgIC8vIFNob3VsZCBub3QgYmUgcG9zc2libGUgdG8gY2hhbmdlIG9ic2VydmVkIHN0YXRlIG91dHNpZGUgc3RyaWN0IG1vZGUsIGV4Y2VwdCBkdXJpbmcgaW5pdGlhbGl6YXRpb24sIHNlZSAjNTYzXG4gICAgaWYgKCFnbG9iYWxTdGF0ZS5hbGxvd1N0YXRlQ2hhbmdlcyAmJiAoaGFzT2JzZXJ2ZXJzIHx8IGdsb2JhbFN0YXRlLmVuZm9yY2VBY3Rpb25zID09PSBcImFsd2F5c1wiKSlcbiAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgXCJbTW9iWF0gXCIgK1xuICAgICAgICAgICAgICAgIChnbG9iYWxTdGF0ZS5lbmZvcmNlQWN0aW9uc1xuICAgICAgICAgICAgICAgICAgICA/IFwiU2luY2Ugc3RyaWN0LW1vZGUgaXMgZW5hYmxlZCwgY2hhbmdpbmcgKG9ic2VydmVkKSBvYnNlcnZhYmxlIHZhbHVlcyB3aXRob3V0IHVzaW5nIGFuIGFjdGlvbiBpcyBub3QgYWxsb3dlZC4gVHJpZWQgdG8gbW9kaWZ5OiBcIlxuICAgICAgICAgICAgICAgICAgICA6IFwiU2lkZSBlZmZlY3RzIGxpa2UgY2hhbmdpbmcgc3RhdGUgYXJlIG5vdCBhbGxvd2VkIGF0IHRoaXMgcG9pbnQuIEFyZSB5b3UgdHJ5aW5nIHRvIG1vZGlmeSBzdGF0ZSBmcm9tLCBmb3IgZXhhbXBsZSwgYSBjb21wdXRlZCB2YWx1ZSBvciB0aGUgcmVuZGVyIGZ1bmN0aW9uIG9mIGEgUmVhY3QgY29tcG9uZW50PyBZb3UgY2FuIHdyYXAgc2lkZSBlZmZlY3RzIGluICdydW5JbkFjdGlvbicgKG9yIGRlY29yYXRlIGZ1bmN0aW9ucyB3aXRoICdhY3Rpb24nKSBpZiBuZWVkZWQuIFRyaWVkIHRvIG1vZGlmeTogXCIpICtcbiAgICAgICAgICAgICAgICBhdG9tLm5hbWVfXG4gICAgICAgIClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrSWZTdGF0ZVJlYWRzQXJlQWxsb3dlZChvYnNlcnZhYmxlOiBJT2JzZXJ2YWJsZSkge1xuICAgIGlmIChfX0RFVl9fICYmICFnbG9iYWxTdGF0ZS5hbGxvd1N0YXRlUmVhZHMgJiYgZ2xvYmFsU3RhdGUub2JzZXJ2YWJsZVJlcXVpcmVzUmVhY3Rpb24pIHtcbiAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgYFttb2J4XSBPYnNlcnZhYmxlICcke29ic2VydmFibGUubmFtZV99JyBiZWluZyByZWFkIG91dHNpZGUgYSByZWFjdGl2ZSBjb250ZXh0LmBcbiAgICAgICAgKVxuICAgIH1cbn1cblxuLyoqXG4gKiBFeGVjdXRlcyB0aGUgcHJvdmlkZWQgZnVuY3Rpb24gYGZgIGFuZCB0cmFja3Mgd2hpY2ggb2JzZXJ2YWJsZXMgYXJlIGJlaW5nIGFjY2Vzc2VkLlxuICogVGhlIHRyYWNraW5nIGluZm9ybWF0aW9uIGlzIHN0b3JlZCBvbiB0aGUgYGRlcml2YXRpb25gIG9iamVjdCBhbmQgdGhlIGRlcml2YXRpb24gaXMgcmVnaXN0ZXJlZFxuICogYXMgb2JzZXJ2ZXIgb2YgYW55IG9mIHRoZSBhY2Nlc3NlZCBvYnNlcnZhYmxlcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyYWNrRGVyaXZlZEZ1bmN0aW9uPFQ+KGRlcml2YXRpb246IElEZXJpdmF0aW9uLCBmOiAoKSA9PiBULCBjb250ZXh0OiBhbnkpIHtcbiAgICBjb25zdCBwcmV2QWxsb3dTdGF0ZVJlYWRzID0gYWxsb3dTdGF0ZVJlYWRzU3RhcnQodHJ1ZSlcbiAgICAvLyBwcmUgYWxsb2NhdGUgYXJyYXkgYWxsb2NhdGlvbiArIHJvb20gZm9yIHZhcmlhdGlvbiBpbiBkZXBzXG4gICAgLy8gYXJyYXkgd2lsbCBiZSB0cmltbWVkIGJ5IGJpbmREZXBlbmRlbmNpZXNcbiAgICBjaGFuZ2VEZXBlbmRlbmNpZXNTdGF0ZVRvMChkZXJpdmF0aW9uKVxuICAgIGRlcml2YXRpb24ubmV3T2JzZXJ2aW5nXyA9IG5ldyBBcnJheShkZXJpdmF0aW9uLm9ic2VydmluZ18ubGVuZ3RoICsgMTAwKVxuICAgIGRlcml2YXRpb24udW5ib3VuZERlcHNDb3VudF8gPSAwXG4gICAgZGVyaXZhdGlvbi5ydW5JZF8gPSArK2dsb2JhbFN0YXRlLnJ1bklkXG4gICAgY29uc3QgcHJldlRyYWNraW5nID0gZ2xvYmFsU3RhdGUudHJhY2tpbmdEZXJpdmF0aW9uXG4gICAgZ2xvYmFsU3RhdGUudHJhY2tpbmdEZXJpdmF0aW9uID0gZGVyaXZhdGlvblxuICAgIGdsb2JhbFN0YXRlLmluQmF0Y2grK1xuICAgIGxldCByZXN1bHRcbiAgICBpZiAoZ2xvYmFsU3RhdGUuZGlzYWJsZUVycm9yQm91bmRhcmllcyA9PT0gdHJ1ZSkge1xuICAgICAgICByZXN1bHQgPSBmLmNhbGwoY29udGV4dClcbiAgICB9IGVsc2Uge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0ID0gZi5jYWxsKGNvbnRleHQpXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IG5ldyBDYXVnaHRFeGNlcHRpb24oZSlcbiAgICAgICAgfVxuICAgIH1cbiAgICBnbG9iYWxTdGF0ZS5pbkJhdGNoLS1cbiAgICBnbG9iYWxTdGF0ZS50cmFja2luZ0Rlcml2YXRpb24gPSBwcmV2VHJhY2tpbmdcbiAgICBiaW5kRGVwZW5kZW5jaWVzKGRlcml2YXRpb24pXG5cbiAgICB3YXJuQWJvdXREZXJpdmF0aW9uV2l0aG91dERlcGVuZGVuY2llcyhkZXJpdmF0aW9uKVxuICAgIGFsbG93U3RhdGVSZWFkc0VuZChwcmV2QWxsb3dTdGF0ZVJlYWRzKVxuICAgIHJldHVybiByZXN1bHRcbn1cblxuZnVuY3Rpb24gd2FybkFib3V0RGVyaXZhdGlvbldpdGhvdXREZXBlbmRlbmNpZXMoZGVyaXZhdGlvbjogSURlcml2YXRpb24pIHtcbiAgICBpZiAoIV9fREVWX18pIHJldHVyblxuXG4gICAgaWYgKGRlcml2YXRpb24ub2JzZXJ2aW5nXy5sZW5ndGggIT09IDApIHJldHVyblxuXG4gICAgaWYgKGdsb2JhbFN0YXRlLnJlYWN0aW9uUmVxdWlyZXNPYnNlcnZhYmxlIHx8IGRlcml2YXRpb24ucmVxdWlyZXNPYnNlcnZhYmxlXykge1xuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICBgW21vYnhdIERlcml2YXRpb24gJyR7ZGVyaXZhdGlvbi5uYW1lX30nIGlzIGNyZWF0ZWQvdXBkYXRlZCB3aXRob3V0IHJlYWRpbmcgYW55IG9ic2VydmFibGUgdmFsdWUuYFxuICAgICAgICApXG4gICAgfVxufVxuXG4vKipcbiAqIGRpZmZzIG5ld09ic2VydmluZyB3aXRoIG9ic2VydmluZy5cbiAqIHVwZGF0ZSBvYnNlcnZpbmcgdG8gYmUgbmV3T2JzZXJ2aW5nIHdpdGggdW5pcXVlIG9ic2VydmFibGVzXG4gKiBub3RpZnkgb2JzZXJ2ZXJzIHRoYXQgYmVjb21lIG9ic2VydmVkL3Vub2JzZXJ2ZWRcbiAqL1xuZnVuY3Rpb24gYmluZERlcGVuZGVuY2llcyhkZXJpdmF0aW9uOiBJRGVyaXZhdGlvbikge1xuICAgIC8vIGludmFyaWFudChkZXJpdmF0aW9uLmRlcGVuZGVuY2llc1N0YXRlICE9PSBJRGVyaXZhdGlvblN0YXRlLk5PVF9UUkFDS0lORywgXCJJTlRFUk5BTCBFUlJPUiBiaW5kRGVwZW5kZW5jaWVzIGV4cGVjdHMgZGVyaXZhdGlvbi5kZXBlbmRlbmNpZXNTdGF0ZSAhPT0gLTFcIik7XG4gICAgY29uc3QgcHJldk9ic2VydmluZyA9IGRlcml2YXRpb24ub2JzZXJ2aW5nX1xuICAgIGNvbnN0IG9ic2VydmluZyA9IChkZXJpdmF0aW9uLm9ic2VydmluZ18gPSBkZXJpdmF0aW9uLm5ld09ic2VydmluZ18hKVxuICAgIGxldCBsb3dlc3ROZXdPYnNlcnZpbmdEZXJpdmF0aW9uU3RhdGUgPSBJRGVyaXZhdGlvblN0YXRlXy5VUF9UT19EQVRFX1xuXG4gICAgLy8gR28gdGhyb3VnaCBhbGwgbmV3IG9ic2VydmFibGVzIGFuZCBjaGVjayBkaWZmVmFsdWU6ICh0aGlzIGxpc3QgY2FuIGNvbnRhaW4gZHVwbGljYXRlcyk6XG4gICAgLy8gICAwOiBmaXJzdCBvY2N1cnJlbmNlLCBjaGFuZ2UgdG8gMSBhbmQga2VlcCBpdFxuICAgIC8vICAgMTogZXh0cmEgb2NjdXJyZW5jZSwgZHJvcCBpdFxuICAgIGxldCBpMCA9IDAsXG4gICAgICAgIGwgPSBkZXJpdmF0aW9uLnVuYm91bmREZXBzQ291bnRfXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgY29uc3QgZGVwID0gb2JzZXJ2aW5nW2ldXG4gICAgICAgIGlmIChkZXAuZGlmZlZhbHVlXyA9PT0gMCkge1xuICAgICAgICAgICAgZGVwLmRpZmZWYWx1ZV8gPSAxXG4gICAgICAgICAgICBpZiAoaTAgIT09IGkpIG9ic2VydmluZ1tpMF0gPSBkZXBcbiAgICAgICAgICAgIGkwKytcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVwY2FzdCBpcyAnc2FmZScgaGVyZSwgYmVjYXVzZSBpZiBkZXAgaXMgSU9ic2VydmFibGUsIGBkZXBlbmRlbmNpZXNTdGF0ZWAgd2lsbCBiZSB1bmRlZmluZWQsXG4gICAgICAgIC8vIG5vdCBoaXR0aW5nIHRoZSBjb25kaXRpb25cbiAgICAgICAgaWYgKCgoZGVwIGFzIGFueSkgYXMgSURlcml2YXRpb24pLmRlcGVuZGVuY2llc1N0YXRlXyA+IGxvd2VzdE5ld09ic2VydmluZ0Rlcml2YXRpb25TdGF0ZSkge1xuICAgICAgICAgICAgbG93ZXN0TmV3T2JzZXJ2aW5nRGVyaXZhdGlvblN0YXRlID0gKChkZXAgYXMgYW55KSBhcyBJRGVyaXZhdGlvbikuZGVwZW5kZW5jaWVzU3RhdGVfXG4gICAgICAgIH1cbiAgICB9XG4gICAgb2JzZXJ2aW5nLmxlbmd0aCA9IGkwXG5cbiAgICBkZXJpdmF0aW9uLm5ld09ic2VydmluZ18gPSBudWxsIC8vIG5ld09ic2VydmluZyBzaG91bGRuJ3QgYmUgbmVlZGVkIG91dHNpZGUgdHJhY2tpbmcgKHN0YXRlbWVudCBtb3ZlZCBkb3duIHRvIHdvcmsgYXJvdW5kIEZGIGJ1Zywgc2VlICM2MTQpXG5cbiAgICAvLyBHbyB0aHJvdWdoIGFsbCBvbGQgb2JzZXJ2YWJsZXMgYW5kIGNoZWNrIGRpZmZWYWx1ZTogKGl0IGlzIHVuaXF1ZSBhZnRlciBsYXN0IGJpbmREZXBlbmRlbmNpZXMpXG4gICAgLy8gICAwOiBpdCdzIG5vdCBpbiBuZXcgb2JzZXJ2YWJsZXMsIHVub2JzZXJ2ZSBpdFxuICAgIC8vICAgMTogaXQga2VlcHMgYmVpbmcgb2JzZXJ2ZWQsIGRvbid0IHdhbnQgdG8gbm90aWZ5IGl0LiBjaGFuZ2UgdG8gMFxuICAgIGwgPSBwcmV2T2JzZXJ2aW5nLmxlbmd0aFxuICAgIHdoaWxlIChsLS0pIHtcbiAgICAgICAgY29uc3QgZGVwID0gcHJldk9ic2VydmluZ1tsXVxuICAgICAgICBpZiAoZGVwLmRpZmZWYWx1ZV8gPT09IDApIHtcbiAgICAgICAgICAgIHJlbW92ZU9ic2VydmVyKGRlcCwgZGVyaXZhdGlvbilcbiAgICAgICAgfVxuICAgICAgICBkZXAuZGlmZlZhbHVlXyA9IDBcbiAgICB9XG5cbiAgICAvLyBHbyB0aHJvdWdoIGFsbCBuZXcgb2JzZXJ2YWJsZXMgYW5kIGNoZWNrIGRpZmZWYWx1ZTogKG5vdyBpdCBzaG91bGQgYmUgdW5pcXVlKVxuICAgIC8vICAgMDogaXQgd2FzIHNldCB0byAwIGluIGxhc3QgbG9vcC4gZG9uJ3QgbmVlZCB0byBkbyBhbnl0aGluZy5cbiAgICAvLyAgIDE6IGl0IHdhc24ndCBvYnNlcnZlZCwgbGV0J3Mgb2JzZXJ2ZSBpdC4gc2V0IGJhY2sgdG8gMFxuICAgIHdoaWxlIChpMC0tKSB7XG4gICAgICAgIGNvbnN0IGRlcCA9IG9ic2VydmluZ1tpMF1cbiAgICAgICAgaWYgKGRlcC5kaWZmVmFsdWVfID09PSAxKSB7XG4gICAgICAgICAgICBkZXAuZGlmZlZhbHVlXyA9IDBcbiAgICAgICAgICAgIGFkZE9ic2VydmVyKGRlcCwgZGVyaXZhdGlvbilcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFNvbWUgbmV3IG9ic2VydmVkIGRlcml2YXRpb25zIG1heSBiZWNvbWUgc3RhbGUgZHVyaW5nIHRoaXMgZGVyaXZhdGlvbiBjb21wdXRhdGlvblxuICAgIC8vIHNvIHRoZXkgaGF2ZSBoYWQgbm8gY2hhbmNlIHRvIHByb3BhZ2F0ZSBzdGFsZW5lc3MgKCM5MTYpXG4gICAgaWYgKGxvd2VzdE5ld09ic2VydmluZ0Rlcml2YXRpb25TdGF0ZSAhPT0gSURlcml2YXRpb25TdGF0ZV8uVVBfVE9fREFURV8pIHtcbiAgICAgICAgZGVyaXZhdGlvbi5kZXBlbmRlbmNpZXNTdGF0ZV8gPSBsb3dlc3ROZXdPYnNlcnZpbmdEZXJpdmF0aW9uU3RhdGVcbiAgICAgICAgZGVyaXZhdGlvbi5vbkJlY29tZVN0YWxlXygpXG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY2xlYXJPYnNlcnZpbmcoZGVyaXZhdGlvbjogSURlcml2YXRpb24pIHtcbiAgICAvLyBpbnZhcmlhbnQoZ2xvYmFsU3RhdGUuaW5CYXRjaCA+IDAsIFwiSU5URVJOQUwgRVJST1IgY2xlYXJPYnNlcnZpbmcgc2hvdWxkIGJlIGNhbGxlZCBvbmx5IGluc2lkZSBiYXRjaFwiKTtcbiAgICBjb25zdCBvYnMgPSBkZXJpdmF0aW9uLm9ic2VydmluZ19cbiAgICBkZXJpdmF0aW9uLm9ic2VydmluZ18gPSBbXVxuICAgIGxldCBpID0gb2JzLmxlbmd0aFxuICAgIHdoaWxlIChpLS0pIHJlbW92ZU9ic2VydmVyKG9ic1tpXSwgZGVyaXZhdGlvbilcblxuICAgIGRlcml2YXRpb24uZGVwZW5kZW5jaWVzU3RhdGVfID0gSURlcml2YXRpb25TdGF0ZV8uTk9UX1RSQUNLSU5HX1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdW50cmFja2VkPFQ+KGFjdGlvbjogKCkgPT4gVCk6IFQge1xuICAgIGNvbnN0IHByZXYgPSB1bnRyYWNrZWRTdGFydCgpXG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGFjdGlvbigpXG4gICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdW50cmFja2VkRW5kKHByZXYpXG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdW50cmFja2VkU3RhcnQoKTogSURlcml2YXRpb24gfCBudWxsIHtcbiAgICBjb25zdCBwcmV2ID0gZ2xvYmFsU3RhdGUudHJhY2tpbmdEZXJpdmF0aW9uXG4gICAgZ2xvYmFsU3RhdGUudHJhY2tpbmdEZXJpdmF0aW9uID0gbnVsbFxuICAgIHJldHVybiBwcmV2XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1bnRyYWNrZWRFbmQocHJldjogSURlcml2YXRpb24gfCBudWxsKSB7XG4gICAgZ2xvYmFsU3RhdGUudHJhY2tpbmdEZXJpdmF0aW9uID0gcHJldlxufVxuXG5leHBvcnQgZnVuY3Rpb24gYWxsb3dTdGF0ZVJlYWRzU3RhcnQoYWxsb3dTdGF0ZVJlYWRzOiBib29sZWFuKSB7XG4gICAgY29uc3QgcHJldiA9IGdsb2JhbFN0YXRlLmFsbG93U3RhdGVSZWFkc1xuICAgIGdsb2JhbFN0YXRlLmFsbG93U3RhdGVSZWFkcyA9IGFsbG93U3RhdGVSZWFkc1xuICAgIHJldHVybiBwcmV2XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhbGxvd1N0YXRlUmVhZHNFbmQocHJldjogYm9vbGVhbikge1xuICAgIGdsb2JhbFN0YXRlLmFsbG93U3RhdGVSZWFkcyA9IHByZXZcbn1cblxuLyoqXG4gKiBuZWVkZWQgdG8ga2VlcCBgbG93ZXN0T2JzZXJ2ZXJTdGF0ZWAgY29ycmVjdC4gd2hlbiBjaGFuZ2luZyBmcm9tICgyIG9yIDEpIHRvIDBcbiAqXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjaGFuZ2VEZXBlbmRlbmNpZXNTdGF0ZVRvMChkZXJpdmF0aW9uOiBJRGVyaXZhdGlvbikge1xuICAgIGlmIChkZXJpdmF0aW9uLmRlcGVuZGVuY2llc1N0YXRlXyA9PT0gSURlcml2YXRpb25TdGF0ZV8uVVBfVE9fREFURV8pIHJldHVyblxuICAgIGRlcml2YXRpb24uZGVwZW5kZW5jaWVzU3RhdGVfID0gSURlcml2YXRpb25TdGF0ZV8uVVBfVE9fREFURV9cblxuICAgIGNvbnN0IG9icyA9IGRlcml2YXRpb24ub2JzZXJ2aW5nX1xuICAgIGxldCBpID0gb2JzLmxlbmd0aFxuICAgIHdoaWxlIChpLS0pIG9ic1tpXS5sb3dlc3RPYnNlcnZlclN0YXRlXyA9IElEZXJpdmF0aW9uU3RhdGVfLlVQX1RPX0RBVEVfXG59XG4iLCJpbXBvcnQgeyBJRGVyaXZhdGlvbiwgSU9ic2VydmFibGUsIFJlYWN0aW9uLCBkaWUsIGdldEdsb2JhbCB9IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5pbXBvcnQgeyBDb21wdXRlZFZhbHVlIH0gZnJvbSBcIi4vY29tcHV0ZWR2YWx1ZVwiXG5cbi8qKlxuICogVGhlc2UgdmFsdWVzIHdpbGwgcGVyc2lzdCBpZiBnbG9iYWwgc3RhdGUgaXMgcmVzZXRcbiAqL1xuY29uc3QgcGVyc2lzdGVudEtleXM6IChrZXlvZiBNb2JYR2xvYmFscylbXSA9IFtcbiAgICBcIm1vYnhHdWlkXCIsXG4gICAgXCJzcHlMaXN0ZW5lcnNcIixcbiAgICBcImVuZm9yY2VBY3Rpb25zXCIsXG4gICAgXCJjb21wdXRlZFJlcXVpcmVzUmVhY3Rpb25cIixcbiAgICBcInJlYWN0aW9uUmVxdWlyZXNPYnNlcnZhYmxlXCIsXG4gICAgXCJvYnNlcnZhYmxlUmVxdWlyZXNSZWFjdGlvblwiLFxuICAgIFwiYWxsb3dTdGF0ZVJlYWRzXCIsXG4gICAgXCJkaXNhYmxlRXJyb3JCb3VuZGFyaWVzXCIsXG4gICAgXCJydW5JZFwiLFxuICAgIFwiVU5DSEFOR0VEXCIsXG4gICAgXCJ1c2VQcm94aWVzXCJcbl1cblxuZXhwb3J0IHR5cGUgSVVOQ0hBTkdFRCA9IHt9XG5cbmV4cG9ydCBjbGFzcyBNb2JYR2xvYmFscyB7XG4gICAgLyoqXG4gICAgICogTW9iWEdsb2JhbHMgdmVyc2lvbi5cbiAgICAgKiBNb2JYIGNvbXBhdGlibGl0eSB3aXRoIG90aGVyIHZlcnNpb25zIGxvYWRlZCBpbiBtZW1vcnkgYXMgbG9uZyBhcyB0aGlzIHZlcnNpb24gbWF0Y2hlcy5cbiAgICAgKiBJdCBpbmRpY2F0ZXMgdGhhdCB0aGUgZ2xvYmFsIHN0YXRlIHN0aWxsIHN0b3JlcyBzaW1pbGFyIGluZm9ybWF0aW9uXG4gICAgICpcbiAgICAgKiBOLkI6IHRoaXMgdmVyc2lvbiBpcyB1bnJlbGF0ZWQgdG8gdGhlIHBhY2thZ2UgdmVyc2lvbiBvZiBNb2JYLCBhbmQgaXMgb25seSB0aGUgdmVyc2lvbiBvZiB0aGVcbiAgICAgKiBpbnRlcm5hbCBzdGF0ZSBzdG9yYWdlIG9mIE1vYlgsIGFuZCBjYW4gYmUgdGhlIHNhbWUgYWNyb3NzIG1hbnkgZGlmZmVyZW50IHBhY2thZ2UgdmVyc2lvbnNcbiAgICAgKi9cbiAgICB2ZXJzaW9uID0gNlxuXG4gICAgLyoqXG4gICAgICogZ2xvYmFsbHkgdW5pcXVlIHRva2VuIHRvIHNpZ25hbCB1bmNoYW5nZWRcbiAgICAgKi9cbiAgICBVTkNIQU5HRUQ6IElVTkNIQU5HRUQgPSB7fVxuXG4gICAgLyoqXG4gICAgICogQ3VycmVudGx5IHJ1bm5pbmcgZGVyaXZhdGlvblxuICAgICAqL1xuICAgIHRyYWNraW5nRGVyaXZhdGlvbjogSURlcml2YXRpb24gfCBudWxsID0gbnVsbFxuXG4gICAgLyoqXG4gICAgICogQ3VycmVudGx5IHJ1bm5pbmcgcmVhY3Rpb24uIFRoaXMgZGV0ZXJtaW5lcyBpZiB3ZSBjdXJyZW50bHkgaGF2ZSBhIHJlYWN0aXZlIGNvbnRleHQuXG4gICAgICogKFRyYWNraW5nIGRlcml2YXRpb24gaXMgYWxzbyBzZXQgZm9yIHRlbXBvcmFsIHRyYWNraW5nIG9mIGNvbXB1dGVkIHZhbHVlcyBpbnNpZGUgYWN0aW9ucyxcbiAgICAgKiBidXQgdHJhY2tpbmdSZWFjdGlvbiBjYW4gb25seSBiZSBzZXQgYnkgYSBmb3JtIG9mIFJlYWN0aW9uKVxuICAgICAqL1xuICAgIHRyYWNraW5nQ29udGV4dDogUmVhY3Rpb24gfCBDb21wdXRlZFZhbHVlPGFueT4gfCBudWxsID0gbnVsbFxuXG4gICAgLyoqXG4gICAgICogRWFjaCB0aW1lIGEgZGVyaXZhdGlvbiBpcyB0cmFja2VkLCBpdCBpcyBhc3NpZ25lZCBhIHVuaXF1ZSBydW4taWRcbiAgICAgKi9cbiAgICBydW5JZCA9IDBcblxuICAgIC8qKlxuICAgICAqICdndWlkJyBmb3IgZ2VuZXJhbCBwdXJwb3NlLiBXaWxsIGJlIHBlcnNpc3RlZCBhbW9uZ3N0IHJlc2V0cy5cbiAgICAgKi9cbiAgICBtb2J4R3VpZCA9IDBcblxuICAgIC8qKlxuICAgICAqIEFyZSB3ZSBpbiBhIGJhdGNoIGJsb2NrPyAoYW5kIGhvdyBtYW55IG9mIHRoZW0pXG4gICAgICovXG4gICAgaW5CYXRjaDogbnVtYmVyID0gMFxuXG4gICAgLyoqXG4gICAgICogT2JzZXJ2YWJsZXMgdGhhdCBkb24ndCBoYXZlIG9ic2VydmVycyBhbnltb3JlLCBhbmQgYXJlIGFib3V0IHRvIGJlXG4gICAgICogc3VzcGVuZGVkLCB1bmxlc3Mgc29tZWJvZHkgZWxzZSBhY2Nlc3NlcyBpdCBpbiB0aGUgc2FtZSBiYXRjaFxuICAgICAqXG4gICAgICogQHR5cGUge0lPYnNlcnZhYmxlW119XG4gICAgICovXG4gICAgcGVuZGluZ1Vub2JzZXJ2YXRpb25zOiBJT2JzZXJ2YWJsZVtdID0gW11cblxuICAgIC8qKlxuICAgICAqIExpc3Qgb2Ygc2NoZWR1bGVkLCBub3QgeWV0IGV4ZWN1dGVkLCByZWFjdGlvbnMuXG4gICAgICovXG4gICAgcGVuZGluZ1JlYWN0aW9uczogUmVhY3Rpb25bXSA9IFtdXG5cbiAgICAvKipcbiAgICAgKiBBcmUgd2UgY3VycmVudGx5IHByb2Nlc3NpbmcgcmVhY3Rpb25zP1xuICAgICAqL1xuICAgIGlzUnVubmluZ1JlYWN0aW9ucyA9IGZhbHNlXG5cbiAgICAvKipcbiAgICAgKiBJcyBpdCBhbGxvd2VkIHRvIGNoYW5nZSBvYnNlcnZhYmxlcyBhdCB0aGlzIHBvaW50P1xuICAgICAqIEluIGdlbmVyYWwsIE1vYlggZG9lc24ndCBhbGxvdyB0aGF0IHdoZW4gcnVubmluZyBjb21wdXRhdGlvbnMgYW5kIFJlYWN0LnJlbmRlci5cbiAgICAgKiBUbyBlbnN1cmUgdGhhdCB0aG9zZSBmdW5jdGlvbnMgc3RheSBwdXJlLlxuICAgICAqL1xuICAgIGFsbG93U3RhdGVDaGFuZ2VzID0gZmFsc2VcblxuICAgIC8qKlxuICAgICAqIElzIGl0IGFsbG93ZWQgdG8gcmVhZCBvYnNlcnZhYmxlcyBhdCB0aGlzIHBvaW50P1xuICAgICAqIFVzZWQgdG8gaG9sZCB0aGUgc3RhdGUgbmVlZGVkIGZvciBgb2JzZXJ2YWJsZVJlcXVpcmVzUmVhY3Rpb25gXG4gICAgICovXG4gICAgYWxsb3dTdGF0ZVJlYWRzID0gdHJ1ZVxuXG4gICAgLyoqXG4gICAgICogSWYgc3RyaWN0IG1vZGUgaXMgZW5hYmxlZCwgc3RhdGUgY2hhbmdlcyBhcmUgYnkgZGVmYXVsdCBub3QgYWxsb3dlZFxuICAgICAqL1xuICAgIGVuZm9yY2VBY3Rpb25zOiBib29sZWFuIHwgXCJhbHdheXNcIiA9IHRydWVcblxuICAgIC8qKlxuICAgICAqIFNweSBjYWxsYmFja3NcbiAgICAgKi9cbiAgICBzcHlMaXN0ZW5lcnM6IHsgKGNoYW5nZTogYW55KTogdm9pZCB9W10gPSBbXVxuXG4gICAgLyoqXG4gICAgICogR2xvYmFsbHkgYXR0YWNoZWQgZXJyb3IgaGFuZGxlcnMgdGhhdCByZWFjdCBzcGVjaWZpY2FsbHkgdG8gZXJyb3JzIGluIHJlYWN0aW9uc1xuICAgICAqL1xuICAgIGdsb2JhbFJlYWN0aW9uRXJyb3JIYW5kbGVyczogKChlcnJvcjogYW55LCBkZXJpdmF0aW9uOiBJRGVyaXZhdGlvbikgPT4gdm9pZClbXSA9IFtdXG5cbiAgICAvKipcbiAgICAgKiBXYXJuIGlmIGNvbXB1dGVkIHZhbHVlcyBhcmUgYWNjZXNzZWQgb3V0c2lkZSBhIHJlYWN0aXZlIGNvbnRleHRcbiAgICAgKi9cbiAgICBjb21wdXRlZFJlcXVpcmVzUmVhY3Rpb24gPSBmYWxzZVxuXG4gICAgLyoqXG4gICAgICogKEV4cGVyaW1lbnRhbClcbiAgICAgKiBXYXJuIGlmIHlvdSB0cnkgdG8gY3JlYXRlIHRvIGRlcml2YXRpb24gLyByZWFjdGl2ZSBjb250ZXh0IHdpdGhvdXQgYWNjZXNzaW5nIGFueSBvYnNlcnZhYmxlLlxuICAgICAqL1xuICAgIHJlYWN0aW9uUmVxdWlyZXNPYnNlcnZhYmxlID0gZmFsc2VcblxuICAgIC8qKlxuICAgICAqIChFeHBlcmltZW50YWwpXG4gICAgICogV2FybiBpZiBvYnNlcnZhYmxlcyBhcmUgYWNjZXNzZWQgb3V0c2lkZSBhIHJlYWN0aXZlIGNvbnRleHRcbiAgICAgKi9cbiAgICBvYnNlcnZhYmxlUmVxdWlyZXNSZWFjdGlvbiA9IGZhbHNlXG5cbiAgICAvKlxuICAgICAqIERvbid0IGNhdGNoIGFuZCByZXRocm93IGV4Y2VwdGlvbnMuIFRoaXMgaXMgdXNlZnVsIGZvciBpbnNwZWN0aW5nIHRoZSBzdGF0ZSBvZlxuICAgICAqIHRoZSBzdGFjayB3aGVuIGFuIGV4Y2VwdGlvbiBvY2N1cnMgd2hpbGUgZGVidWdnaW5nLlxuICAgICAqL1xuICAgIGRpc2FibGVFcnJvckJvdW5kYXJpZXMgPSBmYWxzZVxuXG4gICAgLypcbiAgICAgKiBJZiB0cnVlLCB3ZSBhcmUgYWxyZWFkeSBoYW5kbGluZyBhbiBleGNlcHRpb24gaW4gYW4gYWN0aW9uLiBBbnkgZXJyb3JzIGluIHJlYWN0aW9ucyBzaG91bGQgYmUgc3VwcHJlc3NlZCwgYXNcbiAgICAgKiB0aGV5IGFyZSBub3QgdGhlIGNhdXNlLCBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9tb2J4anMvbW9ieC9pc3N1ZXMvMTgzNlxuICAgICAqL1xuICAgIHN1cHByZXNzUmVhY3Rpb25FcnJvcnMgPSBmYWxzZVxuXG4gICAgdXNlUHJveGllcyA9IHRydWVcbiAgICAvKlxuICAgICAqIHByaW50IHdhcm5pbmdzIGFib3V0IGNvZGUgdGhhdCB3b3VsZCBmYWlsIGlmIHByb3hpZXMgd2VyZW4ndCBhdmFpbGFibGVcbiAgICAgKi9cbiAgICB2ZXJpZnlQcm94aWVzID0gZmFsc2VcblxuICAgIC8qKlxuICAgICAqIEZhbHNlIGZvcmNlcyBhbGwgb2JqZWN0J3MgZGVzY3JpcHRvcnMgdG9cbiAgICAgKiB3cml0YWJsZTogdHJ1ZVxuICAgICAqIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAqL1xuICAgIHNhZmVEZXNjcmlwdG9ycyA9IHRydWVcbn1cblxubGV0IGNhbk1lcmdlR2xvYmFsU3RhdGUgPSB0cnVlXG5sZXQgaXNvbGF0ZUNhbGxlZCA9IGZhbHNlXG5cbmV4cG9ydCBsZXQgZ2xvYmFsU3RhdGU6IE1vYlhHbG9iYWxzID0gKGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgZ2xvYmFsID0gZ2V0R2xvYmFsKClcbiAgICBpZiAoZ2xvYmFsLl9fbW9ieEluc3RhbmNlQ291bnQgPiAwICYmICFnbG9iYWwuX19tb2J4R2xvYmFscykgY2FuTWVyZ2VHbG9iYWxTdGF0ZSA9IGZhbHNlXG4gICAgaWYgKGdsb2JhbC5fX21vYnhHbG9iYWxzICYmIGdsb2JhbC5fX21vYnhHbG9iYWxzLnZlcnNpb24gIT09IG5ldyBNb2JYR2xvYmFscygpLnZlcnNpb24pXG4gICAgICAgIGNhbk1lcmdlR2xvYmFsU3RhdGUgPSBmYWxzZVxuXG4gICAgaWYgKCFjYW5NZXJnZUdsb2JhbFN0YXRlKSB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFpc29sYXRlQ2FsbGVkKSB7XG4gICAgICAgICAgICAgICAgZGllKDM1KVxuICAgICAgICAgICAgfVxuICAgICAgICB9LCAxKVxuICAgICAgICByZXR1cm4gbmV3IE1vYlhHbG9iYWxzKClcbiAgICB9IGVsc2UgaWYgKGdsb2JhbC5fX21vYnhHbG9iYWxzKSB7XG4gICAgICAgIGdsb2JhbC5fX21vYnhJbnN0YW5jZUNvdW50ICs9IDFcbiAgICAgICAgaWYgKCFnbG9iYWwuX19tb2J4R2xvYmFscy5VTkNIQU5HRUQpIGdsb2JhbC5fX21vYnhHbG9iYWxzLlVOQ0hBTkdFRCA9IHt9IC8vIG1ha2UgbWVyZ2UgYmFja3dhcmQgY29tcGF0aWJsZVxuICAgICAgICByZXR1cm4gZ2xvYmFsLl9fbW9ieEdsb2JhbHNcbiAgICB9IGVsc2Uge1xuICAgICAgICBnbG9iYWwuX19tb2J4SW5zdGFuY2VDb3VudCA9IDFcbiAgICAgICAgcmV0dXJuIChnbG9iYWwuX19tb2J4R2xvYmFscyA9IG5ldyBNb2JYR2xvYmFscygpKVxuICAgIH1cbn0pKClcblxuZXhwb3J0IGZ1bmN0aW9uIGlzb2xhdGVHbG9iYWxTdGF0ZSgpIHtcbiAgICBpZiAoXG4gICAgICAgIGdsb2JhbFN0YXRlLnBlbmRpbmdSZWFjdGlvbnMubGVuZ3RoIHx8XG4gICAgICAgIGdsb2JhbFN0YXRlLmluQmF0Y2ggfHxcbiAgICAgICAgZ2xvYmFsU3RhdGUuaXNSdW5uaW5nUmVhY3Rpb25zXG4gICAgKVxuICAgICAgICBkaWUoMzYpXG4gICAgaXNvbGF0ZUNhbGxlZCA9IHRydWVcbiAgICBpZiAoY2FuTWVyZ2VHbG9iYWxTdGF0ZSkge1xuICAgICAgICBsZXQgZ2xvYmFsID0gZ2V0R2xvYmFsKClcbiAgICAgICAgaWYgKC0tZ2xvYmFsLl9fbW9ieEluc3RhbmNlQ291bnQgPT09IDApIGdsb2JhbC5fX21vYnhHbG9iYWxzID0gdW5kZWZpbmVkXG4gICAgICAgIGdsb2JhbFN0YXRlID0gbmV3IE1vYlhHbG9iYWxzKClcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRHbG9iYWxTdGF0ZSgpOiBhbnkge1xuICAgIHJldHVybiBnbG9iYWxTdGF0ZVxufVxuXG4vKipcbiAqIEZvciB0ZXN0aW5nIHB1cnBvc2VzIG9ubHk7IHRoaXMgd2lsbCBicmVhayB0aGUgaW50ZXJuYWwgc3RhdGUgb2YgZXhpc3Rpbmcgb2JzZXJ2YWJsZXMsXG4gKiBidXQgY2FuIGJlIHVzZWQgdG8gZ2V0IGJhY2sgYXQgYSBzdGFibGUgc3RhdGUgYWZ0ZXIgdGhyb3dpbmcgZXJyb3JzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXNldEdsb2JhbFN0YXRlKCkge1xuICAgIGNvbnN0IGRlZmF1bHRHbG9iYWxzID0gbmV3IE1vYlhHbG9iYWxzKClcbiAgICBmb3IgKGxldCBrZXkgaW4gZGVmYXVsdEdsb2JhbHMpXG4gICAgICAgIGlmIChwZXJzaXN0ZW50S2V5cy5pbmRleE9mKGtleSBhcyBhbnkpID09PSAtMSkgZ2xvYmFsU3RhdGVba2V5XSA9IGRlZmF1bHRHbG9iYWxzW2tleV1cbiAgICBnbG9iYWxTdGF0ZS5hbGxvd1N0YXRlQ2hhbmdlcyA9ICFnbG9iYWxTdGF0ZS5lbmZvcmNlQWN0aW9uc1xufVxuIiwiaW1wb3J0IHtcbiAgICBMYW1iZGEsXG4gICAgQ29tcHV0ZWRWYWx1ZSxcbiAgICBJRGVwZW5kZW5jeVRyZWUsXG4gICAgSURlcml2YXRpb24sXG4gICAgSURlcml2YXRpb25TdGF0ZV8sXG4gICAgVHJhY2VNb2RlLFxuICAgIGdldERlcGVuZGVuY3lUcmVlLFxuICAgIGdsb2JhbFN0YXRlLFxuICAgIHJ1blJlYWN0aW9ucyxcbiAgICBjaGVja0lmU3RhdGVSZWFkc0FyZUFsbG93ZWRcbn0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuZXhwb3J0IGludGVyZmFjZSBJRGVwVHJlZU5vZGUge1xuICAgIG5hbWVfOiBzdHJpbmdcbiAgICBvYnNlcnZpbmdfPzogSU9ic2VydmFibGVbXVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElPYnNlcnZhYmxlIGV4dGVuZHMgSURlcFRyZWVOb2RlIHtcbiAgICBkaWZmVmFsdWVfOiBudW1iZXJcbiAgICAvKipcbiAgICAgKiBJZCBvZiB0aGUgZGVyaXZhdGlvbiAqcnVuKiB0aGF0IGxhc3QgYWNjZXNzZWQgdGhpcyBvYnNlcnZhYmxlLlxuICAgICAqIElmIHRoaXMgaWQgZXF1YWxzIHRoZSAqcnVuKiBpZCBvZiB0aGUgY3VycmVudCBkZXJpdmF0aW9uLFxuICAgICAqIHRoZSBkZXBlbmRlbmN5IGlzIGFscmVhZHkgZXN0YWJsaXNoZWRcbiAgICAgKi9cbiAgICBsYXN0QWNjZXNzZWRCeV86IG51bWJlclxuICAgIGlzQmVpbmdPYnNlcnZlZF86IGJvb2xlYW5cblxuICAgIGxvd2VzdE9ic2VydmVyU3RhdGVfOiBJRGVyaXZhdGlvblN0YXRlXyAvLyBVc2VkIHRvIGF2b2lkIHJlZHVuZGFudCBwcm9wYWdhdGlvbnNcbiAgICBpc1BlbmRpbmdVbm9ic2VydmF0aW9uXzogYm9vbGVhbiAvLyBVc2VkIHRvIHB1c2ggaXRzZWxmIHRvIGdsb2JhbC5wZW5kaW5nVW5vYnNlcnZhdGlvbnMgYXQgbW9zdCBvbmNlIHBlciBiYXRjaC5cblxuICAgIG9ic2VydmVyc186IFNldDxJRGVyaXZhdGlvbj5cblxuICAgIG9uQlVPKCk6IHZvaWRcbiAgICBvbkJPKCk6IHZvaWRcblxuICAgIG9uQlVPTDogU2V0PExhbWJkYT4gfCB1bmRlZmluZWRcbiAgICBvbkJPTDogU2V0PExhbWJkYT4gfCB1bmRlZmluZWRcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhc09ic2VydmVycyhvYnNlcnZhYmxlOiBJT2JzZXJ2YWJsZSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBvYnNlcnZhYmxlLm9ic2VydmVyc18gJiYgb2JzZXJ2YWJsZS5vYnNlcnZlcnNfLnNpemUgPiAwXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRPYnNlcnZlcnMob2JzZXJ2YWJsZTogSU9ic2VydmFibGUpOiBTZXQ8SURlcml2YXRpb24+IHtcbiAgICByZXR1cm4gb2JzZXJ2YWJsZS5vYnNlcnZlcnNfXG59XG5cbi8vIGZ1bmN0aW9uIGludmFyaWFudE9ic2VydmVycyhvYnNlcnZhYmxlOiBJT2JzZXJ2YWJsZSkge1xuLy8gICAgIGNvbnN0IGxpc3QgPSBvYnNlcnZhYmxlLm9ic2VydmVyc1xuLy8gICAgIGNvbnN0IG1hcCA9IG9ic2VydmFibGUub2JzZXJ2ZXJzSW5kZXhlc1xuLy8gICAgIGNvbnN0IGwgPSBsaXN0Lmxlbmd0aFxuLy8gICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4vLyAgICAgICAgIGNvbnN0IGlkID0gbGlzdFtpXS5fX21hcGlkXG4vLyAgICAgICAgIGlmIChpKSB7XG4vLyAgICAgICAgICAgICBpbnZhcmlhbnQobWFwW2lkXSA9PT0gaSwgXCJJTlRFUk5BTCBFUlJPUiBtYXBzIGRlcml2YXRpb24uX19tYXBpZCB0byBpbmRleCBpbiBsaXN0XCIpIC8vIGZvciBwZXJmb3JtYW5jZVxuLy8gICAgICAgICB9IGVsc2Uge1xuLy8gICAgICAgICAgICAgaW52YXJpYW50KCEoaWQgaW4gbWFwKSwgXCJJTlRFUk5BTCBFUlJPUiBvYnNlcnZlciBvbiBpbmRleCAwIHNob3VsZG4ndCBiZSBoZWxkIGluIG1hcC5cIikgLy8gZm9yIHBlcmZvcm1hbmNlXG4vLyAgICAgICAgIH1cbi8vICAgICB9XG4vLyAgICAgaW52YXJpYW50KFxuLy8gICAgICAgICBsaXN0Lmxlbmd0aCA9PT0gMCB8fCBPYmplY3Qua2V5cyhtYXApLmxlbmd0aCA9PT0gbGlzdC5sZW5ndGggLSAxLFxuLy8gICAgICAgICBcIklOVEVSTkFMIEVSUk9SIHRoZXJlIGlzIG5vIGp1bmsgaW4gbWFwXCJcbi8vICAgICApXG4vLyB9XG5leHBvcnQgZnVuY3Rpb24gYWRkT2JzZXJ2ZXIob2JzZXJ2YWJsZTogSU9ic2VydmFibGUsIG5vZGU6IElEZXJpdmF0aW9uKSB7XG4gICAgLy8gaW52YXJpYW50KG5vZGUuZGVwZW5kZW5jaWVzU3RhdGUgIT09IC0xLCBcIklOVEVSTkFMIEVSUk9SLCBjYW4gYWRkIG9ubHkgZGVwZW5kZW5jaWVzU3RhdGUgIT09IC0xXCIpO1xuICAgIC8vIGludmFyaWFudChvYnNlcnZhYmxlLl9vYnNlcnZlcnMuaW5kZXhPZihub2RlKSA9PT0gLTEsIFwiSU5URVJOQUwgRVJST1IgYWRkIGFscmVhZHkgYWRkZWQgbm9kZVwiKTtcbiAgICAvLyBpbnZhcmlhbnRPYnNlcnZlcnMob2JzZXJ2YWJsZSk7XG5cbiAgICBvYnNlcnZhYmxlLm9ic2VydmVyc18uYWRkKG5vZGUpXG4gICAgaWYgKG9ic2VydmFibGUubG93ZXN0T2JzZXJ2ZXJTdGF0ZV8gPiBub2RlLmRlcGVuZGVuY2llc1N0YXRlXylcbiAgICAgICAgb2JzZXJ2YWJsZS5sb3dlc3RPYnNlcnZlclN0YXRlXyA9IG5vZGUuZGVwZW5kZW5jaWVzU3RhdGVfXG5cbiAgICAvLyBpbnZhcmlhbnRPYnNlcnZlcnMob2JzZXJ2YWJsZSk7XG4gICAgLy8gaW52YXJpYW50KG9ic2VydmFibGUuX29ic2VydmVycy5pbmRleE9mKG5vZGUpICE9PSAtMSwgXCJJTlRFUk5BTCBFUlJPUiBkaWRuJ3QgYWRkIG5vZGVcIik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVPYnNlcnZlcihvYnNlcnZhYmxlOiBJT2JzZXJ2YWJsZSwgbm9kZTogSURlcml2YXRpb24pIHtcbiAgICAvLyBpbnZhcmlhbnQoZ2xvYmFsU3RhdGUuaW5CYXRjaCA+IDAsIFwiSU5URVJOQUwgRVJST1IsIHJlbW92ZSBzaG91bGQgYmUgY2FsbGVkIG9ubHkgaW5zaWRlIGJhdGNoXCIpO1xuICAgIC8vIGludmFyaWFudChvYnNlcnZhYmxlLl9vYnNlcnZlcnMuaW5kZXhPZihub2RlKSAhPT0gLTEsIFwiSU5URVJOQUwgRVJST1IgcmVtb3ZlIGFscmVhZHkgcmVtb3ZlZCBub2RlXCIpO1xuICAgIC8vIGludmFyaWFudE9ic2VydmVycyhvYnNlcnZhYmxlKTtcbiAgICBvYnNlcnZhYmxlLm9ic2VydmVyc18uZGVsZXRlKG5vZGUpXG4gICAgaWYgKG9ic2VydmFibGUub2JzZXJ2ZXJzXy5zaXplID09PSAwKSB7XG4gICAgICAgIC8vIGRlbGV0aW5nIGxhc3Qgb2JzZXJ2ZXJcbiAgICAgICAgcXVldWVGb3JVbm9ic2VydmF0aW9uKG9ic2VydmFibGUpXG4gICAgfVxuICAgIC8vIGludmFyaWFudE9ic2VydmVycyhvYnNlcnZhYmxlKTtcbiAgICAvLyBpbnZhcmlhbnQob2JzZXJ2YWJsZS5fb2JzZXJ2ZXJzLmluZGV4T2Yobm9kZSkgPT09IC0xLCBcIklOVEVSTkFMIEVSUk9SIHJlbW92ZSBhbHJlYWR5IHJlbW92ZWQgbm9kZTJcIik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBxdWV1ZUZvclVub2JzZXJ2YXRpb24ob2JzZXJ2YWJsZTogSU9ic2VydmFibGUpIHtcbiAgICBpZiAob2JzZXJ2YWJsZS5pc1BlbmRpbmdVbm9ic2VydmF0aW9uXyA9PT0gZmFsc2UpIHtcbiAgICAgICAgLy8gaW52YXJpYW50KG9ic2VydmFibGUuX29ic2VydmVycy5sZW5ndGggPT09IDAsIFwiSU5URVJOQUwgRVJST1IsIHNob3VsZCBvbmx5IHF1ZXVlIGZvciB1bm9ic2VydmF0aW9uIHVub2JzZXJ2ZWQgb2JzZXJ2YWJsZXNcIik7XG4gICAgICAgIG9ic2VydmFibGUuaXNQZW5kaW5nVW5vYnNlcnZhdGlvbl8gPSB0cnVlXG4gICAgICAgIGdsb2JhbFN0YXRlLnBlbmRpbmdVbm9ic2VydmF0aW9ucy5wdXNoKG9ic2VydmFibGUpXG4gICAgfVxufVxuXG4vKipcbiAqIEJhdGNoIHN0YXJ0cyBhIHRyYW5zYWN0aW9uLCBhdCBsZWFzdCBmb3IgcHVycG9zZXMgb2YgbWVtb2l6aW5nIENvbXB1dGVkVmFsdWVzIHdoZW4gbm90aGluZyBlbHNlIGRvZXMuXG4gKiBEdXJpbmcgYSBiYXRjaCBgb25CZWNvbWVVbm9ic2VydmVkYCB3aWxsIGJlIGNhbGxlZCBhdCBtb3N0IG9uY2UgcGVyIG9ic2VydmFibGUuXG4gKiBBdm9pZHMgdW5uZWNlc3NhcnkgcmVjYWxjdWxhdGlvbnMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdGFydEJhdGNoKCkge1xuICAgIGdsb2JhbFN0YXRlLmluQmF0Y2grK1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZW5kQmF0Y2goKSB7XG4gICAgaWYgKC0tZ2xvYmFsU3RhdGUuaW5CYXRjaCA9PT0gMCkge1xuICAgICAgICBydW5SZWFjdGlvbnMoKVxuICAgICAgICAvLyB0aGUgYmF0Y2ggaXMgYWN0dWFsbHkgYWJvdXQgdG8gZmluaXNoLCBhbGwgdW5vYnNlcnZpbmcgc2hvdWxkIGhhcHBlbiBoZXJlLlxuICAgICAgICBjb25zdCBsaXN0ID0gZ2xvYmFsU3RhdGUucGVuZGluZ1Vub2JzZXJ2YXRpb25zXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3Qgb2JzZXJ2YWJsZSA9IGxpc3RbaV1cbiAgICAgICAgICAgIG9ic2VydmFibGUuaXNQZW5kaW5nVW5vYnNlcnZhdGlvbl8gPSBmYWxzZVxuICAgICAgICAgICAgaWYgKG9ic2VydmFibGUub2JzZXJ2ZXJzXy5zaXplID09PSAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9ic2VydmFibGUuaXNCZWluZ09ic2VydmVkXykge1xuICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGlzIG9ic2VydmFibGUgaGFkIHJlYWN0aXZlIG9ic2VydmVycywgdHJpZ2dlciB0aGUgaG9va3NcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2YWJsZS5pc0JlaW5nT2JzZXJ2ZWRfID0gZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2YWJsZS5vbkJVTygpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvYnNlcnZhYmxlIGluc3RhbmNlb2YgQ29tcHV0ZWRWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBjb21wdXRlZCB2YWx1ZXMgYXJlIGF1dG9tYXRpY2FsbHkgdGVhcmVkIGRvd24gd2hlbiB0aGUgbGFzdCBvYnNlcnZlciBsZWF2ZXNcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyBwcm9jZXNzIGhhcHBlbnMgcmVjdXJzaXZlbHksIHRoaXMgY29tcHV0ZWQgbWlnaHQgYmUgdGhlIGxhc3Qgb2JzZXJ2YWJlIG9mIGFub3RoZXIsIGV0Yy4uXG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmFibGUuc3VzcGVuZF8oKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBnbG9iYWxTdGF0ZS5wZW5kaW5nVW5vYnNlcnZhdGlvbnMgPSBbXVxuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlcG9ydE9ic2VydmVkKG9ic2VydmFibGU6IElPYnNlcnZhYmxlKTogYm9vbGVhbiB7XG4gICAgY2hlY2tJZlN0YXRlUmVhZHNBcmVBbGxvd2VkKG9ic2VydmFibGUpXG5cbiAgICBjb25zdCBkZXJpdmF0aW9uID0gZ2xvYmFsU3RhdGUudHJhY2tpbmdEZXJpdmF0aW9uXG4gICAgaWYgKGRlcml2YXRpb24gIT09IG51bGwpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNpbXBsZSBvcHRpbWl6YXRpb24sIGdpdmUgZWFjaCBkZXJpdmF0aW9uIHJ1biBhbiB1bmlxdWUgaWQgKHJ1bklkKVxuICAgICAgICAgKiBDaGVjayBpZiBsYXN0IHRpbWUgdGhpcyBvYnNlcnZhYmxlIHdhcyBhY2Nlc3NlZCB0aGUgc2FtZSBydW5JZCBpcyB1c2VkXG4gICAgICAgICAqIGlmIHRoaXMgaXMgdGhlIGNhc2UsIHRoZSByZWxhdGlvbiBpcyBhbHJlYWR5IGtub3duXG4gICAgICAgICAqL1xuICAgICAgICBpZiAoZGVyaXZhdGlvbi5ydW5JZF8gIT09IG9ic2VydmFibGUubGFzdEFjY2Vzc2VkQnlfKSB7XG4gICAgICAgICAgICBvYnNlcnZhYmxlLmxhc3RBY2Nlc3NlZEJ5XyA9IGRlcml2YXRpb24ucnVuSWRfXG4gICAgICAgICAgICAvLyBUcmllZCBzdG9yaW5nIG5ld09ic2VydmluZywgb3Igb2JzZXJ2aW5nLCBvciBib3RoIGFzIFNldCwgYnV0IHBlcmZvcm1hbmNlIGRpZG4ndCBjb21lIGNsb3NlLi4uXG4gICAgICAgICAgICBkZXJpdmF0aW9uLm5ld09ic2VydmluZ18hW2Rlcml2YXRpb24udW5ib3VuZERlcHNDb3VudF8rK10gPSBvYnNlcnZhYmxlXG4gICAgICAgICAgICBpZiAoIW9ic2VydmFibGUuaXNCZWluZ09ic2VydmVkXyAmJiBnbG9iYWxTdGF0ZS50cmFja2luZ0NvbnRleHQpIHtcbiAgICAgICAgICAgICAgICBvYnNlcnZhYmxlLmlzQmVpbmdPYnNlcnZlZF8gPSB0cnVlXG4gICAgICAgICAgICAgICAgb2JzZXJ2YWJsZS5vbkJPKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH0gZWxzZSBpZiAob2JzZXJ2YWJsZS5vYnNlcnZlcnNfLnNpemUgPT09IDAgJiYgZ2xvYmFsU3RhdGUuaW5CYXRjaCA+IDApIHtcbiAgICAgICAgcXVldWVGb3JVbm9ic2VydmF0aW9uKG9ic2VydmFibGUpXG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlXG59XG5cbi8vIGZ1bmN0aW9uIGludmFyaWFudExPUyhvYnNlcnZhYmxlOiBJT2JzZXJ2YWJsZSwgbXNnOiBzdHJpbmcpIHtcbi8vICAgICAvLyBpdCdzIGV4cGVuc2l2ZSBzbyBiZXR0ZXIgbm90IHJ1biBpdCBpbiBwcm9kdWNpdG9uLiBidXQgdGVtcG9yYXJpbHkgaGVscGZ1bCBmb3IgdGVzdGluZ1xuLy8gICAgIGNvbnN0IG1pbiA9IGdldE9ic2VydmVycyhvYnNlcnZhYmxlKS5yZWR1Y2UoKGEsIGIpID0+IE1hdGgubWluKGEsIGIuZGVwZW5kZW5jaWVzU3RhdGUpLCAyKVxuLy8gICAgIGlmIChtaW4gPj0gb2JzZXJ2YWJsZS5sb3dlc3RPYnNlcnZlclN0YXRlKSByZXR1cm4gLy8gPC0gdGhlIG9ubHkgYXNzdW1wdGlvbiBhYm91dCBgbG93ZXN0T2JzZXJ2ZXJTdGF0ZWBcbi8vICAgICB0aHJvdyBuZXcgRXJyb3IoXG4vLyAgICAgICAgIFwibG93ZXN0T2JzZXJ2ZXJTdGF0ZSBpcyB3cm9uZyBmb3IgXCIgK1xuLy8gICAgICAgICAgICAgbXNnICtcbi8vICAgICAgICAgICAgIFwiIGJlY2F1c2UgXCIgK1xuLy8gICAgICAgICAgICAgbWluICtcbi8vICAgICAgICAgICAgIFwiIDwgXCIgK1xuLy8gICAgICAgICAgICAgb2JzZXJ2YWJsZS5sb3dlc3RPYnNlcnZlclN0YXRlXG4vLyAgICAgKVxuLy8gfVxuXG4vKipcbiAqIE5PVEU6IGN1cnJlbnQgcHJvcGFnYXRpb24gbWVjaGFuaXNtIHdpbGwgaW4gY2FzZSBvZiBzZWxmIHJlcnVuaW5nIGF1dG9ydW5zIGJlaGF2ZSB1bmV4cGVjdGVkbHlcbiAqIEl0IHdpbGwgcHJvcGFnYXRlIGNoYW5nZXMgdG8gb2JzZXJ2ZXJzIGZyb20gcHJldmlvdXMgcnVuXG4gKiBJdCdzIGhhcmQgb3IgbWF5YmUgaW1wb3NzaWJsZSAod2l0aCByZWFzb25hYmxlIHBlcmYpIHRvIGdldCBpdCByaWdodCB3aXRoIGN1cnJlbnQgYXBwcm9hY2hcbiAqIEhvcGVmdWxseSBzZWxmIHJlcnVuaW5nIGF1dG9ydW5zIGFyZW4ndCBhIGZlYXR1cmUgcGVvcGxlIHNob3VsZCBkZXBlbmQgb25cbiAqIEFsc28gbW9zdCBiYXNpYyB1c2UgY2FzZXMgc2hvdWxkIGJlIG9rXG4gKi9cblxuLy8gQ2FsbGVkIGJ5IEF0b20gd2hlbiBpdHMgdmFsdWUgY2hhbmdlc1xuZXhwb3J0IGZ1bmN0aW9uIHByb3BhZ2F0ZUNoYW5nZWQob2JzZXJ2YWJsZTogSU9ic2VydmFibGUpIHtcbiAgICAvLyBpbnZhcmlhbnRMT1Mob2JzZXJ2YWJsZSwgXCJjaGFuZ2VkIHN0YXJ0XCIpO1xuICAgIGlmIChvYnNlcnZhYmxlLmxvd2VzdE9ic2VydmVyU3RhdGVfID09PSBJRGVyaXZhdGlvblN0YXRlXy5TVEFMRV8pIHJldHVyblxuICAgIG9ic2VydmFibGUubG93ZXN0T2JzZXJ2ZXJTdGF0ZV8gPSBJRGVyaXZhdGlvblN0YXRlXy5TVEFMRV9cblxuICAgIC8vIElkZWFsbHkgd2UgdXNlIGZvci4ub2YgaGVyZSwgYnV0IHRoZSBkb3duY29tcGlsZWQgdmVyc2lvbiBpcyByZWFsbHkgc2xvdy4uLlxuICAgIG9ic2VydmFibGUub2JzZXJ2ZXJzXy5mb3JFYWNoKGQgPT4ge1xuICAgICAgICBpZiAoZC5kZXBlbmRlbmNpZXNTdGF0ZV8gPT09IElEZXJpdmF0aW9uU3RhdGVfLlVQX1RPX0RBVEVfKSB7XG4gICAgICAgICAgICBpZiAoX19ERVZfXyAmJiBkLmlzVHJhY2luZ18gIT09IFRyYWNlTW9kZS5OT05FKSB7XG4gICAgICAgICAgICAgICAgbG9nVHJhY2VJbmZvKGQsIG9ic2VydmFibGUpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkLm9uQmVjb21lU3RhbGVfKClcbiAgICAgICAgfVxuICAgICAgICBkLmRlcGVuZGVuY2llc1N0YXRlXyA9IElEZXJpdmF0aW9uU3RhdGVfLlNUQUxFX1xuICAgIH0pXG4gICAgLy8gaW52YXJpYW50TE9TKG9ic2VydmFibGUsIFwiY2hhbmdlZCBlbmRcIik7XG59XG5cbi8vIENhbGxlZCBieSBDb21wdXRlZFZhbHVlIHdoZW4gaXQgcmVjYWxjdWxhdGUgYW5kIGl0cyB2YWx1ZSBjaGFuZ2VkXG5leHBvcnQgZnVuY3Rpb24gcHJvcGFnYXRlQ2hhbmdlQ29uZmlybWVkKG9ic2VydmFibGU6IElPYnNlcnZhYmxlKSB7XG4gICAgLy8gaW52YXJpYW50TE9TKG9ic2VydmFibGUsIFwiY29uZmlybWVkIHN0YXJ0XCIpO1xuICAgIGlmIChvYnNlcnZhYmxlLmxvd2VzdE9ic2VydmVyU3RhdGVfID09PSBJRGVyaXZhdGlvblN0YXRlXy5TVEFMRV8pIHJldHVyblxuICAgIG9ic2VydmFibGUubG93ZXN0T2JzZXJ2ZXJTdGF0ZV8gPSBJRGVyaXZhdGlvblN0YXRlXy5TVEFMRV9cblxuICAgIG9ic2VydmFibGUub2JzZXJ2ZXJzXy5mb3JFYWNoKGQgPT4ge1xuICAgICAgICBpZiAoZC5kZXBlbmRlbmNpZXNTdGF0ZV8gPT09IElEZXJpdmF0aW9uU3RhdGVfLlBPU1NJQkxZX1NUQUxFXykge1xuICAgICAgICAgICAgZC5kZXBlbmRlbmNpZXNTdGF0ZV8gPSBJRGVyaXZhdGlvblN0YXRlXy5TVEFMRV9cbiAgICAgICAgICAgIGlmIChfX0RFVl9fICYmIGQuaXNUcmFjaW5nXyAhPT0gVHJhY2VNb2RlLk5PTkUpIHtcbiAgICAgICAgICAgICAgICBsb2dUcmFjZUluZm8oZCwgb2JzZXJ2YWJsZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgIGQuZGVwZW5kZW5jaWVzU3RhdGVfID09PSBJRGVyaXZhdGlvblN0YXRlXy5VUF9UT19EQVRFXyAvLyB0aGlzIGhhcHBlbnMgZHVyaW5nIGNvbXB1dGluZyBvZiBgZGAsIGp1c3Qga2VlcCBsb3dlc3RPYnNlcnZlclN0YXRlIHVwIHRvIGRhdGUuXG4gICAgICAgICkge1xuICAgICAgICAgICAgb2JzZXJ2YWJsZS5sb3dlc3RPYnNlcnZlclN0YXRlXyA9IElEZXJpdmF0aW9uU3RhdGVfLlVQX1RPX0RBVEVfXG4gICAgICAgIH1cbiAgICB9KVxuICAgIC8vIGludmFyaWFudExPUyhvYnNlcnZhYmxlLCBcImNvbmZpcm1lZCBlbmRcIik7XG59XG5cbi8vIFVzZWQgYnkgY29tcHV0ZWQgd2hlbiBpdHMgZGVwZW5kZW5jeSBjaGFuZ2VkLCBidXQgd2UgZG9uJ3Qgd2FuJ3QgdG8gaW1tZWRpYXRlbHkgcmVjb21wdXRlLlxuZXhwb3J0IGZ1bmN0aW9uIHByb3BhZ2F0ZU1heWJlQ2hhbmdlZChvYnNlcnZhYmxlOiBJT2JzZXJ2YWJsZSkge1xuICAgIC8vIGludmFyaWFudExPUyhvYnNlcnZhYmxlLCBcIm1heWJlIHN0YXJ0XCIpO1xuICAgIGlmIChvYnNlcnZhYmxlLmxvd2VzdE9ic2VydmVyU3RhdGVfICE9PSBJRGVyaXZhdGlvblN0YXRlXy5VUF9UT19EQVRFXykgcmV0dXJuXG4gICAgb2JzZXJ2YWJsZS5sb3dlc3RPYnNlcnZlclN0YXRlXyA9IElEZXJpdmF0aW9uU3RhdGVfLlBPU1NJQkxZX1NUQUxFX1xuXG4gICAgb2JzZXJ2YWJsZS5vYnNlcnZlcnNfLmZvckVhY2goZCA9PiB7XG4gICAgICAgIGlmIChkLmRlcGVuZGVuY2llc1N0YXRlXyA9PT0gSURlcml2YXRpb25TdGF0ZV8uVVBfVE9fREFURV8pIHtcbiAgICAgICAgICAgIGQuZGVwZW5kZW5jaWVzU3RhdGVfID0gSURlcml2YXRpb25TdGF0ZV8uUE9TU0lCTFlfU1RBTEVfXG4gICAgICAgICAgICBkLm9uQmVjb21lU3RhbGVfKClcbiAgICAgICAgfVxuICAgIH0pXG4gICAgLy8gaW52YXJpYW50TE9TKG9ic2VydmFibGUsIFwibWF5YmUgZW5kXCIpO1xufVxuXG5mdW5jdGlvbiBsb2dUcmFjZUluZm8oZGVyaXZhdGlvbjogSURlcml2YXRpb24sIG9ic2VydmFibGU6IElPYnNlcnZhYmxlKSB7XG4gICAgY29uc29sZS5sb2coXG4gICAgICAgIGBbbW9ieC50cmFjZV0gJyR7ZGVyaXZhdGlvbi5uYW1lX30nIGlzIGludmFsaWRhdGVkIGR1ZSB0byBhIGNoYW5nZSBpbjogJyR7b2JzZXJ2YWJsZS5uYW1lX30nYFxuICAgIClcbiAgICBpZiAoZGVyaXZhdGlvbi5pc1RyYWNpbmdfID09PSBUcmFjZU1vZGUuQlJFQUspIHtcbiAgICAgICAgY29uc3QgbGluZXMgPSBbXVxuICAgICAgICBwcmludERlcFRyZWUoZ2V0RGVwZW5kZW5jeVRyZWUoZGVyaXZhdGlvbiksIGxpbmVzLCAxKVxuXG4gICAgICAgIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgICAgICBuZXcgRnVuY3Rpb24oXG5gZGVidWdnZXI7XG4vKlxuVHJhY2luZyAnJHtkZXJpdmF0aW9uLm5hbWVffSdcblxuWW91IGFyZSBlbnRlcmluZyB0aGlzIGJyZWFrIHBvaW50IGJlY2F1c2UgZGVyaXZhdGlvbiAnJHtkZXJpdmF0aW9uLm5hbWVffScgaXMgYmVpbmcgdHJhY2VkIGFuZCAnJHtvYnNlcnZhYmxlLm5hbWVffScgaXMgbm93IGZvcmNpbmcgaXQgdG8gdXBkYXRlLlxuSnVzdCBmb2xsb3cgdGhlIHN0YWNrdHJhY2UgeW91IHNob3VsZCBub3cgc2VlIGluIHRoZSBkZXZ0b29scyB0byBzZWUgcHJlY2lzZWx5IHdoYXQgcGllY2Ugb2YgeW91ciBjb2RlIGlzIGNhdXNpbmcgdGhpcyB1cGRhdGVcblRoZSBzdGFja2ZyYW1lIHlvdSBhcmUgbG9va2luZyBmb3IgaXMgYXQgbGVhc3QgfjYtOCBzdGFjay1mcmFtZXMgdXAuXG5cbiR7ZGVyaXZhdGlvbiBpbnN0YW5jZW9mIENvbXB1dGVkVmFsdWUgPyBkZXJpdmF0aW9uLmRlcml2YXRpb24udG9TdHJpbmcoKS5yZXBsYWNlKC9bKl1cXC8vZywgXCIvXCIpIDogXCJcIn1cblxuVGhlIGRlcGVuZGVuY2llcyBmb3IgdGhpcyBkZXJpdmF0aW9uIGFyZTpcblxuJHtsaW5lcy5qb2luKFwiXFxuXCIpfVxuKi9cbiAgICBgKSgpXG4gICAgfVxufVxuXG5mdW5jdGlvbiBwcmludERlcFRyZWUodHJlZTogSURlcGVuZGVuY3lUcmVlLCBsaW5lczogc3RyaW5nW10sIGRlcHRoOiBudW1iZXIpIHtcbiAgICBpZiAobGluZXMubGVuZ3RoID49IDEwMDApIHtcbiAgICAgICAgbGluZXMucHVzaChcIihhbmQgbWFueSBtb3JlKVwiKVxuICAgICAgICByZXR1cm5cbiAgICB9XG4gICAgbGluZXMucHVzaChgJHtuZXcgQXJyYXkoZGVwdGgpLmpvaW4oXCJcXHRcIil9JHt0cmVlLm5hbWV9YCkgLy8gTVdFOiBub3QgdGhlIGZhc3Rlc3QsIGJ1dCB0aGUgZWFzaWVzdCB3YXkgOilcbiAgICBpZiAodHJlZS5kZXBlbmRlbmNpZXMpIHRyZWUuZGVwZW5kZW5jaWVzLmZvckVhY2goY2hpbGQgPT4gcHJpbnREZXBUcmVlKGNoaWxkLCBsaW5lcywgZGVwdGggKyAxKSlcbn1cbiIsImltcG9ydCB7XG4gICAgJG1vYngsXG4gICAgSURlcml2YXRpb24sXG4gICAgSURlcml2YXRpb25TdGF0ZV8sXG4gICAgSU9ic2VydmFibGUsXG4gICAgTGFtYmRhLFxuICAgIFRyYWNlTW9kZSxcbiAgICBjbGVhck9ic2VydmluZyxcbiAgICBjcmVhdGVJbnN0YW5jZW9mUHJlZGljYXRlLFxuICAgIGVuZEJhdGNoLFxuICAgIGdldE5leHRJZCxcbiAgICBnbG9iYWxTdGF0ZSxcbiAgICBpc0NhdWdodEV4Y2VwdGlvbixcbiAgICBpc1NweUVuYWJsZWQsXG4gICAgc2hvdWxkQ29tcHV0ZSxcbiAgICBzcHlSZXBvcnQsXG4gICAgc3B5UmVwb3J0RW5kLFxuICAgIHNweVJlcG9ydFN0YXJ0LFxuICAgIHN0YXJ0QmF0Y2gsXG4gICAgdHJhY2UsXG4gICAgdHJhY2tEZXJpdmVkRnVuY3Rpb25cbn0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuLyoqXG4gKiBSZWFjdGlvbnMgYXJlIGEgc3BlY2lhbCBraW5kIG9mIGRlcml2YXRpb25zLiBTZXZlcmFsIHRoaW5ncyBkaXN0aW5ndWlzaGVzIHRoZW0gZnJvbSBub3JtYWwgcmVhY3RpdmUgY29tcHV0YXRpb25zXG4gKlxuICogMSkgVGhleSB3aWxsIGFsd2F5cyBydW4sIHdoZXRoZXIgdGhleSBhcmUgdXNlZCBieSBvdGhlciBjb21wdXRhdGlvbnMgb3Igbm90LlxuICogVGhpcyBtZWFucyB0aGF0IHRoZXkgYXJlIHZlcnkgc3VpdGFibGUgZm9yIHRyaWdnZXJpbmcgc2lkZSBlZmZlY3RzIGxpa2UgbG9nZ2luZywgdXBkYXRpbmcgdGhlIERPTSBhbmQgbWFraW5nIG5ldHdvcmsgcmVxdWVzdHMuXG4gKiAyKSBUaGV5IGFyZSBub3Qgb2JzZXJ2YWJsZSB0aGVtc2VsdmVzXG4gKiAzKSBUaGV5IHdpbGwgYWx3YXlzIHJ1biBhZnRlciBhbnkgJ25vcm1hbCcgZGVyaXZhdGlvbnNcbiAqIDQpIFRoZXkgYXJlIGFsbG93ZWQgdG8gY2hhbmdlIHRoZSBzdGF0ZSBhbmQgdGhlcmVieSB0cmlnZ2VyaW5nIHRoZW1zZWx2ZXMgYWdhaW4sIGFzIGxvbmcgYXMgdGhleSBtYWtlIHN1cmUgdGhlIHN0YXRlIHByb3BhZ2F0ZXMgdG8gYSBzdGFibGUgc3RhdGUgaW4gYSByZWFzb25hYmxlIGFtb3VudCBvZiBpdGVyYXRpb25zLlxuICpcbiAqIFRoZSBzdGF0ZSBtYWNoaW5lIG9mIGEgUmVhY3Rpb24gaXMgYXMgZm9sbG93czpcbiAqXG4gKiAxKSBhZnRlciBjcmVhdGluZywgdGhlIHJlYWN0aW9uIHNob3VsZCBiZSBzdGFydGVkIGJ5IGNhbGxpbmcgYHJ1blJlYWN0aW9uYCBvciBieSBzY2hlZHVsaW5nIGl0IChzZWUgYWxzbyBgYXV0b3J1bmApXG4gKiAyKSB0aGUgYG9uSW52YWxpZGF0ZWAgaGFuZGxlciBzaG91bGQgc29tZWhvdyByZXN1bHQgaW4gYSBjYWxsIHRvIGB0aGlzLnRyYWNrKHNvbWVGdW5jdGlvbilgXG4gKiAzKSBhbGwgb2JzZXJ2YWJsZXMgYWNjZXNzZWQgaW4gYHNvbWVGdW5jdGlvbmAgd2lsbCBiZSBvYnNlcnZlZCBieSB0aGlzIHJlYWN0aW9uLlxuICogNCkgYXMgc29vbiBhcyBzb21lIG9mIHRoZSBkZXBlbmRlbmNpZXMgaGFzIGNoYW5nZWQgdGhlIFJlYWN0aW9uIHdpbGwgYmUgcmVzY2hlZHVsZWQgZm9yIGFub3RoZXIgcnVuIChhZnRlciB0aGUgY3VycmVudCBtdXRhdGlvbiBvciB0cmFuc2FjdGlvbikuIGBpc1NjaGVkdWxlZGAgd2lsbCB5aWVsZCB0cnVlIG9uY2UgYSBkZXBlbmRlbmN5IGlzIHN0YWxlIGFuZCBkdXJpbmcgdGhpcyBwZXJpb2RcbiAqIDUpIGBvbkludmFsaWRhdGVgIHdpbGwgYmUgY2FsbGVkLCBhbmQgd2UgYXJlIGJhY2sgYXQgc3RlcCAxLlxuICpcbiAqL1xuXG5leHBvcnQgaW50ZXJmYWNlIElSZWFjdGlvblB1YmxpYyB7XG4gICAgZGlzcG9zZSgpOiB2b2lkXG4gICAgdHJhY2UoZW50ZXJCcmVha1BvaW50PzogYm9vbGVhbik6IHZvaWRcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJUmVhY3Rpb25EaXNwb3NlciB7XG4gICAgKCk6IHZvaWRcbiAgICAkbW9ieDogUmVhY3Rpb25cbn1cblxuZXhwb3J0IGNsYXNzIFJlYWN0aW9uIGltcGxlbWVudHMgSURlcml2YXRpb24sIElSZWFjdGlvblB1YmxpYyB7XG4gICAgb2JzZXJ2aW5nXzogSU9ic2VydmFibGVbXSA9IFtdIC8vIG5vZGVzIHdlIGFyZSBsb29raW5nIGF0LiBPdXIgdmFsdWUgZGVwZW5kcyBvbiB0aGVzZSBub2Rlc1xuICAgIG5ld09ic2VydmluZ186IElPYnNlcnZhYmxlW10gPSBbXVxuICAgIGRlcGVuZGVuY2llc1N0YXRlXyA9IElEZXJpdmF0aW9uU3RhdGVfLk5PVF9UUkFDS0lOR19cbiAgICBkaWZmVmFsdWVfID0gMFxuICAgIHJ1bklkXyA9IDBcbiAgICB1bmJvdW5kRGVwc0NvdW50XyA9IDBcbiAgICBpc0Rpc3Bvc2VkXyA9IGZhbHNlXG4gICAgaXNTY2hlZHVsZWRfID0gZmFsc2VcbiAgICBpc1RyYWNrUGVuZGluZ18gPSBmYWxzZVxuICAgIGlzUnVubmluZ18gPSBmYWxzZVxuICAgIGlzVHJhY2luZ186IFRyYWNlTW9kZSA9IFRyYWNlTW9kZS5OT05FXG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHVibGljIG5hbWVfOiBzdHJpbmcgPSBfX0RFVl9fID8gXCJSZWFjdGlvbkBcIiArIGdldE5leHRJZCgpIDogXCJSZWFjdGlvblwiLFxuICAgICAgICBwcml2YXRlIG9uSW52YWxpZGF0ZV86ICgpID0+IHZvaWQsXG4gICAgICAgIHByaXZhdGUgZXJyb3JIYW5kbGVyXz86IChlcnJvcjogYW55LCBkZXJpdmF0aW9uOiBJRGVyaXZhdGlvbikgPT4gdm9pZCxcbiAgICAgICAgcHVibGljIHJlcXVpcmVzT2JzZXJ2YWJsZV8gPSBmYWxzZVxuICAgICkge31cblxuICAgIG9uQmVjb21lU3RhbGVfKCkge1xuICAgICAgICB0aGlzLnNjaGVkdWxlXygpXG4gICAgfVxuXG4gICAgc2NoZWR1bGVfKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNTY2hlZHVsZWRfKSB7XG4gICAgICAgICAgICB0aGlzLmlzU2NoZWR1bGVkXyA9IHRydWVcbiAgICAgICAgICAgIGdsb2JhbFN0YXRlLnBlbmRpbmdSZWFjdGlvbnMucHVzaCh0aGlzKVxuICAgICAgICAgICAgcnVuUmVhY3Rpb25zKClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlzU2NoZWR1bGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1NjaGVkdWxlZF9cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBpbnRlcm5hbCwgdXNlIHNjaGVkdWxlKCkgaWYgeW91IGludGVuZCB0byBraWNrIG9mZiBhIHJlYWN0aW9uXG4gICAgICovXG4gICAgcnVuUmVhY3Rpb25fKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNEaXNwb3NlZF8pIHtcbiAgICAgICAgICAgIHN0YXJ0QmF0Y2goKVxuICAgICAgICAgICAgdGhpcy5pc1NjaGVkdWxlZF8gPSBmYWxzZVxuICAgICAgICAgICAgY29uc3QgcHJldiA9IGdsb2JhbFN0YXRlLnRyYWNraW5nQ29udGV4dFxuICAgICAgICAgICAgZ2xvYmFsU3RhdGUudHJhY2tpbmdDb250ZXh0ID0gdGhpc1xuICAgICAgICAgICAgaWYgKHNob3VsZENvbXB1dGUodGhpcykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlzVHJhY2tQZW5kaW5nXyA9IHRydWVcblxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25JbnZhbGlkYXRlXygpXG4gICAgICAgICAgICAgICAgICAgIGlmIChfX0RFVl9fICYmIHRoaXMuaXNUcmFja1BlbmRpbmdfICYmIGlzU3B5RW5hYmxlZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBvbkludmFsaWRhdGUgZGlkbid0IHRyaWdnZXIgdHJhY2sgcmlnaHQgYXdheS4uXG4gICAgICAgICAgICAgICAgICAgICAgICBzcHlSZXBvcnQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZV8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJzY2hlZHVsZWQtcmVhY3Rpb25cIlxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXBvcnRFeGNlcHRpb25JbkRlcml2YXRpb25fKGUpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZ2xvYmFsU3RhdGUudHJhY2tpbmdDb250ZXh0ID0gcHJldlxuICAgICAgICAgICAgZW5kQmF0Y2goKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdHJhY2soZm46ICgpID0+IHZvaWQpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNEaXNwb3NlZF8pIHtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgLy8gY29uc29sZS53YXJuKFwiUmVhY3Rpb24gYWxyZWFkeSBkaXNwb3NlZFwiKSAvLyBOb3RlOiBOb3QgYSB3YXJuaW5nIC8gZXJyb3IgaW4gbW9ieCA0IGVpdGhlclxuICAgICAgICB9XG4gICAgICAgIHN0YXJ0QmF0Y2goKVxuICAgICAgICBjb25zdCBub3RpZnkgPSBpc1NweUVuYWJsZWQoKVxuICAgICAgICBsZXQgc3RhcnRUaW1lXG4gICAgICAgIGlmIChfX0RFVl9fICYmIG5vdGlmeSkge1xuICAgICAgICAgICAgc3RhcnRUaW1lID0gRGF0ZS5ub3coKVxuICAgICAgICAgICAgc3B5UmVwb3J0U3RhcnQoe1xuICAgICAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZV8sXG4gICAgICAgICAgICAgICAgdHlwZTogXCJyZWFjdGlvblwiXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuaXNSdW5uaW5nXyA9IHRydWVcbiAgICAgICAgY29uc3QgcHJldlJlYWN0aW9uID0gZ2xvYmFsU3RhdGUudHJhY2tpbmdDb250ZXh0IC8vIHJlYWN0aW9ucyBjb3VsZCBjcmVhdGUgcmVhY3Rpb25zLi4uXG4gICAgICAgIGdsb2JhbFN0YXRlLnRyYWNraW5nQ29udGV4dCA9IHRoaXNcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdHJhY2tEZXJpdmVkRnVuY3Rpb24odGhpcywgZm4sIHVuZGVmaW5lZClcbiAgICAgICAgZ2xvYmFsU3RhdGUudHJhY2tpbmdDb250ZXh0ID0gcHJldlJlYWN0aW9uXG4gICAgICAgIHRoaXMuaXNSdW5uaW5nXyA9IGZhbHNlXG4gICAgICAgIHRoaXMuaXNUcmFja1BlbmRpbmdfID0gZmFsc2VcbiAgICAgICAgaWYgKHRoaXMuaXNEaXNwb3NlZF8pIHtcbiAgICAgICAgICAgIC8vIGRpc3Bvc2VkIGR1cmluZyBsYXN0IHJ1bi4gQ2xlYW4gdXAgZXZlcnl0aGluZyB0aGF0IHdhcyBib3VuZCBhZnRlciB0aGUgZGlzcG9zZSBjYWxsLlxuICAgICAgICAgICAgY2xlYXJPYnNlcnZpbmcodGhpcylcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNDYXVnaHRFeGNlcHRpb24ocmVzdWx0KSkgdGhpcy5yZXBvcnRFeGNlcHRpb25JbkRlcml2YXRpb25fKHJlc3VsdC5jYXVzZSlcbiAgICAgICAgaWYgKF9fREVWX18gJiYgbm90aWZ5KSB7XG4gICAgICAgICAgICBzcHlSZXBvcnRFbmQoe1xuICAgICAgICAgICAgICAgIHRpbWU6IERhdGUubm93KCkgLSBzdGFydFRpbWVcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgZW5kQmF0Y2goKVxuICAgIH1cblxuICAgIHJlcG9ydEV4Y2VwdGlvbkluRGVyaXZhdGlvbl8oZXJyb3I6IGFueSkge1xuICAgICAgICBpZiAodGhpcy5lcnJvckhhbmRsZXJfKSB7XG4gICAgICAgICAgICB0aGlzLmVycm9ySGFuZGxlcl8oZXJyb3IsIHRoaXMpXG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChnbG9iYWxTdGF0ZS5kaXNhYmxlRXJyb3JCb3VuZGFyaWVzKSB0aHJvdyBlcnJvclxuXG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBfX0RFVl9fXG4gICAgICAgICAgICA/IGBbbW9ieF0gRW5jb3VudGVyZWQgYW4gdW5jYXVnaHQgZXhjZXB0aW9uIHRoYXQgd2FzIHRocm93biBieSBhIHJlYWN0aW9uIG9yIG9ic2VydmVyIGNvbXBvbmVudCwgaW46ICcke3RoaXN9J2BcbiAgICAgICAgICAgIDogYFttb2J4XSB1bmNhdWdodCBlcnJvciBpbiAnJHt0aGlzfSdgXG4gICAgICAgIGlmICghZ2xvYmFsU3RhdGUuc3VwcHJlc3NSZWFjdGlvbkVycm9ycykge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlLCBlcnJvcilcbiAgICAgICAgICAgIC8qKiBJZiBkZWJ1Z2dpbmcgYnJvdWdodCB5b3UgaGVyZSwgcGxlYXNlLCByZWFkIHRoZSBhYm92ZSBtZXNzYWdlIDotKS4gVG54ISAqL1xuICAgICAgICB9IGVsc2UgaWYgKF9fREVWX18pIGNvbnNvbGUud2FybihgW21vYnhdIChlcnJvciBpbiByZWFjdGlvbiAnJHt0aGlzLm5hbWVffScgc3VwcHJlc3NlZCwgZml4IGVycm9yIG9mIGNhdXNpbmcgYWN0aW9uIGJlbG93KWApIC8vIHByZXR0aWVyLWlnbm9yZVxuXG4gICAgICAgIGlmIChfX0RFVl9fICYmIGlzU3B5RW5hYmxlZCgpKSB7XG4gICAgICAgICAgICBzcHlSZXBvcnQoe1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiZXJyb3JcIixcbiAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWVfLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgZXJyb3I6IFwiXCIgKyBlcnJvclxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIGdsb2JhbFN0YXRlLmdsb2JhbFJlYWN0aW9uRXJyb3JIYW5kbGVycy5mb3JFYWNoKGYgPT4gZihlcnJvciwgdGhpcykpXG4gICAgfVxuXG4gICAgZGlzcG9zZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzRGlzcG9zZWRfKSB7XG4gICAgICAgICAgICB0aGlzLmlzRGlzcG9zZWRfID0gdHJ1ZVxuICAgICAgICAgICAgaWYgKCF0aGlzLmlzUnVubmluZ18pIHtcbiAgICAgICAgICAgICAgICAvLyBpZiBkaXNwb3NlZCB3aGlsZSBydW5uaW5nLCBjbGVhbiB1cCBsYXRlci4gTWF5YmUgbm90IG9wdGltYWwsIGJ1dCByYXJlIGNhc2VcbiAgICAgICAgICAgICAgICBzdGFydEJhdGNoKClcbiAgICAgICAgICAgICAgICBjbGVhck9ic2VydmluZyh0aGlzKVxuICAgICAgICAgICAgICAgIGVuZEJhdGNoKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldERpc3Bvc2VyXygpOiBJUmVhY3Rpb25EaXNwb3NlciB7XG4gICAgICAgIGNvbnN0IHIgPSB0aGlzLmRpc3Bvc2UuYmluZCh0aGlzKSBhcyBJUmVhY3Rpb25EaXNwb3NlclxuICAgICAgICByWyRtb2J4XSA9IHRoaXNcbiAgICAgICAgcmV0dXJuIHJcbiAgICB9XG5cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIGBSZWFjdGlvblske3RoaXMubmFtZV99XWBcbiAgICB9XG5cbiAgICB0cmFjZShlbnRlckJyZWFrUG9pbnQ6IGJvb2xlYW4gPSBmYWxzZSkge1xuICAgICAgICB0cmFjZSh0aGlzLCBlbnRlckJyZWFrUG9pbnQpXG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gb25SZWFjdGlvbkVycm9yKGhhbmRsZXI6IChlcnJvcjogYW55LCBkZXJpdmF0aW9uOiBJRGVyaXZhdGlvbikgPT4gdm9pZCk6IExhbWJkYSB7XG4gICAgZ2xvYmFsU3RhdGUuZ2xvYmFsUmVhY3Rpb25FcnJvckhhbmRsZXJzLnB1c2goaGFuZGxlcilcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBjb25zdCBpZHggPSBnbG9iYWxTdGF0ZS5nbG9iYWxSZWFjdGlvbkVycm9ySGFuZGxlcnMuaW5kZXhPZihoYW5kbGVyKVxuICAgICAgICBpZiAoaWR4ID49IDApIGdsb2JhbFN0YXRlLmdsb2JhbFJlYWN0aW9uRXJyb3JIYW5kbGVycy5zcGxpY2UoaWR4LCAxKVxuICAgIH1cbn1cblxuLyoqXG4gKiBNYWdpYyBudW1iZXIgYWxlcnQhXG4gKiBEZWZpbmVzIHdpdGhpbiBob3cgbWFueSB0aW1lcyBhIHJlYWN0aW9uIGlzIGFsbG93ZWQgdG8gcmUtdHJpZ2dlciBpdHNlbGZcbiAqIHVudGlsIGl0IGlzIGFzc3VtZWQgdGhhdCB0aGlzIGlzIGdvbm5hIGJlIGEgbmV2ZXIgZW5kaW5nIGxvb3AuLi5cbiAqL1xuY29uc3QgTUFYX1JFQUNUSU9OX0lURVJBVElPTlMgPSAxMDBcblxubGV0IHJlYWN0aW9uU2NoZWR1bGVyOiAoZm46ICgpID0+IHZvaWQpID0+IHZvaWQgPSBmID0+IGYoKVxuXG5leHBvcnQgZnVuY3Rpb24gcnVuUmVhY3Rpb25zKCkge1xuICAgIC8vIFRyYW1wb2xpbmluZywgaWYgcnVuUmVhY3Rpb25zIGFyZSBhbHJlYWR5IHJ1bm5pbmcsIG5ldyByZWFjdGlvbnMgd2lsbCBiZSBwaWNrZWQgdXBcbiAgICBpZiAoZ2xvYmFsU3RhdGUuaW5CYXRjaCA+IDAgfHwgZ2xvYmFsU3RhdGUuaXNSdW5uaW5nUmVhY3Rpb25zKSByZXR1cm5cbiAgICByZWFjdGlvblNjaGVkdWxlcihydW5SZWFjdGlvbnNIZWxwZXIpXG59XG5cbmZ1bmN0aW9uIHJ1blJlYWN0aW9uc0hlbHBlcigpIHtcbiAgICBnbG9iYWxTdGF0ZS5pc1J1bm5pbmdSZWFjdGlvbnMgPSB0cnVlXG4gICAgY29uc3QgYWxsUmVhY3Rpb25zID0gZ2xvYmFsU3RhdGUucGVuZGluZ1JlYWN0aW9uc1xuICAgIGxldCBpdGVyYXRpb25zID0gMFxuXG4gICAgLy8gV2hpbGUgcnVubmluZyByZWFjdGlvbnMsIG5ldyByZWFjdGlvbnMgbWlnaHQgYmUgdHJpZ2dlcmVkLlxuICAgIC8vIEhlbmNlIHdlIHdvcmsgd2l0aCB0d28gdmFyaWFibGVzIGFuZCBjaGVjayB3aGV0aGVyXG4gICAgLy8gd2UgY29udmVyZ2UgdG8gbm8gcmVtYWluaW5nIHJlYWN0aW9ucyBhZnRlciBhIHdoaWxlLlxuICAgIHdoaWxlIChhbGxSZWFjdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICBpZiAoKytpdGVyYXRpb25zID09PSBNQVhfUkVBQ1RJT05fSVRFUkFUSU9OUykge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgICAgICBfX0RFVl9fXG4gICAgICAgICAgICAgICAgICAgID8gYFJlYWN0aW9uIGRvZXNuJ3QgY29udmVyZ2UgdG8gYSBzdGFibGUgc3RhdGUgYWZ0ZXIgJHtNQVhfUkVBQ1RJT05fSVRFUkFUSU9OU30gaXRlcmF0aW9ucy5gICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYCBQcm9iYWJseSB0aGVyZSBpcyBhIGN5Y2xlIGluIHRoZSByZWFjdGl2ZSBmdW5jdGlvbjogJHthbGxSZWFjdGlvbnNbMF19YFxuICAgICAgICAgICAgICAgICAgICA6IGBbbW9ieF0gY3ljbGUgaW4gcmVhY3Rpb246ICR7YWxsUmVhY3Rpb25zWzBdfWBcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIGFsbFJlYWN0aW9ucy5zcGxpY2UoMCkgLy8gY2xlYXIgcmVhY3Rpb25zXG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlbWFpbmluZ1JlYWN0aW9ucyA9IGFsbFJlYWN0aW9ucy5zcGxpY2UoMClcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSByZW1haW5pbmdSZWFjdGlvbnMubGVuZ3RoOyBpIDwgbDsgaSsrKVxuICAgICAgICAgICAgcmVtYWluaW5nUmVhY3Rpb25zW2ldLnJ1blJlYWN0aW9uXygpXG4gICAgfVxuICAgIGdsb2JhbFN0YXRlLmlzUnVubmluZ1JlYWN0aW9ucyA9IGZhbHNlXG59XG5cbmV4cG9ydCBjb25zdCBpc1JlYWN0aW9uID0gY3JlYXRlSW5zdGFuY2VvZlByZWRpY2F0ZShcIlJlYWN0aW9uXCIsIFJlYWN0aW9uKVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0UmVhY3Rpb25TY2hlZHVsZXIoZm46IChmOiAoKSA9PiB2b2lkKSA9PiB2b2lkKSB7XG4gICAgY29uc3QgYmFzZVNjaGVkdWxlciA9IHJlYWN0aW9uU2NoZWR1bGVyXG4gICAgcmVhY3Rpb25TY2hlZHVsZXIgPSBmID0+IGZuKCgpID0+IGJhc2VTY2hlZHVsZXIoZikpXG59XG4iLCJpbXBvcnQgeyBJQ29tcHV0ZWREaWRDaGFuZ2UgfSBmcm9tIFwiLi9jb21wdXRlZHZhbHVlXCJcbmltcG9ydCB7IElWYWx1ZURpZENoYW5nZSwgSUJveERpZENoYW5nZSB9IGZyb20gXCIuLy4uL3R5cGVzL29ic2VydmFibGV2YWx1ZVwiXG5pbXBvcnQgeyBJT2JqZWN0RGlkQ2hhbmdlIH0gZnJvbSBcIi4vLi4vdHlwZXMvb2JzZXJ2YWJsZW9iamVjdFwiXG5pbXBvcnQgeyBJQXJyYXlEaWRDaGFuZ2UgfSBmcm9tIFwiLi8uLi90eXBlcy9vYnNlcnZhYmxlYXJyYXlcIlxuaW1wb3J0IHsgTGFtYmRhLCBnbG9iYWxTdGF0ZSwgb25jZSwgSVNldERpZENoYW5nZSwgSU1hcERpZENoYW5nZSB9IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbmV4cG9ydCBmdW5jdGlvbiBpc1NweUVuYWJsZWQoKSB7XG4gICAgcmV0dXJuIF9fREVWX18gJiYgISFnbG9iYWxTdGF0ZS5zcHlMaXN0ZW5lcnMubGVuZ3RoXG59XG5cbmV4cG9ydCB0eXBlIFB1cmVTcHlFdmVudCA9XG4gICAgfCB7IHR5cGU6IFwiYWN0aW9uXCI7IG5hbWU6IHN0cmluZzsgb2JqZWN0OiB1bmtub3duOyBhcmd1bWVudHM6IHVua25vd25bXSB9XG4gICAgfCB7IHR5cGU6IFwic2NoZWR1bGVkLXJlYWN0aW9uXCI7IG5hbWU6IHN0cmluZyB9XG4gICAgfCB7IHR5cGU6IFwicmVhY3Rpb25cIjsgbmFtZTogc3RyaW5nIH1cbiAgICB8IHsgdHlwZTogXCJlcnJvclwiOyBuYW1lOiBzdHJpbmc7IG1lc3NhZ2U6IHN0cmluZzsgZXJyb3I6IHN0cmluZyB9XG4gICAgfCBJQ29tcHV0ZWREaWRDaGFuZ2U8dW5rbm93bj5cbiAgICB8IElPYmplY3REaWRDaGFuZ2U8dW5rbm93bj5cbiAgICB8IElBcnJheURpZENoYW5nZTx1bmtub3duPlxuICAgIHwgSU1hcERpZENoYW5nZTx1bmtub3duLCB1bmtub3duPlxuICAgIHwgSVNldERpZENoYW5nZTx1bmtub3duPlxuICAgIHwgSVZhbHVlRGlkQ2hhbmdlPHVua25vd24+XG4gICAgfCBJQm94RGlkQ2hhbmdlPHVua25vd24+XG4gICAgfCB7IHR5cGU6IFwicmVwb3J0LWVuZFwiOyBzcHlSZXBvcnRFbmQ6IHRydWU7IHRpbWU/OiBudW1iZXIgfVxuXG50eXBlIFNweUV2ZW50ID0gUHVyZVNweUV2ZW50ICYgeyBzcHlSZXBvcnRTdGFydD86IHRydWUgfVxuXG5leHBvcnQgZnVuY3Rpb24gc3B5UmVwb3J0KGV2ZW50OiBTcHlFdmVudCkge1xuICAgIGlmICghX19ERVZfXykgcmV0dXJuIC8vIGRlYWQgY29kZSBlbGltaW5hdGlvbiBjYW4gZG8gdGhlIHJlc3RcbiAgICBpZiAoIWdsb2JhbFN0YXRlLnNweUxpc3RlbmVycy5sZW5ndGgpIHJldHVyblxuICAgIGNvbnN0IGxpc3RlbmVycyA9IGdsb2JhbFN0YXRlLnNweUxpc3RlbmVyc1xuICAgIGZvciAobGV0IGkgPSAwLCBsID0gbGlzdGVuZXJzLmxlbmd0aDsgaSA8IGw7IGkrKykgbGlzdGVuZXJzW2ldKGV2ZW50KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc3B5UmVwb3J0U3RhcnQoZXZlbnQ6IFB1cmVTcHlFdmVudCkge1xuICAgIGlmICghX19ERVZfXykgcmV0dXJuXG4gICAgY29uc3QgY2hhbmdlID0geyAuLi5ldmVudCwgc3B5UmVwb3J0U3RhcnQ6IHRydWUgYXMgY29uc3QgfVxuICAgIHNweVJlcG9ydChjaGFuZ2UpXG59XG5cbmNvbnN0IEVORF9FVkVOVDogU3B5RXZlbnQgPSB7IHR5cGU6IFwicmVwb3J0LWVuZFwiLCBzcHlSZXBvcnRFbmQ6IHRydWUgfVxuXG5leHBvcnQgZnVuY3Rpb24gc3B5UmVwb3J0RW5kKGNoYW5nZT86IHsgdGltZT86IG51bWJlciB9KSB7XG4gICAgaWYgKCFfX0RFVl9fKSByZXR1cm5cbiAgICBpZiAoY2hhbmdlKSBzcHlSZXBvcnQoeyAuLi5jaGFuZ2UsIHR5cGU6IFwicmVwb3J0LWVuZFwiLCBzcHlSZXBvcnRFbmQ6IHRydWUgfSlcbiAgICBlbHNlIHNweVJlcG9ydChFTkRfRVZFTlQpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzcHkobGlzdGVuZXI6IChjaGFuZ2U6IFNweUV2ZW50KSA9PiB2b2lkKTogTGFtYmRhIHtcbiAgICBpZiAoIV9fREVWX18pIHtcbiAgICAgICAgY29uc29sZS53YXJuKGBbbW9ieC5zcHldIElzIGEgbm8tb3AgaW4gcHJvZHVjdGlvbiBidWlsZHNgKVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge31cbiAgICB9IGVsc2Uge1xuICAgICAgICBnbG9iYWxTdGF0ZS5zcHlMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcilcbiAgICAgICAgcmV0dXJuIG9uY2UoKCkgPT4ge1xuICAgICAgICAgICAgZ2xvYmFsU3RhdGUuc3B5TGlzdGVuZXJzID0gZ2xvYmFsU3RhdGUuc3B5TGlzdGVuZXJzLmZpbHRlcihsID0+IGwgIT09IGxpc3RlbmVyKVxuICAgICAgICB9KVxuICAgIH1cbn1cbiIsImltcG9ydCB7XG4gICAgY3JlYXRlQWN0aW9uLFxuICAgIGV4ZWN1dGVBY3Rpb24sXG4gICAgQW5ub3RhdGlvbixcbiAgICBzdG9yZUFubm90YXRpb24sXG4gICAgZGllLFxuICAgIGlzRnVuY3Rpb24sXG4gICAgaXNTdHJpbmdpc2gsXG4gICAgY3JlYXRlRGVjb3JhdG9yQW5ub3RhdGlvbixcbiAgICBjcmVhdGVBY3Rpb25Bbm5vdGF0aW9uXG59IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbmV4cG9ydCBjb25zdCBBQ1RJT04gPSBcImFjdGlvblwiXG5leHBvcnQgY29uc3QgQUNUSU9OX0JPVU5EID0gXCJhY3Rpb24uYm91bmRcIlxuZXhwb3J0IGNvbnN0IEFVVE9BQ1RJT04gPSBcImF1dG9BY3Rpb25cIlxuZXhwb3J0IGNvbnN0IEFVVE9BQ1RJT05fQk9VTkQgPSBcImF1dG9BY3Rpb24uYm91bmRcIlxuXG5jb25zdCBERUZBVUxUX0FDVElPTl9OQU1FID0gXCI8dW5uYW1lZCBhY3Rpb24+XCJcblxuY29uc3QgYWN0aW9uQW5ub3RhdGlvbiA9IGNyZWF0ZUFjdGlvbkFubm90YXRpb24oQUNUSU9OKVxuY29uc3QgYWN0aW9uQm91bmRBbm5vdGF0aW9uID0gY3JlYXRlQWN0aW9uQW5ub3RhdGlvbihBQ1RJT05fQk9VTkQsIHtcbiAgICBib3VuZDogdHJ1ZVxufSlcbmNvbnN0IGF1dG9BY3Rpb25Bbm5vdGF0aW9uID0gY3JlYXRlQWN0aW9uQW5ub3RhdGlvbihBVVRPQUNUSU9OLCB7XG4gICAgYXV0b0FjdGlvbjogdHJ1ZVxufSlcbmNvbnN0IGF1dG9BY3Rpb25Cb3VuZEFubm90YXRpb24gPSBjcmVhdGVBY3Rpb25Bbm5vdGF0aW9uKEFVVE9BQ1RJT05fQk9VTkQsIHtcbiAgICBhdXRvQWN0aW9uOiB0cnVlLFxuICAgIGJvdW5kOiB0cnVlXG59KVxuXG5leHBvcnQgaW50ZXJmYWNlIElBY3Rpb25GYWN0b3J5IGV4dGVuZHMgQW5ub3RhdGlvbiwgUHJvcGVydHlEZWNvcmF0b3Ige1xuICAgIC8vIG5hbWVsZXNzIGFjdGlvbnNcbiAgICA8VCBleHRlbmRzIEZ1bmN0aW9uIHwgdW5kZWZpbmVkIHwgbnVsbD4oZm46IFQpOiBUXG4gICAgLy8gbmFtZWQgYWN0aW9uc1xuICAgIDxUIGV4dGVuZHMgRnVuY3Rpb24gfCB1bmRlZmluZWQgfCBudWxsPihuYW1lOiBzdHJpbmcsIGZuOiBUKTogVFxuXG4gICAgLy8gbmFtZWQgZGVjb3JhdG9yXG4gICAgKGN1c3RvbU5hbWU6IHN0cmluZyk6IFByb3BlcnR5RGVjb3JhdG9yICYgQW5ub3RhdGlvblxuXG4gICAgLy8gZGVjb3JhdG9yIChuYW1lIG5vIGxvbmdlciBzdXBwb3J0ZWQpXG4gICAgYm91bmQ6IEFubm90YXRpb24gJiBQcm9wZXJ0eURlY29yYXRvclxufVxuXG5mdW5jdGlvbiBjcmVhdGVBY3Rpb25GYWN0b3J5KGF1dG9BY3Rpb246IGJvb2xlYW4pOiBJQWN0aW9uRmFjdG9yeSB7XG4gICAgY29uc3QgcmVzOiBJQWN0aW9uRmFjdG9yeSA9IGZ1bmN0aW9uIGFjdGlvbihhcmcxLCBhcmcyPyk6IGFueSB7XG4gICAgICAgIC8vIGFjdGlvbihmbigpIHt9KVxuICAgICAgICBpZiAoaXNGdW5jdGlvbihhcmcxKSlcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVBY3Rpb24oYXJnMS5uYW1lIHx8IERFRkFVTFRfQUNUSU9OX05BTUUsIGFyZzEsIGF1dG9BY3Rpb24pXG4gICAgICAgIC8vIGFjdGlvbihcIm5hbWVcIiwgZm4oKSB7fSlcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24oYXJnMikpIHJldHVybiBjcmVhdGVBY3Rpb24oYXJnMSwgYXJnMiwgYXV0b0FjdGlvbilcbiAgICAgICAgLy8gQGFjdGlvblxuICAgICAgICBpZiAoaXNTdHJpbmdpc2goYXJnMikpIHtcbiAgICAgICAgICAgIHJldHVybiBzdG9yZUFubm90YXRpb24oYXJnMSwgYXJnMiwgYXV0b0FjdGlvbiA/IGF1dG9BY3Rpb25Bbm5vdGF0aW9uIDogYWN0aW9uQW5ub3RhdGlvbilcbiAgICAgICAgfVxuICAgICAgICAvLyBhY3Rpb24oXCJuYW1lXCIpICYgQGFjdGlvbihcIm5hbWVcIilcbiAgICAgICAgaWYgKGlzU3RyaW5naXNoKGFyZzEpKSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlRGVjb3JhdG9yQW5ub3RhdGlvbihcbiAgICAgICAgICAgICAgICBjcmVhdGVBY3Rpb25Bbm5vdGF0aW9uKGF1dG9BY3Rpb24gPyBBVVRPQUNUSU9OIDogQUNUSU9OLCB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IGFyZzEsXG4gICAgICAgICAgICAgICAgICAgIGF1dG9BY3Rpb25cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF9fREVWX18pIGRpZShcIkludmFsaWQgYXJndW1lbnRzIGZvciBgYWN0aW9uYFwiKVxuICAgIH0gYXMgSUFjdGlvbkZhY3RvcnlcbiAgICByZXR1cm4gcmVzXG59XG5cbmV4cG9ydCBjb25zdCBhY3Rpb246IElBY3Rpb25GYWN0b3J5ID0gY3JlYXRlQWN0aW9uRmFjdG9yeShmYWxzZSlcbk9iamVjdC5hc3NpZ24oYWN0aW9uLCBhY3Rpb25Bbm5vdGF0aW9uKVxuZXhwb3J0IGNvbnN0IGF1dG9BY3Rpb246IElBY3Rpb25GYWN0b3J5ID0gY3JlYXRlQWN0aW9uRmFjdG9yeSh0cnVlKVxuT2JqZWN0LmFzc2lnbihhdXRvQWN0aW9uLCBhdXRvQWN0aW9uQW5ub3RhdGlvbilcblxuYWN0aW9uLmJvdW5kID0gY3JlYXRlRGVjb3JhdG9yQW5ub3RhdGlvbihhY3Rpb25Cb3VuZEFubm90YXRpb24pXG5hdXRvQWN0aW9uLmJvdW5kID0gY3JlYXRlRGVjb3JhdG9yQW5ub3RhdGlvbihhdXRvQWN0aW9uQm91bmRBbm5vdGF0aW9uKVxuXG5leHBvcnQgZnVuY3Rpb24gcnVuSW5BY3Rpb248VD4oZm46ICgpID0+IFQpOiBUIHtcbiAgICByZXR1cm4gZXhlY3V0ZUFjdGlvbihmbi5uYW1lIHx8IERFRkFVTFRfQUNUSU9OX05BTUUsIGZhbHNlLCBmbiwgdGhpcywgdW5kZWZpbmVkKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNBY3Rpb24odGhpbmc6IGFueSkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKHRoaW5nKSAmJiB0aGluZy5pc01vYnhBY3Rpb24gPT09IHRydWVcbn1cbiIsImltcG9ydCB7XG4gICAgRU1QVFlfT0JKRUNULFxuICAgIElFcXVhbHNDb21wYXJlcixcbiAgICBJUmVhY3Rpb25EaXNwb3NlcixcbiAgICBJUmVhY3Rpb25QdWJsaWMsXG4gICAgTGFtYmRhLFxuICAgIFJlYWN0aW9uLFxuICAgIGFjdGlvbixcbiAgICBjb21wYXJlcixcbiAgICBnZXROZXh0SWQsXG4gICAgaXNBY3Rpb24sXG4gICAgaXNGdW5jdGlvbixcbiAgICBpc1BsYWluT2JqZWN0LFxuICAgIGRpZSxcbiAgICBhbGxvd1N0YXRlQ2hhbmdlc1xufSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5leHBvcnQgaW50ZXJmYWNlIElBdXRvcnVuT3B0aW9ucyB7XG4gICAgZGVsYXk/OiBudW1iZXJcbiAgICBuYW1lPzogc3RyaW5nXG4gICAgLyoqXG4gICAgICogRXhwZXJpbWVudGFsLlxuICAgICAqIFdhcm5zIGlmIHRoZSB2aWV3IGRvZXNuJ3QgdHJhY2sgb2JzZXJ2YWJsZXNcbiAgICAgKi9cbiAgICByZXF1aXJlc09ic2VydmFibGU/OiBib29sZWFuXG4gICAgc2NoZWR1bGVyPzogKGNhbGxiYWNrOiAoKSA9PiB2b2lkKSA9PiBhbnlcbiAgICBvbkVycm9yPzogKGVycm9yOiBhbnkpID0+IHZvaWRcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmFtZWQgcmVhY3RpdmUgdmlldyBhbmQga2VlcHMgaXQgYWxpdmUsIHNvIHRoYXQgdGhlIHZpZXcgaXMgYWx3YXlzXG4gKiB1cGRhdGVkIGlmIG9uZSBvZiB0aGUgZGVwZW5kZW5jaWVzIGNoYW5nZXMsIGV2ZW4gd2hlbiB0aGUgdmlldyBpcyBub3QgZnVydGhlciB1c2VkIGJ5IHNvbWV0aGluZyBlbHNlLlxuICogQHBhcmFtIHZpZXcgVGhlIHJlYWN0aXZlIHZpZXdcbiAqIEByZXR1cm5zIGRpc3Bvc2VyIGZ1bmN0aW9uLCB3aGljaCBjYW4gYmUgdXNlZCB0byBzdG9wIHRoZSB2aWV3IGZyb20gYmVpbmcgdXBkYXRlZCBpbiB0aGUgZnV0dXJlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gYXV0b3J1bihcbiAgICB2aWV3OiAocjogSVJlYWN0aW9uUHVibGljKSA9PiBhbnksXG4gICAgb3B0czogSUF1dG9ydW5PcHRpb25zID0gRU1QVFlfT0JKRUNUXG4pOiBJUmVhY3Rpb25EaXNwb3NlciB7XG4gICAgaWYgKF9fREVWX18pIHtcbiAgICAgICAgaWYgKCFpc0Z1bmN0aW9uKHZpZXcpKSBkaWUoXCJBdXRvcnVuIGV4cGVjdHMgYSBmdW5jdGlvbiBhcyBmaXJzdCBhcmd1bWVudFwiKVxuICAgICAgICBpZiAoaXNBY3Rpb24odmlldykpIGRpZShcIkF1dG9ydW4gZG9lcyBub3QgYWNjZXB0IGFjdGlvbnMgc2luY2UgYWN0aW9ucyBhcmUgdW50cmFja2FibGVcIilcbiAgICB9XG5cbiAgICBjb25zdCBuYW1lOiBzdHJpbmcgPVxuICAgICAgICBvcHRzPy5uYW1lID8/IChfX0RFVl9fID8gKHZpZXcgYXMgYW55KS5uYW1lIHx8IFwiQXV0b3J1bkBcIiArIGdldE5leHRJZCgpIDogXCJBdXRvcnVuXCIpXG4gICAgY29uc3QgcnVuU3luYyA9ICFvcHRzLnNjaGVkdWxlciAmJiAhb3B0cy5kZWxheVxuICAgIGxldCByZWFjdGlvbjogUmVhY3Rpb25cblxuICAgIGlmIChydW5TeW5jKSB7XG4gICAgICAgIC8vIG5vcm1hbCBhdXRvcnVuXG4gICAgICAgIHJlYWN0aW9uID0gbmV3IFJlYWN0aW9uKFxuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIGZ1bmN0aW9uICh0aGlzOiBSZWFjdGlvbikge1xuICAgICAgICAgICAgICAgIHRoaXMudHJhY2socmVhY3Rpb25SdW5uZXIpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb3B0cy5vbkVycm9yLFxuICAgICAgICAgICAgb3B0cy5yZXF1aXJlc09ic2VydmFibGVcbiAgICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHNjaGVkdWxlciA9IGNyZWF0ZVNjaGVkdWxlckZyb21PcHRpb25zKG9wdHMpXG4gICAgICAgIC8vIGRlYm91bmNlZCBhdXRvcnVuXG4gICAgICAgIGxldCBpc1NjaGVkdWxlZCA9IGZhbHNlXG5cbiAgICAgICAgcmVhY3Rpb24gPSBuZXcgUmVhY3Rpb24oXG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghaXNTY2hlZHVsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaXNTY2hlZHVsZWQgPSB0cnVlXG4gICAgICAgICAgICAgICAgICAgIHNjaGVkdWxlcigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpc1NjaGVkdWxlZCA9IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXJlYWN0aW9uLmlzRGlzcG9zZWRfKSByZWFjdGlvbi50cmFjayhyZWFjdGlvblJ1bm5lcilcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb3B0cy5vbkVycm9yLFxuICAgICAgICAgICAgb3B0cy5yZXF1aXJlc09ic2VydmFibGVcbiAgICAgICAgKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlYWN0aW9uUnVubmVyKCkge1xuICAgICAgICB2aWV3KHJlYWN0aW9uKVxuICAgIH1cblxuICAgIHJlYWN0aW9uLnNjaGVkdWxlXygpXG4gICAgcmV0dXJuIHJlYWN0aW9uLmdldERpc3Bvc2VyXygpXG59XG5cbmV4cG9ydCB0eXBlIElSZWFjdGlvbk9wdGlvbnM8VD4gPSBJQXV0b3J1bk9wdGlvbnMgJiB7XG4gICAgZmlyZUltbWVkaWF0ZWx5PzogYm9vbGVhblxuICAgIGVxdWFscz86IElFcXVhbHNDb21wYXJlcjxUPlxufVxuXG5jb25zdCBydW4gPSAoZjogTGFtYmRhKSA9PiBmKClcblxuZnVuY3Rpb24gY3JlYXRlU2NoZWR1bGVyRnJvbU9wdGlvbnMob3B0czogSUF1dG9ydW5PcHRpb25zKSB7XG4gICAgcmV0dXJuIG9wdHMuc2NoZWR1bGVyXG4gICAgICAgID8gb3B0cy5zY2hlZHVsZXJcbiAgICAgICAgOiBvcHRzLmRlbGF5XG4gICAgICAgID8gKGY6IExhbWJkYSkgPT4gc2V0VGltZW91dChmLCBvcHRzLmRlbGF5ISlcbiAgICAgICAgOiBydW5cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlYWN0aW9uPFQ+KFxuICAgIGV4cHJlc3Npb246IChyOiBJUmVhY3Rpb25QdWJsaWMpID0+IFQsXG4gICAgZWZmZWN0OiAoYXJnOiBULCBwcmV2OiBULCByOiBJUmVhY3Rpb25QdWJsaWMpID0+IHZvaWQsXG4gICAgb3B0czogSVJlYWN0aW9uT3B0aW9uczxUPiA9IEVNUFRZX09CSkVDVFxuKTogSVJlYWN0aW9uRGlzcG9zZXIge1xuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICAgIGlmICghaXNGdW5jdGlvbihleHByZXNzaW9uKSB8fCAhaXNGdW5jdGlvbihlZmZlY3QpKVxuICAgICAgICAgICAgZGllKFwiRmlyc3QgYW5kIHNlY29uZCBhcmd1bWVudCB0byByZWFjdGlvbiBzaG91bGQgYmUgZnVuY3Rpb25zXCIpXG4gICAgICAgIGlmICghaXNQbGFpbk9iamVjdChvcHRzKSkgZGllKFwiVGhpcmQgYXJndW1lbnQgb2YgcmVhY3Rpb25zIHNob3VsZCBiZSBhbiBvYmplY3RcIilcbiAgICB9XG4gICAgY29uc3QgbmFtZSA9IG9wdHMubmFtZSA/PyAoX19ERVZfXyA/IFwiUmVhY3Rpb25AXCIgKyBnZXROZXh0SWQoKSA6IFwiUmVhY3Rpb25cIilcbiAgICBjb25zdCBlZmZlY3RBY3Rpb24gPSBhY3Rpb24oXG4gICAgICAgIG5hbWUsXG4gICAgICAgIG9wdHMub25FcnJvciA/IHdyYXBFcnJvckhhbmRsZXIob3B0cy5vbkVycm9yLCBlZmZlY3QpIDogZWZmZWN0XG4gICAgKVxuICAgIGNvbnN0IHJ1blN5bmMgPSAhb3B0cy5zY2hlZHVsZXIgJiYgIW9wdHMuZGVsYXlcbiAgICBjb25zdCBzY2hlZHVsZXIgPSBjcmVhdGVTY2hlZHVsZXJGcm9tT3B0aW9ucyhvcHRzKVxuXG4gICAgbGV0IGZpcnN0VGltZSA9IHRydWVcbiAgICBsZXQgaXNTY2hlZHVsZWQgPSBmYWxzZVxuICAgIGxldCB2YWx1ZTogVFxuICAgIGxldCBvbGRWYWx1ZTogVCA9IHVuZGVmaW5lZCBhcyBhbnkgLy8gb25seSBhbiBpc3N1ZSB3aXRoIGZpcmVJbW1lZGlhdGVseVxuXG4gICAgY29uc3QgZXF1YWxzOiBJRXF1YWxzQ29tcGFyZXI8VD4gPSAob3B0cyBhcyBhbnkpLmNvbXBhcmVTdHJ1Y3R1cmFsXG4gICAgICAgID8gY29tcGFyZXIuc3RydWN0dXJhbFxuICAgICAgICA6IG9wdHMuZXF1YWxzIHx8IGNvbXBhcmVyLmRlZmF1bHRcblxuICAgIGNvbnN0IHIgPSBuZXcgUmVhY3Rpb24oXG4gICAgICAgIG5hbWUsXG4gICAgICAgICgpID0+IHtcbiAgICAgICAgICAgIGlmIChmaXJzdFRpbWUgfHwgcnVuU3luYykge1xuICAgICAgICAgICAgICAgIHJlYWN0aW9uUnVubmVyKClcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIWlzU2NoZWR1bGVkKSB7XG4gICAgICAgICAgICAgICAgaXNTY2hlZHVsZWQgPSB0cnVlXG4gICAgICAgICAgICAgICAgc2NoZWR1bGVyIShyZWFjdGlvblJ1bm5lcilcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgb3B0cy5vbkVycm9yLFxuICAgICAgICBvcHRzLnJlcXVpcmVzT2JzZXJ2YWJsZVxuICAgIClcblxuICAgIGZ1bmN0aW9uIHJlYWN0aW9uUnVubmVyKCkge1xuICAgICAgICBpc1NjaGVkdWxlZCA9IGZhbHNlXG4gICAgICAgIGlmIChyLmlzRGlzcG9zZWRfKSByZXR1cm5cbiAgICAgICAgbGV0IGNoYW5nZWQ6IGJvb2xlYW4gPSBmYWxzZVxuICAgICAgICByLnRyYWNrKCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5leHRWYWx1ZSA9IGFsbG93U3RhdGVDaGFuZ2VzKGZhbHNlLCAoKSA9PiBleHByZXNzaW9uKHIpKVxuICAgICAgICAgICAgY2hhbmdlZCA9IGZpcnN0VGltZSB8fCAhZXF1YWxzKHZhbHVlLCBuZXh0VmFsdWUpXG4gICAgICAgICAgICBvbGRWYWx1ZSA9IHZhbHVlXG4gICAgICAgICAgICB2YWx1ZSA9IG5leHRWYWx1ZVxuICAgICAgICB9KVxuICAgICAgICBpZiAoZmlyc3RUaW1lICYmIG9wdHMuZmlyZUltbWVkaWF0ZWx5ISkgZWZmZWN0QWN0aW9uKHZhbHVlLCBvbGRWYWx1ZSwgcilcbiAgICAgICAgZWxzZSBpZiAoIWZpcnN0VGltZSAmJiBjaGFuZ2VkKSBlZmZlY3RBY3Rpb24odmFsdWUsIG9sZFZhbHVlLCByKVxuICAgICAgICBmaXJzdFRpbWUgPSBmYWxzZVxuICAgIH1cblxuICAgIHIuc2NoZWR1bGVfKClcbiAgICByZXR1cm4gci5nZXREaXNwb3Nlcl8oKVxufVxuXG5mdW5jdGlvbiB3cmFwRXJyb3JIYW5kbGVyKGVycm9ySGFuZGxlciwgYmFzZUZuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBiYXNlRm4uYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBlcnJvckhhbmRsZXIuY2FsbCh0aGlzLCBlKVxuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHtcbiAgICBJQ29tcHV0ZWRWYWx1ZSxcbiAgICBJT2JzZXJ2YWJsZSxcbiAgICBJT2JzZXJ2YWJsZUFycmF5LFxuICAgIExhbWJkYSxcbiAgICBPYnNlcnZhYmxlTWFwLFxuICAgIGdldEF0b20sXG4gICAgT2JzZXJ2YWJsZVNldCxcbiAgICBpc0Z1bmN0aW9uLFxuICAgIElPYnNlcnZhYmxlVmFsdWVcbn0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuY29uc3QgT05fQkVDT01FX09CU0VSVkVEID0gXCJvbkJPXCJcbmNvbnN0IE9OX0JFQ09NRV9VTk9CU0VSVkVEID0gXCJvbkJVT1wiXG5cbmV4cG9ydCBmdW5jdGlvbiBvbkJlY29tZU9ic2VydmVkKFxuICAgIHZhbHVlOlxuICAgICAgICB8IElPYnNlcnZhYmxlXG4gICAgICAgIHwgSUNvbXB1dGVkVmFsdWU8YW55PlxuICAgICAgICB8IElPYnNlcnZhYmxlQXJyYXk8YW55PlxuICAgICAgICB8IE9ic2VydmFibGVNYXA8YW55LCBhbnk+XG4gICAgICAgIHwgT2JzZXJ2YWJsZVNldDxhbnk+XG4gICAgICAgIHwgSU9ic2VydmFibGVWYWx1ZTxhbnk+LFxuICAgIGxpc3RlbmVyOiBMYW1iZGFcbik6IExhbWJkYVxuZXhwb3J0IGZ1bmN0aW9uIG9uQmVjb21lT2JzZXJ2ZWQ8SywgViA9IGFueT4oXG4gICAgdmFsdWU6IE9ic2VydmFibGVNYXA8SywgVj4gfCBPYmplY3QsXG4gICAgcHJvcGVydHk6IEssXG4gICAgbGlzdGVuZXI6IExhbWJkYVxuKTogTGFtYmRhXG5leHBvcnQgZnVuY3Rpb24gb25CZWNvbWVPYnNlcnZlZCh0aGluZywgYXJnMiwgYXJnMz8pOiBMYW1iZGEge1xuICAgIHJldHVybiBpbnRlcmNlcHRIb29rKE9OX0JFQ09NRV9PQlNFUlZFRCwgdGhpbmcsIGFyZzIsIGFyZzMpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvbkJlY29tZVVub2JzZXJ2ZWQoXG4gICAgdmFsdWU6XG4gICAgICAgIHwgSU9ic2VydmFibGVcbiAgICAgICAgfCBJQ29tcHV0ZWRWYWx1ZTxhbnk+XG4gICAgICAgIHwgSU9ic2VydmFibGVBcnJheTxhbnk+XG4gICAgICAgIHwgT2JzZXJ2YWJsZU1hcDxhbnksIGFueT5cbiAgICAgICAgfCBPYnNlcnZhYmxlU2V0PGFueT5cbiAgICAgICAgfCBJT2JzZXJ2YWJsZVZhbHVlPGFueT4sXG4gICAgbGlzdGVuZXI6IExhbWJkYVxuKTogTGFtYmRhXG5leHBvcnQgZnVuY3Rpb24gb25CZWNvbWVVbm9ic2VydmVkPEssIFYgPSBhbnk+KFxuICAgIHZhbHVlOiBPYnNlcnZhYmxlTWFwPEssIFY+IHwgT2JqZWN0LFxuICAgIHByb3BlcnR5OiBLLFxuICAgIGxpc3RlbmVyOiBMYW1iZGFcbik6IExhbWJkYVxuZXhwb3J0IGZ1bmN0aW9uIG9uQmVjb21lVW5vYnNlcnZlZCh0aGluZywgYXJnMiwgYXJnMz8pOiBMYW1iZGEge1xuICAgIHJldHVybiBpbnRlcmNlcHRIb29rKE9OX0JFQ09NRV9VTk9CU0VSVkVELCB0aGluZywgYXJnMiwgYXJnMylcbn1cblxuZnVuY3Rpb24gaW50ZXJjZXB0SG9vayhob29rOiBcIm9uQk9cIiB8IFwib25CVU9cIiwgdGhpbmcsIGFyZzIsIGFyZzMpIHtcbiAgICBjb25zdCBhdG9tOiBJT2JzZXJ2YWJsZSA9XG4gICAgICAgIHR5cGVvZiBhcmczID09PSBcImZ1bmN0aW9uXCIgPyBnZXRBdG9tKHRoaW5nLCBhcmcyKSA6IChnZXRBdG9tKHRoaW5nKSBhcyBhbnkpXG4gICAgY29uc3QgY2IgPSBpc0Z1bmN0aW9uKGFyZzMpID8gYXJnMyA6IGFyZzJcbiAgICBjb25zdCBsaXN0ZW5lcnNLZXkgPSBgJHtob29rfUxgIGFzIFwib25CT0xcIiB8IFwib25CVU9MXCJcblxuICAgIGlmIChhdG9tW2xpc3RlbmVyc0tleV0pIHtcbiAgICAgICAgYXRvbVtsaXN0ZW5lcnNLZXldIS5hZGQoY2IpXG4gICAgfSBlbHNlIHtcbiAgICAgICAgYXRvbVtsaXN0ZW5lcnNLZXldID0gbmV3IFNldDxMYW1iZGE+KFtjYl0pXG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3QgaG9va0xpc3RlbmVycyA9IGF0b21bbGlzdGVuZXJzS2V5XVxuICAgICAgICBpZiAoaG9va0xpc3RlbmVycykge1xuICAgICAgICAgICAgaG9va0xpc3RlbmVycy5kZWxldGUoY2IpXG4gICAgICAgICAgICBpZiAoaG9va0xpc3RlbmVycy5zaXplID09PSAwKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGF0b21bbGlzdGVuZXJzS2V5XVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgZ2xvYmFsU3RhdGUsIGlzb2xhdGVHbG9iYWxTdGF0ZSwgc2V0UmVhY3Rpb25TY2hlZHVsZXIgfSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5jb25zdCBORVZFUiA9IFwibmV2ZXJcIlxuY29uc3QgQUxXQVlTID0gXCJhbHdheXNcIlxuY29uc3QgT0JTRVJWRUQgPSBcIm9ic2VydmVkXCJcbi8vIGNvbnN0IElGX0FWQUlMQUJMRSA9IFwiaWZhdmFpbGFibGVcIlxuXG5leHBvcnQgZnVuY3Rpb24gY29uZmlndXJlKG9wdGlvbnM6IHtcbiAgICBlbmZvcmNlQWN0aW9ucz86IFwibmV2ZXJcIiB8IFwiYWx3YXlzXCIgfCBcIm9ic2VydmVkXCJcbiAgICBjb21wdXRlZFJlcXVpcmVzUmVhY3Rpb24/OiBib29sZWFuXG4gICAgLyoqXG4gICAgICogV2FybiBpZiB5b3UgdHJ5IHRvIGNyZWF0ZSB0byBkZXJpdmF0aW9uIC8gcmVhY3RpdmUgY29udGV4dCB3aXRob3V0IGFjY2Vzc2luZyBhbnkgb2JzZXJ2YWJsZS5cbiAgICAgKi9cbiAgICByZWFjdGlvblJlcXVpcmVzT2JzZXJ2YWJsZT86IGJvb2xlYW5cbiAgICAvKipcbiAgICAgKiBXYXJuIGlmIG9ic2VydmFibGVzIGFyZSBhY2Nlc3NlZCBvdXRzaWRlIGEgcmVhY3RpdmUgY29udGV4dFxuICAgICAqL1xuICAgIG9ic2VydmFibGVSZXF1aXJlc1JlYWN0aW9uPzogYm9vbGVhblxuICAgIGlzb2xhdGVHbG9iYWxTdGF0ZT86IGJvb2xlYW5cbiAgICBkaXNhYmxlRXJyb3JCb3VuZGFyaWVzPzogYm9vbGVhblxuICAgIHNhZmVEZXNjcmlwdG9ycz86IGJvb2xlYW5cbiAgICByZWFjdGlvblNjaGVkdWxlcj86IChmOiAoKSA9PiB2b2lkKSA9PiB2b2lkXG4gICAgdXNlUHJveGllcz86IFwiYWx3YXlzXCIgfCBcIm5ldmVyXCIgfCBcImlmYXZhaWxhYmxlXCJcbn0pOiB2b2lkIHtcbiAgICBpZiAob3B0aW9ucy5pc29sYXRlR2xvYmFsU3RhdGUgPT09IHRydWUpIHtcbiAgICAgICAgaXNvbGF0ZUdsb2JhbFN0YXRlKClcbiAgICB9XG4gICAgY29uc3QgeyB1c2VQcm94aWVzLCBlbmZvcmNlQWN0aW9ucyB9ID0gb3B0aW9uc1xuICAgIGlmICh1c2VQcm94aWVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZ2xvYmFsU3RhdGUudXNlUHJveGllcyA9XG4gICAgICAgICAgICB1c2VQcm94aWVzID09PSBBTFdBWVNcbiAgICAgICAgICAgICAgICA/IHRydWVcbiAgICAgICAgICAgICAgICA6IHVzZVByb3hpZXMgPT09IE5FVkVSXG4gICAgICAgICAgICAgICAgPyBmYWxzZVxuICAgICAgICAgICAgICAgIDogdHlwZW9mIFByb3h5ICE9PSBcInVuZGVmaW5lZFwiXG4gICAgfVxuICAgIGlmICh1c2VQcm94aWVzID09PSBcImlmYXZhaWxhYmxlXCIpIGdsb2JhbFN0YXRlLnZlcmlmeVByb3hpZXMgPSB0cnVlXG4gICAgaWYgKGVuZm9yY2VBY3Rpb25zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc3QgZWEgPSBlbmZvcmNlQWN0aW9ucyA9PT0gQUxXQVlTID8gQUxXQVlTIDogZW5mb3JjZUFjdGlvbnMgPT09IE9CU0VSVkVEXG4gICAgICAgIGdsb2JhbFN0YXRlLmVuZm9yY2VBY3Rpb25zID0gZWFcbiAgICAgICAgZ2xvYmFsU3RhdGUuYWxsb3dTdGF0ZUNoYW5nZXMgPSBlYSA9PT0gdHJ1ZSB8fCBlYSA9PT0gQUxXQVlTID8gZmFsc2UgOiB0cnVlXG4gICAgfVxuICAgIDtbXG4gICAgICAgIFwiY29tcHV0ZWRSZXF1aXJlc1JlYWN0aW9uXCIsXG4gICAgICAgIFwicmVhY3Rpb25SZXF1aXJlc09ic2VydmFibGVcIixcbiAgICAgICAgXCJvYnNlcnZhYmxlUmVxdWlyZXNSZWFjdGlvblwiLFxuICAgICAgICBcImRpc2FibGVFcnJvckJvdW5kYXJpZXNcIixcbiAgICAgICAgXCJzYWZlRGVzY3JpcHRvcnNcIlxuICAgIF0uZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICBpZiAoa2V5IGluIG9wdGlvbnMpIGdsb2JhbFN0YXRlW2tleV0gPSAhIW9wdGlvbnNba2V5XVxuICAgIH0pXG4gICAgZ2xvYmFsU3RhdGUuYWxsb3dTdGF0ZVJlYWRzID0gIWdsb2JhbFN0YXRlLm9ic2VydmFibGVSZXF1aXJlc1JlYWN0aW9uXG4gICAgaWYgKF9fREVWX18gJiYgZ2xvYmFsU3RhdGUuZGlzYWJsZUVycm9yQm91bmRhcmllcyA9PT0gdHJ1ZSkge1xuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICBcIldBUk5JTkc6IERlYnVnIGZlYXR1cmUgb25seS4gTW9iWCB3aWxsIE5PVCByZWNvdmVyIGZyb20gZXJyb3JzIHdoZW4gYGRpc2FibGVFcnJvckJvdW5kYXJpZXNgIGlzIGVuYWJsZWQuXCJcbiAgICAgICAgKVxuICAgIH1cbiAgICBpZiAob3B0aW9ucy5yZWFjdGlvblNjaGVkdWxlcikge1xuICAgICAgICBzZXRSZWFjdGlvblNjaGVkdWxlcihvcHRpb25zLnJlYWN0aW9uU2NoZWR1bGVyKVxuICAgIH1cbn1cbiIsImltcG9ydCB7XG4gICAgQ3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnMsXG4gICAgaXNPYnNlcnZhYmxlTWFwLFxuICAgIEFubm90YXRpb25zTWFwLFxuICAgIHN0YXJ0QmF0Y2gsXG4gICAgZW5kQmF0Y2gsXG4gICAgYXNPYnNlcnZhYmxlT2JqZWN0LFxuICAgIGlzUGxhaW5PYmplY3QsXG4gICAgT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uLFxuICAgIGlzT2JzZXJ2YWJsZSxcbiAgICBkaWUsXG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyxcbiAgICAkbW9ieCxcbiAgICBvd25LZXlzXG59IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbmV4cG9ydCBmdW5jdGlvbiBleHRlbmRPYnNlcnZhYmxlPEEgZXh0ZW5kcyBPYmplY3QsIEIgZXh0ZW5kcyBPYmplY3Q+KFxuICAgIHRhcmdldDogQSxcbiAgICBwcm9wZXJ0aWVzOiBCLFxuICAgIGFubm90YXRpb25zPzogQW5ub3RhdGlvbnNNYXA8QiwgbmV2ZXI+LFxuICAgIG9wdGlvbnM/OiBDcmVhdGVPYnNlcnZhYmxlT3B0aW9uc1xuKTogQSAmIEIge1xuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gNCkgZGllKFwiJ2V4dGVuZE9ic2VydmFibGUnIGV4cGVjdGVkIDItNCBhcmd1bWVudHNcIilcbiAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXQgIT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICBkaWUoXCInZXh0ZW5kT2JzZXJ2YWJsZScgZXhwZWN0cyBhbiBvYmplY3QgYXMgZmlyc3QgYXJndW1lbnRcIilcbiAgICAgICAgaWYgKGlzT2JzZXJ2YWJsZU1hcCh0YXJnZXQpKVxuICAgICAgICAgICAgZGllKFwiJ2V4dGVuZE9ic2VydmFibGUnIHNob3VsZCBub3QgYmUgdXNlZCBvbiBtYXBzLCB1c2UgbWFwLm1lcmdlIGluc3RlYWRcIilcbiAgICAgICAgaWYgKCFpc1BsYWluT2JqZWN0KHByb3BlcnRpZXMpKVxuICAgICAgICAgICAgZGllKGAnZXh0ZW5kT2JzZXJ2YWJlJyBvbmx5IGFjY2VwdHMgcGxhaW4gb2JqZWN0cyBhcyBzZWNvbmQgYXJndW1lbnRgKVxuICAgICAgICBpZiAoaXNPYnNlcnZhYmxlKHByb3BlcnRpZXMpIHx8IGlzT2JzZXJ2YWJsZShhbm5vdGF0aW9ucykpXG4gICAgICAgICAgICBkaWUoYEV4dGVuZGluZyBhbiBvYmplY3Qgd2l0aCBhbm90aGVyIG9ic2VydmFibGUgKG9iamVjdCkgaXMgbm90IHN1cHBvcnRlZGApXG4gICAgfVxuICAgIC8vIFB1bGwgZGVzY3JpcHRvcnMgZmlyc3QsIHNvIHdlIGRvbid0IGhhdmUgdG8gZGVhbCB3aXRoIHByb3BzIGFkZGVkIGJ5IGFkbWluaXN0cmF0aW9uICgkbW9ieClcbiAgICBjb25zdCBkZXNjcmlwdG9ycyA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMocHJvcGVydGllcylcblxuICAgIGNvbnN0IGFkbTogT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uID0gYXNPYnNlcnZhYmxlT2JqZWN0KHRhcmdldCwgb3B0aW9ucylbJG1vYnhdXG4gICAgc3RhcnRCYXRjaCgpXG4gICAgdHJ5IHtcbiAgICAgICAgb3duS2V5cyhkZXNjcmlwdG9ycykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgICAgYWRtLmV4dGVuZF8oXG4gICAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0b3JzW2tleSBhcyBhbnldLFxuICAgICAgICAgICAgICAgIC8vIG11c3QgcGFzcyBcInVuZGVmaW5lZFwiIGZvciB7IGtleTogdW5kZWZpbmVkIH1cbiAgICAgICAgICAgICAgICAhYW5ub3RhdGlvbnMgPyB0cnVlIDoga2V5IGluIGFubm90YXRpb25zID8gYW5ub3RhdGlvbnNba2V5XSA6IHRydWVcbiAgICAgICAgICAgIClcbiAgICAgICAgfSlcbiAgICB9IGZpbmFsbHkge1xuICAgICAgICBlbmRCYXRjaCgpXG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQgYXMgYW55XG59XG4iLCJpbXBvcnQgeyBJRGVwVHJlZU5vZGUsIGdldEF0b20sIGdldE9ic2VydmVycywgaGFzT2JzZXJ2ZXJzIH0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuZXhwb3J0IGludGVyZmFjZSBJRGVwZW5kZW5jeVRyZWUge1xuICAgIG5hbWU6IHN0cmluZ1xuICAgIGRlcGVuZGVuY2llcz86IElEZXBlbmRlbmN5VHJlZVtdXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSU9ic2VydmVyVHJlZSB7XG4gICAgbmFtZTogc3RyaW5nXG4gICAgb2JzZXJ2ZXJzPzogSU9ic2VydmVyVHJlZVtdXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXREZXBlbmRlbmN5VHJlZSh0aGluZzogYW55LCBwcm9wZXJ0eT86IHN0cmluZyk6IElEZXBlbmRlbmN5VHJlZSB7XG4gICAgcmV0dXJuIG5vZGVUb0RlcGVuZGVuY3lUcmVlKGdldEF0b20odGhpbmcsIHByb3BlcnR5KSlcbn1cblxuZnVuY3Rpb24gbm9kZVRvRGVwZW5kZW5jeVRyZWUobm9kZTogSURlcFRyZWVOb2RlKTogSURlcGVuZGVuY3lUcmVlIHtcbiAgICBjb25zdCByZXN1bHQ6IElEZXBlbmRlbmN5VHJlZSA9IHtcbiAgICAgICAgbmFtZTogbm9kZS5uYW1lX1xuICAgIH1cbiAgICBpZiAobm9kZS5vYnNlcnZpbmdfICYmIG5vZGUub2JzZXJ2aW5nXy5sZW5ndGggPiAwKVxuICAgICAgICByZXN1bHQuZGVwZW5kZW5jaWVzID0gdW5pcXVlKG5vZGUub2JzZXJ2aW5nXykubWFwKG5vZGVUb0RlcGVuZGVuY3lUcmVlKVxuICAgIHJldHVybiByZXN1bHRcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE9ic2VydmVyVHJlZSh0aGluZzogYW55LCBwcm9wZXJ0eT86IHN0cmluZyk6IElPYnNlcnZlclRyZWUge1xuICAgIHJldHVybiBub2RlVG9PYnNlcnZlclRyZWUoZ2V0QXRvbSh0aGluZywgcHJvcGVydHkpKVxufVxuXG5mdW5jdGlvbiBub2RlVG9PYnNlcnZlclRyZWUobm9kZTogSURlcFRyZWVOb2RlKTogSU9ic2VydmVyVHJlZSB7XG4gICAgY29uc3QgcmVzdWx0OiBJT2JzZXJ2ZXJUcmVlID0ge1xuICAgICAgICBuYW1lOiBub2RlLm5hbWVfXG4gICAgfVxuICAgIGlmIChoYXNPYnNlcnZlcnMobm9kZSBhcyBhbnkpKVxuICAgICAgICByZXN1bHQub2JzZXJ2ZXJzID0gQXJyYXkuZnJvbSg8YW55PmdldE9ic2VydmVycyhub2RlIGFzIGFueSkpLm1hcCg8YW55Pm5vZGVUb09ic2VydmVyVHJlZSlcbiAgICByZXR1cm4gcmVzdWx0XG59XG5cbmZ1bmN0aW9uIHVuaXF1ZTxUPihsaXN0OiBUW10pOiBUW10ge1xuICAgIHJldHVybiBBcnJheS5mcm9tKG5ldyBTZXQobGlzdCkpXG59XG4iLCJpbXBvcnQge1xuICAgIGFjdGlvbixcbiAgICBub29wLFxuICAgIGRpZSxcbiAgICBpc0Z1bmN0aW9uLFxuICAgIEFubm90YXRpb24sXG4gICAgaXNTdHJpbmdpc2gsXG4gICAgc3RvcmVBbm5vdGF0aW9uLFxuICAgIGNyZWF0ZUZsb3dBbm5vdGF0aW9uLFxuICAgIGNyZWF0ZURlY29yYXRvckFubm90YXRpb25cbn0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuZXhwb3J0IGNvbnN0IEZMT1cgPSBcImZsb3dcIlxuXG5sZXQgZ2VuZXJhdG9ySWQgPSAwXG5cbmV4cG9ydCBmdW5jdGlvbiBGbG93Q2FuY2VsbGF0aW9uRXJyb3IoKSB7XG4gICAgdGhpcy5tZXNzYWdlID0gXCJGTE9XX0NBTkNFTExFRFwiXG59XG5GbG93Q2FuY2VsbGF0aW9uRXJyb3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpXG5cbmV4cG9ydCBmdW5jdGlvbiBpc0Zsb3dDYW5jZWxsYXRpb25FcnJvcihlcnJvcjogRXJyb3IpIHtcbiAgICByZXR1cm4gZXJyb3IgaW5zdGFuY2VvZiBGbG93Q2FuY2VsbGF0aW9uRXJyb3Jcbn1cblxuZXhwb3J0IHR5cGUgQ2FuY2VsbGFibGVQcm9taXNlPFQ+ID0gUHJvbWlzZTxUPiAmIHsgY2FuY2VsKCk6IHZvaWQgfVxuXG5pbnRlcmZhY2UgRmxvdyBleHRlbmRzIEFubm90YXRpb24sIFByb3BlcnR5RGVjb3JhdG9yIHtcbiAgICA8UiwgQXJncyBleHRlbmRzIGFueVtdPihcbiAgICAgICAgZ2VuZXJhdG9yOiAoLi4uYXJnczogQXJncykgPT4gR2VuZXJhdG9yPGFueSwgUiwgYW55PiB8IEFzeW5jR2VuZXJhdG9yPGFueSwgUiwgYW55PlxuICAgICk6ICguLi5hcmdzOiBBcmdzKSA9PiBDYW5jZWxsYWJsZVByb21pc2U8Uj5cbiAgICBib3VuZDogQW5ub3RhdGlvbiAmIFByb3BlcnR5RGVjb3JhdG9yXG59XG5cbmNvbnN0IGZsb3dBbm5vdGF0aW9uID0gY3JlYXRlRmxvd0Fubm90YXRpb24oXCJmbG93XCIpXG5jb25zdCBmbG93Qm91bmRBbm5vdGF0aW9uID0gY3JlYXRlRmxvd0Fubm90YXRpb24oXCJmbG93LmJvdW5kXCIsIHsgYm91bmQ6IHRydWUgfSlcblxuZXhwb3J0IGNvbnN0IGZsb3c6IEZsb3cgPSBPYmplY3QuYXNzaWduKFxuICAgIGZ1bmN0aW9uIGZsb3coYXJnMSwgYXJnMj8pIHtcbiAgICAgICAgLy8gQGZsb3dcbiAgICAgICAgaWYgKGlzU3RyaW5naXNoKGFyZzIpKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RvcmVBbm5vdGF0aW9uKGFyZzEsIGFyZzIsIGZsb3dBbm5vdGF0aW9uKVxuICAgICAgICB9XG4gICAgICAgIC8vIGZsb3coZm4pXG4gICAgICAgIGlmIChfX0RFVl9fICYmIGFyZ3VtZW50cy5sZW5ndGggIT09IDEpXG4gICAgICAgICAgICBkaWUoYEZsb3cgZXhwZWN0cyBzaW5nbGUgYXJndW1lbnQgd2l0aCBnZW5lcmF0b3IgZnVuY3Rpb25gKVxuICAgICAgICBjb25zdCBnZW5lcmF0b3IgPSBhcmcxXG4gICAgICAgIGNvbnN0IG5hbWUgPSBnZW5lcmF0b3IubmFtZSB8fCBcIjx1bm5hbWVkIGZsb3c+XCJcblxuICAgICAgICAvLyBJbXBsZW1lbnRhdGlvbiBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vdGovY28vYmxvYi9tYXN0ZXIvaW5kZXguanNcbiAgICAgICAgY29uc3QgcmVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY29uc3QgY3R4ID0gdGhpc1xuICAgICAgICAgICAgY29uc3QgYXJncyA9IGFyZ3VtZW50c1xuICAgICAgICAgICAgY29uc3QgcnVuSWQgPSArK2dlbmVyYXRvcklkXG4gICAgICAgICAgICBjb25zdCBnZW4gPSBhY3Rpb24oYCR7bmFtZX0gLSBydW5pZDogJHtydW5JZH0gLSBpbml0YCwgZ2VuZXJhdG9yKS5hcHBseShjdHgsIGFyZ3MpXG4gICAgICAgICAgICBsZXQgcmVqZWN0b3I6IChlcnJvcjogYW55KSA9PiB2b2lkXG4gICAgICAgICAgICBsZXQgcGVuZGluZ1Byb21pc2U6IENhbmNlbGxhYmxlUHJvbWlzZTxhbnk+IHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkXG5cbiAgICAgICAgICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgbGV0IHN0ZXBJZCA9IDBcbiAgICAgICAgICAgICAgICByZWplY3RvciA9IHJlamVjdFxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gb25GdWxmaWxsZWQocmVzOiBhbnkpIHtcbiAgICAgICAgICAgICAgICAgICAgcGVuZGluZ1Byb21pc2UgPSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJldFxuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0ID0gYWN0aW9uKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAke25hbWV9IC0gcnVuaWQ6ICR7cnVuSWR9IC0geWllbGQgJHtzdGVwSWQrK31gLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlbi5uZXh0XG4gICAgICAgICAgICAgICAgICAgICAgICApLmNhbGwoZ2VuLCByZXMpXG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoZSlcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIG5leHQocmV0KVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIG9uUmVqZWN0ZWQoZXJyOiBhbnkpIHtcbiAgICAgICAgICAgICAgICAgICAgcGVuZGluZ1Byb21pc2UgPSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJldFxuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0ID0gYWN0aW9uKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAke25hbWV9IC0gcnVuaWQ6ICR7cnVuSWR9IC0geWllbGQgJHtzdGVwSWQrK31gLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlbi50aHJvdyFcbiAgICAgICAgICAgICAgICAgICAgICAgICkuY2FsbChnZW4sIGVycilcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChlKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG5leHQocmV0KVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIG5leHQocmV0OiBhbnkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24ocmV0Py50aGVuKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW4gYXN5bmMgaXRlcmF0b3JcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldC50aGVuKG5leHQsIHJlamVjdClcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXQuZG9uZSkgcmV0dXJuIHJlc29sdmUocmV0LnZhbHVlKVxuICAgICAgICAgICAgICAgICAgICBwZW5kaW5nUHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShyZXQudmFsdWUpIGFzIGFueVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGVuZGluZ1Byb21pc2UhLnRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgb25GdWxmaWxsZWQodW5kZWZpbmVkKSAvLyBraWNrIG9mZiB0aGUgcHJvY2Vzc1xuICAgICAgICAgICAgfSkgYXMgYW55XG5cbiAgICAgICAgICAgIHByb21pc2UuY2FuY2VsID0gYWN0aW9uKGAke25hbWV9IC0gcnVuaWQ6ICR7cnVuSWR9IC0gY2FuY2VsYCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwZW5kaW5nUHJvbWlzZSkgY2FuY2VsUHJvbWlzZShwZW5kaW5nUHJvbWlzZSlcbiAgICAgICAgICAgICAgICAgICAgLy8gRmluYWxseSBibG9jayBjYW4gcmV0dXJuIChvciB5aWVsZCkgc3R1ZmYuLlxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXMgPSBnZW4ucmV0dXJuISh1bmRlZmluZWQgYXMgYW55KVxuICAgICAgICAgICAgICAgICAgICAvLyBlYXQgYW55dGhpbmcgdGhhdCBwcm9taXNlIHdvdWxkIGRvLCBpdCdzIGNhbmNlbGxlZCFcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeWllbGRlZFByb21pc2UgPSBQcm9taXNlLnJlc29sdmUocmVzLnZhbHVlKVxuICAgICAgICAgICAgICAgICAgICB5aWVsZGVkUHJvbWlzZS50aGVuKG5vb3AsIG5vb3ApXG4gICAgICAgICAgICAgICAgICAgIGNhbmNlbFByb21pc2UoeWllbGRlZFByb21pc2UpIC8vIG1heWJlIGl0IGNhbiBiZSBjYW5jZWxsZWQgOilcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVqZWN0IG91ciBvcmlnaW5hbCBwcm9taXNlXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdG9yKG5ldyBGbG93Q2FuY2VsbGF0aW9uRXJyb3IoKSlcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdG9yKGUpIC8vIHRoZXJlIGNvdWxkIGJlIGEgdGhyb3dpbmcgZmluYWxseSBibG9ja1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICByZXR1cm4gcHJvbWlzZVxuICAgICAgICB9XG4gICAgICAgIHJlcy5pc01vYlhGbG93ID0gdHJ1ZVxuICAgICAgICByZXR1cm4gcmVzXG4gICAgfSBhcyBhbnksXG4gICAgZmxvd0Fubm90YXRpb25cbilcblxuZmxvdy5ib3VuZCA9IGNyZWF0ZURlY29yYXRvckFubm90YXRpb24oZmxvd0JvdW5kQW5ub3RhdGlvbilcblxuZnVuY3Rpb24gY2FuY2VsUHJvbWlzZShwcm9taXNlKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24ocHJvbWlzZS5jYW5jZWwpKSBwcm9taXNlLmNhbmNlbCgpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmbG93UmVzdWx0PFQ+KFxuICAgIHJlc3VsdDogVFxuKTogVCBleHRlbmRzIEdlbmVyYXRvcjxhbnksIGluZmVyIFIsIGFueT5cbiAgICA/IENhbmNlbGxhYmxlUHJvbWlzZTxSPlxuICAgIDogVCBleHRlbmRzIENhbmNlbGxhYmxlUHJvbWlzZTxhbnk+XG4gICAgPyBUXG4gICAgOiBuZXZlciB7XG4gICAgcmV0dXJuIHJlc3VsdCBhcyBhbnkgLy8ganVzdCB0cmlja2luZyBUeXBlU2NyaXB0IDopXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0Zsb3coZm46IGFueSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBmbj8uaXNNb2JYRmxvdyA9PT0gdHJ1ZVxufVxuIiwiaW1wb3J0IHtcbiAgICBJT2JzZXJ2YWJsZUFycmF5LFxuICAgIElPYnNlcnZhYmxlVmFsdWUsXG4gICAgTGFtYmRhLFxuICAgIE9ic2VydmFibGVNYXAsXG4gICAgZ2V0QWRtaW5pc3RyYXRpb24sXG4gICAgaXNPYnNlcnZhYmxlQXJyYXksXG4gICAgaXNPYnNlcnZhYmxlTWFwLFxuICAgIGlzT2JzZXJ2YWJsZU9iamVjdCxcbiAgICBpc09ic2VydmFibGVWYWx1ZSxcbiAgICBPYnNlcnZhYmxlU2V0LFxuICAgIGRpZSxcbiAgICBpc1N0cmluZ2lzaFxufSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5leHBvcnQgdHlwZSBSZWFkSW50ZXJjZXB0b3I8VD4gPSAodmFsdWU6IGFueSkgPT4gVFxuXG4vKiogRXhwZXJpbWVudGFsIGZlYXR1cmUgcmlnaHQgbm93LCB0ZXN0ZWQgaW5kaXJlY3RseSB2aWEgTW9ieC1TdGF0ZS1UcmVlICovXG5leHBvcnQgZnVuY3Rpb24gaW50ZXJjZXB0UmVhZHM8VD4odmFsdWU6IElPYnNlcnZhYmxlVmFsdWU8VD4sIGhhbmRsZXI6IFJlYWRJbnRlcmNlcHRvcjxUPik6IExhbWJkYVxuZXhwb3J0IGZ1bmN0aW9uIGludGVyY2VwdFJlYWRzPFQ+KFxuICAgIG9ic2VydmFibGVBcnJheTogSU9ic2VydmFibGVBcnJheTxUPixcbiAgICBoYW5kbGVyOiBSZWFkSW50ZXJjZXB0b3I8VD5cbik6IExhbWJkYVxuZXhwb3J0IGZ1bmN0aW9uIGludGVyY2VwdFJlYWRzPEssIFY+KFxuICAgIG9ic2VydmFibGVNYXA6IE9ic2VydmFibGVNYXA8SywgVj4sXG4gICAgaGFuZGxlcjogUmVhZEludGVyY2VwdG9yPFY+XG4pOiBMYW1iZGFcbmV4cG9ydCBmdW5jdGlvbiBpbnRlcmNlcHRSZWFkczxWPihcbiAgICBvYnNlcnZhYmxlU2V0OiBPYnNlcnZhYmxlU2V0PFY+LFxuICAgIGhhbmRsZXI6IFJlYWRJbnRlcmNlcHRvcjxWPlxuKTogTGFtYmRhXG5leHBvcnQgZnVuY3Rpb24gaW50ZXJjZXB0UmVhZHMoXG4gICAgb2JqZWN0OiBPYmplY3QsXG4gICAgcHJvcGVydHk6IHN0cmluZyxcbiAgICBoYW5kbGVyOiBSZWFkSW50ZXJjZXB0b3I8YW55PlxuKTogTGFtYmRhXG5leHBvcnQgZnVuY3Rpb24gaW50ZXJjZXB0UmVhZHModGhpbmcsIHByb3BPckhhbmRsZXI/LCBoYW5kbGVyPyk6IExhbWJkYSB7XG4gICAgbGV0IHRhcmdldFxuICAgIGlmIChpc09ic2VydmFibGVNYXAodGhpbmcpIHx8IGlzT2JzZXJ2YWJsZUFycmF5KHRoaW5nKSB8fCBpc09ic2VydmFibGVWYWx1ZSh0aGluZykpIHtcbiAgICAgICAgdGFyZ2V0ID0gZ2V0QWRtaW5pc3RyYXRpb24odGhpbmcpXG4gICAgfSBlbHNlIGlmIChpc09ic2VydmFibGVPYmplY3QodGhpbmcpKSB7XG4gICAgICAgIGlmIChfX0RFVl9fICYmICFpc1N0cmluZ2lzaChwcm9wT3JIYW5kbGVyKSlcbiAgICAgICAgICAgIHJldHVybiBkaWUoXG4gICAgICAgICAgICAgICAgYEludGVyY2VwdFJlYWRzIGNhbiBvbmx5IGJlIHVzZWQgd2l0aCBhIHNwZWNpZmljIHByb3BlcnR5LCBub3Qgd2l0aCBhbiBvYmplY3QgaW4gZ2VuZXJhbGBcbiAgICAgICAgICAgIClcbiAgICAgICAgdGFyZ2V0ID0gZ2V0QWRtaW5pc3RyYXRpb24odGhpbmcsIHByb3BPckhhbmRsZXIpXG4gICAgfSBlbHNlIGlmIChfX0RFVl9fKSB7XG4gICAgICAgIHJldHVybiBkaWUoYEV4cGVjdGVkIG9ic2VydmFibGUgbWFwLCBvYmplY3Qgb3IgYXJyYXkgYXMgZmlyc3QgYXJyYXlgKVxuICAgIH1cbiAgICBpZiAoX19ERVZfXyAmJiB0YXJnZXQuZGVoYW5jZXIgIT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIGRpZShgQW4gaW50ZXJjZXB0IHJlYWRlciB3YXMgYWxyZWFkeSBlc3RhYmxpc2hlZGApXG4gICAgdGFyZ2V0LmRlaGFuY2VyID0gdHlwZW9mIHByb3BPckhhbmRsZXIgPT09IFwiZnVuY3Rpb25cIiA/IHByb3BPckhhbmRsZXIgOiBoYW5kbGVyXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgdGFyZ2V0LmRlaGFuY2VyID0gdW5kZWZpbmVkXG4gICAgfVxufVxuIiwiaW1wb3J0IHtcbiAgICBJQXJyYXlXaWxsQ2hhbmdlLFxuICAgIElBcnJheVdpbGxTcGxpY2UsXG4gICAgSUludGVyY2VwdG9yLFxuICAgIElNYXBXaWxsQ2hhbmdlLFxuICAgIElPYmplY3RXaWxsQ2hhbmdlLFxuICAgIElPYnNlcnZhYmxlQXJyYXksXG4gICAgSU9ic2VydmFibGVWYWx1ZSxcbiAgICBJVmFsdWVXaWxsQ2hhbmdlLFxuICAgIExhbWJkYSxcbiAgICBPYnNlcnZhYmxlTWFwLFxuICAgIGdldEFkbWluaXN0cmF0aW9uLFxuICAgIE9ic2VydmFibGVTZXQsXG4gICAgSVNldFdpbGxDaGFuZ2UsXG4gICAgaXNGdW5jdGlvblxufSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5leHBvcnQgZnVuY3Rpb24gaW50ZXJjZXB0PFQ+KFxuICAgIHZhbHVlOiBJT2JzZXJ2YWJsZVZhbHVlPFQ+LFxuICAgIGhhbmRsZXI6IElJbnRlcmNlcHRvcjxJVmFsdWVXaWxsQ2hhbmdlPFQ+PlxuKTogTGFtYmRhXG5leHBvcnQgZnVuY3Rpb24gaW50ZXJjZXB0PFQ+KFxuICAgIG9ic2VydmFibGVBcnJheTogSU9ic2VydmFibGVBcnJheTxUPixcbiAgICBoYW5kbGVyOiBJSW50ZXJjZXB0b3I8SUFycmF5V2lsbENoYW5nZTxUPiB8IElBcnJheVdpbGxTcGxpY2U8VD4+XG4pOiBMYW1iZGFcbmV4cG9ydCBmdW5jdGlvbiBpbnRlcmNlcHQ8SywgVj4oXG4gICAgb2JzZXJ2YWJsZU1hcDogT2JzZXJ2YWJsZU1hcDxLLCBWPixcbiAgICBoYW5kbGVyOiBJSW50ZXJjZXB0b3I8SU1hcFdpbGxDaGFuZ2U8SywgVj4+XG4pOiBMYW1iZGFcbmV4cG9ydCBmdW5jdGlvbiBpbnRlcmNlcHQ8Vj4oXG4gICAgb2JzZXJ2YWJsZU1hcDogT2JzZXJ2YWJsZVNldDxWPixcbiAgICBoYW5kbGVyOiBJSW50ZXJjZXB0b3I8SVNldFdpbGxDaGFuZ2U8Vj4+XG4pOiBMYW1iZGFcbmV4cG9ydCBmdW5jdGlvbiBpbnRlcmNlcHQ8SywgVj4oXG4gICAgb2JzZXJ2YWJsZU1hcDogT2JzZXJ2YWJsZU1hcDxLLCBWPixcbiAgICBwcm9wZXJ0eTogSyxcbiAgICBoYW5kbGVyOiBJSW50ZXJjZXB0b3I8SVZhbHVlV2lsbENoYW5nZTxWPj5cbik6IExhbWJkYVxuZXhwb3J0IGZ1bmN0aW9uIGludGVyY2VwdChvYmplY3Q6IG9iamVjdCwgaGFuZGxlcjogSUludGVyY2VwdG9yPElPYmplY3RXaWxsQ2hhbmdlPik6IExhbWJkYVxuZXhwb3J0IGZ1bmN0aW9uIGludGVyY2VwdDxUIGV4dGVuZHMgb2JqZWN0LCBLIGV4dGVuZHMga2V5b2YgVD4oXG4gICAgb2JqZWN0OiBULFxuICAgIHByb3BlcnR5OiBLLFxuICAgIGhhbmRsZXI6IElJbnRlcmNlcHRvcjxJVmFsdWVXaWxsQ2hhbmdlPGFueT4+XG4pOiBMYW1iZGFcbmV4cG9ydCBmdW5jdGlvbiBpbnRlcmNlcHQodGhpbmcsIHByb3BPckhhbmRsZXI/LCBoYW5kbGVyPyk6IExhbWJkYSB7XG4gICAgaWYgKGlzRnVuY3Rpb24oaGFuZGxlcikpIHJldHVybiBpbnRlcmNlcHRQcm9wZXJ0eSh0aGluZywgcHJvcE9ySGFuZGxlciwgaGFuZGxlcilcbiAgICBlbHNlIHJldHVybiBpbnRlcmNlcHRJbnRlcmNlcHRhYmxlKHRoaW5nLCBwcm9wT3JIYW5kbGVyKVxufVxuXG5mdW5jdGlvbiBpbnRlcmNlcHRJbnRlcmNlcHRhYmxlKHRoaW5nLCBoYW5kbGVyKSB7XG4gICAgcmV0dXJuIGdldEFkbWluaXN0cmF0aW9uKHRoaW5nKS5pbnRlcmNlcHRfKGhhbmRsZXIpXG59XG5cbmZ1bmN0aW9uIGludGVyY2VwdFByb3BlcnR5KHRoaW5nLCBwcm9wZXJ0eSwgaGFuZGxlcikge1xuICAgIHJldHVybiBnZXRBZG1pbmlzdHJhdGlvbih0aGluZywgcHJvcGVydHkpLmludGVyY2VwdF8oaGFuZGxlcilcbn1cbiIsImltcG9ydCB7ICRtb2J4LCBnZXRBdG9tLCBpc0NvbXB1dGVkVmFsdWUsIGlzT2JzZXJ2YWJsZU9iamVjdCwgZGllLCBpc1N0cmluZ2lzaCB9IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbmV4cG9ydCBmdW5jdGlvbiBfaXNDb21wdXRlZCh2YWx1ZSwgcHJvcGVydHk/OiBQcm9wZXJ0eUtleSk6IGJvb2xlYW4ge1xuICAgIGlmIChwcm9wZXJ0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChpc09ic2VydmFibGVPYmplY3QodmFsdWUpID09PSBmYWxzZSkgcmV0dXJuIGZhbHNlXG4gICAgICAgIGlmICghdmFsdWVbJG1vYnhdLnZhbHVlc18uaGFzKHByb3BlcnR5KSkgcmV0dXJuIGZhbHNlXG4gICAgICAgIGNvbnN0IGF0b20gPSBnZXRBdG9tKHZhbHVlLCBwcm9wZXJ0eSlcbiAgICAgICAgcmV0dXJuIGlzQ29tcHV0ZWRWYWx1ZShhdG9tKVxuICAgIH1cbiAgICByZXR1cm4gaXNDb21wdXRlZFZhbHVlKHZhbHVlKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNDb21wdXRlZCh2YWx1ZTogYW55KTogYm9vbGVhbiB7XG4gICAgaWYgKF9fREVWX18gJiYgYXJndW1lbnRzLmxlbmd0aCA+IDEpXG4gICAgICAgIHJldHVybiBkaWUoXG4gICAgICAgICAgICBgaXNDb21wdXRlZCBleHBlY3RzIG9ubHkgMSBhcmd1bWVudC4gVXNlIGlzQ29tcHV0ZWRQcm9wIHRvIGluc3BlY3QgdGhlIG9ic2VydmFiaWxpdHkgb2YgYSBwcm9wZXJ0eWBcbiAgICAgICAgKVxuICAgIHJldHVybiBfaXNDb21wdXRlZCh2YWx1ZSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQ29tcHV0ZWRQcm9wKHZhbHVlOiBhbnksIHByb3BOYW1lOiBQcm9wZXJ0eUtleSk6IGJvb2xlYW4ge1xuICAgIGlmIChfX0RFVl9fICYmICFpc1N0cmluZ2lzaChwcm9wTmFtZSkpXG4gICAgICAgIHJldHVybiBkaWUoYGlzQ29tcHV0ZWQgZXhwZWN0ZWQgYSBwcm9wZXJ0eSBuYW1lIGFzIHNlY29uZCBhcmd1bWVudGApXG4gICAgcmV0dXJuIF9pc0NvbXB1dGVkKHZhbHVlLCBwcm9wTmFtZSlcbn1cbiIsImltcG9ydCB7XG4gICAgJG1vYngsXG4gICAgaXNBdG9tLFxuICAgIGlzQ29tcHV0ZWRWYWx1ZSxcbiAgICBpc09ic2VydmFibGVBcnJheSxcbiAgICBpc09ic2VydmFibGVNYXAsXG4gICAgaXNPYnNlcnZhYmxlT2JqZWN0LFxuICAgIGlzUmVhY3Rpb24sXG4gICAgZGllLFxuICAgIGlzU3RyaW5naXNoXG59IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbmZ1bmN0aW9uIF9pc09ic2VydmFibGUodmFsdWUsIHByb3BlcnR5PzogUHJvcGVydHlLZXkpOiBib29sZWFuIHtcbiAgICBpZiAoIXZhbHVlKSByZXR1cm4gZmFsc2VcbiAgICBpZiAocHJvcGVydHkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoX19ERVZfXyAmJiAoaXNPYnNlcnZhYmxlTWFwKHZhbHVlKSB8fCBpc09ic2VydmFibGVBcnJheSh2YWx1ZSkpKVxuICAgICAgICAgICAgcmV0dXJuIGRpZShcbiAgICAgICAgICAgICAgICBcImlzT2JzZXJ2YWJsZShvYmplY3QsIHByb3BlcnR5TmFtZSkgaXMgbm90IHN1cHBvcnRlZCBmb3IgYXJyYXlzIGFuZCBtYXBzLiBVc2UgbWFwLmhhcyBvciBhcnJheS5sZW5ndGggaW5zdGVhZC5cIlxuICAgICAgICAgICAgKVxuICAgICAgICBpZiAoaXNPYnNlcnZhYmxlT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlWyRtb2J4XS52YWx1ZXNfLmhhcyhwcm9wZXJ0eSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgLy8gRm9yIGZpcnN0IGNoZWNrLCBzZWUgIzcwMVxuICAgIHJldHVybiAoXG4gICAgICAgIGlzT2JzZXJ2YWJsZU9iamVjdCh2YWx1ZSkgfHxcbiAgICAgICAgISF2YWx1ZVskbW9ieF0gfHxcbiAgICAgICAgaXNBdG9tKHZhbHVlKSB8fFxuICAgICAgICBpc1JlYWN0aW9uKHZhbHVlKSB8fFxuICAgICAgICBpc0NvbXB1dGVkVmFsdWUodmFsdWUpXG4gICAgKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNPYnNlcnZhYmxlKHZhbHVlOiBhbnkpOiBib29sZWFuIHtcbiAgICBpZiAoX19ERVZfXyAmJiBhcmd1bWVudHMubGVuZ3RoICE9PSAxKVxuICAgICAgICBkaWUoXG4gICAgICAgICAgICBgaXNPYnNlcnZhYmxlIGV4cGVjdHMgb25seSAxIGFyZ3VtZW50LiBVc2UgaXNPYnNlcnZhYmxlUHJvcCB0byBpbnNwZWN0IHRoZSBvYnNlcnZhYmlsaXR5IG9mIGEgcHJvcGVydHlgXG4gICAgICAgIClcbiAgICByZXR1cm4gX2lzT2JzZXJ2YWJsZSh2YWx1ZSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzT2JzZXJ2YWJsZVByb3AodmFsdWU6IGFueSwgcHJvcE5hbWU6IFByb3BlcnR5S2V5KTogYm9vbGVhbiB7XG4gICAgaWYgKF9fREVWX18gJiYgIWlzU3RyaW5naXNoKHByb3BOYW1lKSkgcmV0dXJuIGRpZShgZXhwZWN0ZWQgYSBwcm9wZXJ0eSBuYW1lIGFzIHNlY29uZCBhcmd1bWVudGApXG4gICAgcmV0dXJuIF9pc09ic2VydmFibGUodmFsdWUsIHByb3BOYW1lKVxufVxuIiwiaW1wb3J0IHtcbiAgICAkbW9ieCxcbiAgICBJSXNPYnNlcnZhYmxlT2JqZWN0LFxuICAgIElPYnNlcnZhYmxlQXJyYXksXG4gICAgT2JzZXJ2YWJsZU1hcCxcbiAgICBPYnNlcnZhYmxlU2V0LFxuICAgIE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbixcbiAgICBlbmRCYXRjaCxcbiAgICBpc09ic2VydmFibGVBcnJheSxcbiAgICBpc09ic2VydmFibGVNYXAsXG4gICAgaXNPYnNlcnZhYmxlU2V0LFxuICAgIGlzT2JzZXJ2YWJsZU9iamVjdCxcbiAgICBzdGFydEJhdGNoLFxuICAgIGRpZVxufSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5leHBvcnQgZnVuY3Rpb24ga2V5czxLPihtYXA6IE9ic2VydmFibGVNYXA8SywgYW55Pik6IFJlYWRvbmx5QXJyYXk8Sz5cbmV4cG9ydCBmdW5jdGlvbiBrZXlzPFQ+KGFyOiBJT2JzZXJ2YWJsZUFycmF5PFQ+KTogUmVhZG9ubHlBcnJheTxudW1iZXI+XG5leHBvcnQgZnVuY3Rpb24ga2V5czxUPihzZXQ6IE9ic2VydmFibGVTZXQ8VD4pOiBSZWFkb25seUFycmF5PFQ+XG5leHBvcnQgZnVuY3Rpb24ga2V5czxUIGV4dGVuZHMgT2JqZWN0PihvYmo6IFQpOiBSZWFkb25seUFycmF5PFByb3BlcnR5S2V5PlxuZXhwb3J0IGZ1bmN0aW9uIGtleXMob2JqOiBhbnkpOiBhbnkge1xuICAgIGlmIChpc09ic2VydmFibGVPYmplY3Qob2JqKSkge1xuICAgICAgICByZXR1cm4gKCgob2JqIGFzIGFueSkgYXMgSUlzT2JzZXJ2YWJsZU9iamVjdClbXG4gICAgICAgICAgICAkbW9ieFxuICAgICAgICBdIGFzIE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbikua2V5c18oKVxuICAgIH1cbiAgICBpZiAoaXNPYnNlcnZhYmxlTWFwKG9iaikgfHwgaXNPYnNlcnZhYmxlU2V0KG9iaikpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20ob2JqLmtleXMoKSlcbiAgICB9XG4gICAgaWYgKGlzT2JzZXJ2YWJsZUFycmF5KG9iaikpIHtcbiAgICAgICAgcmV0dXJuIG9iai5tYXAoKF8sIGluZGV4KSA9PiBpbmRleClcbiAgICB9XG4gICAgZGllKDUpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWx1ZXM8SywgVD4obWFwOiBPYnNlcnZhYmxlTWFwPEssIFQ+KTogUmVhZG9ubHlBcnJheTxUPlxuZXhwb3J0IGZ1bmN0aW9uIHZhbHVlczxUPihzZXQ6IE9ic2VydmFibGVTZXQ8VD4pOiBSZWFkb25seUFycmF5PFQ+XG5leHBvcnQgZnVuY3Rpb24gdmFsdWVzPFQ+KGFyOiBJT2JzZXJ2YWJsZUFycmF5PFQ+KTogUmVhZG9ubHlBcnJheTxUPlxuZXhwb3J0IGZ1bmN0aW9uIHZhbHVlczxUID0gYW55PihvYmo6IFQpOiBSZWFkb25seUFycmF5PFQgZXh0ZW5kcyBvYmplY3QgPyBUW2tleW9mIFRdIDogYW55PlxuZXhwb3J0IGZ1bmN0aW9uIHZhbHVlcyhvYmo6IGFueSk6IHN0cmluZ1tdIHtcbiAgICBpZiAoaXNPYnNlcnZhYmxlT2JqZWN0KG9iaikpIHtcbiAgICAgICAgcmV0dXJuIGtleXMob2JqKS5tYXAoa2V5ID0+IG9ialtrZXldKVxuICAgIH1cbiAgICBpZiAoaXNPYnNlcnZhYmxlTWFwKG9iaikpIHtcbiAgICAgICAgcmV0dXJuIGtleXMob2JqKS5tYXAoa2V5ID0+IG9iai5nZXQoa2V5KSlcbiAgICB9XG4gICAgaWYgKGlzT2JzZXJ2YWJsZVNldChvYmopKSB7XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKG9iai52YWx1ZXMoKSlcbiAgICB9XG4gICAgaWYgKGlzT2JzZXJ2YWJsZUFycmF5KG9iaikpIHtcbiAgICAgICAgcmV0dXJuIG9iai5zbGljZSgpXG4gICAgfVxuICAgIGRpZSg2KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZW50cmllczxLLCBUPihtYXA6IE9ic2VydmFibGVNYXA8SywgVD4pOiBSZWFkb25seUFycmF5PFtLLCBUXT5cbmV4cG9ydCBmdW5jdGlvbiBlbnRyaWVzPFQ+KHNldDogT2JzZXJ2YWJsZVNldDxUPik6IFJlYWRvbmx5QXJyYXk8W1QsIFRdPlxuZXhwb3J0IGZ1bmN0aW9uIGVudHJpZXM8VD4oYXI6IElPYnNlcnZhYmxlQXJyYXk8VD4pOiBSZWFkb25seUFycmF5PFtudW1iZXIsIFRdPlxuZXhwb3J0IGZ1bmN0aW9uIGVudHJpZXM8VCA9IGFueT4oXG4gICAgb2JqOiBUXG4pOiBSZWFkb25seUFycmF5PFtzdHJpbmcsIFQgZXh0ZW5kcyBvYmplY3QgPyBUW2tleW9mIFRdIDogYW55XT5cbmV4cG9ydCBmdW5jdGlvbiBlbnRyaWVzKG9iajogYW55KTogYW55IHtcbiAgICBpZiAoaXNPYnNlcnZhYmxlT2JqZWN0KG9iaikpIHtcbiAgICAgICAgcmV0dXJuIGtleXMob2JqKS5tYXAoa2V5ID0+IFtrZXksIG9ialtrZXldXSlcbiAgICB9XG4gICAgaWYgKGlzT2JzZXJ2YWJsZU1hcChvYmopKSB7XG4gICAgICAgIHJldHVybiBrZXlzKG9iaikubWFwKGtleSA9PiBba2V5LCBvYmouZ2V0KGtleSldKVxuICAgIH1cbiAgICBpZiAoaXNPYnNlcnZhYmxlU2V0KG9iaikpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20ob2JqLmVudHJpZXMoKSlcbiAgICB9XG4gICAgaWYgKGlzT2JzZXJ2YWJsZUFycmF5KG9iaikpIHtcbiAgICAgICAgcmV0dXJuIG9iai5tYXAoKGtleSwgaW5kZXgpID0+IFtpbmRleCwga2V5XSlcbiAgICB9XG4gICAgZGllKDcpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXQ8Vj4ob2JqOiBPYnNlcnZhYmxlTWFwPFByb3BlcnR5S2V5LCBWPiwgdmFsdWVzOiB7IFtrZXk6IHN0cmluZ106IFYgfSlcbmV4cG9ydCBmdW5jdGlvbiBzZXQ8SywgVj4ob2JqOiBPYnNlcnZhYmxlTWFwPEssIFY+LCBrZXk6IEssIHZhbHVlOiBWKVxuZXhwb3J0IGZ1bmN0aW9uIHNldDxUPihvYmo6IE9ic2VydmFibGVTZXQ8VD4sIHZhbHVlOiBUKVxuZXhwb3J0IGZ1bmN0aW9uIHNldDxUPihvYmo6IElPYnNlcnZhYmxlQXJyYXk8VD4sIGluZGV4OiBudW1iZXIsIHZhbHVlOiBUKVxuZXhwb3J0IGZ1bmN0aW9uIHNldDxUIGV4dGVuZHMgT2JqZWN0PihvYmo6IFQsIHZhbHVlczogeyBba2V5OiBzdHJpbmddOiBhbnkgfSlcbmV4cG9ydCBmdW5jdGlvbiBzZXQ8VCBleHRlbmRzIE9iamVjdD4ob2JqOiBULCBrZXk6IFByb3BlcnR5S2V5LCB2YWx1ZTogYW55KVxuZXhwb3J0IGZ1bmN0aW9uIHNldChvYmo6IGFueSwga2V5OiBhbnksIHZhbHVlPzogYW55KTogdm9pZCB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIgJiYgIWlzT2JzZXJ2YWJsZVNldChvYmopKSB7XG4gICAgICAgIHN0YXJ0QmF0Y2goKVxuICAgICAgICBjb25zdCB2YWx1ZXMgPSBrZXlcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZvciAobGV0IGtleSBpbiB2YWx1ZXMpIHNldChvYmosIGtleSwgdmFsdWVzW2tleV0pXG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBlbmRCYXRjaCgpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGlmIChpc09ic2VydmFibGVPYmplY3Qob2JqKSkge1xuICAgICAgICA7KChvYmogYXMgYW55KSBhcyBJSXNPYnNlcnZhYmxlT2JqZWN0KVskbW9ieF0uc2V0XyhrZXksIHZhbHVlKVxuICAgIH0gZWxzZSBpZiAoaXNPYnNlcnZhYmxlTWFwKG9iaikpIHtcbiAgICAgICAgb2JqLnNldChrZXksIHZhbHVlKVxuICAgIH0gZWxzZSBpZiAoaXNPYnNlcnZhYmxlU2V0KG9iaikpIHtcbiAgICAgICAgb2JqLmFkZChrZXkpXG4gICAgfSBlbHNlIGlmIChpc09ic2VydmFibGVBcnJheShvYmopKSB7XG4gICAgICAgIGlmICh0eXBlb2Yga2V5ICE9PSBcIm51bWJlclwiKSBrZXkgPSBwYXJzZUludChrZXksIDEwKVxuICAgICAgICBpZiAoa2V5IDwgMCkgZGllKGBJbnZhbGlkIGluZGV4OiAnJHtrZXl9J2ApXG4gICAgICAgIHN0YXJ0QmF0Y2goKVxuICAgICAgICBpZiAoa2V5ID49IG9iai5sZW5ndGgpIG9iai5sZW5ndGggPSBrZXkgKyAxXG4gICAgICAgIG9ialtrZXldID0gdmFsdWVcbiAgICAgICAgZW5kQmF0Y2goKVxuICAgIH0gZWxzZSBkaWUoOClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZTxLLCBWPihvYmo6IE9ic2VydmFibGVNYXA8SywgVj4sIGtleTogSylcbmV4cG9ydCBmdW5jdGlvbiByZW1vdmU8VD4ob2JqOiBPYnNlcnZhYmxlU2V0PFQ+LCBrZXk6IFQpXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlPFQ+KG9iajogSU9ic2VydmFibGVBcnJheTxUPiwgaW5kZXg6IG51bWJlcilcbmV4cG9ydCBmdW5jdGlvbiByZW1vdmU8VCBleHRlbmRzIE9iamVjdD4ob2JqOiBULCBrZXk6IHN0cmluZylcbmV4cG9ydCBmdW5jdGlvbiByZW1vdmUob2JqOiBhbnksIGtleTogYW55KTogdm9pZCB7XG4gICAgaWYgKGlzT2JzZXJ2YWJsZU9iamVjdChvYmopKSB7XG4gICAgICAgIDsoKG9iaiBhcyBhbnkpIGFzIElJc09ic2VydmFibGVPYmplY3QpWyRtb2J4XS5kZWxldGVfKGtleSlcbiAgICB9IGVsc2UgaWYgKGlzT2JzZXJ2YWJsZU1hcChvYmopKSB7XG4gICAgICAgIG9iai5kZWxldGUoa2V5KVxuICAgIH0gZWxzZSBpZiAoaXNPYnNlcnZhYmxlU2V0KG9iaikpIHtcbiAgICAgICAgb2JqLmRlbGV0ZShrZXkpXG4gICAgfSBlbHNlIGlmIChpc09ic2VydmFibGVBcnJheShvYmopKSB7XG4gICAgICAgIGlmICh0eXBlb2Yga2V5ICE9PSBcIm51bWJlclwiKSBrZXkgPSBwYXJzZUludChrZXksIDEwKVxuICAgICAgICBvYmouc3BsaWNlKGtleSwgMSlcbiAgICB9IGVsc2Uge1xuICAgICAgICBkaWUoOSlcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXM8Sz4ob2JqOiBPYnNlcnZhYmxlTWFwPEssIGFueT4sIGtleTogSyk6IGJvb2xlYW5cbmV4cG9ydCBmdW5jdGlvbiBoYXM8VD4ob2JqOiBPYnNlcnZhYmxlU2V0PFQ+LCBrZXk6IFQpOiBib29sZWFuXG5leHBvcnQgZnVuY3Rpb24gaGFzPFQ+KG9iajogSU9ic2VydmFibGVBcnJheTxUPiwgaW5kZXg6IG51bWJlcik6IGJvb2xlYW5cbmV4cG9ydCBmdW5jdGlvbiBoYXM8VCBleHRlbmRzIE9iamVjdD4ob2JqOiBULCBrZXk6IHN0cmluZyk6IGJvb2xlYW5cbmV4cG9ydCBmdW5jdGlvbiBoYXMob2JqOiBhbnksIGtleTogYW55KTogYm9vbGVhbiB7XG4gICAgaWYgKGlzT2JzZXJ2YWJsZU9iamVjdChvYmopKSB7XG4gICAgICAgIHJldHVybiAoKG9iaiBhcyBhbnkpIGFzIElJc09ic2VydmFibGVPYmplY3QpWyRtb2J4XS5oYXNfKGtleSlcbiAgICB9IGVsc2UgaWYgKGlzT2JzZXJ2YWJsZU1hcChvYmopKSB7XG4gICAgICAgIHJldHVybiBvYmouaGFzKGtleSlcbiAgICB9IGVsc2UgaWYgKGlzT2JzZXJ2YWJsZVNldChvYmopKSB7XG4gICAgICAgIHJldHVybiBvYmouaGFzKGtleSlcbiAgICB9IGVsc2UgaWYgKGlzT2JzZXJ2YWJsZUFycmF5KG9iaikpIHtcbiAgICAgICAgcmV0dXJuIGtleSA+PSAwICYmIGtleSA8IG9iai5sZW5ndGhcbiAgICB9XG4gICAgZGllKDEwKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0PEssIFY+KG9iajogT2JzZXJ2YWJsZU1hcDxLLCBWPiwga2V5OiBLKTogViB8IHVuZGVmaW5lZFxuZXhwb3J0IGZ1bmN0aW9uIGdldDxUPihvYmo6IElPYnNlcnZhYmxlQXJyYXk8VD4sIGluZGV4OiBudW1iZXIpOiBUIHwgdW5kZWZpbmVkXG5leHBvcnQgZnVuY3Rpb24gZ2V0PFQgZXh0ZW5kcyBPYmplY3Q+KG9iajogVCwga2V5OiBzdHJpbmcpOiBhbnlcbmV4cG9ydCBmdW5jdGlvbiBnZXQob2JqOiBhbnksIGtleTogYW55KTogYW55IHtcbiAgICBpZiAoIWhhcyhvYmosIGtleSkpIHJldHVybiB1bmRlZmluZWRcbiAgICBpZiAoaXNPYnNlcnZhYmxlT2JqZWN0KG9iaikpIHtcbiAgICAgICAgcmV0dXJuICgob2JqIGFzIGFueSkgYXMgSUlzT2JzZXJ2YWJsZU9iamVjdClbJG1vYnhdLmdldF8oa2V5KVxuICAgIH0gZWxzZSBpZiAoaXNPYnNlcnZhYmxlTWFwKG9iaikpIHtcbiAgICAgICAgcmV0dXJuIG9iai5nZXQoa2V5KVxuICAgIH0gZWxzZSBpZiAoaXNPYnNlcnZhYmxlQXJyYXkob2JqKSkge1xuICAgICAgICByZXR1cm4gb2JqW2tleV1cbiAgICB9XG4gICAgZGllKDExKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXBpRGVmaW5lUHJvcGVydHkob2JqOiBPYmplY3QsIGtleTogUHJvcGVydHlLZXksIGRlc2NyaXB0b3I6IFByb3BlcnR5RGVzY3JpcHRvcikge1xuICAgIGlmIChpc09ic2VydmFibGVPYmplY3Qob2JqKSkge1xuICAgICAgICByZXR1cm4gKChvYmogYXMgYW55KSBhcyBJSXNPYnNlcnZhYmxlT2JqZWN0KVskbW9ieF0uZGVmaW5lUHJvcGVydHlfKGtleSwgZGVzY3JpcHRvcilcbiAgICB9XG4gICAgZGllKDM5KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXBpT3duS2V5cyhvYmo6IE9iamVjdCkge1xuICAgIGlmIChpc09ic2VydmFibGVPYmplY3Qob2JqKSkge1xuICAgICAgICByZXR1cm4gKChvYmogYXMgYW55KSBhcyBJSXNPYnNlcnZhYmxlT2JqZWN0KVskbW9ieF0ub3duS2V5c18oKVxuICAgIH1cbiAgICBkaWUoMzgpXG59XG4iLCJpbXBvcnQge1xuICAgIElBcnJheURpZENoYW5nZSxcbiAgICBJQ29tcHV0ZWRWYWx1ZSxcbiAgICBJTWFwRGlkQ2hhbmdlLFxuICAgIElPYmplY3REaWRDaGFuZ2UsXG4gICAgSU9ic2VydmFibGVBcnJheSxcbiAgICBJT2JzZXJ2YWJsZVZhbHVlLFxuICAgIElWYWx1ZURpZENoYW5nZSxcbiAgICBMYW1iZGEsXG4gICAgT2JzZXJ2YWJsZU1hcCxcbiAgICBnZXRBZG1pbmlzdHJhdGlvbixcbiAgICBPYnNlcnZhYmxlU2V0LFxuICAgIElTZXREaWRDaGFuZ2UsXG4gICAgaXNGdW5jdGlvblxufSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5leHBvcnQgZnVuY3Rpb24gb2JzZXJ2ZTxUPihcbiAgICB2YWx1ZTogSU9ic2VydmFibGVWYWx1ZTxUPiB8IElDb21wdXRlZFZhbHVlPFQ+LFxuICAgIGxpc3RlbmVyOiAoY2hhbmdlOiBJVmFsdWVEaWRDaGFuZ2U8VD4pID0+IHZvaWQsXG4gICAgZmlyZUltbWVkaWF0ZWx5PzogYm9vbGVhblxuKTogTGFtYmRhXG5leHBvcnQgZnVuY3Rpb24gb2JzZXJ2ZTxUPihcbiAgICBvYnNlcnZhYmxlQXJyYXk6IElPYnNlcnZhYmxlQXJyYXk8VD4sXG4gICAgbGlzdGVuZXI6IChjaGFuZ2U6IElBcnJheURpZENoYW5nZTxUPikgPT4gdm9pZCxcbiAgICBmaXJlSW1tZWRpYXRlbHk/OiBib29sZWFuXG4pOiBMYW1iZGFcbmV4cG9ydCBmdW5jdGlvbiBvYnNlcnZlPFY+KFxuICAgIG9ic2VydmFibGVNYXA6IE9ic2VydmFibGVTZXQ8Vj4sXG4gICAgbGlzdGVuZXI6IChjaGFuZ2U6IElTZXREaWRDaGFuZ2U8Vj4pID0+IHZvaWQsXG4gICAgZmlyZUltbWVkaWF0ZWx5PzogYm9vbGVhblxuKTogTGFtYmRhXG5leHBvcnQgZnVuY3Rpb24gb2JzZXJ2ZTxLLCBWPihcbiAgICBvYnNlcnZhYmxlTWFwOiBPYnNlcnZhYmxlTWFwPEssIFY+LFxuICAgIGxpc3RlbmVyOiAoY2hhbmdlOiBJTWFwRGlkQ2hhbmdlPEssIFY+KSA9PiB2b2lkLFxuICAgIGZpcmVJbW1lZGlhdGVseT86IGJvb2xlYW5cbik6IExhbWJkYVxuZXhwb3J0IGZ1bmN0aW9uIG9ic2VydmU8SywgVj4oXG4gICAgb2JzZXJ2YWJsZU1hcDogT2JzZXJ2YWJsZU1hcDxLLCBWPixcbiAgICBwcm9wZXJ0eTogSyxcbiAgICBsaXN0ZW5lcjogKGNoYW5nZTogSVZhbHVlRGlkQ2hhbmdlPFY+KSA9PiB2b2lkLFxuICAgIGZpcmVJbW1lZGlhdGVseT86IGJvb2xlYW5cbik6IExhbWJkYVxuZXhwb3J0IGZ1bmN0aW9uIG9ic2VydmUoXG4gICAgb2JqZWN0OiBPYmplY3QsXG4gICAgbGlzdGVuZXI6IChjaGFuZ2U6IElPYmplY3REaWRDaGFuZ2UpID0+IHZvaWQsXG4gICAgZmlyZUltbWVkaWF0ZWx5PzogYm9vbGVhblxuKTogTGFtYmRhXG5leHBvcnQgZnVuY3Rpb24gb2JzZXJ2ZTxULCBLIGV4dGVuZHMga2V5b2YgVD4oXG4gICAgb2JqZWN0OiBULFxuICAgIHByb3BlcnR5OiBLLFxuICAgIGxpc3RlbmVyOiAoY2hhbmdlOiBJVmFsdWVEaWRDaGFuZ2U8VFtLXT4pID0+IHZvaWQsXG4gICAgZmlyZUltbWVkaWF0ZWx5PzogYm9vbGVhblxuKTogTGFtYmRhXG5leHBvcnQgZnVuY3Rpb24gb2JzZXJ2ZSh0aGluZywgcHJvcE9yQ2I/LCBjYk9yRmlyZT8sIGZpcmVJbW1lZGlhdGVseT8pOiBMYW1iZGEge1xuICAgIGlmIChpc0Z1bmN0aW9uKGNiT3JGaXJlKSlcbiAgICAgICAgcmV0dXJuIG9ic2VydmVPYnNlcnZhYmxlUHJvcGVydHkodGhpbmcsIHByb3BPckNiLCBjYk9yRmlyZSwgZmlyZUltbWVkaWF0ZWx5KVxuICAgIGVsc2UgcmV0dXJuIG9ic2VydmVPYnNlcnZhYmxlKHRoaW5nLCBwcm9wT3JDYiwgY2JPckZpcmUpXG59XG5cbmZ1bmN0aW9uIG9ic2VydmVPYnNlcnZhYmxlKHRoaW5nLCBsaXN0ZW5lciwgZmlyZUltbWVkaWF0ZWx5OiBib29sZWFuKSB7XG4gICAgcmV0dXJuIGdldEFkbWluaXN0cmF0aW9uKHRoaW5nKS5vYnNlcnZlXyhsaXN0ZW5lciwgZmlyZUltbWVkaWF0ZWx5KVxufVxuXG5mdW5jdGlvbiBvYnNlcnZlT2JzZXJ2YWJsZVByb3BlcnR5KHRoaW5nLCBwcm9wZXJ0eSwgbGlzdGVuZXIsIGZpcmVJbW1lZGlhdGVseTogYm9vbGVhbikge1xuICAgIHJldHVybiBnZXRBZG1pbmlzdHJhdGlvbih0aGluZywgcHJvcGVydHkpLm9ic2VydmVfKGxpc3RlbmVyLCBmaXJlSW1tZWRpYXRlbHkpXG59XG4iLCJpbXBvcnQge1xuICAgIGlzT2JzZXJ2YWJsZSxcbiAgICBpc09ic2VydmFibGVBcnJheSxcbiAgICBpc09ic2VydmFibGVWYWx1ZSxcbiAgICBpc09ic2VydmFibGVNYXAsXG4gICAgaXNPYnNlcnZhYmxlU2V0LFxuICAgIGlzQ29tcHV0ZWRWYWx1ZSxcbiAgICBkaWUsXG4gICAgYXBpT3duS2V5cyxcbiAgICBvYmplY3RQcm90b3R5cGVcbn0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuZnVuY3Rpb24gY2FjaGU8SywgVj4obWFwOiBNYXA8YW55LCBhbnk+LCBrZXk6IEssIHZhbHVlOiBWKTogViB7XG4gICAgbWFwLnNldChrZXksIHZhbHVlKVxuICAgIHJldHVybiB2YWx1ZVxufVxuXG5mdW5jdGlvbiB0b0pTSGVscGVyKHNvdXJjZSwgX19hbHJlYWR5U2VlbjogTWFwPGFueSwgYW55Pikge1xuICAgIGlmIChcbiAgICAgICAgc291cmNlID09IG51bGwgfHxcbiAgICAgICAgdHlwZW9mIHNvdXJjZSAhPT0gXCJvYmplY3RcIiB8fFxuICAgICAgICBzb3VyY2UgaW5zdGFuY2VvZiBEYXRlIHx8XG4gICAgICAgICFpc09ic2VydmFibGUoc291cmNlKVxuICAgIClcbiAgICAgICAgcmV0dXJuIHNvdXJjZVxuXG4gICAgaWYgKGlzT2JzZXJ2YWJsZVZhbHVlKHNvdXJjZSkgfHwgaXNDb21wdXRlZFZhbHVlKHNvdXJjZSkpXG4gICAgICAgIHJldHVybiB0b0pTSGVscGVyKHNvdXJjZS5nZXQoKSwgX19hbHJlYWR5U2VlbilcbiAgICBpZiAoX19hbHJlYWR5U2Vlbi5oYXMoc291cmNlKSkge1xuICAgICAgICByZXR1cm4gX19hbHJlYWR5U2Vlbi5nZXQoc291cmNlKVxuICAgIH1cbiAgICBpZiAoaXNPYnNlcnZhYmxlQXJyYXkoc291cmNlKSkge1xuICAgICAgICBjb25zdCByZXMgPSBjYWNoZShfX2FscmVhZHlTZWVuLCBzb3VyY2UsIG5ldyBBcnJheShzb3VyY2UubGVuZ3RoKSlcbiAgICAgICAgc291cmNlLmZvckVhY2goKHZhbHVlLCBpZHgpID0+IHtcbiAgICAgICAgICAgIHJlc1tpZHhdID0gdG9KU0hlbHBlcih2YWx1ZSwgX19hbHJlYWR5U2VlbilcbiAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuIHJlc1xuICAgIH1cbiAgICBpZiAoaXNPYnNlcnZhYmxlU2V0KHNvdXJjZSkpIHtcbiAgICAgICAgY29uc3QgcmVzID0gY2FjaGUoX19hbHJlYWR5U2Vlbiwgc291cmNlLCBuZXcgU2V0KCkpXG4gICAgICAgIHNvdXJjZS5mb3JFYWNoKHZhbHVlID0+IHtcbiAgICAgICAgICAgIHJlcy5hZGQodG9KU0hlbHBlcih2YWx1ZSwgX19hbHJlYWR5U2VlbikpXG4gICAgICAgIH0pXG4gICAgICAgIHJldHVybiByZXNcbiAgICB9XG4gICAgaWYgKGlzT2JzZXJ2YWJsZU1hcChzb3VyY2UpKSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IGNhY2hlKF9fYWxyZWFkeVNlZW4sIHNvdXJjZSwgbmV3IE1hcCgpKVxuICAgICAgICBzb3VyY2UuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xuICAgICAgICAgICAgcmVzLnNldChrZXksIHRvSlNIZWxwZXIodmFsdWUsIF9fYWxyZWFkeVNlZW4pKVxuICAgICAgICB9KVxuICAgICAgICByZXR1cm4gcmVzXG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gbXVzdCBiZSBvYnNlcnZhYmxlIG9iamVjdFxuICAgICAgICBjb25zdCByZXMgPSBjYWNoZShfX2FscmVhZHlTZWVuLCBzb3VyY2UsIHt9KVxuICAgICAgICBhcGlPd25LZXlzKHNvdXJjZSkuZm9yRWFjaCgoa2V5OiBhbnkpID0+IHtcbiAgICAgICAgICAgIGlmIChvYmplY3RQcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICAgICAgICByZXNba2V5XSA9IHRvSlNIZWxwZXIoc291cmNlW2tleV0sIF9fYWxyZWFkeVNlZW4pXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIHJldHVybiByZXNcbiAgICB9XG59XG5cbi8qKlxuICogQmFzaWNhbGx5LCBhIGRlZXAgY2xvbmUsIHNvIHRoYXQgbm8gcmVhY3RpdmUgcHJvcGVydHkgd2lsbCBleGlzdCBhbnltb3JlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9KUzxUPihzb3VyY2U6IFQsIG9wdGlvbnM/OiBhbnkpOiBUIHtcbiAgICBpZiAoX19ERVZfXyAmJiBvcHRpb25zKSBkaWUoXCJ0b0pTIG5vIGxvbmdlciBzdXBwb3J0cyBvcHRpb25zXCIpXG4gICAgcmV0dXJuIHRvSlNIZWxwZXIoc291cmNlLCBuZXcgTWFwKCkpXG59XG4iLCJpbXBvcnQgeyBUcmFjZU1vZGUsIGRpZSwgZ2V0QXRvbSwgZ2xvYmFsU3RhdGUgfSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5leHBvcnQgZnVuY3Rpb24gdHJhY2UodGhpbmc/OiBhbnksIHByb3A/OiBzdHJpbmcsIGVudGVyQnJlYWtQb2ludD86IGJvb2xlYW4pOiB2b2lkXG5leHBvcnQgZnVuY3Rpb24gdHJhY2UodGhpbmc/OiBhbnksIGVudGVyQnJlYWtQb2ludD86IGJvb2xlYW4pOiB2b2lkXG5leHBvcnQgZnVuY3Rpb24gdHJhY2UoZW50ZXJCcmVha1BvaW50PzogYm9vbGVhbik6IHZvaWRcbmV4cG9ydCBmdW5jdGlvbiB0cmFjZSguLi5hcmdzOiBhbnlbXSk6IHZvaWQge1xuICAgIGlmICghX19ERVZfXykgZGllKGB0cmFjZSgpIGlzIG5vdCBhdmFpbGFibGUgaW4gcHJvZHVjdGlvbiBidWlsZHNgKVxuICAgIGxldCBlbnRlckJyZWFrUG9pbnQgPSBmYWxzZVxuICAgIGlmICh0eXBlb2YgYXJnc1thcmdzLmxlbmd0aCAtIDFdID09PSBcImJvb2xlYW5cIikgZW50ZXJCcmVha1BvaW50ID0gYXJncy5wb3AoKVxuICAgIGNvbnN0IGRlcml2YXRpb24gPSBnZXRBdG9tRnJvbUFyZ3MoYXJncylcbiAgICBpZiAoIWRlcml2YXRpb24pIHtcbiAgICAgICAgcmV0dXJuIGRpZShcbiAgICAgICAgICAgIGAndHJhY2UoYnJlYWs/KScgY2FuIG9ubHkgYmUgdXNlZCBpbnNpZGUgYSB0cmFja2VkIGNvbXB1dGVkIHZhbHVlIG9yIGEgUmVhY3Rpb24uIENvbnNpZGVyIHBhc3NpbmcgaW4gdGhlIGNvbXB1dGVkIHZhbHVlIG9yIHJlYWN0aW9uIGV4cGxpY2l0bHlgXG4gICAgICAgIClcbiAgICB9XG4gICAgaWYgKGRlcml2YXRpb24uaXNUcmFjaW5nXyA9PT0gVHJhY2VNb2RlLk5PTkUpIHtcbiAgICAgICAgY29uc29sZS5sb2coYFttb2J4LnRyYWNlXSAnJHtkZXJpdmF0aW9uLm5hbWVffScgdHJhY2luZyBlbmFibGVkYClcbiAgICB9XG4gICAgZGVyaXZhdGlvbi5pc1RyYWNpbmdfID0gZW50ZXJCcmVha1BvaW50ID8gVHJhY2VNb2RlLkJSRUFLIDogVHJhY2VNb2RlLkxPR1xufVxuXG5mdW5jdGlvbiBnZXRBdG9tRnJvbUFyZ3MoYXJncyk6IGFueSB7XG4gICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICByZXR1cm4gZ2xvYmFsU3RhdGUudHJhY2tpbmdEZXJpdmF0aW9uXG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIHJldHVybiBnZXRBdG9tKGFyZ3NbMF0pXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIHJldHVybiBnZXRBdG9tKGFyZ3NbMF0sIGFyZ3NbMV0pXG4gICAgfVxufVxuIiwiaW1wb3J0IHsgZW5kQmF0Y2gsIHN0YXJ0QmF0Y2ggfSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG4vKipcbiAqIER1cmluZyBhIHRyYW5zYWN0aW9uIG5vIHZpZXdzIGFyZSB1cGRhdGVkIHVudGlsIHRoZSBlbmQgb2YgdGhlIHRyYW5zYWN0aW9uLlxuICogVGhlIHRyYW5zYWN0aW9uIHdpbGwgYmUgcnVuIHN5bmNocm9ub3VzbHkgbm9uZXRoZWxlc3MuXG4gKlxuICogQHBhcmFtIGFjdGlvbiBhIGZ1bmN0aW9uIHRoYXQgdXBkYXRlcyBzb21lIHJlYWN0aXZlIHN0YXRlXG4gKiBAcmV0dXJucyBhbnkgdmFsdWUgdGhhdCB3YXMgcmV0dXJuZWQgYnkgdGhlICdhY3Rpb24nIHBhcmFtZXRlci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zYWN0aW9uPFQ+KGFjdGlvbjogKCkgPT4gVCwgdGhpc0FyZyA9IHVuZGVmaW5lZCk6IFQge1xuICAgIHN0YXJ0QmF0Y2goKVxuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhY3Rpb24uYXBwbHkodGhpc0FyZylcbiAgICB9IGZpbmFsbHkge1xuICAgICAgICBlbmRCYXRjaCgpXG4gICAgfVxufVxuIiwiaW1wb3J0IHtcbiAgICAkbW9ieCxcbiAgICBJUmVhY3Rpb25EaXNwb3NlcixcbiAgICBMYW1iZGEsXG4gICAgYXV0b3J1bixcbiAgICBjcmVhdGVBY3Rpb24sXG4gICAgZ2V0TmV4dElkLFxuICAgIGRpZSxcbiAgICBhbGxvd1N0YXRlQ2hhbmdlc1xufSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5leHBvcnQgaW50ZXJmYWNlIElXaGVuT3B0aW9ucyB7XG4gICAgbmFtZT86IHN0cmluZ1xuICAgIHRpbWVvdXQ/OiBudW1iZXJcbiAgICBvbkVycm9yPzogKGVycm9yOiBhbnkpID0+IHZvaWRcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdoZW4oXG4gICAgcHJlZGljYXRlOiAoKSA9PiBib29sZWFuLFxuICAgIG9wdHM/OiBJV2hlbk9wdGlvbnNcbik6IFByb21pc2U8dm9pZD4gJiB7IGNhbmNlbCgpOiB2b2lkIH1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuKFxuICAgIHByZWRpY2F0ZTogKCkgPT4gYm9vbGVhbixcbiAgICBlZmZlY3Q6IExhbWJkYSxcbiAgICBvcHRzPzogSVdoZW5PcHRpb25zXG4pOiBJUmVhY3Rpb25EaXNwb3NlclxuZXhwb3J0IGZ1bmN0aW9uIHdoZW4ocHJlZGljYXRlOiBhbnksIGFyZzE/OiBhbnksIGFyZzI/OiBhbnkpOiBhbnkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxIHx8IChhcmcxICYmIHR5cGVvZiBhcmcxID09PSBcIm9iamVjdFwiKSlcbiAgICAgICAgcmV0dXJuIHdoZW5Qcm9taXNlKHByZWRpY2F0ZSwgYXJnMSlcbiAgICByZXR1cm4gX3doZW4ocHJlZGljYXRlLCBhcmcxLCBhcmcyIHx8IHt9KVxufVxuXG5mdW5jdGlvbiBfd2hlbihwcmVkaWNhdGU6ICgpID0+IGJvb2xlYW4sIGVmZmVjdDogTGFtYmRhLCBvcHRzOiBJV2hlbk9wdGlvbnMpOiBJUmVhY3Rpb25EaXNwb3NlciB7XG4gICAgbGV0IHRpbWVvdXRIYW5kbGU6IGFueVxuICAgIGlmICh0eXBlb2Ygb3B0cy50aW1lb3V0ID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKFwiV0hFTl9USU1FT1VUXCIpXG4gICAgICAgIHRpbWVvdXRIYW5kbGUgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIGlmICghZGlzcG9zZXJbJG1vYnhdLmlzRGlzcG9zZWRfKSB7XG4gICAgICAgICAgICAgICAgZGlzcG9zZXIoKVxuICAgICAgICAgICAgICAgIGlmIChvcHRzLm9uRXJyb3IpIG9wdHMub25FcnJvcihlcnJvcilcbiAgICAgICAgICAgICAgICBlbHNlIHRocm93IGVycm9yXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIG9wdHMudGltZW91dClcbiAgICB9XG5cbiAgICBvcHRzLm5hbWUgPSBfX0RFVl9fID8gb3B0cy5uYW1lIHx8IFwiV2hlbkBcIiArIGdldE5leHRJZCgpIDogXCJXaGVuXCJcbiAgICBjb25zdCBlZmZlY3RBY3Rpb24gPSBjcmVhdGVBY3Rpb24oXG4gICAgICAgIF9fREVWX18gPyBvcHRzLm5hbWUgKyBcIi1lZmZlY3RcIiA6IFwiV2hlbi1lZmZlY3RcIixcbiAgICAgICAgZWZmZWN0IGFzIEZ1bmN0aW9uXG4gICAgKVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIHZhciBkaXNwb3NlciA9IGF1dG9ydW4ociA9PiB7XG4gICAgICAgIC8vIHByZWRpY2F0ZSBzaG91bGQgbm90IGNoYW5nZSBzdGF0ZVxuICAgICAgICBsZXQgY29uZCA9IGFsbG93U3RhdGVDaGFuZ2VzKGZhbHNlLCBwcmVkaWNhdGUpXG4gICAgICAgIGlmIChjb25kKSB7XG4gICAgICAgICAgICByLmRpc3Bvc2UoKVxuICAgICAgICAgICAgaWYgKHRpbWVvdXRIYW5kbGUpIGNsZWFyVGltZW91dCh0aW1lb3V0SGFuZGxlKVxuICAgICAgICAgICAgZWZmZWN0QWN0aW9uKClcbiAgICAgICAgfVxuICAgIH0sIG9wdHMpXG4gICAgcmV0dXJuIGRpc3Bvc2VyXG59XG5cbmZ1bmN0aW9uIHdoZW5Qcm9taXNlKFxuICAgIHByZWRpY2F0ZTogKCkgPT4gYm9vbGVhbixcbiAgICBvcHRzPzogSVdoZW5PcHRpb25zXG4pOiBQcm9taXNlPHZvaWQ+ICYgeyBjYW5jZWwoKTogdm9pZCB9IHtcbiAgICBpZiAoX19ERVZfXyAmJiBvcHRzICYmIG9wdHMub25FcnJvcilcbiAgICAgICAgcmV0dXJuIGRpZShgdGhlIG9wdGlvbnMgJ29uRXJyb3InIGFuZCAncHJvbWlzZScgY2Fubm90IGJlIGNvbWJpbmVkYClcbiAgICBsZXQgY2FuY2VsXG4gICAgY29uc3QgcmVzID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBsZXQgZGlzcG9zZXIgPSBfd2hlbihwcmVkaWNhdGUsIHJlc29sdmUsIHsgLi4ub3B0cywgb25FcnJvcjogcmVqZWN0IH0pXG4gICAgICAgIGNhbmNlbCA9ICgpID0+IHtcbiAgICAgICAgICAgIGRpc3Bvc2VyKClcbiAgICAgICAgICAgIHJlamVjdChcIldIRU5fQ0FOQ0VMTEVEXCIpXG4gICAgICAgIH1cbiAgICB9KVxuICAgIDsocmVzIGFzIGFueSkuY2FuY2VsID0gY2FuY2VsXG4gICAgcmV0dXJuIHJlcyBhcyBhbnlcbn1cbiIsImltcG9ydCB7XG4gICAgJG1vYngsXG4gICAgSUlzT2JzZXJ2YWJsZU9iamVjdCxcbiAgICBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24sXG4gICAgd2FybkFib3V0UHJveHlSZXF1aXJlbWVudCxcbiAgICBhc3NlcnRQcm94aWVzLFxuICAgIGRpZSxcbiAgICBpc1N0cmluZ2lzaCxcbiAgICBnbG9iYWxTdGF0ZSxcbiAgICBDcmVhdGVPYnNlcnZhYmxlT3B0aW9ucyxcbiAgICBhc09ic2VydmFibGVPYmplY3Rcbn0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuZnVuY3Rpb24gZ2V0QWRtKHRhcmdldCk6IE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbiB7XG4gICAgcmV0dXJuIHRhcmdldFskbW9ieF1cbn1cblxuLy8gT3B0aW1pemF0aW9uOiB3ZSBkb24ndCBuZWVkIHRoZSBpbnRlcm1lZGlhdGUgb2JqZWN0cyBhbmQgY291bGQgaGF2ZSBhIGNvbXBsZXRlbHkgY3VzdG9tIGFkbWluaXN0cmF0aW9uIGZvciBEeW5hbWljT2JqZWN0cyxcbi8vIGFuZCBza2lwIGVpdGhlciB0aGUgaW50ZXJuYWwgdmFsdWVzIG1hcCwgb3IgdGhlIGJhc2Ugb2JqZWN0IHdpdGggaXRzIHByb3BlcnR5IGRlc2NyaXB0b3JzIVxuY29uc3Qgb2JqZWN0UHJveHlUcmFwczogUHJveHlIYW5kbGVyPGFueT4gPSB7XG4gICAgaGFzKHRhcmdldDogSUlzT2JzZXJ2YWJsZU9iamVjdCwgbmFtZTogUHJvcGVydHlLZXkpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKF9fREVWX18gJiYgZ2xvYmFsU3RhdGUudHJhY2tpbmdEZXJpdmF0aW9uKVxuICAgICAgICAgICAgd2FybkFib3V0UHJveHlSZXF1aXJlbWVudChcbiAgICAgICAgICAgICAgICBcImRldGVjdCBuZXcgcHJvcGVydGllcyB1c2luZyB0aGUgJ2luJyBvcGVyYXRvci4gVXNlICdoYXMnIGZyb20gJ21vYngnIGluc3RlYWQuXCJcbiAgICAgICAgICAgIClcbiAgICAgICAgcmV0dXJuIGdldEFkbSh0YXJnZXQpLmhhc18obmFtZSlcbiAgICB9LFxuICAgIGdldCh0YXJnZXQ6IElJc09ic2VydmFibGVPYmplY3QsIG5hbWU6IFByb3BlcnR5S2V5KTogYW55IHtcbiAgICAgICAgcmV0dXJuIGdldEFkbSh0YXJnZXQpLmdldF8obmFtZSlcbiAgICB9LFxuICAgIHNldCh0YXJnZXQ6IElJc09ic2VydmFibGVPYmplY3QsIG5hbWU6IFByb3BlcnR5S2V5LCB2YWx1ZTogYW55KTogYm9vbGVhbiB7XG4gICAgICAgIGlmICghaXNTdHJpbmdpc2gobmFtZSkpIHJldHVybiBmYWxzZVxuICAgICAgICBpZiAoX19ERVZfXyAmJiAhZ2V0QWRtKHRhcmdldCkudmFsdWVzXy5oYXMobmFtZSkpIHtcbiAgICAgICAgICAgIHdhcm5BYm91dFByb3h5UmVxdWlyZW1lbnQoXG4gICAgICAgICAgICAgICAgXCJhZGQgYSBuZXcgb2JzZXJ2YWJsZSBwcm9wZXJ0eSB0aHJvdWdoIGRpcmVjdCBhc3NpZ25tZW50LiBVc2UgJ3NldCcgZnJvbSAnbW9ieCcgaW5zdGVhZC5cIlxuICAgICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICAgIC8vIG51bGwgKGludGVyY2VwdGVkKSAtPiB0cnVlIChzdWNjZXNzKVxuICAgICAgICByZXR1cm4gZ2V0QWRtKHRhcmdldCkuc2V0XyhuYW1lLCB2YWx1ZSwgdHJ1ZSkgPz8gdHJ1ZVxuICAgIH0sXG4gICAgZGVsZXRlUHJvcGVydHkodGFyZ2V0OiBJSXNPYnNlcnZhYmxlT2JqZWN0LCBuYW1lOiBQcm9wZXJ0eUtleSk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAoX19ERVZfXykge1xuICAgICAgICAgICAgd2FybkFib3V0UHJveHlSZXF1aXJlbWVudChcbiAgICAgICAgICAgICAgICBcImRlbGV0ZSBwcm9wZXJ0aWVzIGZyb20gYW4gb2JzZXJ2YWJsZSBvYmplY3QuIFVzZSAncmVtb3ZlJyBmcm9tICdtb2J4JyBpbnN0ZWFkLlwiXG4gICAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1N0cmluZ2lzaChuYW1lKSkgcmV0dXJuIGZhbHNlXG4gICAgICAgIC8vIG51bGwgKGludGVyY2VwdGVkKSAtPiB0cnVlIChzdWNjZXNzKVxuICAgICAgICByZXR1cm4gZ2V0QWRtKHRhcmdldCkuZGVsZXRlXyhuYW1lLCB0cnVlKSA/PyB0cnVlXG4gICAgfSxcbiAgICBkZWZpbmVQcm9wZXJ0eShcbiAgICAgICAgdGFyZ2V0OiBJSXNPYnNlcnZhYmxlT2JqZWN0LFxuICAgICAgICBuYW1lOiBQcm9wZXJ0eUtleSxcbiAgICAgICAgZGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yXG4gICAgKTogYm9vbGVhbiB7XG4gICAgICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICAgICAgICB3YXJuQWJvdXRQcm94eVJlcXVpcmVtZW50KFxuICAgICAgICAgICAgICAgIFwiZGVmaW5lIHByb3BlcnR5IG9uIGFuIG9ic2VydmFibGUgb2JqZWN0LiBVc2UgJ2RlZmluZVByb3BlcnR5JyBmcm9tICdtb2J4JyBpbnN0ZWFkLlwiXG4gICAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgICAgLy8gbnVsbCAoaW50ZXJjZXB0ZWQpIC0+IHRydWUgKHN1Y2Nlc3MpXG4gICAgICAgIHJldHVybiBnZXRBZG0odGFyZ2V0KS5kZWZpbmVQcm9wZXJ0eV8obmFtZSwgZGVzY3JpcHRvcikgPz8gdHJ1ZVxuICAgIH0sXG4gICAgb3duS2V5cyh0YXJnZXQ6IElJc09ic2VydmFibGVPYmplY3QpOiBQcm9wZXJ0eUtleVtdIHtcbiAgICAgICAgaWYgKF9fREVWX18gJiYgZ2xvYmFsU3RhdGUudHJhY2tpbmdEZXJpdmF0aW9uKVxuICAgICAgICAgICAgd2FybkFib3V0UHJveHlSZXF1aXJlbWVudChcbiAgICAgICAgICAgICAgICBcIml0ZXJhdGUga2V5cyB0byBkZXRlY3QgYWRkZWQgLyByZW1vdmVkIHByb3BlcnRpZXMuIFVzZSAna2V5cycgZnJvbSAnbW9ieCcgaW5zdGVhZC5cIlxuICAgICAgICAgICAgKVxuICAgICAgICByZXR1cm4gZ2V0QWRtKHRhcmdldCkub3duS2V5c18oKVxuICAgIH0sXG4gICAgcHJldmVudEV4dGVuc2lvbnModGFyZ2V0KSB7XG4gICAgICAgIGRpZSgxMylcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc0R5bmFtaWNPYnNlcnZhYmxlT2JqZWN0KFxuICAgIHRhcmdldDogYW55LFxuICAgIG9wdGlvbnM/OiBDcmVhdGVPYnNlcnZhYmxlT3B0aW9uc1xuKTogSUlzT2JzZXJ2YWJsZU9iamVjdCB7XG4gICAgYXNzZXJ0UHJveGllcygpXG4gICAgdGFyZ2V0ID0gYXNPYnNlcnZhYmxlT2JqZWN0KHRhcmdldCwgb3B0aW9ucylcbiAgICByZXR1cm4gKHRhcmdldFskbW9ieF0ucHJveHlfID8/PSBuZXcgUHJveHkodGFyZ2V0LCBvYmplY3RQcm94eVRyYXBzKSlcbn1cbiIsImltcG9ydCB7IExhbWJkYSwgb25jZSwgdW50cmFja2VkRW5kLCB1bnRyYWNrZWRTdGFydCwgZGllIH0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuZXhwb3J0IHR5cGUgSUludGVyY2VwdG9yPFQ+ID0gKGNoYW5nZTogVCkgPT4gVCB8IG51bGxcblxuZXhwb3J0IGludGVyZmFjZSBJSW50ZXJjZXB0YWJsZTxUPiB7XG4gICAgaW50ZXJjZXB0b3JzXzogSUludGVyY2VwdG9yPFQ+W10gfCB1bmRlZmluZWRcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhc0ludGVyY2VwdG9ycyhpbnRlcmNlcHRhYmxlOiBJSW50ZXJjZXB0YWJsZTxhbnk+KSB7XG4gICAgcmV0dXJuIGludGVyY2VwdGFibGUuaW50ZXJjZXB0b3JzXyAhPT0gdW5kZWZpbmVkICYmIGludGVyY2VwdGFibGUuaW50ZXJjZXB0b3JzXy5sZW5ndGggPiAwXG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckludGVyY2VwdG9yPFQ+KFxuICAgIGludGVyY2VwdGFibGU6IElJbnRlcmNlcHRhYmxlPFQ+LFxuICAgIGhhbmRsZXI6IElJbnRlcmNlcHRvcjxUPlxuKTogTGFtYmRhIHtcbiAgICBjb25zdCBpbnRlcmNlcHRvcnMgPSBpbnRlcmNlcHRhYmxlLmludGVyY2VwdG9yc18gfHwgKGludGVyY2VwdGFibGUuaW50ZXJjZXB0b3JzXyA9IFtdKVxuICAgIGludGVyY2VwdG9ycy5wdXNoKGhhbmRsZXIpXG4gICAgcmV0dXJuIG9uY2UoKCkgPT4ge1xuICAgICAgICBjb25zdCBpZHggPSBpbnRlcmNlcHRvcnMuaW5kZXhPZihoYW5kbGVyKVxuICAgICAgICBpZiAoaWR4ICE9PSAtMSkgaW50ZXJjZXB0b3JzLnNwbGljZShpZHgsIDEpXG4gICAgfSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGludGVyY2VwdENoYW5nZTxUPihcbiAgICBpbnRlcmNlcHRhYmxlOiBJSW50ZXJjZXB0YWJsZTxUIHwgbnVsbD4sXG4gICAgY2hhbmdlOiBUIHwgbnVsbFxuKTogVCB8IG51bGwge1xuICAgIGNvbnN0IHByZXZVID0gdW50cmFja2VkU3RhcnQoKVxuICAgIHRyeSB7XG4gICAgICAgIC8vIEludGVyY2VwdG9yIGNhbiBtb2RpZnkgdGhlIGFycmF5LCBjb3B5IGl0IHRvIGF2b2lkIGNvbmN1cnJlbnQgbW9kaWZpY2F0aW9uLCBzZWUgIzE5NTBcbiAgICAgICAgY29uc3QgaW50ZXJjZXB0b3JzID0gWy4uLihpbnRlcmNlcHRhYmxlLmludGVyY2VwdG9yc18gfHwgW10pXVxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IGludGVyY2VwdG9ycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIGNoYW5nZSA9IGludGVyY2VwdG9yc1tpXShjaGFuZ2UpXG4gICAgICAgICAgICBpZiAoY2hhbmdlICYmICEoY2hhbmdlIGFzIGFueSkudHlwZSkgZGllKDE0KVxuICAgICAgICAgICAgaWYgKCFjaGFuZ2UpIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNoYW5nZVxuICAgIH0gZmluYWxseSB7XG4gICAgICAgIHVudHJhY2tlZEVuZChwcmV2VSlcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBMYW1iZGEsIG9uY2UsIHVudHJhY2tlZEVuZCwgdW50cmFja2VkU3RhcnQgfSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5leHBvcnQgaW50ZXJmYWNlIElMaXN0ZW5hYmxlIHtcbiAgICBjaGFuZ2VMaXN0ZW5lcnNfOiBGdW5jdGlvbltdIHwgdW5kZWZpbmVkXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNMaXN0ZW5lcnMobGlzdGVuYWJsZTogSUxpc3RlbmFibGUpIHtcbiAgICByZXR1cm4gbGlzdGVuYWJsZS5jaGFuZ2VMaXN0ZW5lcnNfICE9PSB1bmRlZmluZWQgJiYgbGlzdGVuYWJsZS5jaGFuZ2VMaXN0ZW5lcnNfLmxlbmd0aCA+IDBcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyTGlzdGVuZXIobGlzdGVuYWJsZTogSUxpc3RlbmFibGUsIGhhbmRsZXI6IEZ1bmN0aW9uKTogTGFtYmRhIHtcbiAgICBjb25zdCBsaXN0ZW5lcnMgPSBsaXN0ZW5hYmxlLmNoYW5nZUxpc3RlbmVyc18gfHwgKGxpc3RlbmFibGUuY2hhbmdlTGlzdGVuZXJzXyA9IFtdKVxuICAgIGxpc3RlbmVycy5wdXNoKGhhbmRsZXIpXG4gICAgcmV0dXJuIG9uY2UoKCkgPT4ge1xuICAgICAgICBjb25zdCBpZHggPSBsaXN0ZW5lcnMuaW5kZXhPZihoYW5kbGVyKVxuICAgICAgICBpZiAoaWR4ICE9PSAtMSkgbGlzdGVuZXJzLnNwbGljZShpZHgsIDEpXG4gICAgfSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5vdGlmeUxpc3RlbmVyczxUPihsaXN0ZW5hYmxlOiBJTGlzdGVuYWJsZSwgY2hhbmdlOiBUKSB7XG4gICAgY29uc3QgcHJldlUgPSB1bnRyYWNrZWRTdGFydCgpXG4gICAgbGV0IGxpc3RlbmVycyA9IGxpc3RlbmFibGUuY2hhbmdlTGlzdGVuZXJzX1xuICAgIGlmICghbGlzdGVuZXJzKSByZXR1cm5cbiAgICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuc2xpY2UoKVxuICAgIGZvciAobGV0IGkgPSAwLCBsID0gbGlzdGVuZXJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBsaXN0ZW5lcnNbaV0oY2hhbmdlKVxuICAgIH1cbiAgICB1bnRyYWNrZWRFbmQocHJldlUpXG59XG4iLCJpbXBvcnQge1xuICAgICRtb2J4LFxuICAgIGFzT2JzZXJ2YWJsZU9iamVjdCxcbiAgICBBbm5vdGF0aW9uc01hcCxcbiAgICBlbmRCYXRjaCxcbiAgICBzdGFydEJhdGNoLFxuICAgIENyZWF0ZU9ic2VydmFibGVPcHRpb25zLFxuICAgIE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbixcbiAgICBjb2xsZWN0U3RvcmVkQW5ub3RhdGlvbnMsXG4gICAgaXNQbGFpbk9iamVjdCxcbiAgICBpc09ic2VydmFibGVPYmplY3QsXG4gICAgZGllLFxuICAgIG93bktleXMsXG4gICAgZXh0ZW5kT2JzZXJ2YWJsZSxcbiAgICBhZGRIaWRkZW5Qcm9wXG59IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbi8vIEhhY2sgYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9UeXBlU2NyaXB0L2lzc3Vlcy8xNDgyOSNpc3N1ZWNvbW1lbnQtMzIyMjY3MDg5XG4vLyBXZSBuZWVkIHRoaXMsIGJlY2F1c2Ugb3RoZXJ3aXNlLCBBZGRpdGlvbmFsS2V5cyBpcyBnb2luZyB0byBiZSBpbmZlcnJlZCB0byBiZSBhbnlcbi8vIHNldCBvZiBzdXBlcmZsdW91cyBrZXlzLiBCdXQsIHdlIHJhdGhlciB3YW50IHRvIGdldCBhIGNvbXBpbGUgZXJyb3IgdW5sZXNzIEFkZGl0aW9uYWxLZXlzIGlzXG4vLyBfZXhwbGljaXR5XyBwYXNzZWQgYXMgZ2VuZXJpYyBhcmd1bWVudFxuLy8gRml4ZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9tb2J4anMvbW9ieC9pc3N1ZXMvMjMyNSNpc3N1ZWNvbW1lbnQtNjkxMDcwMDIyXG50eXBlIE5vSW5mZXI8VD4gPSBbVF1bVCBleHRlbmRzIGFueSA/IDAgOiBuZXZlcl1cblxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VPYnNlcnZhYmxlPFQgZXh0ZW5kcyBvYmplY3QsIEFkZGl0aW9uYWxLZXlzIGV4dGVuZHMgUHJvcGVydHlLZXkgPSBuZXZlcj4oXG4gICAgdGFyZ2V0OiBULFxuICAgIGFubm90YXRpb25zPzogQW5ub3RhdGlvbnNNYXA8VCwgTm9JbmZlcjxBZGRpdGlvbmFsS2V5cz4+LFxuICAgIG9wdGlvbnM/OiBDcmVhdGVPYnNlcnZhYmxlT3B0aW9uc1xuKTogVCB7XG4gICAgY29uc3QgYWRtOiBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24gPSBhc09ic2VydmFibGVPYmplY3QodGFyZ2V0LCBvcHRpb25zKVskbW9ieF1cbiAgICBzdGFydEJhdGNoKClcbiAgICB0cnkge1xuICAgICAgICAvLyBEZWZhdWx0IHRvIGRlY29yYXRvcnNcbiAgICAgICAgYW5ub3RhdGlvbnMgPz89IGNvbGxlY3RTdG9yZWRBbm5vdGF0aW9ucyh0YXJnZXQpXG5cbiAgICAgICAgLy8gQW5ub3RhdGVcbiAgICAgICAgb3duS2V5cyhhbm5vdGF0aW9ucykuZm9yRWFjaChrZXkgPT4gYWRtLm1ha2VfKGtleSwgYW5ub3RhdGlvbnMhW2tleV0pKVxuICAgIH0gZmluYWxseSB7XG4gICAgICAgIGVuZEJhdGNoKClcbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldFxufVxuXG4vLyBwcm90b1trZXlzU3ltYm9sXSA9IG5ldyBTZXQ8UHJvcGVydHlLZXk+KClcbmNvbnN0IGtleXNTeW1ib2wgPSBTeW1ib2woXCJtb2J4LWtleXNcIilcblxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VBdXRvT2JzZXJ2YWJsZTxUIGV4dGVuZHMgb2JqZWN0LCBBZGRpdGlvbmFsS2V5cyBleHRlbmRzIFByb3BlcnR5S2V5ID0gbmV2ZXI+KFxuICAgIHRhcmdldDogVCxcbiAgICBvdmVycmlkZXM/OiBBbm5vdGF0aW9uc01hcDxULCBOb0luZmVyPEFkZGl0aW9uYWxLZXlzPj4sXG4gICAgb3B0aW9ucz86IENyZWF0ZU9ic2VydmFibGVPcHRpb25zXG4pOiBUIHtcbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgICBpZiAoIWlzUGxhaW5PYmplY3QodGFyZ2V0KSAmJiAhaXNQbGFpbk9iamVjdChPYmplY3QuZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSkpXG4gICAgICAgICAgICBkaWUoYCdtYWtlQXV0b09ic2VydmFibGUnIGNhbiBvbmx5IGJlIHVzZWQgZm9yIGNsYXNzZXMgdGhhdCBkb24ndCBoYXZlIGEgc3VwZXJjbGFzc2ApXG4gICAgICAgIGlmIChpc09ic2VydmFibGVPYmplY3QodGFyZ2V0KSlcbiAgICAgICAgICAgIGRpZShgbWFrZUF1dG9PYnNlcnZhYmxlIGNhbiBvbmx5IGJlIHVzZWQgb24gb2JqZWN0cyBub3QgYWxyZWFkeSBtYWRlIG9ic2VydmFibGVgKVxuICAgIH1cblxuICAgIC8vIE9wdGltaXphdGlvbjogYXZvaWQgdmlzaXRpbmcgcHJvdG9zXG4gICAgLy8gQXNzdW1lcyB0aGF0IGFubm90YXRpb24ubWFrZV8vLmV4dGVuZF8gd29ya3MgdGhlIHNhbWUgZm9yIHBsYWluIG9iamVjdHNcbiAgICBpZiAoaXNQbGFpbk9iamVjdCh0YXJnZXQpKSB7XG4gICAgICAgIHJldHVybiBleHRlbmRPYnNlcnZhYmxlKHRhcmdldCwgdGFyZ2V0LCBvdmVycmlkZXMsIG9wdGlvbnMpXG4gICAgfVxuXG4gICAgY29uc3QgYWRtOiBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24gPSBhc09ic2VydmFibGVPYmplY3QodGFyZ2V0LCBvcHRpb25zKVskbW9ieF1cblxuICAgIC8vIE9wdGltaXphdGlvbjogY2FjaGUga2V5cyBvbiBwcm90b1xuICAgIC8vIEFzc3VtZXMgbWFrZUF1dG9PYnNlcnZhYmxlIGNhbiBiZSBjYWxsZWQgb25seSBvbmNlIHBlciBvYmplY3QgYW5kIGNhbid0IGJlIHVzZWQgaW4gc3ViY2xhc3NcbiAgICBpZiAoIXRhcmdldFtrZXlzU3ltYm9sXSkge1xuICAgICAgICBjb25zdCBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih0YXJnZXQpXG4gICAgICAgIGNvbnN0IGtleXMgPSBuZXcgU2V0KFsuLi5vd25LZXlzKHRhcmdldCksIC4uLm93bktleXMocHJvdG8pXSlcbiAgICAgICAga2V5cy5kZWxldGUoXCJjb25zdHJ1Y3RvclwiKVxuICAgICAgICBrZXlzLmRlbGV0ZSgkbW9ieClcbiAgICAgICAgYWRkSGlkZGVuUHJvcChwcm90bywga2V5c1N5bWJvbCwga2V5cylcbiAgICB9XG5cbiAgICBzdGFydEJhdGNoKClcbiAgICB0cnkge1xuICAgICAgICB0YXJnZXRba2V5c1N5bWJvbF0uZm9yRWFjaChrZXkgPT5cbiAgICAgICAgICAgIGFkbS5tYWtlXyhcbiAgICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgICAgLy8gbXVzdCBwYXNzIFwidW5kZWZpbmVkXCIgZm9yIHsga2V5OiB1bmRlZmluZWQgfVxuICAgICAgICAgICAgICAgICFvdmVycmlkZXMgPyB0cnVlIDoga2V5IGluIG92ZXJyaWRlcyA/IG92ZXJyaWRlc1trZXldIDogdHJ1ZVxuICAgICAgICAgICAgKVxuICAgICAgICApXG4gICAgfSBmaW5hbGx5IHtcbiAgICAgICAgZW5kQmF0Y2goKVxuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0XG59XG4iLCJpbXBvcnQge1xuICAgICRtb2J4LFxuICAgIEF0b20sXG4gICAgRU1QVFlfQVJSQVksXG4gICAgSUF0b20sXG4gICAgSUVuaGFuY2VyLFxuICAgIElJbnRlcmNlcHRhYmxlLFxuICAgIElJbnRlcmNlcHRvcixcbiAgICBJTGlzdGVuYWJsZSxcbiAgICBMYW1iZGEsXG4gICAgYWRkSGlkZGVuRmluYWxQcm9wLFxuICAgIGNoZWNrSWZTdGF0ZU1vZGlmaWNhdGlvbnNBcmVBbGxvd2VkLFxuICAgIGNyZWF0ZUluc3RhbmNlb2ZQcmVkaWNhdGUsXG4gICAgZ2V0TmV4dElkLFxuICAgIGhhc0ludGVyY2VwdG9ycyxcbiAgICBoYXNMaXN0ZW5lcnMsXG4gICAgaW50ZXJjZXB0Q2hhbmdlLFxuICAgIGlzT2JqZWN0LFxuICAgIGlzU3B5RW5hYmxlZCxcbiAgICBub3RpZnlMaXN0ZW5lcnMsXG4gICAgcmVnaXN0ZXJJbnRlcmNlcHRvcixcbiAgICByZWdpc3Rlckxpc3RlbmVyLFxuICAgIHNweVJlcG9ydEVuZCxcbiAgICBzcHlSZXBvcnRTdGFydCxcbiAgICBhbGxvd1N0YXRlQ2hhbmdlc1N0YXJ0LFxuICAgIGFsbG93U3RhdGVDaGFuZ2VzRW5kLFxuICAgIGFzc2VydFByb3hpZXMsXG4gICAgcmVzZXJ2ZUFycmF5QnVmZmVyLFxuICAgIGhhc1Byb3AsXG4gICAgZGllLFxuICAgIGdsb2JhbFN0YXRlXG59IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbmNvbnN0IFNQTElDRSA9IFwic3BsaWNlXCJcbmV4cG9ydCBjb25zdCBVUERBVEUgPSBcInVwZGF0ZVwiXG5leHBvcnQgY29uc3QgTUFYX1NQTElDRV9TSVpFID0gMTAwMDAgLy8gU2VlIGUuZy4gaHR0cHM6Ly9naXRodWIuY29tL21vYnhqcy9tb2J4L2lzc3Vlcy84NTlcblxuZXhwb3J0IGludGVyZmFjZSBJT2JzZXJ2YWJsZUFycmF5PFQgPSBhbnk+IGV4dGVuZHMgQXJyYXk8VD4ge1xuICAgIHNwbGljZVdpdGhBcnJheShpbmRleDogbnVtYmVyLCBkZWxldGVDb3VudD86IG51bWJlciwgbmV3SXRlbXM/OiBUW10pOiBUW11cbiAgICBjbGVhcigpOiBUW11cbiAgICByZXBsYWNlKG5ld0l0ZW1zOiBUW10pOiBUW11cbiAgICByZW1vdmUodmFsdWU6IFQpOiBib29sZWFuXG4gICAgdG9KU09OKCk6IFRbXVxufVxuXG5pbnRlcmZhY2UgSUFycmF5QmFzZUNoYW5nZTxUPiB7XG4gICAgb2JqZWN0OiBJT2JzZXJ2YWJsZUFycmF5PFQ+XG4gICAgb2JzZXJ2YWJsZUtpbmQ6IFwiYXJyYXlcIlxuICAgIGRlYnVnT2JqZWN0TmFtZTogc3RyaW5nXG4gICAgaW5kZXg6IG51bWJlclxufVxuXG5leHBvcnQgdHlwZSBJQXJyYXlEaWRDaGFuZ2U8VCA9IGFueT4gPSBJQXJyYXlVcGRhdGU8VD4gfCBJQXJyYXlTcGxpY2U8VD5cblxuZXhwb3J0IGludGVyZmFjZSBJQXJyYXlVcGRhdGU8VCA9IGFueT4gZXh0ZW5kcyBJQXJyYXlCYXNlQ2hhbmdlPFQ+IHtcbiAgICB0eXBlOiBcInVwZGF0ZVwiXG4gICAgbmV3VmFsdWU6IFRcbiAgICBvbGRWYWx1ZTogVFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElBcnJheVNwbGljZTxUID0gYW55PiBleHRlbmRzIElBcnJheUJhc2VDaGFuZ2U8VD4ge1xuICAgIHR5cGU6IFwic3BsaWNlXCJcbiAgICBhZGRlZDogVFtdXG4gICAgYWRkZWRDb3VudDogbnVtYmVyXG4gICAgcmVtb3ZlZDogVFtdXG4gICAgcmVtb3ZlZENvdW50OiBudW1iZXJcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJQXJyYXlXaWxsQ2hhbmdlPFQgPSBhbnk+IHtcbiAgICBvYmplY3Q6IElPYnNlcnZhYmxlQXJyYXk8VD5cbiAgICBpbmRleDogbnVtYmVyXG4gICAgdHlwZTogXCJ1cGRhdGVcIlxuICAgIG5ld1ZhbHVlOiBUXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUFycmF5V2lsbFNwbGljZTxUID0gYW55PiB7XG4gICAgb2JqZWN0OiBJT2JzZXJ2YWJsZUFycmF5PFQ+XG4gICAgaW5kZXg6IG51bWJlclxuICAgIHR5cGU6IFwic3BsaWNlXCJcbiAgICBhZGRlZDogVFtdXG4gICAgcmVtb3ZlZENvdW50OiBudW1iZXJcbn1cblxuY29uc3QgYXJyYXlUcmFwcyA9IHtcbiAgICBnZXQodGFyZ2V0LCBuYW1lKSB7XG4gICAgICAgIGNvbnN0IGFkbTogT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24gPSB0YXJnZXRbJG1vYnhdXG4gICAgICAgIGlmIChuYW1lID09PSAkbW9ieCkgcmV0dXJuIGFkbVxuICAgICAgICBpZiAobmFtZSA9PT0gXCJsZW5ndGhcIikgcmV0dXJuIGFkbS5nZXRBcnJheUxlbmd0aF8oKVxuICAgICAgICBpZiAodHlwZW9mIG5hbWUgPT09IFwic3RyaW5nXCIgJiYgIWlzTmFOKG5hbWUgYXMgYW55KSkge1xuICAgICAgICAgICAgcmV0dXJuIGFkbS5nZXRfKHBhcnNlSW50KG5hbWUpKVxuICAgICAgICB9XG4gICAgICAgIGlmIChoYXNQcm9wKGFycmF5RXh0ZW5zaW9ucywgbmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBhcnJheUV4dGVuc2lvbnNbbmFtZV1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFyZ2V0W25hbWVdXG4gICAgfSxcbiAgICBzZXQodGFyZ2V0LCBuYW1lLCB2YWx1ZSk6IGJvb2xlYW4ge1xuICAgICAgICBjb25zdCBhZG06IE9ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uID0gdGFyZ2V0WyRtb2J4XVxuICAgICAgICBpZiAobmFtZSA9PT0gXCJsZW5ndGhcIikge1xuICAgICAgICAgICAgYWRtLnNldEFycmF5TGVuZ3RoXyh2YWx1ZSlcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIG5hbWUgPT09IFwic3ltYm9sXCIgfHwgaXNOYU4obmFtZSkpIHtcbiAgICAgICAgICAgIHRhcmdldFtuYW1lXSA9IHZhbHVlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBudW1lcmljIHN0cmluZ1xuICAgICAgICAgICAgYWRtLnNldF8ocGFyc2VJbnQobmFtZSksIHZhbHVlKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgfSxcbiAgICBwcmV2ZW50RXh0ZW5zaW9ucygpIHtcbiAgICAgICAgZGllKDE1KVxuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIE9ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uXG4gICAgaW1wbGVtZW50cyBJSW50ZXJjZXB0YWJsZTxJQXJyYXlXaWxsQ2hhbmdlPGFueT4gfCBJQXJyYXlXaWxsU3BsaWNlPGFueT4+LCBJTGlzdGVuYWJsZSB7XG4gICAgYXRvbV86IElBdG9tXG4gICAgcmVhZG9ubHkgdmFsdWVzXzogYW55W10gPSBbXSAvLyB0aGlzIGlzIHRoZSBwcm9wIHRoYXQgZ2V0cyBwcm94aWVkLCBzbyBjYW4ndCByZXBsYWNlIGl0IVxuICAgIGludGVyY2VwdG9yc19cbiAgICBjaGFuZ2VMaXN0ZW5lcnNfXG4gICAgZW5oYW5jZXJfOiAobmV3VjogYW55LCBvbGRWOiBhbnkgfCB1bmRlZmluZWQpID0+IGFueVxuICAgIGRlaGFuY2VyOiBhbnlcbiAgICBwcm94eV8hOiBJT2JzZXJ2YWJsZUFycmF5PGFueT5cbiAgICBsYXN0S25vd25MZW5ndGhfID0gMFxuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIG5hbWUgPSBfX0RFVl9fID8gXCJPYnNlcnZhYmxlQXJyYXlAXCIgKyBnZXROZXh0SWQoKSA6IFwiT2JzZXJ2YWJsZUFycmF5XCIsXG4gICAgICAgIGVuaGFuY2VyOiBJRW5oYW5jZXI8YW55PixcbiAgICAgICAgcHVibGljIG93bmVkXzogYm9vbGVhbixcbiAgICAgICAgcHVibGljIGxlZ2FjeU1vZGVfOiBib29sZWFuXG4gICAgKSB7XG4gICAgICAgIHRoaXMuYXRvbV8gPSBuZXcgQXRvbShuYW1lKVxuICAgICAgICB0aGlzLmVuaGFuY2VyXyA9IChuZXdWLCBvbGRWKSA9PlxuICAgICAgICAgICAgZW5oYW5jZXIobmV3Viwgb2xkViwgX19ERVZfXyA/IG5hbWUgKyBcIlsuLl1cIiA6IFwiT2JzZXJ2YWJsZUFycmF5Wy4uXVwiKVxuICAgIH1cblxuICAgIGRlaGFuY2VWYWx1ZV8odmFsdWU6IGFueSk6IGFueSB7XG4gICAgICAgIGlmICh0aGlzLmRlaGFuY2VyICE9PSB1bmRlZmluZWQpIHJldHVybiB0aGlzLmRlaGFuY2VyKHZhbHVlKVxuICAgICAgICByZXR1cm4gdmFsdWVcbiAgICB9XG5cbiAgICBkZWhhbmNlVmFsdWVzXyh2YWx1ZXM6IGFueVtdKTogYW55W10ge1xuICAgICAgICBpZiAodGhpcy5kZWhhbmNlciAhPT0gdW5kZWZpbmVkICYmIHZhbHVlcy5sZW5ndGggPiAwKVxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlcy5tYXAodGhpcy5kZWhhbmNlcikgYXMgYW55XG4gICAgICAgIHJldHVybiB2YWx1ZXNcbiAgICB9XG5cbiAgICBpbnRlcmNlcHRfKGhhbmRsZXI6IElJbnRlcmNlcHRvcjxJQXJyYXlXaWxsQ2hhbmdlPGFueT4gfCBJQXJyYXlXaWxsU3BsaWNlPGFueT4+KTogTGFtYmRhIHtcbiAgICAgICAgcmV0dXJuIHJlZ2lzdGVySW50ZXJjZXB0b3I8SUFycmF5V2lsbENoYW5nZTxhbnk+IHwgSUFycmF5V2lsbFNwbGljZTxhbnk+Pih0aGlzLCBoYW5kbGVyKVxuICAgIH1cblxuICAgIG9ic2VydmVfKFxuICAgICAgICBsaXN0ZW5lcjogKGNoYW5nZURhdGE6IElBcnJheURpZENoYW5nZTxhbnk+KSA9PiB2b2lkLFxuICAgICAgICBmaXJlSW1tZWRpYXRlbHkgPSBmYWxzZVxuICAgICk6IExhbWJkYSB7XG4gICAgICAgIGlmIChmaXJlSW1tZWRpYXRlbHkpIHtcbiAgICAgICAgICAgIGxpc3RlbmVyKDxJQXJyYXlTcGxpY2U8YW55Pj57XG4gICAgICAgICAgICAgICAgb2JzZXJ2YWJsZUtpbmQ6IFwiYXJyYXlcIixcbiAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMucHJveHlfIGFzIGFueSxcbiAgICAgICAgICAgICAgICBkZWJ1Z09iamVjdE5hbWU6IHRoaXMuYXRvbV8ubmFtZV8sXG4gICAgICAgICAgICAgICAgdHlwZTogXCJzcGxpY2VcIixcbiAgICAgICAgICAgICAgICBpbmRleDogMCxcbiAgICAgICAgICAgICAgICBhZGRlZDogdGhpcy52YWx1ZXNfLnNsaWNlKCksXG4gICAgICAgICAgICAgICAgYWRkZWRDb3VudDogdGhpcy52YWx1ZXNfLmxlbmd0aCxcbiAgICAgICAgICAgICAgICByZW1vdmVkOiBbXSxcbiAgICAgICAgICAgICAgICByZW1vdmVkQ291bnQ6IDBcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlZ2lzdGVyTGlzdGVuZXIodGhpcywgbGlzdGVuZXIpXG4gICAgfVxuXG4gICAgZ2V0QXJyYXlMZW5ndGhfKCk6IG51bWJlciB7XG4gICAgICAgIHRoaXMuYXRvbV8ucmVwb3J0T2JzZXJ2ZWQoKVxuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZXNfLmxlbmd0aFxuICAgIH1cblxuICAgIHNldEFycmF5TGVuZ3RoXyhuZXdMZW5ndGg6IG51bWJlcikge1xuICAgICAgICBpZiAodHlwZW9mIG5ld0xlbmd0aCAhPT0gXCJudW1iZXJcIiB8fCBuZXdMZW5ndGggPCAwKSBkaWUoXCJPdXQgb2YgcmFuZ2U6IFwiICsgbmV3TGVuZ3RoKVxuICAgICAgICBsZXQgY3VycmVudExlbmd0aCA9IHRoaXMudmFsdWVzXy5sZW5ndGhcbiAgICAgICAgaWYgKG5ld0xlbmd0aCA9PT0gY3VycmVudExlbmd0aCkgcmV0dXJuXG4gICAgICAgIGVsc2UgaWYgKG5ld0xlbmd0aCA+IGN1cnJlbnRMZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld0l0ZW1zID0gbmV3IEFycmF5KG5ld0xlbmd0aCAtIGN1cnJlbnRMZW5ndGgpXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5ld0xlbmd0aCAtIGN1cnJlbnRMZW5ndGg7IGkrKykgbmV3SXRlbXNbaV0gPSB1bmRlZmluZWQgLy8gTm8gQXJyYXkuZmlsbCBldmVyeXdoZXJlLi4uXG4gICAgICAgICAgICB0aGlzLnNwbGljZVdpdGhBcnJheV8oY3VycmVudExlbmd0aCwgMCwgbmV3SXRlbXMpXG4gICAgICAgIH0gZWxzZSB0aGlzLnNwbGljZVdpdGhBcnJheV8obmV3TGVuZ3RoLCBjdXJyZW50TGVuZ3RoIC0gbmV3TGVuZ3RoKVxuICAgIH1cblxuICAgIHVwZGF0ZUFycmF5TGVuZ3RoXyhvbGRMZW5ndGg6IG51bWJlciwgZGVsdGE6IG51bWJlcikge1xuICAgICAgICBpZiAob2xkTGVuZ3RoICE9PSB0aGlzLmxhc3RLbm93bkxlbmd0aF8pIGRpZSgxNilcbiAgICAgICAgdGhpcy5sYXN0S25vd25MZW5ndGhfICs9IGRlbHRhXG4gICAgICAgIGlmICh0aGlzLmxlZ2FjeU1vZGVfICYmIGRlbHRhID4gMCkgcmVzZXJ2ZUFycmF5QnVmZmVyKG9sZExlbmd0aCArIGRlbHRhICsgMSlcbiAgICB9XG5cbiAgICBzcGxpY2VXaXRoQXJyYXlfKGluZGV4OiBudW1iZXIsIGRlbGV0ZUNvdW50PzogbnVtYmVyLCBuZXdJdGVtcz86IGFueVtdKTogYW55W10ge1xuICAgICAgICBjaGVja0lmU3RhdGVNb2RpZmljYXRpb25zQXJlQWxsb3dlZCh0aGlzLmF0b21fKVxuICAgICAgICBjb25zdCBsZW5ndGggPSB0aGlzLnZhbHVlc18ubGVuZ3RoXG5cbiAgICAgICAgaWYgKGluZGV4ID09PSB1bmRlZmluZWQpIGluZGV4ID0gMFxuICAgICAgICBlbHNlIGlmIChpbmRleCA+IGxlbmd0aCkgaW5kZXggPSBsZW5ndGhcbiAgICAgICAgZWxzZSBpZiAoaW5kZXggPCAwKSBpbmRleCA9IE1hdGgubWF4KDAsIGxlbmd0aCArIGluZGV4KVxuXG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSBkZWxldGVDb3VudCA9IGxlbmd0aCAtIGluZGV4XG4gICAgICAgIGVsc2UgaWYgKGRlbGV0ZUNvdW50ID09PSB1bmRlZmluZWQgfHwgZGVsZXRlQ291bnQgPT09IG51bGwpIGRlbGV0ZUNvdW50ID0gMFxuICAgICAgICBlbHNlIGRlbGV0ZUNvdW50ID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oZGVsZXRlQ291bnQsIGxlbmd0aCAtIGluZGV4KSlcblxuICAgICAgICBpZiAobmV3SXRlbXMgPT09IHVuZGVmaW5lZCkgbmV3SXRlbXMgPSBFTVBUWV9BUlJBWVxuXG4gICAgICAgIGlmIChoYXNJbnRlcmNlcHRvcnModGhpcykpIHtcbiAgICAgICAgICAgIGNvbnN0IGNoYW5nZSA9IGludGVyY2VwdENoYW5nZTxJQXJyYXlXaWxsU3BsaWNlPGFueT4+KHRoaXMgYXMgYW55LCB7XG4gICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLnByb3h5XyBhcyBhbnksXG4gICAgICAgICAgICAgICAgdHlwZTogU1BMSUNFLFxuICAgICAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgICAgIHJlbW92ZWRDb3VudDogZGVsZXRlQ291bnQsXG4gICAgICAgICAgICAgICAgYWRkZWQ6IG5ld0l0ZW1zXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgaWYgKCFjaGFuZ2UpIHJldHVybiBFTVBUWV9BUlJBWVxuICAgICAgICAgICAgZGVsZXRlQ291bnQgPSBjaGFuZ2UucmVtb3ZlZENvdW50XG4gICAgICAgICAgICBuZXdJdGVtcyA9IGNoYW5nZS5hZGRlZFxuICAgICAgICB9XG5cbiAgICAgICAgbmV3SXRlbXMgPVxuICAgICAgICAgICAgbmV3SXRlbXMubGVuZ3RoID09PSAwID8gbmV3SXRlbXMgOiBuZXdJdGVtcy5tYXAodiA9PiB0aGlzLmVuaGFuY2VyXyh2LCB1bmRlZmluZWQpKVxuICAgICAgICBpZiAodGhpcy5sZWdhY3lNb2RlXyB8fCBfX0RFVl9fKSB7XG4gICAgICAgICAgICBjb25zdCBsZW5ndGhEZWx0YSA9IG5ld0l0ZW1zLmxlbmd0aCAtIGRlbGV0ZUNvdW50XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUFycmF5TGVuZ3RoXyhsZW5ndGgsIGxlbmd0aERlbHRhKSAvLyBjaGVja3MgaWYgaW50ZXJuYWwgYXJyYXkgd2Fzbid0IG1vZGlmaWVkXG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzID0gdGhpcy5zcGxpY2VJdGVtc0ludG9WYWx1ZXNfKGluZGV4LCBkZWxldGVDb3VudCwgbmV3SXRlbXMpXG5cbiAgICAgICAgaWYgKGRlbGV0ZUNvdW50ICE9PSAwIHx8IG5ld0l0ZW1zLmxlbmd0aCAhPT0gMClcbiAgICAgICAgICAgIHRoaXMubm90aWZ5QXJyYXlTcGxpY2VfKGluZGV4LCBuZXdJdGVtcywgcmVzKVxuICAgICAgICByZXR1cm4gdGhpcy5kZWhhbmNlVmFsdWVzXyhyZXMpXG4gICAgfVxuXG4gICAgc3BsaWNlSXRlbXNJbnRvVmFsdWVzXyhpbmRleDogbnVtYmVyLCBkZWxldGVDb3VudDogbnVtYmVyLCBuZXdJdGVtczogYW55W10pOiBhbnlbXSB7XG4gICAgICAgIGlmIChuZXdJdGVtcy5sZW5ndGggPCBNQVhfU1BMSUNFX1NJWkUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlc18uc3BsaWNlKGluZGV4LCBkZWxldGVDb3VudCwgLi4ubmV3SXRlbXMpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCByZXMgPSB0aGlzLnZhbHVlc18uc2xpY2UoaW5kZXgsIGluZGV4ICsgZGVsZXRlQ291bnQpXG4gICAgICAgICAgICBsZXQgb2xkSXRlbXMgPSB0aGlzLnZhbHVlc18uc2xpY2UoaW5kZXggKyBkZWxldGVDb3VudClcbiAgICAgICAgICAgIHRoaXMudmFsdWVzXy5sZW5ndGggPSBpbmRleCArIG5ld0l0ZW1zLmxlbmd0aCAtIGRlbGV0ZUNvdW50XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5ld0l0ZW1zLmxlbmd0aDsgaSsrKSB0aGlzLnZhbHVlc19baW5kZXggKyBpXSA9IG5ld0l0ZW1zW2ldXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9sZEl0ZW1zLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgICAgIHRoaXMudmFsdWVzX1tpbmRleCArIG5ld0l0ZW1zLmxlbmd0aCArIGldID0gb2xkSXRlbXNbaV1cbiAgICAgICAgICAgIHJldHVybiByZXNcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG5vdGlmeUFycmF5Q2hpbGRVcGRhdGVfKGluZGV4OiBudW1iZXIsIG5ld1ZhbHVlOiBhbnksIG9sZFZhbHVlOiBhbnkpIHtcbiAgICAgICAgY29uc3Qgbm90aWZ5U3B5ID0gIXRoaXMub3duZWRfICYmIGlzU3B5RW5hYmxlZCgpXG4gICAgICAgIGNvbnN0IG5vdGlmeSA9IGhhc0xpc3RlbmVycyh0aGlzKVxuICAgICAgICBjb25zdCBjaGFuZ2U6IElBcnJheURpZENoYW5nZSB8IG51bGwgPVxuICAgICAgICAgICAgbm90aWZ5IHx8IG5vdGlmeVNweVxuICAgICAgICAgICAgICAgID8gKHtcbiAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZhYmxlS2luZDogXCJhcnJheVwiLFxuICAgICAgICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcy5wcm94eV8sXG4gICAgICAgICAgICAgICAgICAgICAgdHlwZTogVVBEQVRFLFxuICAgICAgICAgICAgICAgICAgICAgIGRlYnVnT2JqZWN0TmFtZTogdGhpcy5hdG9tXy5uYW1lXyxcbiAgICAgICAgICAgICAgICAgICAgICBpbmRleCxcbiAgICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICBvbGRWYWx1ZVxuICAgICAgICAgICAgICAgICAgfSBhcyBjb25zdClcbiAgICAgICAgICAgICAgICA6IG51bGxcblxuICAgICAgICAvLyBUaGUgcmVhc29uIHdoeSB0aGlzIGlzIG9uIHJpZ2h0IGhhbmQgc2lkZSBoZXJlIChhbmQgbm90IGFib3ZlKSwgaXMgdGhpcyB3YXkgdGhlIHVnbGlmaWVyIHdpbGwgZHJvcCBpdCwgYnV0IGl0IHdvbid0XG4gICAgICAgIC8vIGNhdXNlIGFueSBydW50aW1lIG92ZXJoZWFkIGluIGRldmVsb3BtZW50IG1vZGUgd2l0aG91dCBOT0RFX0VOViBzZXQsIHVubGVzcyBzcHlpbmcgaXMgZW5hYmxlZFxuICAgICAgICBpZiAoX19ERVZfXyAmJiBub3RpZnlTcHkpIHNweVJlcG9ydFN0YXJ0KGNoYW5nZSEpXG4gICAgICAgIHRoaXMuYXRvbV8ucmVwb3J0Q2hhbmdlZCgpXG4gICAgICAgIGlmIChub3RpZnkpIG5vdGlmeUxpc3RlbmVycyh0aGlzLCBjaGFuZ2UpXG4gICAgICAgIGlmIChfX0RFVl9fICYmIG5vdGlmeVNweSkgc3B5UmVwb3J0RW5kKClcbiAgICB9XG5cbiAgICBub3RpZnlBcnJheVNwbGljZV8oaW5kZXg6IG51bWJlciwgYWRkZWQ6IGFueVtdLCByZW1vdmVkOiBhbnlbXSkge1xuICAgICAgICBjb25zdCBub3RpZnlTcHkgPSAhdGhpcy5vd25lZF8gJiYgaXNTcHlFbmFibGVkKClcbiAgICAgICAgY29uc3Qgbm90aWZ5ID0gaGFzTGlzdGVuZXJzKHRoaXMpXG4gICAgICAgIGNvbnN0IGNoYW5nZTogSUFycmF5U3BsaWNlIHwgbnVsbCA9XG4gICAgICAgICAgICBub3RpZnkgfHwgbm90aWZ5U3B5XG4gICAgICAgICAgICAgICAgPyAoe1xuICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmFibGVLaW5kOiBcImFycmF5XCIsXG4gICAgICAgICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLnByb3h5XyxcbiAgICAgICAgICAgICAgICAgICAgICBkZWJ1Z09iamVjdE5hbWU6IHRoaXMuYXRvbV8ubmFtZV8sXG4gICAgICAgICAgICAgICAgICAgICAgdHlwZTogU1BMSUNFLFxuICAgICAgICAgICAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZWQsXG4gICAgICAgICAgICAgICAgICAgICAgYWRkZWQsXG4gICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlZENvdW50OiByZW1vdmVkLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgICBhZGRlZENvdW50OiBhZGRlZC5sZW5ndGhcbiAgICAgICAgICAgICAgICAgIH0gYXMgY29uc3QpXG4gICAgICAgICAgICAgICAgOiBudWxsXG5cbiAgICAgICAgaWYgKF9fREVWX18gJiYgbm90aWZ5U3B5KSBzcHlSZXBvcnRTdGFydChjaGFuZ2UhKVxuICAgICAgICB0aGlzLmF0b21fLnJlcG9ydENoYW5nZWQoKVxuICAgICAgICAvLyBjb25mb3JtOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9vYnNlcnZlXG4gICAgICAgIGlmIChub3RpZnkpIG5vdGlmeUxpc3RlbmVycyh0aGlzLCBjaGFuZ2UpXG4gICAgICAgIGlmIChfX0RFVl9fICYmIG5vdGlmeVNweSkgc3B5UmVwb3J0RW5kKClcbiAgICB9XG5cbiAgICBnZXRfKGluZGV4OiBudW1iZXIpOiBhbnkgfCB1bmRlZmluZWQge1xuICAgICAgICBpZiAoaW5kZXggPCB0aGlzLnZhbHVlc18ubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLmF0b21fLnJlcG9ydE9ic2VydmVkKClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRlaGFuY2VWYWx1ZV8odGhpcy52YWx1ZXNfW2luZGV4XSlcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICBfX0RFVl9fXG4gICAgICAgICAgICAgICAgPyBgW21vYnhdIE91dCBvZiBib3VuZHMgcmVhZDogJHtpbmRleH1gXG4gICAgICAgICAgICAgICAgOiBgW21vYnguYXJyYXldIEF0dGVtcHQgdG8gcmVhZCBhbiBhcnJheSBpbmRleCAoJHtpbmRleH0pIHRoYXQgaXMgb3V0IG9mIGJvdW5kcyAoJHt0aGlzLnZhbHVlc18ubGVuZ3RofSkuIFBsZWFzZSBjaGVjayBsZW5ndGggZmlyc3QuIE91dCBvZiBib3VuZCBpbmRpY2VzIHdpbGwgbm90IGJlIHRyYWNrZWQgYnkgTW9iWGBcbiAgICAgICAgKVxuICAgIH1cblxuICAgIHNldF8oaW5kZXg6IG51bWJlciwgbmV3VmFsdWU6IGFueSkge1xuICAgICAgICBjb25zdCB2YWx1ZXMgPSB0aGlzLnZhbHVlc19cbiAgICAgICAgaWYgKGluZGV4IDwgdmFsdWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgLy8gdXBkYXRlIGF0IGluZGV4IGluIHJhbmdlXG4gICAgICAgICAgICBjaGVja0lmU3RhdGVNb2RpZmljYXRpb25zQXJlQWxsb3dlZCh0aGlzLmF0b21fKVxuICAgICAgICAgICAgY29uc3Qgb2xkVmFsdWUgPSB2YWx1ZXNbaW5kZXhdXG4gICAgICAgICAgICBpZiAoaGFzSW50ZXJjZXB0b3JzKHRoaXMpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2hhbmdlID0gaW50ZXJjZXB0Q2hhbmdlPElBcnJheVdpbGxDaGFuZ2U8YW55Pj4odGhpcyBhcyBhbnksIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogVVBEQVRFLFxuICAgICAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMucHJveHlfIGFzIGFueSwgLy8gc2luY2UgXCJ0aGlzXCIgaXMgdGhlIHJlYWwgYXJyYXkgd2UgbmVlZCB0byBwYXNzIGl0cyBwcm94eVxuICAgICAgICAgICAgICAgICAgICBpbmRleCxcbiAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWVcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIGlmICghY2hhbmdlKSByZXR1cm5cbiAgICAgICAgICAgICAgICBuZXdWYWx1ZSA9IGNoYW5nZS5uZXdWYWx1ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmV3VmFsdWUgPSB0aGlzLmVuaGFuY2VyXyhuZXdWYWx1ZSwgb2xkVmFsdWUpXG4gICAgICAgICAgICBjb25zdCBjaGFuZ2VkID0gbmV3VmFsdWUgIT09IG9sZFZhbHVlXG4gICAgICAgICAgICBpZiAoY2hhbmdlZCkge1xuICAgICAgICAgICAgICAgIHZhbHVlc1tpbmRleF0gPSBuZXdWYWx1ZVxuICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5QXJyYXlDaGlsZFVwZGF0ZV8oaW5kZXgsIG5ld1ZhbHVlLCBvbGRWYWx1ZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChpbmRleCA9PT0gdmFsdWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgLy8gYWRkIGEgbmV3IGl0ZW1cbiAgICAgICAgICAgIHRoaXMuc3BsaWNlV2l0aEFycmF5XyhpbmRleCwgMCwgW25ld1ZhbHVlXSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIG91dCBvZiBib3VuZHNcbiAgICAgICAgICAgIGRpZSgxNywgaW5kZXgsIHZhbHVlcy5sZW5ndGgpXG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVPYnNlcnZhYmxlQXJyYXk8VD4oXG4gICAgaW5pdGlhbFZhbHVlczogVFtdIHwgdW5kZWZpbmVkLFxuICAgIGVuaGFuY2VyOiBJRW5oYW5jZXI8VD4sXG4gICAgbmFtZSA9IF9fREVWX18gPyBcIk9ic2VydmFibGVBcnJheUBcIiArIGdldE5leHRJZCgpIDogXCJPYnNlcnZhYmxlQXJyYXlcIixcbiAgICBvd25lZCA9IGZhbHNlXG4pOiBJT2JzZXJ2YWJsZUFycmF5PFQ+IHtcbiAgICBhc3NlcnRQcm94aWVzKClcbiAgICBjb25zdCBhZG0gPSBuZXcgT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24obmFtZSwgZW5oYW5jZXIsIG93bmVkLCBmYWxzZSlcbiAgICBhZGRIaWRkZW5GaW5hbFByb3AoYWRtLnZhbHVlc18sICRtb2J4LCBhZG0pXG4gICAgY29uc3QgcHJveHkgPSBuZXcgUHJveHkoYWRtLnZhbHVlc18sIGFycmF5VHJhcHMpIGFzIGFueVxuICAgIGFkbS5wcm94eV8gPSBwcm94eVxuICAgIGlmIChpbml0aWFsVmFsdWVzICYmIGluaXRpYWxWYWx1ZXMubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHByZXYgPSBhbGxvd1N0YXRlQ2hhbmdlc1N0YXJ0KHRydWUpXG4gICAgICAgIGFkbS5zcGxpY2VXaXRoQXJyYXlfKDAsIDAsIGluaXRpYWxWYWx1ZXMpXG4gICAgICAgIGFsbG93U3RhdGVDaGFuZ2VzRW5kKHByZXYpXG4gICAgfVxuICAgIHJldHVybiBwcm94eVxufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbmV4cG9ydCB2YXIgYXJyYXlFeHRlbnNpb25zID0ge1xuICAgIGNsZWFyKCk6IGFueVtdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3BsaWNlKDApXG4gICAgfSxcblxuICAgIHJlcGxhY2UobmV3SXRlbXM6IGFueVtdKSB7XG4gICAgICAgIGNvbnN0IGFkbTogT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24gPSB0aGlzWyRtb2J4XVxuICAgICAgICByZXR1cm4gYWRtLnNwbGljZVdpdGhBcnJheV8oMCwgYWRtLnZhbHVlc18ubGVuZ3RoLCBuZXdJdGVtcylcbiAgICB9LFxuXG4gICAgLy8gVXNlZCBieSBKU09OLnN0cmluZ2lmeVxuICAgIHRvSlNPTigpOiBhbnlbXSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNsaWNlKClcbiAgICB9LFxuXG4gICAgLypcbiAgICAgKiBmdW5jdGlvbnMgdGhhdCBkbyBhbHRlciB0aGUgaW50ZXJuYWwgc3RydWN0dXJlIG9mIHRoZSBhcnJheSwgKGJhc2VkIG9uIGxpYi5lczYuZC50cylcbiAgICAgKiBzaW5jZSB0aGVzZSBmdW5jdGlvbnMgYWx0ZXIgdGhlIGlubmVyIHN0cnVjdHVyZSBvZiB0aGUgYXJyYXksIHRoZSBoYXZlIHNpZGUgZWZmZWN0cy5cbiAgICAgKiBCZWNhdXNlIHRoZSBoYXZlIHNpZGUgZWZmZWN0cywgdGhleSBzaG91bGQgbm90IGJlIHVzZWQgaW4gY29tcHV0ZWQgZnVuY3Rpb24sXG4gICAgICogYW5kIGZvciB0aGF0IHJlYXNvbiB0aGUgZG8gbm90IGNhbGwgZGVwZW5kZW5jeVN0YXRlLm5vdGlmeU9ic2VydmVkXG4gICAgICovXG4gICAgc3BsaWNlKGluZGV4OiBudW1iZXIsIGRlbGV0ZUNvdW50PzogbnVtYmVyLCAuLi5uZXdJdGVtczogYW55W10pOiBhbnlbXSB7XG4gICAgICAgIGNvbnN0IGFkbTogT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24gPSB0aGlzWyRtb2J4XVxuICAgICAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICByZXR1cm4gW11cbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICByZXR1cm4gYWRtLnNwbGljZVdpdGhBcnJheV8oaW5kZXgpXG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFkbS5zcGxpY2VXaXRoQXJyYXlfKGluZGV4LCBkZWxldGVDb3VudClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWRtLnNwbGljZVdpdGhBcnJheV8oaW5kZXgsIGRlbGV0ZUNvdW50LCBuZXdJdGVtcylcbiAgICB9LFxuXG4gICAgc3BsaWNlV2l0aEFycmF5KGluZGV4OiBudW1iZXIsIGRlbGV0ZUNvdW50PzogbnVtYmVyLCBuZXdJdGVtcz86IGFueVtdKTogYW55W10ge1xuICAgICAgICByZXR1cm4gKHRoaXNbJG1vYnhdIGFzIE9ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uKS5zcGxpY2VXaXRoQXJyYXlfKFxuICAgICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgICBkZWxldGVDb3VudCxcbiAgICAgICAgICAgIG5ld0l0ZW1zXG4gICAgICAgIClcbiAgICB9LFxuXG4gICAgcHVzaCguLi5pdGVtczogYW55W10pOiBudW1iZXIge1xuICAgICAgICBjb25zdCBhZG06IE9ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uID0gdGhpc1skbW9ieF1cbiAgICAgICAgYWRtLnNwbGljZVdpdGhBcnJheV8oYWRtLnZhbHVlc18ubGVuZ3RoLCAwLCBpdGVtcylcbiAgICAgICAgcmV0dXJuIGFkbS52YWx1ZXNfLmxlbmd0aFxuICAgIH0sXG5cbiAgICBwb3AoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNwbGljZShNYXRoLm1heCh0aGlzWyRtb2J4XS52YWx1ZXNfLmxlbmd0aCAtIDEsIDApLCAxKVswXVxuICAgIH0sXG5cbiAgICBzaGlmdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3BsaWNlKDAsIDEpWzBdXG4gICAgfSxcblxuICAgIHVuc2hpZnQoLi4uaXRlbXM6IGFueVtdKTogbnVtYmVyIHtcbiAgICAgICAgY29uc3QgYWRtOiBPYnNlcnZhYmxlQXJyYXlBZG1pbmlzdHJhdGlvbiA9IHRoaXNbJG1vYnhdXG4gICAgICAgIGFkbS5zcGxpY2VXaXRoQXJyYXlfKDAsIDAsIGl0ZW1zKVxuICAgICAgICByZXR1cm4gYWRtLnZhbHVlc18ubGVuZ3RoXG4gICAgfSxcblxuICAgIHJldmVyc2UoKTogYW55W10ge1xuICAgICAgICAvLyByZXZlcnNlIGJ5IGRlZmF1bHQgbXV0YXRlcyBpbiBwbGFjZSBiZWZvcmUgcmV0dXJuaW5nIHRoZSByZXN1bHRcbiAgICAgICAgLy8gd2hpY2ggbWFrZXMgaXQgYm90aCBhICdkZXJpdmF0aW9uJyBhbmQgYSAnbXV0YXRpb24nLlxuICAgICAgICBpZiAoZ2xvYmFsU3RhdGUudHJhY2tpbmdEZXJpdmF0aW9uKSB7XG4gICAgICAgICAgICBkaWUoMzcsIFwicmV2ZXJzZVwiKVxuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVwbGFjZSh0aGlzLnNsaWNlKCkucmV2ZXJzZSgpKVxuICAgICAgICByZXR1cm4gdGhpc1xuICAgIH0sXG5cbiAgICBzb3J0KCk6IGFueVtdIHtcbiAgICAgICAgLy8gc29ydCBieSBkZWZhdWx0IG11dGF0ZXMgaW4gcGxhY2UgYmVmb3JlIHJldHVybmluZyB0aGUgcmVzdWx0XG4gICAgICAgIC8vIHdoaWNoIGdvZXMgYWdhaW5zdCBhbGwgZ29vZCBwcmFjdGljZXMuIExldCdzIG5vdCBjaGFuZ2UgdGhlIGFycmF5IGluIHBsYWNlIVxuICAgICAgICBpZiAoZ2xvYmFsU3RhdGUudHJhY2tpbmdEZXJpdmF0aW9uKSB7XG4gICAgICAgICAgICBkaWUoMzcsIFwic29ydFwiKVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvcHkgPSB0aGlzLnNsaWNlKClcbiAgICAgICAgY29weS5zb3J0LmFwcGx5KGNvcHksIGFyZ3VtZW50cylcbiAgICAgICAgdGhpcy5yZXBsYWNlKGNvcHkpXG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfSxcblxuICAgIHJlbW92ZSh2YWx1ZTogYW55KTogYm9vbGVhbiB7XG4gICAgICAgIGNvbnN0IGFkbTogT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24gPSB0aGlzWyRtb2J4XVxuICAgICAgICBjb25zdCBpZHggPSBhZG0uZGVoYW5jZVZhbHVlc18oYWRtLnZhbHVlc18pLmluZGV4T2YodmFsdWUpXG4gICAgICAgIGlmIChpZHggPiAtMSkge1xuICAgICAgICAgICAgdGhpcy5zcGxpY2UoaWR4LCAxKVxuICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG59XG5cbi8qKlxuICogV3JhcCBmdW5jdGlvbiBmcm9tIHByb3RvdHlwZVxuICogV2l0aG91dCB0aGlzLCBldmVyeXRoaW5nIHdvcmtzIGFzIHdlbGwsIGJ1dCB0aGlzIHdvcmtzXG4gKiBmYXN0ZXIgYXMgZXZlcnl0aGluZyB3b3JrcyBvbiB1bnByb3hpZWQgdmFsdWVzXG4gKi9cbmFkZEFycmF5RXh0ZW5zaW9uKFwiY29uY2F0XCIsIHNpbXBsZUZ1bmMpXG5hZGRBcnJheUV4dGVuc2lvbihcImZsYXRcIiwgc2ltcGxlRnVuYylcbmFkZEFycmF5RXh0ZW5zaW9uKFwiaW5jbHVkZXNcIiwgc2ltcGxlRnVuYylcbmFkZEFycmF5RXh0ZW5zaW9uKFwiaW5kZXhPZlwiLCBzaW1wbGVGdW5jKVxuYWRkQXJyYXlFeHRlbnNpb24oXCJqb2luXCIsIHNpbXBsZUZ1bmMpXG5hZGRBcnJheUV4dGVuc2lvbihcImxhc3RJbmRleE9mXCIsIHNpbXBsZUZ1bmMpXG5hZGRBcnJheUV4dGVuc2lvbihcInNsaWNlXCIsIHNpbXBsZUZ1bmMpXG5hZGRBcnJheUV4dGVuc2lvbihcInRvU3RyaW5nXCIsIHNpbXBsZUZ1bmMpXG5hZGRBcnJheUV4dGVuc2lvbihcInRvTG9jYWxlU3RyaW5nXCIsIHNpbXBsZUZ1bmMpXG4vLyBtYXBcbmFkZEFycmF5RXh0ZW5zaW9uKFwiZXZlcnlcIiwgbWFwTGlrZUZ1bmMpXG5hZGRBcnJheUV4dGVuc2lvbihcImZpbHRlclwiLCBtYXBMaWtlRnVuYylcbmFkZEFycmF5RXh0ZW5zaW9uKFwiZmluZFwiLCBtYXBMaWtlRnVuYylcbmFkZEFycmF5RXh0ZW5zaW9uKFwiZmluZEluZGV4XCIsIG1hcExpa2VGdW5jKVxuYWRkQXJyYXlFeHRlbnNpb24oXCJmbGF0TWFwXCIsIG1hcExpa2VGdW5jKVxuYWRkQXJyYXlFeHRlbnNpb24oXCJmb3JFYWNoXCIsIG1hcExpa2VGdW5jKVxuYWRkQXJyYXlFeHRlbnNpb24oXCJtYXBcIiwgbWFwTGlrZUZ1bmMpXG5hZGRBcnJheUV4dGVuc2lvbihcInNvbWVcIiwgbWFwTGlrZUZ1bmMpXG4vLyByZWR1Y2VcbmFkZEFycmF5RXh0ZW5zaW9uKFwicmVkdWNlXCIsIHJlZHVjZUxpa2VGdW5jKVxuYWRkQXJyYXlFeHRlbnNpb24oXCJyZWR1Y2VSaWdodFwiLCByZWR1Y2VMaWtlRnVuYylcblxuZnVuY3Rpb24gYWRkQXJyYXlFeHRlbnNpb24oZnVuY05hbWUsIGZ1bmNGYWN0b3J5KSB7XG4gICAgaWYgKHR5cGVvZiBBcnJheS5wcm90b3R5cGVbZnVuY05hbWVdID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgYXJyYXlFeHRlbnNpb25zW2Z1bmNOYW1lXSA9IGZ1bmNGYWN0b3J5KGZ1bmNOYW1lKVxuICAgIH1cbn1cblxuLy8gUmVwb3J0IGFuZCBkZWxlZ2F0ZSB0byBkZWhhbmNlZCBhcnJheVxuZnVuY3Rpb24gc2ltcGxlRnVuYyhmdW5jTmFtZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnN0IGFkbTogT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24gPSB0aGlzWyRtb2J4XVxuICAgICAgICBhZG0uYXRvbV8ucmVwb3J0T2JzZXJ2ZWQoKVxuICAgICAgICBjb25zdCBkZWhhbmNlZFZhbHVlcyA9IGFkbS5kZWhhbmNlVmFsdWVzXyhhZG0udmFsdWVzXylcbiAgICAgICAgcmV0dXJuIGRlaGFuY2VkVmFsdWVzW2Z1bmNOYW1lXS5hcHBseShkZWhhbmNlZFZhbHVlcywgYXJndW1lbnRzKVxuICAgIH1cbn1cblxuLy8gTWFrZSBzdXJlIGNhbGxiYWNrcyByZWNpZXZlIGNvcnJlY3QgYXJyYXkgYXJnICMyMzI2XG5mdW5jdGlvbiBtYXBMaWtlRnVuYyhmdW5jTmFtZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgICAgICAgY29uc3QgYWRtOiBPYnNlcnZhYmxlQXJyYXlBZG1pbmlzdHJhdGlvbiA9IHRoaXNbJG1vYnhdXG4gICAgICAgIGFkbS5hdG9tXy5yZXBvcnRPYnNlcnZlZCgpXG4gICAgICAgIGNvbnN0IGRlaGFuY2VkVmFsdWVzID0gYWRtLmRlaGFuY2VWYWx1ZXNfKGFkbS52YWx1ZXNfKVxuICAgICAgICByZXR1cm4gZGVoYW5jZWRWYWx1ZXNbZnVuY05hbWVdKChlbGVtZW50LCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrLmNhbGwodGhpc0FyZywgZWxlbWVudCwgaW5kZXgsIHRoaXMpXG4gICAgICAgIH0pXG4gICAgfVxufVxuXG4vLyBNYWtlIHN1cmUgY2FsbGJhY2tzIHJlY2lldmUgY29ycmVjdCBhcnJheSBhcmcgIzIzMjZcbmZ1bmN0aW9uIHJlZHVjZUxpa2VGdW5jKGZ1bmNOYW1lKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3QgYWRtOiBPYnNlcnZhYmxlQXJyYXlBZG1pbmlzdHJhdGlvbiA9IHRoaXNbJG1vYnhdXG4gICAgICAgIGFkbS5hdG9tXy5yZXBvcnRPYnNlcnZlZCgpXG4gICAgICAgIGNvbnN0IGRlaGFuY2VkVmFsdWVzID0gYWRtLmRlaGFuY2VWYWx1ZXNfKGFkbS52YWx1ZXNfKVxuICAgICAgICAvLyAjMjQzMiAtIHJlZHVjZSBiZWhhdmlvciBkZXBlbmRzIG9uIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICAgY29uc3QgY2FsbGJhY2sgPSBhcmd1bWVudHNbMF1cbiAgICAgICAgYXJndW1lbnRzWzBdID0gKGFjY3VtdWxhdG9yLCBjdXJyZW50VmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soYWNjdW11bGF0b3IsIGN1cnJlbnRWYWx1ZSwgaW5kZXgsIHRoaXMpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRlaGFuY2VkVmFsdWVzW2Z1bmNOYW1lXS5hcHBseShkZWhhbmNlZFZhbHVlcywgYXJndW1lbnRzKVxuICAgIH1cbn1cblxuY29uc3QgaXNPYnNlcnZhYmxlQXJyYXlBZG1pbmlzdHJhdGlvbiA9IGNyZWF0ZUluc3RhbmNlb2ZQcmVkaWNhdGUoXG4gICAgXCJPYnNlcnZhYmxlQXJyYXlBZG1pbmlzdHJhdGlvblwiLFxuICAgIE9ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uXG4pXG5cbmV4cG9ydCBmdW5jdGlvbiBpc09ic2VydmFibGVBcnJheSh0aGluZyk6IHRoaW5nIGlzIElPYnNlcnZhYmxlQXJyYXk8YW55PiB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHRoaW5nKSAmJiBpc09ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uKHRoaW5nWyRtb2J4XSlcbn1cbiIsImltcG9ydCB7XG4gICAgJG1vYngsXG4gICAgSUVuaGFuY2VyLFxuICAgIElJbnRlcmNlcHRhYmxlLFxuICAgIElJbnRlcmNlcHRvcixcbiAgICBJTGlzdGVuYWJsZSxcbiAgICBMYW1iZGEsXG4gICAgT2JzZXJ2YWJsZVZhbHVlLFxuICAgIGNoZWNrSWZTdGF0ZU1vZGlmaWNhdGlvbnNBcmVBbGxvd2VkLFxuICAgIGNyZWF0ZUF0b20sXG4gICAgY3JlYXRlSW5zdGFuY2VvZlByZWRpY2F0ZSxcbiAgICBkZWVwRW5oYW5jZXIsXG4gICAgZ2V0TmV4dElkLFxuICAgIGdldFBsYWluT2JqZWN0S2V5cyxcbiAgICBoYXNJbnRlcmNlcHRvcnMsXG4gICAgaGFzTGlzdGVuZXJzLFxuICAgIGludGVyY2VwdENoYW5nZSxcbiAgICBpc0VTNk1hcCxcbiAgICBpc1BsYWluT2JqZWN0LFxuICAgIGlzU3B5RW5hYmxlZCxcbiAgICBtYWtlSXRlcmFibGUsXG4gICAgbm90aWZ5TGlzdGVuZXJzLFxuICAgIHJlZmVyZW5jZUVuaGFuY2VyLFxuICAgIHJlZ2lzdGVySW50ZXJjZXB0b3IsXG4gICAgcmVnaXN0ZXJMaXN0ZW5lcixcbiAgICBzcHlSZXBvcnRFbmQsXG4gICAgc3B5UmVwb3J0U3RhcnQsXG4gICAgc3RyaW5naWZ5S2V5LFxuICAgIHRyYW5zYWN0aW9uLFxuICAgIHVudHJhY2tlZCxcbiAgICBvbkJlY29tZVVub2JzZXJ2ZWQsXG4gICAgZ2xvYmFsU3RhdGUsXG4gICAgZGllLFxuICAgIGlzRnVuY3Rpb24sXG4gICAgVVBEQVRFLFxuICAgIElBdG9tXG59IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbmV4cG9ydCBpbnRlcmZhY2UgSUtleVZhbHVlTWFwPFYgPSBhbnk+IHtcbiAgICBba2V5OiBzdHJpbmddOiBWXG59XG5cbmV4cG9ydCB0eXBlIElNYXBFbnRyeTxLID0gYW55LCBWID0gYW55PiA9IFtLLCBWXVxuZXhwb3J0IHR5cGUgSU1hcEVudHJpZXM8SyA9IGFueSwgViA9IGFueT4gPSBJTWFwRW50cnk8SywgVj5bXVxuXG5leHBvcnQgdHlwZSBJTWFwRGlkQ2hhbmdlPEsgPSBhbnksIFYgPSBhbnk+ID0geyBvYnNlcnZhYmxlS2luZDogXCJtYXBcIjsgZGVidWdPYmplY3ROYW1lOiBzdHJpbmcgfSAmIChcbiAgICB8IHtcbiAgICAgICAgICBvYmplY3Q6IE9ic2VydmFibGVNYXA8SywgVj5cbiAgICAgICAgICBuYW1lOiBLIC8vIGFjdHVhbCB0aGUga2V5IG9yIGluZGV4LCBidXQgdGhpcyBpcyBiYXNlZCBvbiB0aGUgYW5jaWVudCAub2JzZXJ2ZSBwcm9wb3NhbCBmb3IgY29uc2lzdGVuY3lcbiAgICAgICAgICB0eXBlOiBcInVwZGF0ZVwiXG4gICAgICAgICAgbmV3VmFsdWU6IFZcbiAgICAgICAgICBvbGRWYWx1ZTogVlxuICAgICAgfVxuICAgIHwge1xuICAgICAgICAgIG9iamVjdDogT2JzZXJ2YWJsZU1hcDxLLCBWPlxuICAgICAgICAgIG5hbWU6IEtcbiAgICAgICAgICB0eXBlOiBcImFkZFwiXG4gICAgICAgICAgbmV3VmFsdWU6IFZcbiAgICAgIH1cbiAgICB8IHtcbiAgICAgICAgICBvYmplY3Q6IE9ic2VydmFibGVNYXA8SywgVj5cbiAgICAgICAgICBuYW1lOiBLXG4gICAgICAgICAgdHlwZTogXCJkZWxldGVcIlxuICAgICAgICAgIG9sZFZhbHVlOiBWXG4gICAgICB9XG4pXG5cbmV4cG9ydCBpbnRlcmZhY2UgSU1hcFdpbGxDaGFuZ2U8SyA9IGFueSwgViA9IGFueT4ge1xuICAgIG9iamVjdDogT2JzZXJ2YWJsZU1hcDxLLCBWPlxuICAgIHR5cGU6IFwidXBkYXRlXCIgfCBcImFkZFwiIHwgXCJkZWxldGVcIlxuICAgIG5hbWU6IEtcbiAgICBuZXdWYWx1ZT86IFZcbn1cblxuY29uc3QgT2JzZXJ2YWJsZU1hcE1hcmtlciA9IHt9XG5cbmV4cG9ydCBjb25zdCBBREQgPSBcImFkZFwiXG5leHBvcnQgY29uc3QgREVMRVRFID0gXCJkZWxldGVcIlxuXG5leHBvcnQgdHlwZSBJT2JzZXJ2YWJsZU1hcEluaXRpYWxWYWx1ZXM8SyA9IGFueSwgViA9IGFueT4gPVxuICAgIHwgSU1hcEVudHJpZXM8SywgVj5cbiAgICB8IElLZXlWYWx1ZU1hcDxWPlxuICAgIHwgTWFwPEssIFY+XG5cbi8vIGp1c3QgZXh0ZW5kIE1hcD8gU2VlIGFsc28gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vbmVzdGhhcnVzLzEzYjRkNzRmMmVmNGEyZjQzNTdkYmQzZmMyM2MxZTU0XG4vLyBCdXQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9tb2J4anMvbW9ieC9pc3N1ZXMvMTU1NlxuZXhwb3J0IGNsYXNzIE9ic2VydmFibGVNYXA8SyA9IGFueSwgViA9IGFueT5cbiAgICBpbXBsZW1lbnRzIE1hcDxLLCBWPiwgSUludGVyY2VwdGFibGU8SU1hcFdpbGxDaGFuZ2U8SywgVj4+LCBJTGlzdGVuYWJsZSB7XG4gICAgWyRtb2J4XSA9IE9ic2VydmFibGVNYXBNYXJrZXJcbiAgICBkYXRhXzogTWFwPEssIE9ic2VydmFibGVWYWx1ZTxWPj5cbiAgICBoYXNNYXBfOiBNYXA8SywgT2JzZXJ2YWJsZVZhbHVlPGJvb2xlYW4+PiAvLyBoYXNNYXAsIG5vdCBoYXNoTWFwID4tKS5cbiAgICBrZXlzQXRvbV86IElBdG9tXG4gICAgaW50ZXJjZXB0b3JzX1xuICAgIGNoYW5nZUxpc3RlbmVyc19cbiAgICBkZWhhbmNlcjogYW55XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgaW5pdGlhbERhdGE/OiBJT2JzZXJ2YWJsZU1hcEluaXRpYWxWYWx1ZXM8SywgVj4sXG4gICAgICAgIHB1YmxpYyBlbmhhbmNlcl86IElFbmhhbmNlcjxWPiA9IGRlZXBFbmhhbmNlcixcbiAgICAgICAgcHVibGljIG5hbWVfID0gX19ERVZfXyA/IFwiT2JzZXJ2YWJsZU1hcEBcIiArIGdldE5leHRJZCgpIDogXCJPYnNlcnZhYmxlTWFwXCJcbiAgICApIHtcbiAgICAgICAgaWYgKCFpc0Z1bmN0aW9uKE1hcCkpIHtcbiAgICAgICAgICAgIGRpZSgxOClcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmtleXNBdG9tXyA9IGNyZWF0ZUF0b20oX19ERVZfXyA/IGAke3RoaXMubmFtZV99LmtleXMoKWAgOiBcIk9ic2VydmFibGVNYXAua2V5cygpXCIpXG4gICAgICAgIHRoaXMuZGF0YV8gPSBuZXcgTWFwKClcbiAgICAgICAgdGhpcy5oYXNNYXBfID0gbmV3IE1hcCgpXG4gICAgICAgIHRoaXMubWVyZ2UoaW5pdGlhbERhdGEpXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBoYXNfKGtleTogSyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhXy5oYXMoa2V5KVxuICAgIH1cblxuICAgIGhhcyhrZXk6IEspOiBib29sZWFuIHtcbiAgICAgICAgaWYgKCFnbG9iYWxTdGF0ZS50cmFja2luZ0Rlcml2YXRpb24pIHJldHVybiB0aGlzLmhhc18oa2V5KVxuXG4gICAgICAgIGxldCBlbnRyeSA9IHRoaXMuaGFzTWFwXy5nZXQoa2V5KVxuICAgICAgICBpZiAoIWVudHJ5KSB7XG4gICAgICAgICAgICBjb25zdCBuZXdFbnRyeSA9IChlbnRyeSA9IG5ldyBPYnNlcnZhYmxlVmFsdWUoXG4gICAgICAgICAgICAgICAgdGhpcy5oYXNfKGtleSksXG4gICAgICAgICAgICAgICAgcmVmZXJlbmNlRW5oYW5jZXIsXG4gICAgICAgICAgICAgICAgX19ERVZfXyA/IGAke3RoaXMubmFtZV99LiR7c3RyaW5naWZ5S2V5KGtleSl9P2AgOiBcIk9ic2VydmFibGVNYXAua2V5P1wiLFxuICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgICAgICAgICApKVxuICAgICAgICAgICAgdGhpcy5oYXNNYXBfLnNldChrZXksIG5ld0VudHJ5KVxuICAgICAgICAgICAgb25CZWNvbWVVbm9ic2VydmVkKG5ld0VudHJ5LCAoKSA9PiB0aGlzLmhhc01hcF8uZGVsZXRlKGtleSkpXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZW50cnkuZ2V0KClcbiAgICB9XG5cbiAgICBzZXQoa2V5OiBLLCB2YWx1ZTogVikge1xuICAgICAgICBjb25zdCBoYXNLZXkgPSB0aGlzLmhhc18oa2V5KVxuICAgICAgICBpZiAoaGFzSW50ZXJjZXB0b3JzKHRoaXMpKSB7XG4gICAgICAgICAgICBjb25zdCBjaGFuZ2UgPSBpbnRlcmNlcHRDaGFuZ2U8SU1hcFdpbGxDaGFuZ2U8SywgVj4+KHRoaXMsIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBoYXNLZXkgPyBVUERBVEUgOiBBREQsXG4gICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLFxuICAgICAgICAgICAgICAgIG5ld1ZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgICAgICBuYW1lOiBrZXlcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBpZiAoIWNoYW5nZSkgcmV0dXJuIHRoaXNcbiAgICAgICAgICAgIHZhbHVlID0gY2hhbmdlLm5ld1ZhbHVlIVxuICAgICAgICB9XG4gICAgICAgIGlmIChoYXNLZXkpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlVmFsdWVfKGtleSwgdmFsdWUpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFkZFZhbHVlXyhrZXksIHZhbHVlKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgZGVsZXRlKGtleTogSyk6IGJvb2xlYW4ge1xuICAgICAgICBjaGVja0lmU3RhdGVNb2RpZmljYXRpb25zQXJlQWxsb3dlZCh0aGlzLmtleXNBdG9tXylcbiAgICAgICAgaWYgKGhhc0ludGVyY2VwdG9ycyh0aGlzKSkge1xuICAgICAgICAgICAgY29uc3QgY2hhbmdlID0gaW50ZXJjZXB0Q2hhbmdlPElNYXBXaWxsQ2hhbmdlPEssIFY+Pih0aGlzLCB7XG4gICAgICAgICAgICAgICAgdHlwZTogREVMRVRFLFxuICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcyxcbiAgICAgICAgICAgICAgICBuYW1lOiBrZXlcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBpZiAoIWNoYW5nZSkgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaGFzXyhrZXkpKSB7XG4gICAgICAgICAgICBjb25zdCBub3RpZnlTcHkgPSBpc1NweUVuYWJsZWQoKVxuICAgICAgICAgICAgY29uc3Qgbm90aWZ5ID0gaGFzTGlzdGVuZXJzKHRoaXMpXG4gICAgICAgICAgICBjb25zdCBjaGFuZ2U6IElNYXBEaWRDaGFuZ2U8SywgVj4gfCBudWxsID1cbiAgICAgICAgICAgICAgICBub3RpZnkgfHwgbm90aWZ5U3B5XG4gICAgICAgICAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZhYmxlS2luZDogXCJtYXBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVidWdPYmplY3ROYW1lOiB0aGlzLm5hbWVfLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBERUxFVEUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb2xkVmFsdWU6ICg8YW55PnRoaXMuZGF0YV8uZ2V0KGtleSkpLnZhbHVlXyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZToga2V5XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICA6IG51bGxcblxuICAgICAgICAgICAgaWYgKF9fREVWX18gJiYgbm90aWZ5U3B5KSBzcHlSZXBvcnRTdGFydChjaGFuZ2UhKVxuICAgICAgICAgICAgdHJhbnNhY3Rpb24oKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMua2V5c0F0b21fLnJlcG9ydENoYW5nZWQoKVxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlSGFzTWFwRW50cnlfKGtleSwgZmFsc2UpXG4gICAgICAgICAgICAgICAgY29uc3Qgb2JzZXJ2YWJsZSA9IHRoaXMuZGF0YV8uZ2V0KGtleSkhXG4gICAgICAgICAgICAgICAgb2JzZXJ2YWJsZS5zZXROZXdWYWx1ZV8odW5kZWZpbmVkIGFzIGFueSlcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGFfLmRlbGV0ZShrZXkpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgaWYgKG5vdGlmeSkgbm90aWZ5TGlzdGVuZXJzKHRoaXMsIGNoYW5nZSlcbiAgICAgICAgICAgIGlmIChfX0RFVl9fICYmIG5vdGlmeVNweSkgc3B5UmVwb3J0RW5kKClcbiAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuXG4gICAgcHJpdmF0ZSB1cGRhdGVIYXNNYXBFbnRyeV8oa2V5OiBLLCB2YWx1ZTogYm9vbGVhbikge1xuICAgICAgICBsZXQgZW50cnkgPSB0aGlzLmhhc01hcF8uZ2V0KGtleSlcbiAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgICBlbnRyeS5zZXROZXdWYWx1ZV8odmFsdWUpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHVwZGF0ZVZhbHVlXyhrZXk6IEssIG5ld1ZhbHVlOiBWIHwgdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IG9ic2VydmFibGUgPSB0aGlzLmRhdGFfLmdldChrZXkpIVxuICAgICAgICBuZXdWYWx1ZSA9IChvYnNlcnZhYmxlIGFzIGFueSkucHJlcGFyZU5ld1ZhbHVlXyhuZXdWYWx1ZSkgYXMgVlxuICAgICAgICBpZiAobmV3VmFsdWUgIT09IGdsb2JhbFN0YXRlLlVOQ0hBTkdFRCkge1xuICAgICAgICAgICAgY29uc3Qgbm90aWZ5U3B5ID0gaXNTcHlFbmFibGVkKClcbiAgICAgICAgICAgIGNvbnN0IG5vdGlmeSA9IGhhc0xpc3RlbmVycyh0aGlzKVxuICAgICAgICAgICAgY29uc3QgY2hhbmdlOiBJTWFwRGlkQ2hhbmdlPEssIFY+IHwgbnVsbCA9XG4gICAgICAgICAgICAgICAgbm90aWZ5IHx8IG5vdGlmeVNweVxuICAgICAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2YWJsZUtpbmQ6IFwibWFwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnT2JqZWN0TmFtZTogdGhpcy5uYW1lXyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogVVBEQVRFLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG9sZFZhbHVlOiAob2JzZXJ2YWJsZSBhcyBhbnkpLnZhbHVlXyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZToga2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgOiBudWxsXG4gICAgICAgICAgICBpZiAoX19ERVZfXyAmJiBub3RpZnlTcHkpIHNweVJlcG9ydFN0YXJ0KGNoYW5nZSEpXG4gICAgICAgICAgICBvYnNlcnZhYmxlLnNldE5ld1ZhbHVlXyhuZXdWYWx1ZSBhcyBWKVxuICAgICAgICAgICAgaWYgKG5vdGlmeSkgbm90aWZ5TGlzdGVuZXJzKHRoaXMsIGNoYW5nZSlcbiAgICAgICAgICAgIGlmIChfX0RFVl9fICYmIG5vdGlmeVNweSkgc3B5UmVwb3J0RW5kKClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgYWRkVmFsdWVfKGtleTogSywgbmV3VmFsdWU6IFYpIHtcbiAgICAgICAgY2hlY2tJZlN0YXRlTW9kaWZpY2F0aW9uc0FyZUFsbG93ZWQodGhpcy5rZXlzQXRvbV8pXG4gICAgICAgIHRyYW5zYWN0aW9uKCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZVZhbHVlKFxuICAgICAgICAgICAgICAgIG5ld1ZhbHVlLFxuICAgICAgICAgICAgICAgIHRoaXMuZW5oYW5jZXJfLFxuICAgICAgICAgICAgICAgIF9fREVWX18gPyBgJHt0aGlzLm5hbWVffS4ke3N0cmluZ2lmeUtleShrZXkpfWAgOiBcIk9ic2VydmFibGVNYXAua2V5XCIsXG4gICAgICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIHRoaXMuZGF0YV8uc2V0KGtleSwgb2JzZXJ2YWJsZSlcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gKG9ic2VydmFibGUgYXMgYW55KS52YWx1ZV8gLy8gdmFsdWUgbWlnaHQgaGF2ZSBiZWVuIGNoYW5nZWRcbiAgICAgICAgICAgIHRoaXMudXBkYXRlSGFzTWFwRW50cnlfKGtleSwgdHJ1ZSlcbiAgICAgICAgICAgIHRoaXMua2V5c0F0b21fLnJlcG9ydENoYW5nZWQoKVxuICAgICAgICB9KVxuICAgICAgICBjb25zdCBub3RpZnlTcHkgPSBpc1NweUVuYWJsZWQoKVxuICAgICAgICBjb25zdCBub3RpZnkgPSBoYXNMaXN0ZW5lcnModGhpcylcbiAgICAgICAgY29uc3QgY2hhbmdlOiBJTWFwRGlkQ2hhbmdlPEssIFY+IHwgbnVsbCA9XG4gICAgICAgICAgICBub3RpZnkgfHwgbm90aWZ5U3B5XG4gICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2YWJsZUtpbmQ6IFwibWFwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgZGVidWdPYmplY3ROYW1lOiB0aGlzLm5hbWVfLFxuICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IEFERCxcbiAgICAgICAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgbmFtZToga2V5LFxuICAgICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgOiBudWxsXG4gICAgICAgIGlmIChfX0RFVl9fICYmIG5vdGlmeVNweSkgc3B5UmVwb3J0U3RhcnQoY2hhbmdlISlcbiAgICAgICAgaWYgKG5vdGlmeSkgbm90aWZ5TGlzdGVuZXJzKHRoaXMsIGNoYW5nZSlcbiAgICAgICAgaWYgKF9fREVWX18gJiYgbm90aWZ5U3B5KSBzcHlSZXBvcnRFbmQoKVxuICAgIH1cblxuICAgIGdldChrZXk6IEspOiBWIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgaWYgKHRoaXMuaGFzKGtleSkpIHJldHVybiB0aGlzLmRlaGFuY2VWYWx1ZV8odGhpcy5kYXRhXy5nZXQoa2V5KSEuZ2V0KCkpXG4gICAgICAgIHJldHVybiB0aGlzLmRlaGFuY2VWYWx1ZV8odW5kZWZpbmVkKVxuICAgIH1cblxuICAgIHByaXZhdGUgZGVoYW5jZVZhbHVlXzxYIGV4dGVuZHMgViB8IHVuZGVmaW5lZD4odmFsdWU6IFgpOiBYIHtcbiAgICAgICAgaWYgKHRoaXMuZGVoYW5jZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVoYW5jZXIodmFsdWUpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlXG4gICAgfVxuXG4gICAga2V5cygpOiBJdGVyYWJsZUl0ZXJhdG9yPEs+IHtcbiAgICAgICAgdGhpcy5rZXlzQXRvbV8ucmVwb3J0T2JzZXJ2ZWQoKVxuICAgICAgICByZXR1cm4gdGhpcy5kYXRhXy5rZXlzKClcbiAgICB9XG5cbiAgICB2YWx1ZXMoKTogSXRlcmFibGVJdGVyYXRvcjxWPiB7XG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzXG4gICAgICAgIGNvbnN0IGtleXMgPSB0aGlzLmtleXMoKVxuICAgICAgICByZXR1cm4gbWFrZUl0ZXJhYmxlKHtcbiAgICAgICAgICAgIG5leHQoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBkb25lLCB2YWx1ZSB9ID0ga2V5cy5uZXh0KClcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBkb25lLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZG9uZSA/ICh1bmRlZmluZWQgYXMgYW55KSA6IHNlbGYuZ2V0KHZhbHVlKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBlbnRyaWVzKCk6IEl0ZXJhYmxlSXRlcmF0b3I8SU1hcEVudHJ5PEssIFY+PiB7XG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzXG4gICAgICAgIGNvbnN0IGtleXMgPSB0aGlzLmtleXMoKVxuICAgICAgICByZXR1cm4gbWFrZUl0ZXJhYmxlKHtcbiAgICAgICAgICAgIG5leHQoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBkb25lLCB2YWx1ZSB9ID0ga2V5cy5uZXh0KClcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBkb25lLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZG9uZSA/ICh1bmRlZmluZWQgYXMgYW55KSA6IChbdmFsdWUsIHNlbGYuZ2V0KHZhbHVlKSFdIGFzIFtLLCBWXSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVudHJpZXMoKVxuICAgIH1cblxuICAgIGZvckVhY2goY2FsbGJhY2s6ICh2YWx1ZTogViwga2V5OiBLLCBvYmplY3Q6IE1hcDxLLCBWPikgPT4gdm9pZCwgdGhpc0FyZz8pIHtcbiAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgdGhpcykgY2FsbGJhY2suY2FsbCh0aGlzQXJnLCB2YWx1ZSwga2V5LCB0aGlzKVxuICAgIH1cblxuICAgIC8qKiBNZXJnZSBhbm90aGVyIG9iamVjdCBpbnRvIHRoaXMgb2JqZWN0LCByZXR1cm5zIHRoaXMuICovXG4gICAgbWVyZ2Uob3RoZXI6IE9ic2VydmFibGVNYXA8SywgVj4gfCBJS2V5VmFsdWVNYXA8Vj4gfCBhbnkpOiBPYnNlcnZhYmxlTWFwPEssIFY+IHtcbiAgICAgICAgaWYgKGlzT2JzZXJ2YWJsZU1hcChvdGhlcikpIHtcbiAgICAgICAgICAgIG90aGVyID0gbmV3IE1hcChvdGhlcilcbiAgICAgICAgfVxuICAgICAgICB0cmFuc2FjdGlvbigoKSA9PiB7XG4gICAgICAgICAgICBpZiAoaXNQbGFpbk9iamVjdChvdGhlcikpXG4gICAgICAgICAgICAgICAgZ2V0UGxhaW5PYmplY3RLZXlzKG90aGVyKS5mb3JFYWNoKChrZXk6IGFueSkgPT5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXQoKGtleSBhcyBhbnkpIGFzIEssIG90aGVyW2tleV0pXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShvdGhlcikpIG90aGVyLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4gdGhpcy5zZXQoa2V5LCB2YWx1ZSkpXG4gICAgICAgICAgICBlbHNlIGlmIChpc0VTNk1hcChvdGhlcikpIHtcbiAgICAgICAgICAgICAgICBpZiAob3RoZXIuY29uc3RydWN0b3IgIT09IE1hcCkgZGllKDE5LCBvdGhlcilcbiAgICAgICAgICAgICAgICBvdGhlci5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB0aGlzLnNldChrZXksIHZhbHVlKSlcbiAgICAgICAgICAgIH0gZWxzZSBpZiAob3RoZXIgIT09IG51bGwgJiYgb3RoZXIgIT09IHVuZGVmaW5lZCkgZGllKDIwLCBvdGhlcilcbiAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICBjbGVhcigpIHtcbiAgICAgICAgdHJhbnNhY3Rpb24oKCkgPT4ge1xuICAgICAgICAgICAgdW50cmFja2VkKCgpID0+IHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiB0aGlzLmtleXMoKSkgdGhpcy5kZWxldGUoa2V5KVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICByZXBsYWNlKHZhbHVlczogT2JzZXJ2YWJsZU1hcDxLLCBWPiB8IElLZXlWYWx1ZU1hcDxWPiB8IGFueSk6IE9ic2VydmFibGVNYXA8SywgVj4ge1xuICAgICAgICAvLyBJbXBsZW1lbnRhdGlvbiByZXF1aXJlbWVudHM6XG4gICAgICAgIC8vIC0gcmVzcGVjdCBvcmRlcmluZyBvZiByZXBsYWNlbWVudCBtYXBcbiAgICAgICAgLy8gLSBhbGxvdyBpbnRlcmNlcHRvcnMgdG8gcnVuIGFuZCBwb3RlbnRpYWxseSBwcmV2ZW50IGluZGl2aWR1YWwgb3BlcmF0aW9uc1xuICAgICAgICAvLyAtIGRvbid0IHJlY3JlYXRlIG9ic2VydmFibGVzIHRoYXQgYWxyZWFkeSBleGlzdCBpbiBvcmlnaW5hbCBtYXAgKHNvIHdlIGRvbid0IGRlc3Ryb3kgZXhpc3Rpbmcgc3Vic2NyaXB0aW9ucylcbiAgICAgICAgLy8gLSBkb24ndCBfa2V5c0F0b20ucmVwb3J0Q2hhbmdlZCBpZiB0aGUga2V5cyBvZiByZXN1bHRpbmcgbWFwIGFyZSBpbmRlbnRpY2FsIChvcmRlciBtYXR0ZXJzISlcbiAgICAgICAgLy8gLSBub3RlIHRoYXQgcmVzdWx0IG1hcCBtYXkgZGlmZmVyIGZyb20gcmVwbGFjZW1lbnQgbWFwIGR1ZSB0byB0aGUgaW50ZXJjZXB0b3JzXG4gICAgICAgIHRyYW5zYWN0aW9uKCgpID0+IHtcbiAgICAgICAgICAgIC8vIENvbnZlcnQgdG8gbWFwIHNvIHdlIGNhbiBkbyBxdWljayBrZXkgbG9va3Vwc1xuICAgICAgICAgICAgY29uc3QgcmVwbGFjZW1lbnRNYXAgPSBjb252ZXJ0VG9NYXAodmFsdWVzKVxuICAgICAgICAgICAgY29uc3Qgb3JkZXJlZERhdGEgPSBuZXcgTWFwKClcbiAgICAgICAgICAgIC8vIFVzZWQgZm9yIG9wdGltaXphdGlvblxuICAgICAgICAgICAgbGV0IGtleXNSZXBvcnRDaGFuZ2VkQ2FsbGVkID0gZmFsc2VcbiAgICAgICAgICAgIC8vIERlbGV0ZSBrZXlzIHRoYXQgZG9uJ3QgZXhpc3QgaW4gcmVwbGFjZW1lbnQgbWFwXG4gICAgICAgICAgICAvLyBpZiB0aGUga2V5IGRlbGV0aW9uIGlzIHByZXZlbnRlZCBieSBpbnRlcmNlcHRvclxuICAgICAgICAgICAgLy8gYWRkIGVudHJ5IGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIHJlc3VsdCBtYXBcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IG9mIHRoaXMuZGF0YV8ua2V5cygpKSB7XG4gICAgICAgICAgICAgICAgLy8gQ29uY3VycmVudGx5IGl0ZXJhdGluZy9kZWxldGluZyBrZXlzXG4gICAgICAgICAgICAgICAgLy8gaXRlcmF0b3Igc2hvdWxkIGhhbmRsZSB0aGlzIGNvcnJlY3RseVxuICAgICAgICAgICAgICAgIGlmICghcmVwbGFjZW1lbnRNYXAuaGFzKGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVsZXRlZCA9IHRoaXMuZGVsZXRlKGtleSlcbiAgICAgICAgICAgICAgICAgICAgLy8gV2FzIHRoZSBrZXkgcmVtb3ZlZD9cbiAgICAgICAgICAgICAgICAgICAgaWYgKGRlbGV0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIF9rZXlzQXRvbS5yZXBvcnRDaGFuZ2VkKCkgd2FzIGFscmVhZHkgY2FsbGVkXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXlzUmVwb3J0Q2hhbmdlZENhbGxlZCA9IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIERlbGV0ZSBwcmV2ZW50ZWQgYnkgaW50ZXJjZXB0b3JcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5kYXRhXy5nZXQoa2V5KVxuICAgICAgICAgICAgICAgICAgICAgICAgb3JkZXJlZERhdGEuc2V0KGtleSwgdmFsdWUpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBNZXJnZSBlbnRyaWVzXG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiByZXBsYWNlbWVudE1hcC5lbnRyaWVzKCkpIHtcbiAgICAgICAgICAgICAgICAvLyBXZSB3aWxsIHdhbnQgdG8ga25vdyB3aGV0aGVyIGEgbmV3IGtleSBpcyBhZGRlZFxuICAgICAgICAgICAgICAgIGNvbnN0IGtleUV4aXN0ZWQgPSB0aGlzLmRhdGFfLmhhcyhrZXkpXG4gICAgICAgICAgICAgICAgLy8gQWRkIG9yIHVwZGF0ZSB2YWx1ZVxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KGtleSwgdmFsdWUpXG4gICAgICAgICAgICAgICAgLy8gVGhlIGFkZGl0aW9uIGNvdWxkIGhhdmUgYmVlbiBwcmV2ZW50IGJ5IGludGVyY2VwdG9yXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZGF0YV8uaGFzKGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIHVwZGF0ZSBjb3VsZCBoYXZlIGJlZW4gcHJldmVudGVkIGJ5IGludGVyY2VwdG9yXG4gICAgICAgICAgICAgICAgICAgIC8vIGFuZCBhbHNvIHdlIHdhbnQgdG8gcHJlc2VydmUgZXhpc3RpbmcgdmFsdWVzXG4gICAgICAgICAgICAgICAgICAgIC8vIHNvIHVzZSB2YWx1ZSBmcm9tIF9kYXRhIG1hcCAoaW5zdGVhZCBvZiByZXBsYWNlbWVudCBtYXApXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5kYXRhXy5nZXQoa2V5KVxuICAgICAgICAgICAgICAgICAgICBvcmRlcmVkRGF0YS5zZXQoa2V5LCB2YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgLy8gV2FzIGEgbmV3IGtleSBhZGRlZD9cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFrZXlFeGlzdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBfa2V5c0F0b20ucmVwb3J0Q2hhbmdlZCgpIHdhcyBhbHJlYWR5IGNhbGxlZFxuICAgICAgICAgICAgICAgICAgICAgICAga2V5c1JlcG9ydENoYW5nZWRDYWxsZWQgPSB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBDaGVjayBmb3IgcG9zc2libGUga2V5IG9yZGVyIGNoYW5nZVxuICAgICAgICAgICAgaWYgKCFrZXlzUmVwb3J0Q2hhbmdlZENhbGxlZCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRhdGFfLnNpemUgIT09IG9yZGVyZWREYXRhLnNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgc2l6ZSBkaWZmZXJzLCBrZXlzIGFyZSBkZWZpbml0ZWx5IG1vZGlmaWVkXG4gICAgICAgICAgICAgICAgICAgIHRoaXMua2V5c0F0b21fLnJlcG9ydENoYW5nZWQoKVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ZXIxID0gdGhpcy5kYXRhXy5rZXlzKClcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXRlcjIgPSBvcmRlcmVkRGF0YS5rZXlzKClcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5leHQxID0gaXRlcjEubmV4dCgpXG4gICAgICAgICAgICAgICAgICAgIGxldCBuZXh0MiA9IGl0ZXIyLm5leHQoKVxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoIW5leHQxLmRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXh0MS52YWx1ZSAhPT0gbmV4dDIudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmtleXNBdG9tXy5yZXBvcnRDaGFuZ2VkKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dDEgPSBpdGVyMS5uZXh0KClcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHQyID0gaXRlcjIubmV4dCgpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBVc2UgY29ycmVjdGx5IG9yZGVyZWQgbWFwXG4gICAgICAgICAgICB0aGlzLmRhdGFfID0gb3JkZXJlZERhdGFcbiAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICBnZXQgc2l6ZSgpOiBudW1iZXIge1xuICAgICAgICB0aGlzLmtleXNBdG9tXy5yZXBvcnRPYnNlcnZlZCgpXG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFfLnNpemVcbiAgICB9XG5cbiAgICB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gXCJbb2JqZWN0IE9ic2VydmFibGVNYXBdXCJcbiAgICB9XG5cbiAgICB0b0pTT04oKTogW0ssIFZdW10ge1xuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzKVxuICAgIH1cblxuICAgIGdldCBbU3ltYm9sLnRvU3RyaW5nVGFnXSgpIHtcbiAgICAgICAgcmV0dXJuIFwiTWFwXCJcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPYnNlcnZlcyB0aGlzIG9iamVjdC4gVHJpZ2dlcnMgZm9yIHRoZSBldmVudHMgJ2FkZCcsICd1cGRhdGUnIGFuZCAnZGVsZXRlJy5cbiAgICAgKiBTZWU6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9vYnNlcnZlXG4gICAgICogZm9yIGNhbGxiYWNrIGRldGFpbHNcbiAgICAgKi9cbiAgICBvYnNlcnZlXyhsaXN0ZW5lcjogKGNoYW5nZXM6IElNYXBEaWRDaGFuZ2U8SywgVj4pID0+IHZvaWQsIGZpcmVJbW1lZGlhdGVseT86IGJvb2xlYW4pOiBMYW1iZGEge1xuICAgICAgICBpZiAoX19ERVZfXyAmJiBmaXJlSW1tZWRpYXRlbHkgPT09IHRydWUpXG4gICAgICAgICAgICBkaWUoXCJgb2JzZXJ2ZWAgZG9lc24ndCBzdXBwb3J0IGZpcmVJbW1lZGlhdGVseT10cnVlIGluIGNvbWJpbmF0aW9uIHdpdGggbWFwcy5cIilcbiAgICAgICAgcmV0dXJuIHJlZ2lzdGVyTGlzdGVuZXIodGhpcywgbGlzdGVuZXIpXG4gICAgfVxuXG4gICAgaW50ZXJjZXB0XyhoYW5kbGVyOiBJSW50ZXJjZXB0b3I8SU1hcFdpbGxDaGFuZ2U8SywgVj4+KTogTGFtYmRhIHtcbiAgICAgICAgcmV0dXJuIHJlZ2lzdGVySW50ZXJjZXB0b3IodGhpcywgaGFuZGxlcilcbiAgICB9XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuZXhwb3J0IHZhciBpc09ic2VydmFibGVNYXAgPSBjcmVhdGVJbnN0YW5jZW9mUHJlZGljYXRlKFwiT2JzZXJ2YWJsZU1hcFwiLCBPYnNlcnZhYmxlTWFwKSBhcyAoXG4gICAgdGhpbmc6IGFueVxuKSA9PiB0aGluZyBpcyBPYnNlcnZhYmxlTWFwPGFueSwgYW55PlxuXG5mdW5jdGlvbiBjb252ZXJ0VG9NYXAoZGF0YVN0cnVjdHVyZTogYW55KTogTWFwPGFueSwgYW55PiB7XG4gICAgaWYgKGlzRVM2TWFwKGRhdGFTdHJ1Y3R1cmUpIHx8IGlzT2JzZXJ2YWJsZU1hcChkYXRhU3RydWN0dXJlKSkge1xuICAgICAgICByZXR1cm4gZGF0YVN0cnVjdHVyZVxuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShkYXRhU3RydWN0dXJlKSkge1xuICAgICAgICByZXR1cm4gbmV3IE1hcChkYXRhU3RydWN0dXJlKVxuICAgIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdChkYXRhU3RydWN0dXJlKSkge1xuICAgICAgICBjb25zdCBtYXAgPSBuZXcgTWFwKClcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gZGF0YVN0cnVjdHVyZSkge1xuICAgICAgICAgICAgbWFwLnNldChrZXksIGRhdGFTdHJ1Y3R1cmVba2V5XSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWFwXG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRpZSgyMSwgZGF0YVN0cnVjdHVyZSlcbiAgICB9XG59XG4iLCJpbXBvcnQge1xuICAgICRtb2J4LFxuICAgIGNyZWF0ZUF0b20sXG4gICAgZGVlcEVuaGFuY2VyLFxuICAgIGdldE5leHRJZCxcbiAgICBJRW5oYW5jZXIsXG4gICAgaXNTcHlFbmFibGVkLFxuICAgIGhhc0xpc3RlbmVycyxcbiAgICBJTGlzdGVuYWJsZSxcbiAgICByZWdpc3Rlckxpc3RlbmVyLFxuICAgIExhbWJkYSxcbiAgICBzcHlSZXBvcnRTdGFydCxcbiAgICBub3RpZnlMaXN0ZW5lcnMsXG4gICAgc3B5UmVwb3J0RW5kLFxuICAgIGNyZWF0ZUluc3RhbmNlb2ZQcmVkaWNhdGUsXG4gICAgaGFzSW50ZXJjZXB0b3JzLFxuICAgIGludGVyY2VwdENoYW5nZSxcbiAgICBJSW50ZXJjZXB0YWJsZSxcbiAgICBJSW50ZXJjZXB0b3IsXG4gICAgcmVnaXN0ZXJJbnRlcmNlcHRvcixcbiAgICBjaGVja0lmU3RhdGVNb2RpZmljYXRpb25zQXJlQWxsb3dlZCxcbiAgICB1bnRyYWNrZWQsXG4gICAgbWFrZUl0ZXJhYmxlLFxuICAgIHRyYW5zYWN0aW9uLFxuICAgIGlzRVM2U2V0LFxuICAgIElBdG9tLFxuICAgIERFTEVURSxcbiAgICBBREQsXG4gICAgZGllLFxuICAgIGlzRnVuY3Rpb25cbn0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuY29uc3QgT2JzZXJ2YWJsZVNldE1hcmtlciA9IHt9XG5cbmV4cG9ydCB0eXBlIElPYnNlcnZhYmxlU2V0SW5pdGlhbFZhbHVlczxUPiA9IFNldDxUPiB8IHJlYWRvbmx5IFRbXVxuXG5leHBvcnQgdHlwZSBJU2V0RGlkQ2hhbmdlPFQgPSBhbnk+ID1cbiAgICB8IHtcbiAgICAgICAgICBvYmplY3Q6IE9ic2VydmFibGVTZXQ8VD5cbiAgICAgICAgICBvYnNlcnZhYmxlS2luZDogXCJzZXRcIlxuICAgICAgICAgIGRlYnVnT2JqZWN0TmFtZTogc3RyaW5nXG4gICAgICAgICAgdHlwZTogXCJhZGRcIlxuICAgICAgICAgIG5ld1ZhbHVlOiBUXG4gICAgICB9XG4gICAgfCB7XG4gICAgICAgICAgb2JqZWN0OiBPYnNlcnZhYmxlU2V0PFQ+XG4gICAgICAgICAgb2JzZXJ2YWJsZUtpbmQ6IFwic2V0XCJcbiAgICAgICAgICBkZWJ1Z09iamVjdE5hbWU6IHN0cmluZ1xuICAgICAgICAgIHR5cGU6IFwiZGVsZXRlXCJcbiAgICAgICAgICBvbGRWYWx1ZTogVFxuICAgICAgfVxuXG5leHBvcnQgdHlwZSBJU2V0V2lsbENoYW5nZTxUID0gYW55PiA9XG4gICAgfCB7XG4gICAgICAgICAgdHlwZTogXCJkZWxldGVcIlxuICAgICAgICAgIG9iamVjdDogT2JzZXJ2YWJsZVNldDxUPlxuICAgICAgICAgIG9sZFZhbHVlOiBUXG4gICAgICB9XG4gICAgfCB7XG4gICAgICAgICAgdHlwZTogXCJhZGRcIlxuICAgICAgICAgIG9iamVjdDogT2JzZXJ2YWJsZVNldDxUPlxuICAgICAgICAgIG5ld1ZhbHVlOiBUXG4gICAgICB9XG5cbmV4cG9ydCBjbGFzcyBPYnNlcnZhYmxlU2V0PFQgPSBhbnk+IGltcGxlbWVudHMgU2V0PFQ+LCBJSW50ZXJjZXB0YWJsZTxJU2V0V2lsbENoYW5nZT4sIElMaXN0ZW5hYmxlIHtcbiAgICBbJG1vYnhdID0gT2JzZXJ2YWJsZVNldE1hcmtlclxuICAgIHByaXZhdGUgZGF0YV86IFNldDxhbnk+ID0gbmV3IFNldCgpXG4gICAgcHJpdmF0ZSBhdG9tXzogSUF0b21cbiAgICBjaGFuZ2VMaXN0ZW5lcnNfXG4gICAgaW50ZXJjZXB0b3JzX1xuICAgIGRlaGFuY2VyOiBhbnlcbiAgICBlbmhhbmNlcl86IChuZXdWOiBhbnksIG9sZFY6IGFueSB8IHVuZGVmaW5lZCkgPT4gYW55XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgaW5pdGlhbERhdGE/OiBJT2JzZXJ2YWJsZVNldEluaXRpYWxWYWx1ZXM8VD4sXG4gICAgICAgIGVuaGFuY2VyOiBJRW5oYW5jZXI8VD4gPSBkZWVwRW5oYW5jZXIsXG4gICAgICAgIHB1YmxpYyBuYW1lXyA9IF9fREVWX18gPyBcIk9ic2VydmFibGVTZXRAXCIgKyBnZXROZXh0SWQoKSA6IFwiT2JzZXJ2YWJsZVNldFwiXG4gICAgKSB7XG4gICAgICAgIGlmICghaXNGdW5jdGlvbihTZXQpKSB7XG4gICAgICAgICAgICBkaWUoMjIpXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hdG9tXyA9IGNyZWF0ZUF0b20odGhpcy5uYW1lXylcbiAgICAgICAgdGhpcy5lbmhhbmNlcl8gPSAobmV3Viwgb2xkVikgPT4gZW5oYW5jZXIobmV3Viwgb2xkViwgbmFtZV8pXG4gICAgICAgIGlmIChpbml0aWFsRGF0YSkge1xuICAgICAgICAgICAgdGhpcy5yZXBsYWNlKGluaXRpYWxEYXRhKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBkZWhhbmNlVmFsdWVfPFggZXh0ZW5kcyBUIHwgdW5kZWZpbmVkPih2YWx1ZTogWCk6IFgge1xuICAgICAgICBpZiAodGhpcy5kZWhhbmNlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kZWhhbmNlcih2YWx1ZSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWVcbiAgICB9XG5cbiAgICBjbGVhcigpIHtcbiAgICAgICAgdHJhbnNhY3Rpb24oKCkgPT4ge1xuICAgICAgICAgICAgdW50cmFja2VkKCgpID0+IHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIHRoaXMuZGF0YV8udmFsdWVzKCkpIHRoaXMuZGVsZXRlKHZhbHVlKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBmb3JFYWNoKGNhbGxiYWNrRm46ICh2YWx1ZTogVCwgdmFsdWUyOiBULCBzZXQ6IFNldDxUPikgPT4gdm9pZCwgdGhpc0FyZz86IGFueSkge1xuICAgICAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIHRoaXMpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrRm4uY2FsbCh0aGlzQXJnLCB2YWx1ZSwgdmFsdWUsIHRoaXMpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgc2l6ZSgpIHtcbiAgICAgICAgdGhpcy5hdG9tXy5yZXBvcnRPYnNlcnZlZCgpXG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFfLnNpemVcbiAgICB9XG5cbiAgICBhZGQodmFsdWU6IFQpIHtcbiAgICAgICAgY2hlY2tJZlN0YXRlTW9kaWZpY2F0aW9uc0FyZUFsbG93ZWQodGhpcy5hdG9tXylcbiAgICAgICAgaWYgKGhhc0ludGVyY2VwdG9ycyh0aGlzKSkge1xuICAgICAgICAgICAgY29uc3QgY2hhbmdlID0gaW50ZXJjZXB0Q2hhbmdlPElTZXRXaWxsQ2hhbmdlPFQ+Pih0aGlzLCB7XG4gICAgICAgICAgICAgICAgdHlwZTogQURELFxuICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcyxcbiAgICAgICAgICAgICAgICBuZXdWYWx1ZTogdmFsdWVcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBpZiAoIWNoYW5nZSkgcmV0dXJuIHRoaXNcbiAgICAgICAgICAgIC8vIGlkZWFsbHksIHZhbHVlID0gY2hhbmdlLnZhbHVlIHdvdWxkIGJlIGRvbmUgaGVyZSwgc28gdGhhdCB2YWx1ZXMgY2FuIGJlXG4gICAgICAgICAgICAvLyBjaGFuZ2VkIGJ5IGludGVyY2VwdG9yLiBTYW1lIGFwcGxpZXMgZm9yIG90aGVyIFNldCBhbmQgTWFwIGFwaSdzLlxuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5oYXModmFsdWUpKSB7XG4gICAgICAgICAgICB0cmFuc2FjdGlvbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhXy5hZGQodGhpcy5lbmhhbmNlcl8odmFsdWUsIHVuZGVmaW5lZCkpXG4gICAgICAgICAgICAgICAgdGhpcy5hdG9tXy5yZXBvcnRDaGFuZ2VkKClcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBjb25zdCBub3RpZnlTcHkgPSBfX0RFVl9fICYmIGlzU3B5RW5hYmxlZCgpXG4gICAgICAgICAgICBjb25zdCBub3RpZnkgPSBoYXNMaXN0ZW5lcnModGhpcylcbiAgICAgICAgICAgIGNvbnN0IGNoYW5nZSA9XG4gICAgICAgICAgICAgICAgbm90aWZ5IHx8IG5vdGlmeVNweVxuICAgICAgICAgICAgICAgICAgICA/IDxJU2V0RGlkQ2hhbmdlPFQ+PntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2YWJsZUtpbmQ6IFwic2V0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnT2JqZWN0TmFtZTogdGhpcy5uYW1lXyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogQURELFxuICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlOiB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgOiBudWxsXG4gICAgICAgICAgICBpZiAobm90aWZ5U3B5ICYmIF9fREVWX18pIHNweVJlcG9ydFN0YXJ0KGNoYW5nZSEpXG4gICAgICAgICAgICBpZiAobm90aWZ5KSBub3RpZnlMaXN0ZW5lcnModGhpcywgY2hhbmdlKVxuICAgICAgICAgICAgaWYgKG5vdGlmeVNweSAmJiBfX0RFVl9fKSBzcHlSZXBvcnRFbmQoKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICBkZWxldGUodmFsdWU6IGFueSkge1xuICAgICAgICBpZiAoaGFzSW50ZXJjZXB0b3JzKHRoaXMpKSB7XG4gICAgICAgICAgICBjb25zdCBjaGFuZ2UgPSBpbnRlcmNlcHRDaGFuZ2U8SVNldFdpbGxDaGFuZ2U8VD4+KHRoaXMsIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBERUxFVEUsXG4gICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLFxuICAgICAgICAgICAgICAgIG9sZFZhbHVlOiB2YWx1ZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGlmICghY2hhbmdlKSByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5oYXModmFsdWUpKSB7XG4gICAgICAgICAgICBjb25zdCBub3RpZnlTcHkgPSBfX0RFVl9fICYmIGlzU3B5RW5hYmxlZCgpXG4gICAgICAgICAgICBjb25zdCBub3RpZnkgPSBoYXNMaXN0ZW5lcnModGhpcylcbiAgICAgICAgICAgIGNvbnN0IGNoYW5nZSA9XG4gICAgICAgICAgICAgICAgbm90aWZ5IHx8IG5vdGlmeVNweVxuICAgICAgICAgICAgICAgICAgICA/IDxJU2V0RGlkQ2hhbmdlPFQ+PntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2YWJsZUtpbmQ6IFwic2V0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnT2JqZWN0TmFtZTogdGhpcy5uYW1lXyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogREVMRVRFLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG9sZFZhbHVlOiB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgOiBudWxsXG5cbiAgICAgICAgICAgIGlmIChub3RpZnlTcHkgJiYgX19ERVZfXykgc3B5UmVwb3J0U3RhcnQoY2hhbmdlISlcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmF0b21fLnJlcG9ydENoYW5nZWQoKVxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YV8uZGVsZXRlKHZhbHVlKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGlmIChub3RpZnkpIG5vdGlmeUxpc3RlbmVycyh0aGlzLCBjaGFuZ2UpXG4gICAgICAgICAgICBpZiAobm90aWZ5U3B5ICYmIF9fREVWX18pIHNweVJlcG9ydEVuZCgpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIGhhcyh2YWx1ZTogYW55KSB7XG4gICAgICAgIHRoaXMuYXRvbV8ucmVwb3J0T2JzZXJ2ZWQoKVxuICAgICAgICByZXR1cm4gdGhpcy5kYXRhXy5oYXModGhpcy5kZWhhbmNlVmFsdWVfKHZhbHVlKSlcbiAgICB9XG5cbiAgICBlbnRyaWVzKCkge1xuICAgICAgICBsZXQgbmV4dEluZGV4ID0gMFxuICAgICAgICBjb25zdCBrZXlzID0gQXJyYXkuZnJvbSh0aGlzLmtleXMoKSlcbiAgICAgICAgY29uc3QgdmFsdWVzID0gQXJyYXkuZnJvbSh0aGlzLnZhbHVlcygpKVxuICAgICAgICByZXR1cm4gbWFrZUl0ZXJhYmxlPFtULCBUXT4oe1xuICAgICAgICAgICAgbmV4dCgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IG5leHRJbmRleFxuICAgICAgICAgICAgICAgIG5leHRJbmRleCArPSAxXG4gICAgICAgICAgICAgICAgcmV0dXJuIGluZGV4IDwgdmFsdWVzLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICA/IHsgdmFsdWU6IFtrZXlzW2luZGV4XSwgdmFsdWVzW2luZGV4XV0sIGRvbmU6IGZhbHNlIH1cbiAgICAgICAgICAgICAgICAgICAgOiB7IGRvbmU6IHRydWUgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGFzIGFueSlcbiAgICB9XG5cbiAgICBrZXlzKCk6IEl0ZXJhYmxlSXRlcmF0b3I8VD4ge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZXMoKVxuICAgIH1cblxuICAgIHZhbHVlcygpOiBJdGVyYWJsZUl0ZXJhdG9yPFQ+IHtcbiAgICAgICAgdGhpcy5hdG9tXy5yZXBvcnRPYnNlcnZlZCgpXG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzXG4gICAgICAgIGxldCBuZXh0SW5kZXggPSAwXG4gICAgICAgIGNvbnN0IG9ic2VydmFibGVWYWx1ZXMgPSBBcnJheS5mcm9tKHRoaXMuZGF0YV8udmFsdWVzKCkpXG4gICAgICAgIHJldHVybiBtYWtlSXRlcmFibGU8VD4oe1xuICAgICAgICAgICAgbmV4dCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV4dEluZGV4IDwgb2JzZXJ2YWJsZVZhbHVlcy5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgPyB7IHZhbHVlOiBzZWxmLmRlaGFuY2VWYWx1ZV8ob2JzZXJ2YWJsZVZhbHVlc1tuZXh0SW5kZXgrK10pLCBkb25lOiBmYWxzZSB9XG4gICAgICAgICAgICAgICAgICAgIDogeyBkb25lOiB0cnVlIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBhcyBhbnkpXG4gICAgfVxuXG4gICAgcmVwbGFjZShvdGhlcjogT2JzZXJ2YWJsZVNldDxUPiB8IElPYnNlcnZhYmxlU2V0SW5pdGlhbFZhbHVlczxUPik6IE9ic2VydmFibGVTZXQ8VD4ge1xuICAgICAgICBpZiAoaXNPYnNlcnZhYmxlU2V0KG90aGVyKSkge1xuICAgICAgICAgICAgb3RoZXIgPSBuZXcgU2V0KG90aGVyKVxuICAgICAgICB9XG5cbiAgICAgICAgdHJhbnNhY3Rpb24oKCkgPT4ge1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkob3RoZXIpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhcigpXG4gICAgICAgICAgICAgICAgb3RoZXIuZm9yRWFjaCh2YWx1ZSA9PiB0aGlzLmFkZCh2YWx1ZSkpXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzRVM2U2V0KG90aGVyKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xlYXIoKVxuICAgICAgICAgICAgICAgIG90aGVyLmZvckVhY2godmFsdWUgPT4gdGhpcy5hZGQodmFsdWUpKVxuICAgICAgICAgICAgfSBlbHNlIGlmIChvdGhlciAhPT0gbnVsbCAmJiBvdGhlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgZGllKFwiQ2Fubm90IGluaXRpYWxpemUgc2V0IGZyb20gXCIgKyBvdGhlcilcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcblxuICAgICAgICByZXR1cm4gdGhpc1xuICAgIH1cbiAgICBvYnNlcnZlXyhsaXN0ZW5lcjogKGNoYW5nZXM6IElTZXREaWRDaGFuZ2U8VD4pID0+IHZvaWQsIGZpcmVJbW1lZGlhdGVseT86IGJvb2xlYW4pOiBMYW1iZGEge1xuICAgICAgICAvLyAuLi4gJ2ZpcmVJbW1lZGlhdGVseScgY291bGQgYWxzbyBiZSB0cnVlP1xuICAgICAgICBpZiAoX19ERVZfXyAmJiBmaXJlSW1tZWRpYXRlbHkgPT09IHRydWUpXG4gICAgICAgICAgICBkaWUoXCJgb2JzZXJ2ZWAgZG9lc24ndCBzdXBwb3J0IGZpcmVJbW1lZGlhdGVseT10cnVlIGluIGNvbWJpbmF0aW9uIHdpdGggc2V0cy5cIilcbiAgICAgICAgcmV0dXJuIHJlZ2lzdGVyTGlzdGVuZXIodGhpcywgbGlzdGVuZXIpXG4gICAgfVxuXG4gICAgaW50ZXJjZXB0XyhoYW5kbGVyOiBJSW50ZXJjZXB0b3I8SVNldFdpbGxDaGFuZ2U8VD4+KTogTGFtYmRhIHtcbiAgICAgICAgcmV0dXJuIHJlZ2lzdGVySW50ZXJjZXB0b3IodGhpcywgaGFuZGxlcilcbiAgICB9XG5cbiAgICB0b0pTT04oKTogVFtdIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20odGhpcylcbiAgICB9XG5cbiAgICB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gXCJbb2JqZWN0IE9ic2VydmFibGVTZXRdXCJcbiAgICB9XG5cbiAgICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVzKClcbiAgICB9XG5cbiAgICBnZXQgW1N5bWJvbC50b1N0cmluZ1RhZ10oKSB7XG4gICAgICAgIHJldHVybiBcIlNldFwiXG4gICAgfVxufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbmV4cG9ydCB2YXIgaXNPYnNlcnZhYmxlU2V0ID0gY3JlYXRlSW5zdGFuY2VvZlByZWRpY2F0ZShcIk9ic2VydmFibGVTZXRcIiwgT2JzZXJ2YWJsZVNldCkgYXMgKFxuICAgIHRoaW5nOiBhbnlcbikgPT4gdGhpbmcgaXMgT2JzZXJ2YWJsZVNldDxhbnk+XG4iLCJpbXBvcnQge1xuICAgIENyZWF0ZU9ic2VydmFibGVPcHRpb25zLFxuICAgIGdldEFubm90YXRpb25Gcm9tT3B0aW9ucyxcbiAgICBwcm9wYWdhdGVDaGFuZ2VkLFxuICAgIGlzQW5ub3RhdGlvbixcbiAgICAkbW9ieCxcbiAgICBBdG9tLFxuICAgIEFubm90YXRpb24sXG4gICAgQ29tcHV0ZWRWYWx1ZSxcbiAgICBJQXRvbSxcbiAgICBJQ29tcHV0ZWRWYWx1ZU9wdGlvbnMsXG4gICAgSUVuaGFuY2VyLFxuICAgIElJbnRlcmNlcHRhYmxlLFxuICAgIElMaXN0ZW5hYmxlLFxuICAgIExhbWJkYSxcbiAgICBPYnNlcnZhYmxlVmFsdWUsXG4gICAgYWRkSGlkZGVuUHJvcCxcbiAgICBjcmVhdGVJbnN0YW5jZW9mUHJlZGljYXRlLFxuICAgIGVuZEJhdGNoLFxuICAgIGdldE5leHRJZCxcbiAgICBoYXNJbnRlcmNlcHRvcnMsXG4gICAgaGFzTGlzdGVuZXJzLFxuICAgIGludGVyY2VwdENoYW5nZSxcbiAgICBpc09iamVjdCxcbiAgICBpc1BsYWluT2JqZWN0LFxuICAgIGlzU3B5RW5hYmxlZCxcbiAgICBub3RpZnlMaXN0ZW5lcnMsXG4gICAgcmVmZXJlbmNlRW5oYW5jZXIsXG4gICAgcmVnaXN0ZXJJbnRlcmNlcHRvcixcbiAgICByZWdpc3Rlckxpc3RlbmVyLFxuICAgIHNweVJlcG9ydEVuZCxcbiAgICBzcHlSZXBvcnRTdGFydCxcbiAgICBzdGFydEJhdGNoLFxuICAgIHN0cmluZ2lmeUtleSxcbiAgICBnbG9iYWxTdGF0ZSxcbiAgICBBREQsXG4gICAgVVBEQVRFLFxuICAgIGRpZSxcbiAgICBoYXNQcm9wLFxuICAgIGdldERlc2NyaXB0b3IsXG4gICAgc3RvcmVkQW5ub3RhdGlvbnNTeW1ib2wsXG4gICAgb3duS2V5cyxcbiAgICBpc092ZXJyaWRlLFxuICAgIGRlZmluZVByb3BlcnR5LFxuICAgIGF1dG9Bbm5vdGF0aW9uLFxuICAgIGdldEFkbWluaXN0cmF0aW9uLFxuICAgIGdldERlYnVnTmFtZSxcbiAgICBvYmplY3RQcm90b3R5cGUsXG4gICAgTWFrZVJlc3VsdFxufSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5jb25zdCBkZXNjcmlwdG9yQ2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpXG5cbmV4cG9ydCB0eXBlIElPYmplY3REaWRDaGFuZ2U8VCA9IGFueT4gPSB7XG4gICAgb2JzZXJ2YWJsZUtpbmQ6IFwib2JqZWN0XCJcbiAgICBuYW1lOiBQcm9wZXJ0eUtleVxuICAgIG9iamVjdDogVFxuICAgIGRlYnVnT2JqZWN0TmFtZTogc3RyaW5nXG59ICYgKFxuICAgIHwge1xuICAgICAgICAgIHR5cGU6IFwiYWRkXCJcbiAgICAgICAgICBuZXdWYWx1ZTogYW55XG4gICAgICB9XG4gICAgfCB7XG4gICAgICAgICAgdHlwZTogXCJ1cGRhdGVcIlxuICAgICAgICAgIG9sZFZhbHVlOiBhbnlcbiAgICAgICAgICBuZXdWYWx1ZTogYW55XG4gICAgICB9XG4gICAgfCB7XG4gICAgICAgICAgdHlwZTogXCJyZW1vdmVcIlxuICAgICAgICAgIG9sZFZhbHVlOiBhbnlcbiAgICAgIH1cbilcblxuZXhwb3J0IHR5cGUgSU9iamVjdFdpbGxDaGFuZ2U8VCA9IGFueT4gPVxuICAgIHwge1xuICAgICAgICAgIG9iamVjdDogVFxuICAgICAgICAgIHR5cGU6IFwidXBkYXRlXCIgfCBcImFkZFwiXG4gICAgICAgICAgbmFtZTogUHJvcGVydHlLZXlcbiAgICAgICAgICBuZXdWYWx1ZTogYW55XG4gICAgICB9XG4gICAgfCB7XG4gICAgICAgICAgb2JqZWN0OiBUXG4gICAgICAgICAgdHlwZTogXCJyZW1vdmVcIlxuICAgICAgICAgIG5hbWU6IFByb3BlcnR5S2V5XG4gICAgICB9XG5cbmNvbnN0IFJFTU9WRSA9IFwicmVtb3ZlXCJcblxuZXhwb3J0IGNsYXNzIE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvblxuICAgIGltcGxlbWVudHMgSUludGVyY2VwdGFibGU8SU9iamVjdFdpbGxDaGFuZ2U+LCBJTGlzdGVuYWJsZSB7XG4gICAga2V5c0F0b21fOiBJQXRvbVxuICAgIGNoYW5nZUxpc3RlbmVyc19cbiAgICBpbnRlcmNlcHRvcnNfXG4gICAgcHJveHlfOiBhbnlcbiAgICBpc1BsYWluT2JqZWN0XzogYm9vbGVhblxuICAgIGFwcGxpZWRBbm5vdGF0aW9uc18/OiBvYmplY3RcbiAgICBwcml2YXRlIHBlbmRpbmdLZXlzXzogdW5kZWZpbmVkIHwgTWFwPFByb3BlcnR5S2V5LCBPYnNlcnZhYmxlVmFsdWU8Ym9vbGVhbj4+XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHVibGljIHRhcmdldF86IGFueSxcbiAgICAgICAgcHVibGljIHZhbHVlc18gPSBuZXcgTWFwPFByb3BlcnR5S2V5LCBPYnNlcnZhYmxlVmFsdWU8YW55PiB8IENvbXB1dGVkVmFsdWU8YW55Pj4oKSxcbiAgICAgICAgcHVibGljIG5hbWVfOiBzdHJpbmcsXG4gICAgICAgIC8vIFVzZWQgYW55dGltZSBhbm5vdGF0aW9uIGlzIG5vdCBleHBsaWNpdGVseSBwcm92aWRlZFxuICAgICAgICBwdWJsaWMgZGVmYXVsdEFubm90YXRpb25fOiBBbm5vdGF0aW9uID0gYXV0b0Fubm90YXRpb25cbiAgICApIHtcbiAgICAgICAgdGhpcy5rZXlzQXRvbV8gPSBuZXcgQXRvbShfX0RFVl9fID8gYCR7dGhpcy5uYW1lX30ua2V5c2AgOiBcIk9ic2VydmFibGVPYmplY3Qua2V5c1wiKVxuICAgICAgICAvLyBPcHRpbWl6YXRpb246IHdlIHVzZSB0aGlzIGZyZXF1ZW50bHlcbiAgICAgICAgdGhpcy5pc1BsYWluT2JqZWN0XyA9IGlzUGxhaW5PYmplY3QodGhpcy50YXJnZXRfKVxuICAgICAgICBpZiAoX19ERVZfXyAmJiAhaXNBbm5vdGF0aW9uKHRoaXMuZGVmYXVsdEFubm90YXRpb25fKSkge1xuICAgICAgICAgICAgZGllKGBkZWZhdWx0QW5ub3RhdGlvbiBtdXN0IGJlIHZhbGlkIGFubm90YXRpb25gKVxuICAgICAgICB9XG4gICAgICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICAgICAgICAvLyBQcmVwYXJlIHN0cnVjdHVyZSBmb3IgdHJhY2tpbmcgd2hpY2ggZmllbGRzIHdlcmUgYWxyZWFkeSBhbm5vdGF0ZWRcbiAgICAgICAgICAgIHRoaXMuYXBwbGllZEFubm90YXRpb25zXyA9IHt9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRPYnNlcnZhYmxlUHJvcFZhbHVlXyhrZXk6IFByb3BlcnR5S2V5KTogYW55IHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVzXy5nZXQoa2V5KSEuZ2V0KClcbiAgICB9XG5cbiAgICBzZXRPYnNlcnZhYmxlUHJvcFZhbHVlXyhrZXk6IFByb3BlcnR5S2V5LCBuZXdWYWx1ZSk6IGJvb2xlYW4gfCBudWxsIHtcbiAgICAgICAgY29uc3Qgb2JzZXJ2YWJsZSA9IHRoaXMudmFsdWVzXy5nZXQoa2V5KVxuICAgICAgICBpZiAob2JzZXJ2YWJsZSBpbnN0YW5jZW9mIENvbXB1dGVkVmFsdWUpIHtcbiAgICAgICAgICAgIG9ic2VydmFibGUuc2V0KG5ld1ZhbHVlKVxuICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGludGVyY2VwdFxuICAgICAgICBpZiAoaGFzSW50ZXJjZXB0b3JzKHRoaXMpKSB7XG4gICAgICAgICAgICBjb25zdCBjaGFuZ2UgPSBpbnRlcmNlcHRDaGFuZ2U8SU9iamVjdFdpbGxDaGFuZ2U+KHRoaXMsIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBVUERBVEUsXG4gICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLnByb3h5XyB8fCB0aGlzLnRhcmdldF8sXG4gICAgICAgICAgICAgICAgbmFtZToga2V5LFxuICAgICAgICAgICAgICAgIG5ld1ZhbHVlXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgaWYgKCFjaGFuZ2UpIHJldHVybiBudWxsXG4gICAgICAgICAgICBuZXdWYWx1ZSA9IChjaGFuZ2UgYXMgYW55KS5uZXdWYWx1ZVxuICAgICAgICB9XG4gICAgICAgIG5ld1ZhbHVlID0gKG9ic2VydmFibGUgYXMgYW55KS5wcmVwYXJlTmV3VmFsdWVfKG5ld1ZhbHVlKVxuXG4gICAgICAgIC8vIG5vdGlmeSBzcHkgJiBvYnNlcnZlcnNcbiAgICAgICAgaWYgKG5ld1ZhbHVlICE9PSBnbG9iYWxTdGF0ZS5VTkNIQU5HRUQpIHtcbiAgICAgICAgICAgIGNvbnN0IG5vdGlmeSA9IGhhc0xpc3RlbmVycyh0aGlzKVxuICAgICAgICAgICAgY29uc3Qgbm90aWZ5U3B5ID0gX19ERVZfXyAmJiBpc1NweUVuYWJsZWQoKVxuICAgICAgICAgICAgY29uc3QgY2hhbmdlOiBJT2JqZWN0RGlkQ2hhbmdlIHwgbnVsbCA9XG4gICAgICAgICAgICAgICAgbm90aWZ5IHx8IG5vdGlmeVNweVxuICAgICAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogVVBEQVRFLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZhYmxlS2luZDogXCJvYmplY3RcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVidWdPYmplY3ROYW1lOiB0aGlzLm5hbWVfLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMucHJveHlfIHx8IHRoaXMudGFyZ2V0XyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb2xkVmFsdWU6IChvYnNlcnZhYmxlIGFzIGFueSkudmFsdWVfLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBrZXksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICA6IG51bGxcblxuICAgICAgICAgICAgaWYgKF9fREVWX18gJiYgbm90aWZ5U3B5KSBzcHlSZXBvcnRTdGFydChjaGFuZ2UhKVxuICAgICAgICAgICAgOyhvYnNlcnZhYmxlIGFzIE9ic2VydmFibGVWYWx1ZTxhbnk+KS5zZXROZXdWYWx1ZV8obmV3VmFsdWUpXG4gICAgICAgICAgICBpZiAobm90aWZ5KSBub3RpZnlMaXN0ZW5lcnModGhpcywgY2hhbmdlKVxuICAgICAgICAgICAgaWYgKF9fREVWX18gJiYgbm90aWZ5U3B5KSBzcHlSZXBvcnRFbmQoKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgZ2V0XyhrZXk6IFByb3BlcnR5S2V5KTogYW55IHtcbiAgICAgICAgaWYgKGdsb2JhbFN0YXRlLnRyYWNraW5nRGVyaXZhdGlvbiAmJiAhaGFzUHJvcCh0aGlzLnRhcmdldF8sIGtleSkpIHtcbiAgICAgICAgICAgIC8vIEtleSBkb2Vzbid0IGV4aXN0IHlldCwgc3Vic2NyaWJlIGZvciBpdCBpbiBjYXNlIGl0J3MgYWRkZWQgbGF0ZXJcbiAgICAgICAgICAgIHRoaXMuaGFzXyhrZXkpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMudGFyZ2V0X1trZXldXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtQcm9wZXJ0eUtleX0ga2V5XG4gICAgICogQHBhcmFtIHthbnl9IHZhbHVlXG4gICAgICogQHBhcmFtIHtBbm5vdGF0aW9ufGJvb2xlYW59IGFubm90YXRpb24gdHJ1ZSAtIHVzZSBkZWZhdWx0IGFubm90YXRpb24sIGZhbHNlIC0gY29weSBhcyBpc1xuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gcHJveHlUcmFwIHdoZXRoZXIgaXQncyBjYWxsZWQgZnJvbSBwcm94eSB0cmFwXG4gICAgICogQHJldHVybnMge2Jvb2xlYW58bnVsbH0gdHJ1ZSBvbiBzdWNjZXNzLCBmYWxzZSBvbiBmYWlsdXJlIChwcm94eVRyYXAgKyBub24tY29uZmlndXJhYmxlKSwgbnVsbCB3aGVuIGNhbmNlbGxlZCBieSBpbnRlcmNlcHRvclxuICAgICAqL1xuICAgIHNldF8oa2V5OiBQcm9wZXJ0eUtleSwgdmFsdWU6IGFueSwgcHJveHlUcmFwOiBib29sZWFuID0gZmFsc2UpOiBib29sZWFuIHwgbnVsbCB7XG4gICAgICAgIC8vIERvbid0IHVzZSAuaGFzKGtleSkgLSB3ZSBjYXJlIGFib3V0IG93blxuICAgICAgICBpZiAoaGFzUHJvcCh0aGlzLnRhcmdldF8sIGtleSkpIHtcbiAgICAgICAgICAgIC8vIEV4aXN0aW5nIHByb3BcbiAgICAgICAgICAgIGlmICh0aGlzLnZhbHVlc18uaGFzKGtleSkpIHtcbiAgICAgICAgICAgICAgICAvLyBPYnNlcnZhYmxlIChjYW4gYmUgaW50ZXJjZXB0ZWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0T2JzZXJ2YWJsZVByb3BWYWx1ZV8oa2V5LCB2YWx1ZSlcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocHJveHlUcmFwKSB7XG4gICAgICAgICAgICAgICAgLy8gTm9uLW9ic2VydmFibGUgLSBwcm94eVxuICAgICAgICAgICAgICAgIHJldHVybiBSZWZsZWN0LnNldCh0aGlzLnRhcmdldF8sIGtleSwgdmFsdWUpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIE5vbi1vYnNlcnZhYmxlXG4gICAgICAgICAgICAgICAgdGhpcy50YXJnZXRfW2tleV0gPSB2YWx1ZVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBOZXcgcHJvcFxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXh0ZW5kXyhcbiAgICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgICAgeyB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LFxuICAgICAgICAgICAgICAgIHRoaXMuZGVmYXVsdEFubm90YXRpb25fLFxuICAgICAgICAgICAgICAgIHByb3h5VHJhcFxuICAgICAgICAgICAgKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gVHJhcCBmb3IgXCJpblwiXG4gICAgaGFzXyhrZXk6IFByb3BlcnR5S2V5KTogYm9vbGVhbiB7XG4gICAgICAgIGlmICghZ2xvYmFsU3RhdGUudHJhY2tpbmdEZXJpdmF0aW9uKSB7XG4gICAgICAgICAgICAvLyBTa2lwIGtleSBzdWJzY3JpcHRpb24gb3V0c2lkZSBkZXJpdmF0aW9uXG4gICAgICAgICAgICByZXR1cm4ga2V5IGluIHRoaXMudGFyZ2V0X1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucGVuZGluZ0tleXNfIHx8PSBuZXcgTWFwKClcbiAgICAgICAgbGV0IGVudHJ5ID0gdGhpcy5wZW5kaW5nS2V5c18uZ2V0KGtleSlcbiAgICAgICAgaWYgKCFlbnRyeSkge1xuICAgICAgICAgICAgZW50cnkgPSBuZXcgT2JzZXJ2YWJsZVZhbHVlKFxuICAgICAgICAgICAgICAgIGtleSBpbiB0aGlzLnRhcmdldF8sXG4gICAgICAgICAgICAgICAgcmVmZXJlbmNlRW5oYW5jZXIsXG4gICAgICAgICAgICAgICAgX19ERVZfXyA/IGAke3RoaXMubmFtZV99LiR7c3RyaW5naWZ5S2V5KGtleSl9P2AgOiBcIk9ic2VydmFibGVPYmplY3Qua2V5P1wiLFxuICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgICAgICAgICApXG4gICAgICAgICAgICB0aGlzLnBlbmRpbmdLZXlzXy5zZXQoa2V5LCBlbnRyeSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZW50cnkuZ2V0KClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1Byb3BlcnR5S2V5fSBrZXlcbiAgICAgKiBAcGFyYW0ge0Fubm90YXRpb258Ym9vbGVhbn0gYW5ub3RhdGlvbiB0cnVlIC0gdXNlIGRlZmF1bHQgYW5ub3RhdGlvbiwgZmFsc2UgLSBpZ25vcmUgcHJvcFxuICAgICAqL1xuICAgIG1ha2VfKGtleTogUHJvcGVydHlLZXksIGFubm90YXRpb246IEFubm90YXRpb24gfCBib29sZWFuKTogdm9pZCB7XG4gICAgICAgIGlmIChhbm5vdGF0aW9uID09PSB0cnVlKSB7XG4gICAgICAgICAgICBhbm5vdGF0aW9uID0gdGhpcy5kZWZhdWx0QW5ub3RhdGlvbl9cbiAgICAgICAgfVxuICAgICAgICBpZiAoYW5ub3RhdGlvbiA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGFzc2VydEFubm90YWJsZSh0aGlzLCBhbm5vdGF0aW9uLCBrZXkpXG4gICAgICAgIGlmICghKGtleSBpbiB0aGlzLnRhcmdldF8pKSB7XG4gICAgICAgICAgICAvLyBUaHJvdyBvbiBtaXNzaW5nIGtleSwgZXhjZXB0IGZvciBkZWNvcmF0b3JzOlxuICAgICAgICAgICAgLy8gRGVjb3JhdG9yIGFubm90YXRpb25zIGFyZSBjb2xsZWN0ZWQgZnJvbSB3aG9sZSBwcm90b3R5cGUgY2hhaW4uXG4gICAgICAgICAgICAvLyBXaGVuIGNhbGxlZCBmcm9tIHN1cGVyKCkgc29tZSBwcm9wcyBtYXkgbm90IGV4aXN0IHlldC5cbiAgICAgICAgICAgIC8vIEhvd2V2ZXIgd2UgZG9uJ3QgaGF2ZSB0byB3b3JyeSBhYm91dCBtaXNzaW5nIHByb3AsXG4gICAgICAgICAgICAvLyBiZWNhdXNlIHRoZSBkZWNvcmF0b3IgbXVzdCBoYXZlIGJlZW4gYXBwbGllZCB0byBzb21ldGhpbmcuXG4gICAgICAgICAgICBpZiAodGhpcy50YXJnZXRfW3N0b3JlZEFubm90YXRpb25zU3ltYm9sXT8uW2tleV0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLy8gd2lsbCBiZSBhbm5vdGF0ZWQgYnkgc3ViY2xhc3MgY29uc3RydWN0b3JcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGllKDEsIGFubm90YXRpb24uYW5ub3RhdGlvblR5cGVfLCBgJHt0aGlzLm5hbWVffS4ke2tleS50b1N0cmluZygpfWApXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHNvdXJjZSA9IHRoaXMudGFyZ2V0X1xuICAgICAgICB3aGlsZSAoc291cmNlICYmIHNvdXJjZSAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgICAgICBjb25zdCBkZXNjcmlwdG9yID0gZ2V0RGVzY3JpcHRvcihzb3VyY2UsIGtleSlcbiAgICAgICAgICAgIGlmIChkZXNjcmlwdG9yKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgb3V0Y29tZSA9IGFubm90YXRpb24ubWFrZV8odGhpcywga2V5LCBkZXNjcmlwdG9yLCBzb3VyY2UpXG4gICAgICAgICAgICAgICAgaWYgKG91dGNvbWUgPT09IE1ha2VSZXN1bHQuQ2FuY2VsKSByZXR1cm5cbiAgICAgICAgICAgICAgICBpZiAob3V0Y29tZSA9PT0gTWFrZVJlc3VsdC5CcmVhaykgYnJlYWtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNvdXJjZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihzb3VyY2UpXG4gICAgICAgIH1cbiAgICAgICAgcmVjb3JkQW5ub3RhdGlvbkFwcGxpZWQodGhpcywgYW5ub3RhdGlvbiwga2V5KVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7UHJvcGVydHlLZXl9IGtleVxuICAgICAqIEBwYXJhbSB7UHJvcGVydHlEZXNjcmlwdG9yfSBkZXNjcmlwdG9yXG4gICAgICogQHBhcmFtIHtBbm5vdGF0aW9ufGJvb2xlYW59IGFubm90YXRpb24gdHJ1ZSAtIHVzZSBkZWZhdWx0IGFubm90YXRpb24sIGZhbHNlIC0gY29weSBhcyBpc1xuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gcHJveHlUcmFwIHdoZXRoZXIgaXQncyBjYWxsZWQgZnJvbSBwcm94eSB0cmFwXG4gICAgICogQHJldHVybnMge2Jvb2xlYW58bnVsbH0gdHJ1ZSBvbiBzdWNjZXNzLCBmYWxzZSBvbiBmYWlsdXJlIChwcm94eVRyYXAgKyBub24tY29uZmlndXJhYmxlKSwgbnVsbCB3aGVuIGNhbmNlbGxlZCBieSBpbnRlcmNlcHRvclxuICAgICAqL1xuICAgIGV4dGVuZF8oXG4gICAgICAgIGtleTogUHJvcGVydHlLZXksXG4gICAgICAgIGRlc2NyaXB0b3I6IFByb3BlcnR5RGVzY3JpcHRvcixcbiAgICAgICAgYW5ub3RhdGlvbjogQW5ub3RhdGlvbiB8IGJvb2xlYW4sXG4gICAgICAgIHByb3h5VHJhcDogYm9vbGVhbiA9IGZhbHNlXG4gICAgKTogYm9vbGVhbiB8IG51bGwge1xuICAgICAgICBpZiAoYW5ub3RhdGlvbiA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgYW5ub3RhdGlvbiA9IHRoaXMuZGVmYXVsdEFubm90YXRpb25fXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFubm90YXRpb24gPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kZWZpbmVQcm9wZXJ0eV8oa2V5LCBkZXNjcmlwdG9yLCBwcm94eVRyYXApXG4gICAgICAgIH1cbiAgICAgICAgYXNzZXJ0QW5ub3RhYmxlKHRoaXMsIGFubm90YXRpb24sIGtleSlcbiAgICAgICAgY29uc3Qgb3V0Y29tZSA9IGFubm90YXRpb24uZXh0ZW5kXyh0aGlzLCBrZXksIGRlc2NyaXB0b3IsIHByb3h5VHJhcClcbiAgICAgICAgaWYgKG91dGNvbWUpIHtcbiAgICAgICAgICAgIHJlY29yZEFubm90YXRpb25BcHBsaWVkKHRoaXMsIGFubm90YXRpb24sIGtleSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0Y29tZVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7UHJvcGVydHlLZXl9IGtleVxuICAgICAqIEBwYXJhbSB7UHJvcGVydHlEZXNjcmlwdG9yfSBkZXNjcmlwdG9yXG4gICAgICogQHBhcmFtIHtib29sZWFufSBwcm94eVRyYXAgd2hldGhlciBpdCdzIGNhbGxlZCBmcm9tIHByb3h5IHRyYXBcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbnxudWxsfSB0cnVlIG9uIHN1Y2Nlc3MsIGZhbHNlIG9uIGZhaWx1cmUgKHByb3h5VHJhcCArIG5vbi1jb25maWd1cmFibGUpLCBudWxsIHdoZW4gY2FuY2VsbGVkIGJ5IGludGVyY2VwdG9yXG4gICAgICovXG4gICAgZGVmaW5lUHJvcGVydHlfKFxuICAgICAgICBrZXk6IFByb3BlcnR5S2V5LFxuICAgICAgICBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3IsXG4gICAgICAgIHByb3h5VHJhcDogYm9vbGVhbiA9IGZhbHNlXG4gICAgKTogYm9vbGVhbiB8IG51bGwge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgc3RhcnRCYXRjaCgpXG5cbiAgICAgICAgICAgIC8vIERlbGV0ZVxuICAgICAgICAgICAgY29uc3QgZGVsZXRlT3V0Y29tZSA9IHRoaXMuZGVsZXRlXyhrZXkpXG4gICAgICAgICAgICBpZiAoIWRlbGV0ZU91dGNvbWUpIHtcbiAgICAgICAgICAgICAgICAvLyBGYWlsdXJlIG9yIGludGVyY2VwdGVkXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlbGV0ZU91dGNvbWVcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQUREIGludGVyY2VwdG9yXG4gICAgICAgICAgICBpZiAoaGFzSW50ZXJjZXB0b3JzKHRoaXMpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2hhbmdlID0gaW50ZXJjZXB0Q2hhbmdlPElPYmplY3RXaWxsQ2hhbmdlPih0aGlzLCB7XG4gICAgICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcy5wcm94eV8gfHwgdGhpcy50YXJnZXRfLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBrZXksXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IEFERCxcbiAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWU6IGRlc2NyaXB0b3IudmFsdWVcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIGlmICghY2hhbmdlKSByZXR1cm4gbnVsbFxuICAgICAgICAgICAgICAgIGNvbnN0IHsgbmV3VmFsdWUgfSA9IGNoYW5nZSBhcyBhbnlcbiAgICAgICAgICAgICAgICBpZiAoZGVzY3JpcHRvci52YWx1ZSAhPT0gbmV3VmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRvciA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLmRlc2NyaXB0b3IsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogbmV3VmFsdWVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRGVmaW5lXG4gICAgICAgICAgICBpZiAocHJveHlUcmFwKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFSZWZsZWN0LmRlZmluZVByb3BlcnR5KHRoaXMudGFyZ2V0Xywga2V5LCBkZXNjcmlwdG9yKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRoaXMudGFyZ2V0Xywga2V5LCBkZXNjcmlwdG9yKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBOb3RpZnlcbiAgICAgICAgICAgIHRoaXMubm90aWZ5UHJvcGVydHlBZGRpdGlvbl8oa2V5LCBkZXNjcmlwdG9yLnZhbHVlKVxuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgZW5kQmF0Y2goKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgLy8gSWYgb3JpZ2luYWwgZGVzY3JpcHRvciBiZWNvbWVzIHJlbGV2YW50LCBtb3ZlIHRoaXMgdG8gYW5ub3RhdGlvbiBkaXJlY3RseVxuICAgIGRlZmluZU9ic2VydmFibGVQcm9wZXJ0eV8oXG4gICAgICAgIGtleTogUHJvcGVydHlLZXksXG4gICAgICAgIHZhbHVlOiBhbnksXG4gICAgICAgIGVuaGFuY2VyOiBJRW5oYW5jZXI8YW55PixcbiAgICAgICAgcHJveHlUcmFwOiBib29sZWFuID0gZmFsc2VcbiAgICApOiBib29sZWFuIHwgbnVsbCB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBzdGFydEJhdGNoKClcblxuICAgICAgICAgICAgLy8gRGVsZXRlXG4gICAgICAgICAgICBjb25zdCBkZWxldGVPdXRjb21lID0gdGhpcy5kZWxldGVfKGtleSlcbiAgICAgICAgICAgIGlmICghZGVsZXRlT3V0Y29tZSkge1xuICAgICAgICAgICAgICAgIC8vIEZhaWx1cmUgb3IgaW50ZXJjZXB0ZWRcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVsZXRlT3V0Y29tZVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBBREQgaW50ZXJjZXB0b3JcbiAgICAgICAgICAgIGlmIChoYXNJbnRlcmNlcHRvcnModGhpcykpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjaGFuZ2UgPSBpbnRlcmNlcHRDaGFuZ2U8SU9iamVjdFdpbGxDaGFuZ2U+KHRoaXMsIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLnByb3h5XyB8fCB0aGlzLnRhcmdldF8sXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IGtleSxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogQURELFxuICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZTogdmFsdWVcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIGlmICghY2hhbmdlKSByZXR1cm4gbnVsbFxuICAgICAgICAgICAgICAgIHZhbHVlID0gKGNoYW5nZSBhcyBhbnkpLm5ld1ZhbHVlXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGNhY2hlZERlc2NyaXB0b3IgPSBnZXRDYWNoZWRPYnNlcnZhYmxlUHJvcERlc2NyaXB0b3Ioa2V5KVxuICAgICAgICAgICAgY29uc3QgZGVzY3JpcHRvciA9IHtcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IGdsb2JhbFN0YXRlLnNhZmVEZXNjcmlwdG9ycyA/IHRoaXMuaXNQbGFpbk9iamVjdF8gOiB0cnVlLFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgZ2V0OiBjYWNoZWREZXNjcmlwdG9yLmdldCxcbiAgICAgICAgICAgICAgICBzZXQ6IGNhY2hlZERlc2NyaXB0b3Iuc2V0XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIERlZmluZVxuICAgICAgICAgICAgaWYgKHByb3h5VHJhcCkge1xuICAgICAgICAgICAgICAgIGlmICghUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLnRhcmdldF8sIGtleSwgZGVzY3JpcHRvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0aGlzLnRhcmdldF8sIGtleSwgZGVzY3JpcHRvcilcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3Qgb2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlVmFsdWUoXG4gICAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgICAgZW5oYW5jZXIsXG4gICAgICAgICAgICAgICAgX19ERVZfXyA/IGAke3RoaXMubmFtZV99LiR7a2V5LnRvU3RyaW5nKCl9YCA6IFwiT2JzZXJ2YWJsZU9iamVjdC5rZXlcIixcbiAgICAgICAgICAgICAgICBmYWxzZVxuICAgICAgICAgICAgKVxuXG4gICAgICAgICAgICB0aGlzLnZhbHVlc18uc2V0KGtleSwgb2JzZXJ2YWJsZSlcblxuICAgICAgICAgICAgLy8gTm90aWZ5ICh2YWx1ZSBwb3NzaWJseSBjaGFuZ2VkIGJ5IE9ic2VydmFibGVWYWx1ZSlcbiAgICAgICAgICAgIHRoaXMubm90aWZ5UHJvcGVydHlBZGRpdGlvbl8oa2V5LCBvYnNlcnZhYmxlLnZhbHVlXylcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIGVuZEJhdGNoKClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIC8vIElmIG9yaWdpbmFsIGRlc2NyaXB0b3IgYmVjb21lcyByZWxldmFudCwgbW92ZSB0aGlzIHRvIGFubm90YXRpb24gZGlyZWN0bHlcbiAgICBkZWZpbmVDb21wdXRlZFByb3BlcnR5XyhcbiAgICAgICAga2V5OiBQcm9wZXJ0eUtleSxcbiAgICAgICAgb3B0aW9uczogSUNvbXB1dGVkVmFsdWVPcHRpb25zPGFueT4sXG4gICAgICAgIHByb3h5VHJhcDogYm9vbGVhbiA9IGZhbHNlXG4gICAgKTogYm9vbGVhbiB8IG51bGwge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgc3RhcnRCYXRjaCgpXG5cbiAgICAgICAgICAgIC8vIERlbGV0ZVxuICAgICAgICAgICAgY29uc3QgZGVsZXRlT3V0Y29tZSA9IHRoaXMuZGVsZXRlXyhrZXkpXG4gICAgICAgICAgICBpZiAoIWRlbGV0ZU91dGNvbWUpIHtcbiAgICAgICAgICAgICAgICAvLyBGYWlsdXJlIG9yIGludGVyY2VwdGVkXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlbGV0ZU91dGNvbWVcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQUREIGludGVyY2VwdG9yXG4gICAgICAgICAgICBpZiAoaGFzSW50ZXJjZXB0b3JzKHRoaXMpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2hhbmdlID0gaW50ZXJjZXB0Q2hhbmdlPElPYmplY3RXaWxsQ2hhbmdlPih0aGlzLCB7XG4gICAgICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcy5wcm94eV8gfHwgdGhpcy50YXJnZXRfLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBrZXksXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IEFERCxcbiAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWU6IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgaWYgKCFjaGFuZ2UpIHJldHVybiBudWxsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcHRpb25zLm5hbWUgfHw9IF9fREVWX18gPyBgJHt0aGlzLm5hbWVffS4ke2tleS50b1N0cmluZygpfWAgOiBcIk9ic2VydmFibGVPYmplY3Qua2V5XCJcbiAgICAgICAgICAgIG9wdGlvbnMuY29udGV4dCA9IHRoaXMucHJveHlfIHx8IHRoaXMudGFyZ2V0X1xuICAgICAgICAgICAgY29uc3QgY2FjaGVkRGVzY3JpcHRvciA9IGdldENhY2hlZE9ic2VydmFibGVQcm9wRGVzY3JpcHRvcihrZXkpXG4gICAgICAgICAgICBjb25zdCBkZXNjcmlwdG9yID0ge1xuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogZ2xvYmFsU3RhdGUuc2FmZURlc2NyaXB0b3JzID8gdGhpcy5pc1BsYWluT2JqZWN0XyA6IHRydWUsXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgZ2V0OiBjYWNoZWREZXNjcmlwdG9yLmdldCxcbiAgICAgICAgICAgICAgICBzZXQ6IGNhY2hlZERlc2NyaXB0b3Iuc2V0XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIERlZmluZVxuICAgICAgICAgICAgaWYgKHByb3h5VHJhcCkge1xuICAgICAgICAgICAgICAgIGlmICghUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLnRhcmdldF8sIGtleSwgZGVzY3JpcHRvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0aGlzLnRhcmdldF8sIGtleSwgZGVzY3JpcHRvcilcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy52YWx1ZXNfLnNldChrZXksIG5ldyBDb21wdXRlZFZhbHVlKG9wdGlvbnMpKVxuXG4gICAgICAgICAgICAvLyBOb3RpZnlcbiAgICAgICAgICAgIHRoaXMubm90aWZ5UHJvcGVydHlBZGRpdGlvbl8oa2V5LCB1bmRlZmluZWQpXG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBlbmRCYXRjaCgpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1Byb3BlcnR5S2V5fSBrZXlcbiAgICAgKiBAcGFyYW0ge1Byb3BlcnR5RGVzY3JpcHRvcn0gZGVzY3JpcHRvclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gcHJveHlUcmFwIHdoZXRoZXIgaXQncyBjYWxsZWQgZnJvbSBwcm94eSB0cmFwXG4gICAgICogQHJldHVybnMge2Jvb2xlYW58bnVsbH0gdHJ1ZSBvbiBzdWNjZXNzLCBmYWxzZSBvbiBmYWlsdXJlIChwcm94eVRyYXAgKyBub24tY29uZmlndXJhYmxlKSwgbnVsbCB3aGVuIGNhbmNlbGxlZCBieSBpbnRlcmNlcHRvclxuICAgICAqL1xuICAgIGRlbGV0ZV8oa2V5OiBQcm9wZXJ0eUtleSwgcHJveHlUcmFwOiBib29sZWFuID0gZmFsc2UpOiBib29sZWFuIHwgbnVsbCB7XG4gICAgICAgIC8vIE5vIHN1Y2ggcHJvcFxuICAgICAgICBpZiAoIWhhc1Byb3AodGhpcy50YXJnZXRfLCBrZXkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gSW50ZXJjZXB0XG4gICAgICAgIGlmIChoYXNJbnRlcmNlcHRvcnModGhpcykpIHtcbiAgICAgICAgICAgIGNvbnN0IGNoYW5nZSA9IGludGVyY2VwdENoYW5nZTxJT2JqZWN0V2lsbENoYW5nZT4odGhpcywge1xuICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcy5wcm94eV8gfHwgdGhpcy50YXJnZXRfLFxuICAgICAgICAgICAgICAgIG5hbWU6IGtleSxcbiAgICAgICAgICAgICAgICB0eXBlOiBSRU1PVkVcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAvLyBDYW5jZWxsZWRcbiAgICAgICAgICAgIGlmICghY2hhbmdlKSByZXR1cm4gbnVsbFxuICAgICAgICB9XG5cbiAgICAgICAgLy8gRGVsZXRlXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBzdGFydEJhdGNoKClcbiAgICAgICAgICAgIGNvbnN0IG5vdGlmeSA9IGhhc0xpc3RlbmVycyh0aGlzKVxuICAgICAgICAgICAgY29uc3Qgbm90aWZ5U3B5ID0gX19ERVZfXyAmJiBpc1NweUVuYWJsZWQoKVxuICAgICAgICAgICAgY29uc3Qgb2JzZXJ2YWJsZSA9IHRoaXMudmFsdWVzXy5nZXQoa2V5KVxuICAgICAgICAgICAgLy8gVmFsdWUgbmVlZGVkIGZvciBzcGllcy9saXN0ZW5lcnNcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9IHVuZGVmaW5lZFxuICAgICAgICAgICAgLy8gT3B0aW1pemF0aW9uOiBkb24ndCBwdWxsIHRoZSB2YWx1ZSB1bmxlc3Mgd2Ugd2lsbCBuZWVkIGl0XG4gICAgICAgICAgICBpZiAoIW9ic2VydmFibGUgJiYgKG5vdGlmeSB8fCBub3RpZnlTcHkpKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBnZXREZXNjcmlwdG9yKHRoaXMudGFyZ2V0Xywga2V5KT8udmFsdWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGRlbGV0ZSBwcm9wIChkbyBmaXJzdCwgbWF5IGZhaWwpXG4gICAgICAgICAgICBpZiAocHJveHlUcmFwKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFSZWZsZWN0LmRlbGV0ZVByb3BlcnR5KHRoaXMudGFyZ2V0Xywga2V5KSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnRhcmdldF9ba2V5XVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQWxsb3cgcmUtYW5ub3RhdGluZyB0aGlzIGZpZWxkXG4gICAgICAgICAgICBpZiAoX19ERVZfXykge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmFwcGxpZWRBbm5vdGF0aW9uc18hW2tleV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIENsZWFyIG9ic2VydmFibGVcbiAgICAgICAgICAgIGlmIChvYnNlcnZhYmxlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZXNfLmRlbGV0ZShrZXkpXG4gICAgICAgICAgICAgICAgLy8gZm9yIGNvbXB1dGVkLCB2YWx1ZSBpcyB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICBpZiAob2JzZXJ2YWJsZSBpbnN0YW5jZW9mIE9ic2VydmFibGVWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IG9ic2VydmFibGUudmFsdWVfXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIE5vdGlmeTogYXV0b3J1bigoKSA9PiBvYmpba2V5XSksIHNlZSAjMTc5NlxuICAgICAgICAgICAgICAgIHByb3BhZ2F0ZUNoYW5nZWQob2JzZXJ2YWJsZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIE5vdGlmeSBcImtleXMvZW50cmllcy92YWx1ZXNcIiBvYnNlcnZlcnNcbiAgICAgICAgICAgIHRoaXMua2V5c0F0b21fLnJlcG9ydENoYW5nZWQoKVxuXG4gICAgICAgICAgICAvLyBOb3RpZnkgXCJoYXNcIiBvYnNlcnZlcnNcbiAgICAgICAgICAgIC8vIFwiaW5cIiBhcyBpdCBtYXkgc3RpbGwgZXhpc3QgaW4gcHJvdG9cbiAgICAgICAgICAgIHRoaXMucGVuZGluZ0tleXNfPy5nZXQoa2V5KT8uc2V0KGtleSBpbiB0aGlzLnRhcmdldF8pXG5cbiAgICAgICAgICAgIC8vIE5vdGlmeSBzcGllcy9saXN0ZW5lcnNcbiAgICAgICAgICAgIGlmIChub3RpZnkgfHwgbm90aWZ5U3B5KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2hhbmdlOiBJT2JqZWN0RGlkQ2hhbmdlID0ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBSRU1PVkUsXG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmFibGVLaW5kOiBcIm9iamVjdFwiLFxuICAgICAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMucHJveHlfIHx8IHRoaXMudGFyZ2V0XyxcbiAgICAgICAgICAgICAgICAgICAgZGVidWdPYmplY3ROYW1lOiB0aGlzLm5hbWVfLFxuICAgICAgICAgICAgICAgICAgICBvbGRWYWx1ZTogdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IGtleVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoX19ERVZfXyAmJiBub3RpZnlTcHkpIHNweVJlcG9ydFN0YXJ0KGNoYW5nZSEpXG4gICAgICAgICAgICAgICAgaWYgKG5vdGlmeSkgbm90aWZ5TGlzdGVuZXJzKHRoaXMsIGNoYW5nZSlcbiAgICAgICAgICAgICAgICBpZiAoX19ERVZfXyAmJiBub3RpZnlTcHkpIHNweVJlcG9ydEVuZCgpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBlbmRCYXRjaCgpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPYnNlcnZlcyB0aGlzIG9iamVjdC4gVHJpZ2dlcnMgZm9yIHRoZSBldmVudHMgJ2FkZCcsICd1cGRhdGUnIGFuZCAnZGVsZXRlJy5cbiAgICAgKiBTZWU6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9vYnNlcnZlXG4gICAgICogZm9yIGNhbGxiYWNrIGRldGFpbHNcbiAgICAgKi9cbiAgICBvYnNlcnZlXyhjYWxsYmFjazogKGNoYW5nZXM6IElPYmplY3REaWRDaGFuZ2UpID0+IHZvaWQsIGZpcmVJbW1lZGlhdGVseT86IGJvb2xlYW4pOiBMYW1iZGEge1xuICAgICAgICBpZiAoX19ERVZfXyAmJiBmaXJlSW1tZWRpYXRlbHkgPT09IHRydWUpXG4gICAgICAgICAgICBkaWUoXCJgb2JzZXJ2ZWAgZG9lc24ndCBzdXBwb3J0IHRoZSBmaXJlIGltbWVkaWF0ZWx5IHByb3BlcnR5IGZvciBvYnNlcnZhYmxlIG9iamVjdHMuXCIpXG4gICAgICAgIHJldHVybiByZWdpc3Rlckxpc3RlbmVyKHRoaXMsIGNhbGxiYWNrKVxuICAgIH1cblxuICAgIGludGVyY2VwdF8oaGFuZGxlcik6IExhbWJkYSB7XG4gICAgICAgIHJldHVybiByZWdpc3RlckludGVyY2VwdG9yKHRoaXMsIGhhbmRsZXIpXG4gICAgfVxuXG4gICAgbm90aWZ5UHJvcGVydHlBZGRpdGlvbl8oa2V5OiBQcm9wZXJ0eUtleSwgdmFsdWU6IGFueSkge1xuICAgICAgICBjb25zdCBub3RpZnkgPSBoYXNMaXN0ZW5lcnModGhpcylcbiAgICAgICAgY29uc3Qgbm90aWZ5U3B5ID0gX19ERVZfXyAmJiBpc1NweUVuYWJsZWQoKVxuICAgICAgICBpZiAobm90aWZ5IHx8IG5vdGlmeVNweSkge1xuICAgICAgICAgICAgY29uc3QgY2hhbmdlOiBJT2JqZWN0RGlkQ2hhbmdlIHwgbnVsbCA9XG4gICAgICAgICAgICAgICAgbm90aWZ5IHx8IG5vdGlmeVNweVxuICAgICAgICAgICAgICAgICAgICA/ICh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IEFERCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2YWJsZUtpbmQ6IFwib2JqZWN0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnT2JqZWN0TmFtZTogdGhpcy5uYW1lXyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLnByb3h5XyB8fCB0aGlzLnRhcmdldF8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGtleSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWU6IHZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgfSBhcyBjb25zdClcbiAgICAgICAgICAgICAgICAgICAgOiBudWxsXG5cbiAgICAgICAgICAgIGlmIChfX0RFVl9fICYmIG5vdGlmeVNweSkgc3B5UmVwb3J0U3RhcnQoY2hhbmdlISlcbiAgICAgICAgICAgIGlmIChub3RpZnkpIG5vdGlmeUxpc3RlbmVycyh0aGlzLCBjaGFuZ2UpXG4gICAgICAgICAgICBpZiAoX19ERVZfXyAmJiBub3RpZnlTcHkpIHNweVJlcG9ydEVuZCgpXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnBlbmRpbmdLZXlzXz8uZ2V0KGtleSk/LnNldCh0cnVlKVxuXG4gICAgICAgIC8vIE5vdGlmeSBcImtleXMvZW50cmllcy92YWx1ZXNcIiBvYnNlcnZlcnNcbiAgICAgICAgdGhpcy5rZXlzQXRvbV8ucmVwb3J0Q2hhbmdlZCgpXG4gICAgfVxuXG4gICAgb3duS2V5c18oKTogUHJvcGVydHlLZXlbXSB7XG4gICAgICAgIHRoaXMua2V5c0F0b21fLnJlcG9ydE9ic2VydmVkKClcbiAgICAgICAgcmV0dXJuIG93bktleXModGhpcy50YXJnZXRfKVxuICAgIH1cblxuICAgIGtleXNfKCk6IFByb3BlcnR5S2V5W10ge1xuICAgICAgICAvLyBSZXR1cm5zIGVudW1lcmFibGUgJiYgb3duLCBidXQgdW5mb3J0dW5hdGVseSBrZXlzQXRvbSB3aWxsIHJlcG9ydCBvbiBBTlkga2V5IGNoYW5nZS5cbiAgICAgICAgLy8gVGhlcmUgaXMgbm8gd2F5IHRvIGRpc3Rpbmd1aXNoIGJldHdlZW4gT2JqZWN0LmtleXMob2JqZWN0KSBhbmQgUmVmbGVjdC5vd25LZXlzKG9iamVjdCkgLSBib3RoIGFyZSBoYW5kbGVkIGJ5IG93bktleXMgdHJhcC5cbiAgICAgICAgLy8gV2UgY2FuIGVpdGhlciBvdmVyLXJlcG9ydCBpbiBPYmplY3Qua2V5cyhvYmplY3QpIG9yIHVuZGVyLXJlcG9ydCBpbiBSZWZsZWN0Lm93bktleXMob2JqZWN0KVxuICAgICAgICAvLyBXZSBjaG9vc2UgdG8gb3Zlci1yZXBvcnQgaW4gT2JqZWN0LmtleXMob2JqZWN0KSwgYmVjYXVzZTpcbiAgICAgICAgLy8gLSB0eXBpY2FsbHkgaXQncyB1c2VkIHdpdGggc2ltcGxlIGRhdGEgb2JqZWN0c1xuICAgICAgICAvLyAtIHdoZW4gc3ltYm9saWMvbm9uLWVudW1lcmFibGUga2V5cyBhcmUgcmVsZXZhbnQgUmVmbGVjdC5vd25LZXlzIHdvcmtzIGFzIGV4cGVjdGVkXG4gICAgICAgIHRoaXMua2V5c0F0b21fLnJlcG9ydE9ic2VydmVkKClcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMudGFyZ2V0XylcbiAgICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUlzT2JzZXJ2YWJsZU9iamVjdCB7XG4gICAgJG1vYng6IE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvblxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNPYnNlcnZhYmxlT2JqZWN0KFxuICAgIHRhcmdldDogYW55LFxuICAgIG9wdGlvbnM/OiBDcmVhdGVPYnNlcnZhYmxlT3B0aW9uc1xuKTogSUlzT2JzZXJ2YWJsZU9iamVjdCB7XG4gICAgaWYgKF9fREVWX18gJiYgb3B0aW9ucyAmJiBpc09ic2VydmFibGVPYmplY3QodGFyZ2V0KSkge1xuICAgICAgICBkaWUoYE9wdGlvbnMgY2FuJ3QgYmUgcHJvdmlkZWQgZm9yIGFscmVhZHkgb2JzZXJ2YWJsZSBvYmplY3RzLmApXG4gICAgfVxuXG4gICAgaWYgKGhhc1Byb3AodGFyZ2V0LCAkbW9ieCkpIHtcbiAgICAgICAgaWYgKF9fREVWX18gJiYgIShnZXRBZG1pbmlzdHJhdGlvbih0YXJnZXQpIGluc3RhbmNlb2YgT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uKSkge1xuICAgICAgICAgICAgZGllKFxuICAgICAgICAgICAgICAgIGBDYW5ub3QgY29udmVydCAnJHtnZXREZWJ1Z05hbWUodGFyZ2V0KX0nIGludG8gb2JzZXJ2YWJsZSBvYmplY3Q6YCArXG4gICAgICAgICAgICAgICAgICAgIGBcXG5UaGUgdGFyZ2V0IGlzIGFscmVhZHkgb2JzZXJ2YWJsZSBvZiBkaWZmZXJlbnQgdHlwZS5gICtcbiAgICAgICAgICAgICAgICAgICAgYFxcbkV4dGVuZGluZyBidWlsdGlucyBpcyBub3Qgc3VwcG9ydGVkLmBcbiAgICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFyZ2V0XG4gICAgfVxuXG4gICAgaWYgKF9fREVWX18gJiYgIU9iamVjdC5pc0V4dGVuc2libGUodGFyZ2V0KSlcbiAgICAgICAgZGllKFwiQ2Fubm90IG1ha2UgdGhlIGRlc2lnbmF0ZWQgb2JqZWN0IG9ic2VydmFibGU7IGl0IGlzIG5vdCBleHRlbnNpYmxlXCIpXG5cbiAgICBjb25zdCBuYW1lID1cbiAgICAgICAgb3B0aW9ucz8ubmFtZSA/P1xuICAgICAgICAoX19ERVZfX1xuICAgICAgICAgICAgPyBgJHtcbiAgICAgICAgICAgICAgICAgIGlzUGxhaW5PYmplY3QodGFyZ2V0KSA/IFwiT2JzZXJ2YWJsZU9iamVjdFwiIDogdGFyZ2V0LmNvbnN0cnVjdG9yLm5hbWVcbiAgICAgICAgICAgICAgfUAke2dldE5leHRJZCgpfWBcbiAgICAgICAgICAgIDogXCJPYnNlcnZhYmxlT2JqZWN0XCIpXG5cbiAgICBjb25zdCBhZG0gPSBuZXcgT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uKFxuICAgICAgICB0YXJnZXQsXG4gICAgICAgIG5ldyBNYXAoKSxcbiAgICAgICAgU3RyaW5nKG5hbWUpLFxuICAgICAgICBnZXRBbm5vdGF0aW9uRnJvbU9wdGlvbnMob3B0aW9ucylcbiAgICApXG5cbiAgICBhZGRIaWRkZW5Qcm9wKHRhcmdldCwgJG1vYngsIGFkbSlcblxuICAgIHJldHVybiB0YXJnZXRcbn1cblxuY29uc3QgaXNPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24gPSBjcmVhdGVJbnN0YW5jZW9mUHJlZGljYXRlKFxuICAgIFwiT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uXCIsXG4gICAgT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uXG4pXG5cbmZ1bmN0aW9uIGdldENhY2hlZE9ic2VydmFibGVQcm9wRGVzY3JpcHRvcihrZXkpIHtcbiAgICByZXR1cm4gKFxuICAgICAgICBkZXNjcmlwdG9yQ2FjaGVba2V5XSB8fFxuICAgICAgICAoZGVzY3JpcHRvckNhY2hlW2tleV0gPSB7XG4gICAgICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNbJG1vYnhdLmdldE9ic2VydmFibGVQcm9wVmFsdWVfKGtleSlcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQodmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1skbW9ieF0uc2V0T2JzZXJ2YWJsZVByb3BWYWx1ZV8oa2V5LCB2YWx1ZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICApXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc09ic2VydmFibGVPYmplY3QodGhpbmc6IGFueSk6IGJvb2xlYW4ge1xuICAgIGlmIChpc09iamVjdCh0aGluZykpIHtcbiAgICAgICAgcmV0dXJuIGlzT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uKCh0aGluZyBhcyBhbnkpWyRtb2J4XSlcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlXG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWNvcmRBbm5vdGF0aW9uQXBwbGllZChcbiAgICBhZG06IE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbixcbiAgICBhbm5vdGF0aW9uOiBBbm5vdGF0aW9uLFxuICAgIGtleTogUHJvcGVydHlLZXlcbikge1xuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICAgIGFkbS5hcHBsaWVkQW5ub3RhdGlvbnNfIVtrZXldID0gYW5ub3RhdGlvblxuICAgIH1cbiAgICAvLyBSZW1vdmUgYXBwbGllZCBkZWNvcmF0b3IgYW5ub3RhdGlvbiBzbyB3ZSBkb24ndCB0cnkgdG8gYXBwbHkgaXQgYWdhaW4gaW4gc3ViY2xhc3MgY29uc3RydWN0b3JcbiAgICBkZWxldGUgYWRtLnRhcmdldF9bc3RvcmVkQW5ub3RhdGlvbnNTeW1ib2xdPy5ba2V5XVxufVxuXG5mdW5jdGlvbiBhc3NlcnRBbm5vdGFibGUoXG4gICAgYWRtOiBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24sXG4gICAgYW5ub3RhdGlvbjogQW5ub3RhdGlvbixcbiAgICBrZXk6IFByb3BlcnR5S2V5XG4pIHtcbiAgICAvLyBWYWxpZCBhbm5vdGF0aW9uXG4gICAgaWYgKF9fREVWX18gJiYgIWlzQW5ub3RhdGlvbihhbm5vdGF0aW9uKSkge1xuICAgICAgICBkaWUoYENhbm5vdCBhbm5vdGF0ZSAnJHthZG0ubmFtZV99LiR7a2V5LnRvU3RyaW5nKCl9JzogSW52YWxpZCBhbm5vdGF0aW9uLmApXG4gICAgfVxuXG4gICAgLypcbiAgICAvLyBDb25maWd1cmFibGUsIG5vdCBzZWFsZWQsIG5vdCBmcm96ZW5cbiAgICAvLyBQb3NzaWJseSBub3QgbmVlZGVkLCBqdXN0IGEgbGl0dGxlIGJldHRlciBlcnJvciB0aGVuIHRoZSBvbmUgdGhyb3duIGJ5IGVuZ2luZS5cbiAgICAvLyBDYXNlcyB3aGVyZSB0aGlzIHdvdWxkIGJlIHVzZWZ1bCB0aGUgbW9zdCAoc3ViY2xhc3MgZmllbGQgaW5pdGlhbGl6ZXIpIGFyZSBub3QgaW50ZXJjZXB0YWJsZSBieSB0aGlzLlxuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICAgIGNvbnN0IGNvbmZpZ3VyYWJsZSA9IGdldERlc2NyaXB0b3IoYWRtLnRhcmdldF8sIGtleSk/LmNvbmZpZ3VyYWJsZVxuICAgICAgICBjb25zdCBmcm96ZW4gPSBPYmplY3QuaXNGcm96ZW4oYWRtLnRhcmdldF8pXG4gICAgICAgIGNvbnN0IHNlYWxlZCA9IE9iamVjdC5pc1NlYWxlZChhZG0udGFyZ2V0XylcbiAgICAgICAgaWYgKCFjb25maWd1cmFibGUgfHwgZnJvemVuIHx8IHNlYWxlZCkge1xuICAgICAgICAgICAgY29uc3QgZmllbGROYW1lID0gYCR7YWRtLm5hbWVffS4ke2tleS50b1N0cmluZygpfWBcbiAgICAgICAgICAgIGNvbnN0IHJlcXVlc3RlZEFubm90YXRpb25UeXBlID0gYW5ub3RhdGlvbi5hbm5vdGF0aW9uVHlwZV9cbiAgICAgICAgICAgIGxldCBlcnJvciA9IGBDYW5ub3QgYXBwbHkgJyR7cmVxdWVzdGVkQW5ub3RhdGlvblR5cGV9JyB0byAnJHtmaWVsZE5hbWV9JzpgXG4gICAgICAgICAgICBpZiAoZnJvemVuKSB7XG4gICAgICAgICAgICAgICAgZXJyb3IgKz0gYFxcbk9iamVjdCBpcyBmcm96ZW4uYFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNlYWxlZCkge1xuICAgICAgICAgICAgICAgIGVycm9yICs9IGBcXG5PYmplY3QgaXMgc2VhbGVkLmBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghY29uZmlndXJhYmxlKSB7XG4gICAgICAgICAgICAgICAgZXJyb3IgKz0gYFxcbnByb3BlcnR5IGlzIG5vdCBjb25maWd1cmFibGUuYFxuICAgICAgICAgICAgICAgIC8vIE1lbnRpb24gb25seSBpZiBjYXVzZWQgYnkgdXMgdG8gYXZvaWQgY29uZnVzaW9uXG4gICAgICAgICAgICAgICAgaWYgKGhhc1Byb3AoYWRtLmFwcGxpZWRBbm5vdGF0aW9ucyEsIGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IgKz0gYFxcblRvIHByZXZlbnQgYWNjaWRlbnRhbCByZS1kZWZpbml0aW9uIG9mIGEgZmllbGQgYnkgYSBzdWJjbGFzcywgYFxuICAgICAgICAgICAgICAgICAgICBlcnJvciArPSBgYWxsIGFubm90YXRlZCBmaWVsZHMgb2Ygbm9uLXBsYWluIG9iamVjdHMgKGNsYXNzZXMpIGFyZSBub3QgY29uZmlndXJhYmxlLmBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkaWUoZXJyb3IpXG4gICAgICAgIH1cbiAgICB9XG4gICAgKi9cblxuICAgIC8vIE5vdCBhbm5vdGF0ZWRcbiAgICBpZiAoX19ERVZfXyAmJiAhaXNPdmVycmlkZShhbm5vdGF0aW9uKSAmJiBoYXNQcm9wKGFkbS5hcHBsaWVkQW5ub3RhdGlvbnNfISwga2V5KSkge1xuICAgICAgICBjb25zdCBmaWVsZE5hbWUgPSBgJHthZG0ubmFtZV99LiR7a2V5LnRvU3RyaW5nKCl9YFxuICAgICAgICBjb25zdCBjdXJyZW50QW5ub3RhdGlvblR5cGUgPSBhZG0uYXBwbGllZEFubm90YXRpb25zXyFba2V5XS5hbm5vdGF0aW9uVHlwZV9cbiAgICAgICAgY29uc3QgcmVxdWVzdGVkQW5ub3RhdGlvblR5cGUgPSBhbm5vdGF0aW9uLmFubm90YXRpb25UeXBlX1xuICAgICAgICBkaWUoXG4gICAgICAgICAgICBgQ2Fubm90IGFwcGx5ICcke3JlcXVlc3RlZEFubm90YXRpb25UeXBlfScgdG8gJyR7ZmllbGROYW1lfSc6YCArXG4gICAgICAgICAgICAgICAgYFxcblRoZSBmaWVsZCBpcyBhbHJlYWR5IGFubm90YXRlZCB3aXRoICcke2N1cnJlbnRBbm5vdGF0aW9uVHlwZX0nLmAgK1xuICAgICAgICAgICAgICAgIGBcXG5SZS1hbm5vdGF0aW5nIGZpZWxkcyBpcyBub3QgYWxsb3dlZC5gICtcbiAgICAgICAgICAgICAgICBgXFxuVXNlICdvdmVycmlkZScgYW5ub3RhdGlvbiBmb3IgbWV0aG9kcyBvdmVycmlkZW4gYnkgc3ViY2xhc3MuYFxuICAgICAgICApXG4gICAgfVxufVxuIiwiaW1wb3J0IHtcbiAgICBnZXROZXh0SWQsXG4gICAgYWRkSGlkZGVuRmluYWxQcm9wLFxuICAgIGFsbG93U3RhdGVDaGFuZ2VzU3RhcnQsXG4gICAgYWxsb3dTdGF0ZUNoYW5nZXNFbmQsXG4gICAgbWFrZUl0ZXJhYmxlLFxuICAgIGFkZEhpZGRlblByb3AsXG4gICAgT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24sXG4gICAgJG1vYngsXG4gICAgYXJyYXlFeHRlbnNpb25zLFxuICAgIElFbmhhbmNlcixcbiAgICBpc09ic2VydmFibGVBcnJheSxcbiAgICBJT2JzZXJ2YWJsZUFycmF5LFxuICAgIGRlZmluZVByb3BlcnR5XG59IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbi8qKlxuICogVGhpcyBhcnJheSBidWZmZXIgY29udGFpbnMgdHdvIGxpc3RzIG9mIHByb3BlcnRpZXMsIHNvIHRoYXQgYWxsIGFycmF5c1xuICogY2FuIHJlY3ljbGUgdGhlaXIgcHJvcGVydHkgZGVmaW5pdGlvbnMsIHdoaWNoIHNpZ25pZmljYW50bHkgaW1wcm92ZXMgcGVyZm9ybWFuY2Ugb2YgY3JlYXRpbmdcbiAqIHByb3BlcnRpZXMgb24gdGhlIGZseS5cbiAqL1xubGV0IE9CU0VSVkFCTEVfQVJSQVlfQlVGRkVSX1NJWkUgPSAwXG5cbi8vIFR5cGVzY3JpcHQgd29ya2Fyb3VuZCB0byBtYWtlIHN1cmUgT2JzZXJ2YWJsZUFycmF5IGV4dGVuZHMgQXJyYXlcbmNsYXNzIFN0dWJBcnJheSB7fVxuZnVuY3Rpb24gaW5oZXJpdChjdG9yLCBwcm90bykge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGN0b3IucHJvdG90eXBlLCBwcm90bylcbiAgICB9IGVsc2UgaWYgKGN0b3IucHJvdG90eXBlLl9fcHJvdG9fXyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGN0b3IucHJvdG90eXBlLl9fcHJvdG9fXyA9IHByb3RvXG4gICAgfSBlbHNlIHtcbiAgICAgICAgY3Rvci5wcm90b3R5cGUgPSBwcm90b1xuICAgIH1cbn1cbmluaGVyaXQoU3R1YkFycmF5LCBBcnJheS5wcm90b3R5cGUpXG5cbi8vIFdlZXggcHJvdG8gZnJlZXplIHByb3RlY3Rpb24gd2FzIGhlcmUsXG4vLyBidXQgaXQgaXMgdW5jbGVhciB3aHkgdGhlIGhhY2sgaXMgbmVlZCBhcyBNb2JYIG5ldmVyIGNoYW5nZWQgdGhlIHByb3RvdHlwZVxuLy8gYW55d2F5LCBzbyByZW1vdmVkIGl0IGluIFY2XG5cbmNsYXNzIExlZ2FjeU9ic2VydmFibGVBcnJheTxUPiBleHRlbmRzIFN0dWJBcnJheSB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIGluaXRpYWxWYWx1ZXM6IFRbXSB8IHVuZGVmaW5lZCxcbiAgICAgICAgZW5oYW5jZXI6IElFbmhhbmNlcjxUPixcbiAgICAgICAgbmFtZSA9IF9fREVWX18gPyBcIk9ic2VydmFibGVBcnJheUBcIiArIGdldE5leHRJZCgpIDogXCJPYnNlcnZhYmxlQXJyYXlcIixcbiAgICAgICAgb3duZWQgPSBmYWxzZVxuICAgICkge1xuICAgICAgICBzdXBlcigpXG5cbiAgICAgICAgY29uc3QgYWRtID0gbmV3IE9ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uKG5hbWUsIGVuaGFuY2VyLCBvd25lZCwgdHJ1ZSlcbiAgICAgICAgYWRtLnByb3h5XyA9IHRoaXMgYXMgYW55XG4gICAgICAgIGFkZEhpZGRlbkZpbmFsUHJvcCh0aGlzLCAkbW9ieCwgYWRtKVxuXG4gICAgICAgIGlmIChpbml0aWFsVmFsdWVzICYmIGluaXRpYWxWYWx1ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBwcmV2ID0gYWxsb3dTdGF0ZUNoYW5nZXNTdGFydCh0cnVlKVxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgdGhpcy5zcGxpY2VXaXRoQXJyYXkoMCwgMCwgaW5pdGlhbFZhbHVlcylcbiAgICAgICAgICAgIGFsbG93U3RhdGVDaGFuZ2VzRW5kKHByZXYpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25jYXQoLi4uYXJyYXlzOiBUW11bXSk6IFRbXSB7XG4gICAgICAgIDsodGhpc1skbW9ieF0gYXMgT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24pLmF0b21fLnJlcG9ydE9ic2VydmVkKClcbiAgICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5jb25jYXQuYXBwbHkoXG4gICAgICAgICAgICAodGhpcyBhcyBhbnkpLnNsaWNlKCksXG4gICAgICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgICAgIGFycmF5cy5tYXAoYSA9PiAoaXNPYnNlcnZhYmxlQXJyYXkoYSkgPyBhLnNsaWNlKCkgOiBhKSlcbiAgICAgICAgKVxuICAgIH1cblxuICAgIGdldCBsZW5ndGgoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuICh0aGlzWyRtb2J4XSBhcyBPYnNlcnZhYmxlQXJyYXlBZG1pbmlzdHJhdGlvbikuZ2V0QXJyYXlMZW5ndGhfKClcbiAgICB9XG5cbiAgICBzZXQgbGVuZ3RoKG5ld0xlbmd0aDogbnVtYmVyKSB7XG4gICAgICAgIDsodGhpc1skbW9ieF0gYXMgT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24pLnNldEFycmF5TGVuZ3RoXyhuZXdMZW5ndGgpXG4gICAgfVxuXG4gICAgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkge1xuICAgICAgICByZXR1cm4gXCJBcnJheVwiXG4gICAgfVxuXG4gICAgW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzXG4gICAgICAgIGxldCBuZXh0SW5kZXggPSAwXG4gICAgICAgIHJldHVybiBtYWtlSXRlcmFibGUoe1xuICAgICAgICAgICAgbmV4dCgpIHtcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5leHRJbmRleCA8IHNlbGYubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgID8geyB2YWx1ZTogc2VsZltuZXh0SW5kZXgrK10sIGRvbmU6IGZhbHNlIH1cbiAgICAgICAgICAgICAgICAgICAgOiB7IGRvbmU6IHRydWUsIHZhbHVlOiB1bmRlZmluZWQgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH1cbn1cblxuT2JqZWN0LmVudHJpZXMoYXJyYXlFeHRlbnNpb25zKS5mb3JFYWNoKChbcHJvcCwgZm5dKSA9PiB7XG4gICAgaWYgKHByb3AgIT09IFwiY29uY2F0XCIpIGFkZEhpZGRlblByb3AoTGVnYWN5T2JzZXJ2YWJsZUFycmF5LnByb3RvdHlwZSwgcHJvcCwgZm4pXG59KVxuXG5mdW5jdGlvbiBjcmVhdGVBcnJheUVudHJ5RGVzY3JpcHRvcihpbmRleDogbnVtYmVyKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpc1skbW9ieF0uZ2V0XyhpbmRleClcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXNbJG1vYnhdLnNldF8oaW5kZXgsIHZhbHVlKVxuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVBcnJheUJ1ZmZlckl0ZW0oaW5kZXg6IG51bWJlcikge1xuICAgIGRlZmluZVByb3BlcnR5KExlZ2FjeU9ic2VydmFibGVBcnJheS5wcm90b3R5cGUsIFwiXCIgKyBpbmRleCwgY3JlYXRlQXJyYXlFbnRyeURlc2NyaXB0b3IoaW5kZXgpKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVzZXJ2ZUFycmF5QnVmZmVyKG1heDogbnVtYmVyKSB7XG4gICAgaWYgKG1heCA+IE9CU0VSVkFCTEVfQVJSQVlfQlVGRkVSX1NJWkUpIHtcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSBPQlNFUlZBQkxFX0FSUkFZX0JVRkZFUl9TSVpFOyBpbmRleCA8IG1heCArIDEwMDsgaW5kZXgrKylcbiAgICAgICAgICAgIGNyZWF0ZUFycmF5QnVmZmVySXRlbShpbmRleClcbiAgICAgICAgT0JTRVJWQUJMRV9BUlJBWV9CVUZGRVJfU0laRSA9IG1heFxuICAgIH1cbn1cblxucmVzZXJ2ZUFycmF5QnVmZmVyKDEwMDApXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVMZWdhY3lBcnJheTxUPihcbiAgICBpbml0aWFsVmFsdWVzOiBUW10gfCB1bmRlZmluZWQsXG4gICAgZW5oYW5jZXI6IElFbmhhbmNlcjxUPixcbiAgICBuYW1lPzogc3RyaW5nXG4pOiBJT2JzZXJ2YWJsZUFycmF5PFQ+IHtcbiAgICByZXR1cm4gbmV3IExlZ2FjeU9ic2VydmFibGVBcnJheShpbml0aWFsVmFsdWVzLCBlbmhhbmNlciwgbmFtZSkgYXMgYW55XG59XG4iLCJpbXBvcnQgeyBpc0FjdGlvbiB9IGZyb20gXCIuLi9hcGkvYWN0aW9uXCJcbmltcG9ydCB7XG4gICAgJG1vYngsXG4gICAgSURlcFRyZWVOb2RlLFxuICAgIGlzQXRvbSxcbiAgICBpc0NvbXB1dGVkVmFsdWUsXG4gICAgaXNPYnNlcnZhYmxlQXJyYXksXG4gICAgaXNPYnNlcnZhYmxlTWFwLFxuICAgIGlzT2JzZXJ2YWJsZU9iamVjdCxcbiAgICBpc1JlYWN0aW9uLFxuICAgIGlzT2JzZXJ2YWJsZVNldCxcbiAgICBkaWUsXG4gICAgaXNGdW5jdGlvblxufSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QXRvbSh0aGluZzogYW55LCBwcm9wZXJ0eT86IFByb3BlcnR5S2V5KTogSURlcFRyZWVOb2RlIHtcbiAgICBpZiAodHlwZW9mIHRoaW5nID09PSBcIm9iamVjdFwiICYmIHRoaW5nICE9PSBudWxsKSB7XG4gICAgICAgIGlmIChpc09ic2VydmFibGVBcnJheSh0aGluZykpIHtcbiAgICAgICAgICAgIGlmIChwcm9wZXJ0eSAhPT0gdW5kZWZpbmVkKSBkaWUoMjMpXG4gICAgICAgICAgICByZXR1cm4gKHRoaW5nIGFzIGFueSlbJG1vYnhdLmF0b21fXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzT2JzZXJ2YWJsZVNldCh0aGluZykpIHtcbiAgICAgICAgICAgIHJldHVybiAodGhpbmcgYXMgYW55KVskbW9ieF1cbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNPYnNlcnZhYmxlTWFwKHRoaW5nKSkge1xuICAgICAgICAgICAgaWYgKHByb3BlcnR5ID09PSB1bmRlZmluZWQpIHJldHVybiB0aGluZy5rZXlzQXRvbV9cbiAgICAgICAgICAgIGNvbnN0IG9ic2VydmFibGUgPSB0aGluZy5kYXRhXy5nZXQocHJvcGVydHkpIHx8IHRoaW5nLmhhc01hcF8uZ2V0KHByb3BlcnR5KVxuICAgICAgICAgICAgaWYgKCFvYnNlcnZhYmxlKSBkaWUoMjUsIHByb3BlcnR5LCBnZXREZWJ1Z05hbWUodGhpbmcpKVxuICAgICAgICAgICAgcmV0dXJuIG9ic2VydmFibGVcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvcGVydHkgJiYgIXRoaW5nWyRtb2J4XSkgdGhpbmdbcHJvcGVydHldIC8vIFNlZSAjMTA3MlxuICAgICAgICBpZiAoaXNPYnNlcnZhYmxlT2JqZWN0KHRoaW5nKSkge1xuICAgICAgICAgICAgaWYgKCFwcm9wZXJ0eSkgcmV0dXJuIGRpZSgyNilcbiAgICAgICAgICAgIGNvbnN0IG9ic2VydmFibGUgPSAodGhpbmcgYXMgYW55KVskbW9ieF0udmFsdWVzXy5nZXQocHJvcGVydHkpXG4gICAgICAgICAgICBpZiAoIW9ic2VydmFibGUpIGRpZSgyNywgcHJvcGVydHksIGdldERlYnVnTmFtZSh0aGluZykpXG4gICAgICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZVxuICAgICAgICB9XG4gICAgICAgIGlmIChpc0F0b20odGhpbmcpIHx8IGlzQ29tcHV0ZWRWYWx1ZSh0aGluZykgfHwgaXNSZWFjdGlvbih0aGluZykpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGluZ1xuICAgICAgICB9XG4gICAgfSBlbHNlIGlmIChpc0Z1bmN0aW9uKHRoaW5nKSkge1xuICAgICAgICBpZiAoaXNSZWFjdGlvbih0aGluZ1skbW9ieF0pKSB7XG4gICAgICAgICAgICAvLyBkaXNwb3NlciBmdW5jdGlvblxuICAgICAgICAgICAgcmV0dXJuIHRoaW5nWyRtb2J4XVxuICAgICAgICB9XG4gICAgfVxuICAgIGRpZSgyOClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEFkbWluaXN0cmF0aW9uKHRoaW5nOiBhbnksIHByb3BlcnR5Pzogc3RyaW5nKSB7XG4gICAgaWYgKCF0aGluZykgZGllKDI5KVxuICAgIGlmIChwcm9wZXJ0eSAhPT0gdW5kZWZpbmVkKSByZXR1cm4gZ2V0QWRtaW5pc3RyYXRpb24oZ2V0QXRvbSh0aGluZywgcHJvcGVydHkpKVxuICAgIGlmIChpc0F0b20odGhpbmcpIHx8IGlzQ29tcHV0ZWRWYWx1ZSh0aGluZykgfHwgaXNSZWFjdGlvbih0aGluZykpIHJldHVybiB0aGluZ1xuICAgIGlmIChpc09ic2VydmFibGVNYXAodGhpbmcpIHx8IGlzT2JzZXJ2YWJsZVNldCh0aGluZykpIHJldHVybiB0aGluZ1xuICAgIGlmICh0aGluZ1skbW9ieF0pIHJldHVybiB0aGluZ1skbW9ieF1cbiAgICBkaWUoMjQsIHRoaW5nKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVidWdOYW1lKHRoaW5nOiBhbnksIHByb3BlcnR5Pzogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBsZXQgbmFtZWRcbiAgICBpZiAocHJvcGVydHkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBuYW1lZCA9IGdldEF0b20odGhpbmcsIHByb3BlcnR5KVxuICAgIH0gZWxzZSBpZiAoaXNBY3Rpb24odGhpbmcpKSB7XG4gICAgICAgIHJldHVybiB0aGluZy5uYW1lXG4gICAgfSBlbHNlIGlmIChpc09ic2VydmFibGVPYmplY3QodGhpbmcpIHx8IGlzT2JzZXJ2YWJsZU1hcCh0aGluZykgfHwgaXNPYnNlcnZhYmxlU2V0KHRoaW5nKSkge1xuICAgICAgICBuYW1lZCA9IGdldEFkbWluaXN0cmF0aW9uKHRoaW5nKVxuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHZhbGlkIGZvciBhcnJheXMgYXMgd2VsbFxuICAgICAgICBuYW1lZCA9IGdldEF0b20odGhpbmcpXG4gICAgfVxuICAgIHJldHVybiBuYW1lZC5uYW1lX1xufVxuIiwiaW1wb3J0IHtcbiAgICBpc0VTNk1hcCxcbiAgICBpc09ic2VydmFibGVBcnJheSxcbiAgICBpc09ic2VydmFibGVNYXAsXG4gICAgaXNFUzZTZXQsXG4gICAgaXNPYnNlcnZhYmxlU2V0LFxuICAgIGhhc1Byb3AsXG4gICAgaXNGdW5jdGlvbixcbiAgICBvYmplY3RQcm90b3R5cGVcbn0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuZGVjbGFyZSBjb25zdCBTeW1ib2xcbmNvbnN0IHRvU3RyaW5nID0gb2JqZWN0UHJvdG90eXBlLnRvU3RyaW5nXG5cbmV4cG9ydCBmdW5jdGlvbiBkZWVwRXF1YWwoYTogYW55LCBiOiBhbnksIGRlcHRoOiBudW1iZXIgPSAtMSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBlcShhLCBiLCBkZXB0aClcbn1cblxuLy8gQ29waWVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2phc2hrZW5hcy91bmRlcnNjb3JlL2Jsb2IvNWMyMzdhN2M2ODJmYjY4ZmQ1Mzc4MjAzZjBiZjIyZGNlMTYyNDg1NC91bmRlcnNjb3JlLmpzI0wxMTg2LUwxMjg5XG4vLyBJbnRlcm5hbCByZWN1cnNpdmUgY29tcGFyaXNvbiBmdW5jdGlvbiBmb3IgYGlzRXF1YWxgLlxuZnVuY3Rpb24gZXEoYTogYW55LCBiOiBhbnksIGRlcHRoOiBudW1iZXIsIGFTdGFjaz86IGFueVtdLCBiU3RhY2s/OiBhbnlbXSkge1xuICAgIC8vIElkZW50aWNhbCBvYmplY3RzIGFyZSBlcXVhbC4gYDAgPT09IC0wYCwgYnV0IHRoZXkgYXJlbid0IGlkZW50aWNhbC5cbiAgICAvLyBTZWUgdGhlIFtIYXJtb255IGBlZ2FsYCBwcm9wb3NhbF0oaHR0cDovL3dpa2kuZWNtYXNjcmlwdC5vcmcvZG9rdS5waHA/aWQ9aGFybW9ueTplZ2FsKS5cbiAgICBpZiAoYSA9PT0gYikgcmV0dXJuIGEgIT09IDAgfHwgMSAvIGEgPT09IDEgLyBiXG4gICAgLy8gYG51bGxgIG9yIGB1bmRlZmluZWRgIG9ubHkgZXF1YWwgdG8gaXRzZWxmIChzdHJpY3QgY29tcGFyaXNvbikuXG4gICAgaWYgKGEgPT0gbnVsbCB8fCBiID09IG51bGwpIHJldHVybiBmYWxzZVxuICAgIC8vIGBOYU5gcyBhcmUgZXF1aXZhbGVudCwgYnV0IG5vbi1yZWZsZXhpdmUuXG4gICAgaWYgKGEgIT09IGEpIHJldHVybiBiICE9PSBiXG4gICAgLy8gRXhoYXVzdCBwcmltaXRpdmUgY2hlY2tzXG4gICAgY29uc3QgdHlwZSA9IHR5cGVvZiBhXG4gICAgaWYgKCFpc0Z1bmN0aW9uKHR5cGUpICYmIHR5cGUgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIGIgIT0gXCJvYmplY3RcIikgcmV0dXJuIGZhbHNlXG5cbiAgICAvLyBDb21wYXJlIGBbW0NsYXNzXV1gIG5hbWVzLlxuICAgIGNvbnN0IGNsYXNzTmFtZSA9IHRvU3RyaW5nLmNhbGwoYSlcbiAgICBpZiAoY2xhc3NOYW1lICE9PSB0b1N0cmluZy5jYWxsKGIpKSByZXR1cm4gZmFsc2VcbiAgICBzd2l0Y2ggKGNsYXNzTmFtZSkge1xuICAgICAgICAvLyBTdHJpbmdzLCBudW1iZXJzLCByZWd1bGFyIGV4cHJlc3Npb25zLCBkYXRlcywgYW5kIGJvb2xlYW5zIGFyZSBjb21wYXJlZCBieSB2YWx1ZS5cbiAgICAgICAgY2FzZSBcIltvYmplY3QgUmVnRXhwXVwiOlxuICAgICAgICAvLyBSZWdFeHBzIGFyZSBjb2VyY2VkIHRvIHN0cmluZ3MgZm9yIGNvbXBhcmlzb24gKE5vdGU6ICcnICsgL2EvaSA9PT0gJy9hL2knKVxuICAgICAgICBjYXNlIFwiW29iamVjdCBTdHJpbmddXCI6XG4gICAgICAgICAgICAvLyBQcmltaXRpdmVzIGFuZCB0aGVpciBjb3JyZXNwb25kaW5nIG9iamVjdCB3cmFwcGVycyBhcmUgZXF1aXZhbGVudDsgdGh1cywgYFwiNVwiYCBpc1xuICAgICAgICAgICAgLy8gZXF1aXZhbGVudCB0byBgbmV3IFN0cmluZyhcIjVcIilgLlxuICAgICAgICAgICAgcmV0dXJuIFwiXCIgKyBhID09PSBcIlwiICsgYlxuICAgICAgICBjYXNlIFwiW29iamVjdCBOdW1iZXJdXCI6XG4gICAgICAgICAgICAvLyBgTmFOYHMgYXJlIGVxdWl2YWxlbnQsIGJ1dCBub24tcmVmbGV4aXZlLlxuICAgICAgICAgICAgLy8gT2JqZWN0KE5hTikgaXMgZXF1aXZhbGVudCB0byBOYU4uXG4gICAgICAgICAgICBpZiAoK2EgIT09ICthKSByZXR1cm4gK2IgIT09ICtiXG4gICAgICAgICAgICAvLyBBbiBgZWdhbGAgY29tcGFyaXNvbiBpcyBwZXJmb3JtZWQgZm9yIG90aGVyIG51bWVyaWMgdmFsdWVzLlxuICAgICAgICAgICAgcmV0dXJuICthID09PSAwID8gMSAvICthID09PSAxIC8gYiA6ICthID09PSArYlxuICAgICAgICBjYXNlIFwiW29iamVjdCBEYXRlXVwiOlxuICAgICAgICBjYXNlIFwiW29iamVjdCBCb29sZWFuXVwiOlxuICAgICAgICAgICAgLy8gQ29lcmNlIGRhdGVzIGFuZCBib29sZWFucyB0byBudW1lcmljIHByaW1pdGl2ZSB2YWx1ZXMuIERhdGVzIGFyZSBjb21wYXJlZCBieSB0aGVpclxuICAgICAgICAgICAgLy8gbWlsbGlzZWNvbmQgcmVwcmVzZW50YXRpb25zLiBOb3RlIHRoYXQgaW52YWxpZCBkYXRlcyB3aXRoIG1pbGxpc2Vjb25kIHJlcHJlc2VudGF0aW9uc1xuICAgICAgICAgICAgLy8gb2YgYE5hTmAgYXJlIG5vdCBlcXVpdmFsZW50LlxuICAgICAgICAgICAgcmV0dXJuICthID09PSArYlxuICAgICAgICBjYXNlIFwiW29iamVjdCBTeW1ib2xdXCI6XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgU3ltYm9sLnZhbHVlT2YuY2FsbChhKSA9PT0gU3ltYm9sLnZhbHVlT2YuY2FsbChiKVxuICAgICAgICAgICAgKVxuICAgICAgICBjYXNlIFwiW29iamVjdCBNYXBdXCI6XG4gICAgICAgIGNhc2UgXCJbb2JqZWN0IFNldF1cIjpcbiAgICAgICAgICAgIC8vIE1hcHMgYW5kIFNldHMgYXJlIHVud3JhcHBlZCB0byBhcnJheXMgb2YgZW50cnktcGFpcnMsIGFkZGluZyBhbiBpbmNpZGVudGFsIGxldmVsLlxuICAgICAgICAgICAgLy8gSGlkZSB0aGlzIGV4dHJhIGxldmVsIGJ5IGluY3JlYXNpbmcgdGhlIGRlcHRoLlxuICAgICAgICAgICAgaWYgKGRlcHRoID49IDApIHtcbiAgICAgICAgICAgICAgICBkZXB0aCsrXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVha1xuICAgIH1cbiAgICAvLyBVbndyYXAgYW55IHdyYXBwZWQgb2JqZWN0cy5cbiAgICBhID0gdW53cmFwKGEpXG4gICAgYiA9IHVud3JhcChiKVxuXG4gICAgY29uc3QgYXJlQXJyYXlzID0gY2xhc3NOYW1lID09PSBcIltvYmplY3QgQXJyYXldXCJcbiAgICBpZiAoIWFyZUFycmF5cykge1xuICAgICAgICBpZiAodHlwZW9mIGEgIT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgYiAhPSBcIm9iamVjdFwiKSByZXR1cm4gZmFsc2VcblxuICAgICAgICAvLyBPYmplY3RzIHdpdGggZGlmZmVyZW50IGNvbnN0cnVjdG9ycyBhcmUgbm90IGVxdWl2YWxlbnQsIGJ1dCBgT2JqZWN0YHMgb3IgYEFycmF5YHNcbiAgICAgICAgLy8gZnJvbSBkaWZmZXJlbnQgZnJhbWVzIGFyZS5cbiAgICAgICAgY29uc3QgYUN0b3IgPSBhLmNvbnN0cnVjdG9yLFxuICAgICAgICAgICAgYkN0b3IgPSBiLmNvbnN0cnVjdG9yXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIGFDdG9yICE9PSBiQ3RvciAmJlxuICAgICAgICAgICAgIShcbiAgICAgICAgICAgICAgICBpc0Z1bmN0aW9uKGFDdG9yKSAmJlxuICAgICAgICAgICAgICAgIGFDdG9yIGluc3RhbmNlb2YgYUN0b3IgJiZcbiAgICAgICAgICAgICAgICBpc0Z1bmN0aW9uKGJDdG9yKSAmJlxuICAgICAgICAgICAgICAgIGJDdG9yIGluc3RhbmNlb2YgYkN0b3JcbiAgICAgICAgICAgICkgJiZcbiAgICAgICAgICAgIFwiY29uc3RydWN0b3JcIiBpbiBhICYmXG4gICAgICAgICAgICBcImNvbnN0cnVjdG9yXCIgaW4gYlxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGRlcHRoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgIH0gZWxzZSBpZiAoZGVwdGggPCAwKSB7XG4gICAgICAgIGRlcHRoID0gLTFcbiAgICB9XG5cbiAgICAvLyBBc3N1bWUgZXF1YWxpdHkgZm9yIGN5Y2xpYyBzdHJ1Y3R1cmVzLiBUaGUgYWxnb3JpdGhtIGZvciBkZXRlY3RpbmcgY3ljbGljXG4gICAgLy8gc3RydWN0dXJlcyBpcyBhZGFwdGVkIGZyb20gRVMgNS4xIHNlY3Rpb24gMTUuMTIuMywgYWJzdHJhY3Qgb3BlcmF0aW9uIGBKT2AuXG5cbiAgICAvLyBJbml0aWFsaXppbmcgc3RhY2sgb2YgdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgLy8gSXQncyBkb25lIGhlcmUgc2luY2Ugd2Ugb25seSBuZWVkIHRoZW0gZm9yIG9iamVjdHMgYW5kIGFycmF5cyBjb21wYXJpc29uLlxuICAgIGFTdGFjayA9IGFTdGFjayB8fCBbXVxuICAgIGJTdGFjayA9IGJTdGFjayB8fCBbXVxuICAgIGxldCBsZW5ndGggPSBhU3RhY2subGVuZ3RoXG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIC8vIExpbmVhciBzZWFyY2guIFBlcmZvcm1hbmNlIGlzIGludmVyc2VseSBwcm9wb3J0aW9uYWwgdG8gdGhlIG51bWJlciBvZlxuICAgICAgICAvLyB1bmlxdWUgbmVzdGVkIHN0cnVjdHVyZXMuXG4gICAgICAgIGlmIChhU3RhY2tbbGVuZ3RoXSA9PT0gYSkgcmV0dXJuIGJTdGFja1tsZW5ndGhdID09PSBiXG4gICAgfVxuXG4gICAgLy8gQWRkIHRoZSBmaXJzdCBvYmplY3QgdG8gdGhlIHN0YWNrIG9mIHRyYXZlcnNlZCBvYmplY3RzLlxuICAgIGFTdGFjay5wdXNoKGEpXG4gICAgYlN0YWNrLnB1c2goYilcblxuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyBhbmQgYXJyYXlzLlxuICAgIGlmIChhcmVBcnJheXMpIHtcbiAgICAgICAgLy8gQ29tcGFyZSBhcnJheSBsZW5ndGhzIHRvIGRldGVybWluZSBpZiBhIGRlZXAgY29tcGFyaXNvbiBpcyBuZWNlc3NhcnkuXG4gICAgICAgIGxlbmd0aCA9IGEubGVuZ3RoXG4gICAgICAgIGlmIChsZW5ndGggIT09IGIubGVuZ3RoKSByZXR1cm4gZmFsc2VcbiAgICAgICAgLy8gRGVlcCBjb21wYXJlIHRoZSBjb250ZW50cywgaWdub3Jpbmcgbm9uLW51bWVyaWMgcHJvcGVydGllcy5cbiAgICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgICAgICBpZiAoIWVxKGFbbGVuZ3RoXSwgYltsZW5ndGhdLCBkZXB0aCAtIDEsIGFTdGFjaywgYlN0YWNrKSkgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBEZWVwIGNvbXBhcmUgb2JqZWN0cy5cbiAgICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGEpXG4gICAgICAgIGxldCBrZXlcbiAgICAgICAgbGVuZ3RoID0ga2V5cy5sZW5ndGhcbiAgICAgICAgLy8gRW5zdXJlIHRoYXQgYm90aCBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUgbnVtYmVyIG9mIHByb3BlcnRpZXMgYmVmb3JlIGNvbXBhcmluZyBkZWVwIGVxdWFsaXR5LlxuICAgICAgICBpZiAoT2JqZWN0LmtleXMoYikubGVuZ3RoICE9PSBsZW5ndGgpIHJldHVybiBmYWxzZVxuICAgICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgICAgIC8vIERlZXAgY29tcGFyZSBlYWNoIG1lbWJlclxuICAgICAgICAgICAga2V5ID0ga2V5c1tsZW5ndGhdXG4gICAgICAgICAgICBpZiAoIShoYXNQcm9wKGIsIGtleSkgJiYgZXEoYVtrZXldLCBiW2tleV0sIGRlcHRoIC0gMSwgYVN0YWNrLCBiU3RhY2spKSkgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gUmVtb3ZlIHRoZSBmaXJzdCBvYmplY3QgZnJvbSB0aGUgc3RhY2sgb2YgdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgYVN0YWNrLnBvcCgpXG4gICAgYlN0YWNrLnBvcCgpXG4gICAgcmV0dXJuIHRydWVcbn1cblxuZnVuY3Rpb24gdW53cmFwKGE6IGFueSkge1xuICAgIGlmIChpc09ic2VydmFibGVBcnJheShhKSkgcmV0dXJuIGEuc2xpY2UoKVxuICAgIGlmIChpc0VTNk1hcChhKSB8fCBpc09ic2VydmFibGVNYXAoYSkpIHJldHVybiBBcnJheS5mcm9tKGEuZW50cmllcygpKVxuICAgIGlmIChpc0VTNlNldChhKSB8fCBpc09ic2VydmFibGVTZXQoYSkpIHJldHVybiBBcnJheS5mcm9tKGEuZW50cmllcygpKVxuICAgIHJldHVybiBhXG59XG4iLCJleHBvcnQgZnVuY3Rpb24gbWFrZUl0ZXJhYmxlPFQ+KGl0ZXJhdG9yOiBJdGVyYXRvcjxUPik6IEl0ZXJhYmxlSXRlcmF0b3I8VD4ge1xuICAgIGl0ZXJhdG9yW1N5bWJvbC5pdGVyYXRvcl0gPSBnZXRTZWxmXG4gICAgcmV0dXJuIGl0ZXJhdG9yIGFzIGFueVxufVxuXG5mdW5jdGlvbiBnZXRTZWxmKCkge1xuICAgIHJldHVybiB0aGlzXG59XG4iLCJpbXBvcnQgeyBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24sIGlzRnVuY3Rpb24gfSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5leHBvcnQgY29uc3QgZW51bSBNYWtlUmVzdWx0IHtcbiAgICBDYW5jZWwsXG4gICAgQnJlYWssXG4gICAgQ29udGludWVcbn1cblxuZXhwb3J0IHR5cGUgQW5ub3RhdGlvbiA9IHtcbiAgICBhbm5vdGF0aW9uVHlwZV86IHN0cmluZ1xuICAgIG1ha2VfKFxuICAgICAgICBhZG06IE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbixcbiAgICAgICAga2V5OiBQcm9wZXJ0eUtleSxcbiAgICAgICAgZGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yLFxuICAgICAgICBzb3VyY2U6IG9iamVjdFxuICAgICk6IE1ha2VSZXN1bHRcbiAgICBleHRlbmRfKFxuICAgICAgICBhZG06IE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbixcbiAgICAgICAga2V5OiBQcm9wZXJ0eUtleSxcbiAgICAgICAgZGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yLFxuICAgICAgICBwcm94eVRyYXA6IGJvb2xlYW5cbiAgICApOiBib29sZWFuIHwgbnVsbFxuICAgIG9wdGlvbnNfPzogYW55XG59XG5cbmV4cG9ydCB0eXBlIEFubm90YXRpb25NYXBFbnRyeSA9XG4gICAgfCBBbm5vdGF0aW9uXG4gICAgfCB0cnVlIC8qIGZvbGxvdyB0aGUgZGVmYXVsdCBkZWNvcmF0b3IsIHVzdWFsbHkgZGVlcCAqL1xuICAgIHwgZmFsc2UgLyogZG9uJ3QgZGVjb3JhdGUgdGhpcyBwcm9wZXJ0eSAqL1xuXG4vLyBBZGRpdGlvbmFsRmllbGRzIGNhbiBiZSB1c2VkIHRvIGRlY2xhcmUgYWRkaXRpb25hbCBrZXlzIHRoYXQgY2FuIGJlIHVzZWQsIGZvciBleGFtcGxlIHRvIGJlIGFibGUgdG9cbi8vIGRlY2xhcmUgYW5ub3RhdGlvbnMgZm9yIHByaXZhdGUvIHByb3RlY3RlZCBtZW1iZXJzLCBzZWUgIzIzMzlcbmV4cG9ydCB0eXBlIEFubm90YXRpb25zTWFwPFQsIEFkZGl0aW9uYWxGaWVsZHMgZXh0ZW5kcyBQcm9wZXJ0eUtleT4gPSB7XG4gICAgW1AgaW4gRXhjbHVkZTxrZXlvZiBULCBcInRvU3RyaW5nXCI+XT86IEFubm90YXRpb25NYXBFbnRyeVxufSAmXG4gICAgUmVjb3JkPEFkZGl0aW9uYWxGaWVsZHMsIEFubm90YXRpb25NYXBFbnRyeT5cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQW5ub3RhdGlvbih0aGluZzogYW55KSB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgLy8gQ2FuIGJlIGZ1bmN0aW9uXG4gICAgICAgIHRoaW5nIGluc3RhbmNlb2YgT2JqZWN0ICYmXG4gICAgICAgIHR5cGVvZiB0aGluZy5hbm5vdGF0aW9uVHlwZV8gPT09IFwic3RyaW5nXCIgJiZcbiAgICAgICAgaXNGdW5jdGlvbih0aGluZy5tYWtlXykgJiZcbiAgICAgICAgaXNGdW5jdGlvbih0aGluZy5leHRlbmRfKVxuICAgIClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQW5ub3RhdGlvbk1hcEVudHJ5KHRoaW5nOiBhbnkpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRoaW5nID09PSBcImJvb2xlYW5cIiB8fCBpc0Fubm90YXRpb24odGhpbmcpXG59XG4iLCIvKipcbiAqIChjKSBNaWNoZWwgV2VzdHN0cmF0ZSAyMDE1IC0gMjAyMFxuICogTUlUIExpY2Vuc2VkXG4gKlxuICogV2VsY29tZSB0byB0aGUgbW9ieCBzb3VyY2VzISBUbyBnZXQgYW4gZ2xvYmFsIG92ZXJ2aWV3IG9mIGhvdyBNb2JYIGludGVybmFsbHkgd29ya3MsXG4gKiB0aGlzIGlzIGEgZ29vZCBwbGFjZSB0byBzdGFydDpcbiAqIGh0dHBzOi8vbWVkaXVtLmNvbS9AbXdlc3RzdHJhdGUvYmVjb21pbmctZnVsbHktcmVhY3RpdmUtYW4taW4tZGVwdGgtZXhwbGFuYXRpb24tb2YtbW9ic2VydmFibGUtNTU5OTUyNjJhMjU0Iy54dmJoNnFkNzRcbiAqXG4gKiBTb3VyY2UgZm9sZGVyczpcbiAqID09PT09PT09PT09PT09PVxuICpcbiAqIC0gYXBpLyAgICAgTW9zdCBvZiB0aGUgcHVibGljIHN0YXRpYyBtZXRob2RzIGV4cG9zZWQgYnkgdGhlIG1vZHVsZSBjYW4gYmUgZm91bmQgaGVyZS5cbiAqIC0gY29yZS8gICAgSW1wbGVtZW50YXRpb24gb2YgdGhlIE1vYlggYWxnb3JpdGhtOyBhdG9tcywgZGVyaXZhdGlvbnMsIHJlYWN0aW9ucywgZGVwZW5kZW5jeSB0cmVlcywgb3B0aW1pemF0aW9ucy4gQ29vbCBzdHVmZiBjYW4gYmUgZm91bmQgaGVyZS5cbiAqIC0gdHlwZXMvICAgQWxsIHRoZSBtYWdpYyB0aGF0IGlzIG5lZWQgdG8gaGF2ZSBvYnNlcnZhYmxlIG9iamVjdHMsIGFycmF5cyBhbmQgdmFsdWVzIGlzIGluIHRoaXMgZm9sZGVyLiBJbmNsdWRpbmcgdGhlIG1vZGlmaWVycyBsaWtlIGBhc0ZsYXRgLlxuICogLSB1dGlscy8gICBVdGlsaXR5IHN0dWZmLlxuICpcbiAqL1xuaW1wb3J0IHsgZGllIH0gZnJvbSBcIi4vZXJyb3JzXCJcbmltcG9ydCB7IGdldEdsb2JhbCB9IGZyb20gXCIuL3V0aWxzL2dsb2JhbFwiXG47W1wiU3ltYm9sXCIsIFwiTWFwXCIsIFwiU2V0XCJdLmZvckVhY2gobSA9PiB7XG4gICAgbGV0IGcgPSBnZXRHbG9iYWwoKVxuICAgIGlmICh0eXBlb2YgZ1ttXSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBkaWUoYE1vYlggcmVxdWlyZXMgZ2xvYmFsICcke219JyB0byBiZSBhdmFpbGFibGUgb3IgcG9seWZpbGxlZGApXG4gICAgfVxufSlcblxuaW1wb3J0IHsgc3B5LCBnZXREZWJ1Z05hbWUsICRtb2J4IH0gZnJvbSBcIi4vaW50ZXJuYWxcIlxuXG5leHBvcnQge1xuICAgIElPYnNlcnZhYmxlLFxuICAgIElEZXBUcmVlTm9kZSxcbiAgICBSZWFjdGlvbixcbiAgICBJUmVhY3Rpb25QdWJsaWMsXG4gICAgSVJlYWN0aW9uRGlzcG9zZXIsXG4gICAgdW50cmFja2VkLFxuICAgIElBdG9tLFxuICAgIGNyZWF0ZUF0b20sXG4gICAgc3B5LFxuICAgIElDb21wdXRlZFZhbHVlLFxuICAgIElFcXVhbHNDb21wYXJlcixcbiAgICBjb21wYXJlcixcbiAgICBJRW5oYW5jZXIsXG4gICAgSUludGVyY2VwdGFibGUsXG4gICAgSUludGVyY2VwdG9yLFxuICAgIElMaXN0ZW5hYmxlLFxuICAgIElPYmplY3RXaWxsQ2hhbmdlLFxuICAgIElPYmplY3REaWRDaGFuZ2UsXG4gICAgaXNPYnNlcnZhYmxlT2JqZWN0LFxuICAgIElWYWx1ZURpZENoYW5nZSxcbiAgICBJVmFsdWVXaWxsQ2hhbmdlLFxuICAgIElPYnNlcnZhYmxlVmFsdWUsXG4gICAgaXNPYnNlcnZhYmxlVmFsdWUgYXMgaXNCb3hlZE9ic2VydmFibGUsXG4gICAgSU9ic2VydmFibGVBcnJheSxcbiAgICBJQXJyYXlXaWxsQ2hhbmdlLFxuICAgIElBcnJheVdpbGxTcGxpY2UsXG4gICAgSUFycmF5U3BsaWNlLFxuICAgIElBcnJheVVwZGF0ZSxcbiAgICBJQXJyYXlEaWRDaGFuZ2UsXG4gICAgaXNPYnNlcnZhYmxlQXJyYXksXG4gICAgSUtleVZhbHVlTWFwLFxuICAgIE9ic2VydmFibGVNYXAsXG4gICAgSU1hcEVudHJpZXMsXG4gICAgSU1hcEVudHJ5LFxuICAgIElNYXBXaWxsQ2hhbmdlLFxuICAgIElNYXBEaWRDaGFuZ2UsXG4gICAgaXNPYnNlcnZhYmxlTWFwLFxuICAgIElPYnNlcnZhYmxlTWFwSW5pdGlhbFZhbHVlcyxcbiAgICBPYnNlcnZhYmxlU2V0LFxuICAgIGlzT2JzZXJ2YWJsZVNldCxcbiAgICBJU2V0RGlkQ2hhbmdlLFxuICAgIElTZXRXaWxsQ2hhbmdlLFxuICAgIElPYnNlcnZhYmxlU2V0SW5pdGlhbFZhbHVlcyxcbiAgICB0cmFuc2FjdGlvbixcbiAgICBvYnNlcnZhYmxlLFxuICAgIElPYnNlcnZhYmxlRmFjdG9yeSxcbiAgICBDcmVhdGVPYnNlcnZhYmxlT3B0aW9ucyxcbiAgICBjb21wdXRlZCxcbiAgICBJQ29tcHV0ZWRGYWN0b3J5LFxuICAgIGlzT2JzZXJ2YWJsZSxcbiAgICBpc09ic2VydmFibGVQcm9wLFxuICAgIGlzQ29tcHV0ZWQsXG4gICAgaXNDb21wdXRlZFByb3AsXG4gICAgZXh0ZW5kT2JzZXJ2YWJsZSxcbiAgICBvYnNlcnZlLFxuICAgIGludGVyY2VwdCxcbiAgICBhdXRvcnVuLFxuICAgIElBdXRvcnVuT3B0aW9ucyxcbiAgICByZWFjdGlvbixcbiAgICBJUmVhY3Rpb25PcHRpb25zLFxuICAgIHdoZW4sXG4gICAgSVdoZW5PcHRpb25zLFxuICAgIGFjdGlvbixcbiAgICBpc0FjdGlvbixcbiAgICBydW5JbkFjdGlvbixcbiAgICBJQWN0aW9uRmFjdG9yeSxcbiAgICBrZXlzLFxuICAgIHZhbHVlcyxcbiAgICBlbnRyaWVzLFxuICAgIHNldCxcbiAgICByZW1vdmUsXG4gICAgaGFzLFxuICAgIGdldCxcbiAgICBhcGlPd25LZXlzIGFzIG93bktleXMsXG4gICAgYXBpRGVmaW5lUHJvcGVydHkgYXMgZGVmaW5lUHJvcGVydHksXG4gICAgY29uZmlndXJlLFxuICAgIG9uQmVjb21lT2JzZXJ2ZWQsXG4gICAgb25CZWNvbWVVbm9ic2VydmVkLFxuICAgIGZsb3csXG4gICAgaXNGbG93LFxuICAgIGZsb3dSZXN1bHQsXG4gICAgRmxvd0NhbmNlbGxhdGlvbkVycm9yLFxuICAgIGlzRmxvd0NhbmNlbGxhdGlvbkVycm9yLFxuICAgIHRvSlMsXG4gICAgdHJhY2UsXG4gICAgSU9ic2VydmVyVHJlZSxcbiAgICBJRGVwZW5kZW5jeVRyZWUsXG4gICAgZ2V0RGVwZW5kZW5jeVRyZWUsXG4gICAgZ2V0T2JzZXJ2ZXJUcmVlLFxuICAgIHJlc2V0R2xvYmFsU3RhdGUgYXMgX3Jlc2V0R2xvYmFsU3RhdGUsXG4gICAgZ2V0R2xvYmFsU3RhdGUgYXMgX2dldEdsb2JhbFN0YXRlLFxuICAgIGdldERlYnVnTmFtZSxcbiAgICBnZXRBdG9tLFxuICAgIGdldEFkbWluaXN0cmF0aW9uIGFzIF9nZXRBZG1pbmlzdHJhdGlvbixcbiAgICBhbGxvd1N0YXRlQ2hhbmdlcyBhcyBfYWxsb3dTdGF0ZUNoYW5nZXMsXG4gICAgcnVuSW5BY3Rpb24gYXMgX2FsbG93U3RhdGVDaGFuZ2VzSW5zaWRlQ29tcHV0ZWQsIC8vIFRoaXMgaGFzIGJlY29tZSB0aGUgZGVmYXVsdCBiZWhhdmlvciBpbiBNb2J4IDZcbiAgICBMYW1iZGEsXG4gICAgJG1vYngsXG4gICAgaXNDb21wdXRpbmdEZXJpdmF0aW9uIGFzIF9pc0NvbXB1dGluZ0Rlcml2YXRpb24sXG4gICAgb25SZWFjdGlvbkVycm9yLFxuICAgIGludGVyY2VwdFJlYWRzIGFzIF9pbnRlcmNlcHRSZWFkcyxcbiAgICBJQ29tcHV0ZWRWYWx1ZU9wdGlvbnMsXG4gICAgSUFjdGlvblJ1bkluZm8sXG4gICAgX3N0YXJ0QWN0aW9uLFxuICAgIF9lbmRBY3Rpb24sXG4gICAgYWxsb3dTdGF0ZVJlYWRzU3RhcnQgYXMgX2FsbG93U3RhdGVSZWFkc1N0YXJ0LFxuICAgIGFsbG93U3RhdGVSZWFkc0VuZCBhcyBfYWxsb3dTdGF0ZVJlYWRzRW5kLFxuICAgIG1ha2VPYnNlcnZhYmxlLFxuICAgIG1ha2VBdXRvT2JzZXJ2YWJsZSxcbiAgICBhdXRvQWN0aW9uIGFzIF9hdXRvQWN0aW9uLFxuICAgIEFubm90YXRpb25zTWFwLFxuICAgIEFubm90YXRpb25NYXBFbnRyeSxcbiAgICBvdmVycmlkZVxufSBmcm9tIFwiLi9pbnRlcm5hbFwiXG5cbi8vIERldnRvb2xzIHN1cHBvcnRcbmRlY2xhcmUgY29uc3QgX19NT0JYX0RFVlRPT0xTX0dMT0JBTF9IT09LX186IHsgaW5qZWN0TW9ieDogKGFueSkgPT4gdm9pZCB9XG5pZiAodHlwZW9mIF9fTU9CWF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSBcIm9iamVjdFwiKSB7XG4gICAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vYW5keWtvZy9tb2J4LWRldnRvb2xzL1xuICAgIF9fTU9CWF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmluamVjdE1vYngoe1xuICAgICAgICBzcHksXG4gICAgICAgIGV4dHJhczoge1xuICAgICAgICAgICAgZ2V0RGVidWdOYW1lXG4gICAgICAgIH0sXG4gICAgICAgICRtb2J4XG4gICAgfSlcbn1cbiIsImltcG9ydCB7IG1ha2VPYnNlcnZhYmxlIH0gZnJvbSBcIm1vYnhcIjtcbmltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pZiAoIXVzZVN0YXRlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwibW9ieC1yZWFjdC1saXRlIHJlcXVpcmVzIFJlYWN0IHdpdGggSG9va3Mgc3VwcG9ydFwiKTtcbn1cbmlmICghbWFrZU9ic2VydmFibGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJtb2J4LXJlYWN0LWxpdGVAMyByZXF1aXJlcyBtb2J4IGF0IGxlYXN0IHZlcnNpb24gNiB0byBiZSBhdmFpbGFibGVcIik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hc3NlcnRFbnZpcm9ubWVudC5qcy5tYXAiLCJleHBvcnQgeyB1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyB9IGZyb20gXCJyZWFjdC1kb21cIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlYWN0QmF0Y2hlZFVwZGF0ZXMuanMubWFwIiwiaW1wb3J0IHsgY29uZmlndXJlIH0gZnJvbSBcIm1vYnhcIjtcbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0Tm9vcEJhdGNoKGNhbGxiYWNrKSB7XG4gICAgY2FsbGJhY2soKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBvYnNlcnZlckJhdGNoaW5nKHJlYWN0aW9uU2NoZWR1bGVyKSB7XG4gICAgaWYgKCFyZWFjdGlvblNjaGVkdWxlcikge1xuICAgICAgICByZWFjdGlvblNjaGVkdWxlciA9IGRlZmF1bHROb29wQmF0Y2g7XG4gICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIltNb2JYXSBGYWlsZWQgdG8gZ2V0IHVuc3RhYmxlX2JhdGNoZWQgdXBkYXRlcyBmcm9tIHJlYWN0LWRvbSAvIHJlYWN0LW5hdGl2ZVwiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25maWd1cmUoeyByZWFjdGlvblNjaGVkdWxlcjogcmVhY3Rpb25TY2hlZHVsZXIgfSk7XG59XG5leHBvcnQgdmFyIGlzT2JzZXJ2ZXJCYXRjaGVkID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwiW01vYlhdIERlcHJlY2F0ZWRcIik7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9ic2VydmVyQmF0Y2hpbmcuanMubWFwIiwiaW1wb3J0IHsgZ2V0RGVwZW5kZW5jeVRyZWUgfSBmcm9tIFwibW9ieFwiO1xuZXhwb3J0IGZ1bmN0aW9uIHByaW50RGVidWdWYWx1ZSh2KSB7XG4gICAgcmV0dXJuIGdldERlcGVuZGVuY3lUcmVlKHYpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJpbnREZWJ1Z1ZhbHVlLmpzLm1hcCIsInZhciBGaW5hbGl6YXRpb25SZWdpc3RyeUxvY2FsID0gdHlwZW9mIEZpbmFsaXphdGlvblJlZ2lzdHJ5ID09PSBcInVuZGVmaW5lZFwiID8gdW5kZWZpbmVkIDogRmluYWxpemF0aW9uUmVnaXN0cnk7XG5leHBvcnQgeyBGaW5hbGl6YXRpb25SZWdpc3RyeUxvY2FsIGFzIEZpbmFsaXphdGlvblJlZ2lzdHJ5IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1GaW5hbGl6YXRpb25SZWdpc3RyeVdyYXBwZXIuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVRyYWNraW5nRGF0YShyZWFjdGlvbikge1xuICAgIHZhciB0cmFja2luZ0RhdGEgPSB7XG4gICAgICAgIHJlYWN0aW9uOiByZWFjdGlvbixcbiAgICAgICAgbW91bnRlZDogZmFsc2UsXG4gICAgICAgIGNoYW5nZWRCZWZvcmVNb3VudDogZmFsc2UsXG4gICAgICAgIGNsZWFuQXQ6IERhdGUubm93KCkgKyBDTEVBTlVQX0xFQUtFRF9SRUFDVElPTlNfQUZURVJfTUlMTElTXG4gICAgfTtcbiAgICByZXR1cm4gdHJhY2tpbmdEYXRhO1xufVxuLyoqXG4gKiBUaGUgbWluaW11bSB0aW1lIGJlZm9yZSB3ZSdsbCBjbGVhbiB1cCBhIFJlYWN0aW9uIGNyZWF0ZWQgaW4gYSByZW5kZXJcbiAqIGZvciBhIGNvbXBvbmVudCB0aGF0IGhhc24ndCBtYW5hZ2VkIHRvIHJ1biBpdHMgZWZmZWN0cy4gVGhpcyBuZWVkcyB0b1xuICogYmUgYmlnIGVub3VnaCB0byBlbnN1cmUgdGhhdCBhIGNvbXBvbmVudCB3b24ndCB0dXJuIHVwIGFuZCBoYXZlIGl0c1xuICogZWZmZWN0cyBydW4gd2l0aG91dCBiZWluZyByZS1yZW5kZXJlZC5cbiAqL1xuZXhwb3J0IHZhciBDTEVBTlVQX0xFQUtFRF9SRUFDVElPTlNfQUZURVJfTUlMTElTID0gMTAwMDA7XG4vKipcbiAqIFRoZSBmcmVxdWVuY3kgd2l0aCB3aGljaCB3ZSdsbCBjaGVjayBmb3IgbGVha2VkIHJlYWN0aW9ucy5cbiAqL1xuZXhwb3J0IHZhciBDTEVBTlVQX1RJTUVSX0xPT1BfTUlMTElTID0gMTAwMDA7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFjdGlvbkNsZWFudXBUcmFja2luZ0NvbW1vbi5qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVUcmFja2luZ0RhdGEgfSBmcm9tIFwiLi9yZWFjdGlvbkNsZWFudXBUcmFja2luZ0NvbW1vblwiO1xuLyoqXG4gKiBGaW5hbGl6YXRpb25SZWdpc3RyeS1iYXNlZCB1bmNvbW1pdHRlZCByZWFjdGlvbiBjbGVhbnVwXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVSZWFjdGlvbkNsZWFudXBUcmFja2luZ1VzaW5nRmluYWxpemF0aW9uUmVnaXN0ZXIoRmluYWxpemF0aW9uUmVnaXN0cnkpIHtcbiAgICB2YXIgY2xlYW51cFRva2VuVG9SZWFjdGlvblRyYWNraW5nTWFwID0gbmV3IE1hcCgpO1xuICAgIHZhciBnbG9iYWxDbGVhbnVwVG9rZW5zQ291bnRlciA9IDE7XG4gICAgdmFyIHJlZ2lzdHJ5ID0gbmV3IEZpbmFsaXphdGlvblJlZ2lzdHJ5KGZ1bmN0aW9uIGNsZWFudXBGdW5jdGlvbih0b2tlbikge1xuICAgICAgICB2YXIgdHJhY2tlZFJlYWN0aW9uID0gY2xlYW51cFRva2VuVG9SZWFjdGlvblRyYWNraW5nTWFwLmdldCh0b2tlbik7XG4gICAgICAgIGlmICh0cmFja2VkUmVhY3Rpb24pIHtcbiAgICAgICAgICAgIHRyYWNrZWRSZWFjdGlvbi5yZWFjdGlvbi5kaXNwb3NlKCk7XG4gICAgICAgICAgICBjbGVhbnVwVG9rZW5Ub1JlYWN0aW9uVHJhY2tpbmdNYXAuZGVsZXRlKHRva2VuKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICAgIGFkZFJlYWN0aW9uVG9UcmFjazogZnVuY3Rpb24gKHJlYWN0aW9uVHJhY2tpbmdSZWYsIHJlYWN0aW9uLCBvYmplY3RSZXRhaW5lZEJ5UmVhY3QpIHtcbiAgICAgICAgICAgIHZhciB0b2tlbiA9IGdsb2JhbENsZWFudXBUb2tlbnNDb3VudGVyKys7XG4gICAgICAgICAgICByZWdpc3RyeS5yZWdpc3RlcihvYmplY3RSZXRhaW5lZEJ5UmVhY3QsIHRva2VuLCByZWFjdGlvblRyYWNraW5nUmVmKTtcbiAgICAgICAgICAgIHJlYWN0aW9uVHJhY2tpbmdSZWYuY3VycmVudCA9IGNyZWF0ZVRyYWNraW5nRGF0YShyZWFjdGlvbik7XG4gICAgICAgICAgICByZWFjdGlvblRyYWNraW5nUmVmLmN1cnJlbnQuZmluYWxpemF0aW9uUmVnaXN0cnlDbGVhbnVwVG9rZW4gPSB0b2tlbjtcbiAgICAgICAgICAgIGNsZWFudXBUb2tlblRvUmVhY3Rpb25UcmFja2luZ01hcC5zZXQodG9rZW4sIHJlYWN0aW9uVHJhY2tpbmdSZWYuY3VycmVudCk7XG4gICAgICAgICAgICByZXR1cm4gcmVhY3Rpb25UcmFja2luZ1JlZi5jdXJyZW50O1xuICAgICAgICB9LFxuICAgICAgICByZWNvcmRSZWFjdGlvbkFzQ29tbWl0dGVkOiBmdW5jdGlvbiAocmVhY3Rpb25SZWYpIHtcbiAgICAgICAgICAgIHJlZ2lzdHJ5LnVucmVnaXN0ZXIocmVhY3Rpb25SZWYpO1xuICAgICAgICAgICAgaWYgKHJlYWN0aW9uUmVmLmN1cnJlbnQgJiYgcmVhY3Rpb25SZWYuY3VycmVudC5maW5hbGl6YXRpb25SZWdpc3RyeUNsZWFudXBUb2tlbikge1xuICAgICAgICAgICAgICAgIGNsZWFudXBUb2tlblRvUmVhY3Rpb25UcmFja2luZ01hcC5kZWxldGUocmVhY3Rpb25SZWYuY3VycmVudC5maW5hbGl6YXRpb25SZWdpc3RyeUNsZWFudXBUb2tlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGZvcmNlQ2xlYW51cFRpbWVyVG9SdW5Ob3dGb3JUZXN0czogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gV2hlbiBGaW5hbGl6YXRpb25SZWdpc3RyeSBpbiB1c2UsIHRoaXMgdGhpcyBpcyBuby1vcFxuICAgICAgICB9LFxuICAgICAgICByZXNldENsZWFudXBTY2hlZHVsZUZvclRlc3RzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyBXaGVuIEZpbmFsaXphdGlvblJlZ2lzdHJ5IGluIHVzZSwgdGhpcyB0aGlzIGlzIG5vLW9wXG4gICAgICAgIH1cbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlUmVhY3Rpb25DbGVhbnVwVHJhY2tpbmdVc2luZ0ZpbmFsaXphdGlvblJlZ2lzdGVyLmpzLm1hcCIsInZhciBfX3ZhbHVlcyA9ICh0aGlzICYmIHRoaXMuX192YWx1ZXMpIHx8IGZ1bmN0aW9uKG8pIHtcbiAgICB2YXIgcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IsIG0gPSBzICYmIG9bc10sIGkgPSAwO1xuICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xuICAgIGlmIChvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgcmV0dXJuIHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvICYmIG9baSsrXSwgZG9uZTogIW8gfTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihzID8gXCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiIDogXCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xufTtcbmltcG9ydCB7IENMRUFOVVBfVElNRVJfTE9PUF9NSUxMSVMsIGNyZWF0ZVRyYWNraW5nRGF0YSB9IGZyb20gXCIuL3JlYWN0aW9uQ2xlYW51cFRyYWNraW5nQ29tbW9uXCI7XG4vKipcbiAqIHRpbWVycywgZ2Mtc3R5bGUsIHVuY29tbWl0dGVkIHJlYWN0aW9uIGNsZWFudXBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVRpbWVyQmFzZWRSZWFjdGlvbkNsZWFudXBUcmFja2luZygpIHtcbiAgICAvKipcbiAgICAgKiBSZWFjdGlvbnMgY3JlYXRlZCBieSBjb21wb25lbnRzIHRoYXQgaGF2ZSB5ZXQgdG8gYmUgZnVsbHkgbW91bnRlZC5cbiAgICAgKi9cbiAgICB2YXIgdW5jb21taXR0ZWRSZWFjdGlvblJlZnMgPSBuZXcgU2V0KCk7XG4gICAgLyoqXG4gICAgICogTGF0ZXN0ICd1bmNvbW1pdHRlZCByZWFjdGlvbnMnIGNsZWFudXAgdGltZXIgaGFuZGxlLlxuICAgICAqL1xuICAgIHZhciByZWFjdGlvbkNsZWFudXBIYW5kbGU7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAvKipcbiAgICAgKiBPbmx5IHRvIGJlIHVzZWQgYnkgdGVzdCBmdW5jdGlvbnM7IGRvIG5vdCBleHBvcnQgb3V0c2lkZSBvZiBtb2J4LXJlYWN0LWxpdGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JjZUNsZWFudXBUaW1lclRvUnVuTm93Rm9yVGVzdHMoKSB7XG4gICAgICAgIC8vIFRoaXMgYWxsb3dzIHVzIHRvIGNvbnRyb2wgdGhlIGV4ZWN1dGlvbiBvZiB0aGUgY2xlYW51cCB0aW1lclxuICAgICAgICAvLyB0byBmb3JjZSBpdCB0byBydW4gYXQgYXdrd2FyZCB0aW1lcyBpbiB1bml0IHRlc3RzLlxuICAgICAgICBpZiAocmVhY3Rpb25DbGVhbnVwSGFuZGxlKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQocmVhY3Rpb25DbGVhbnVwSGFuZGxlKTtcbiAgICAgICAgICAgIGNsZWFuVW5jb21taXR0ZWRSZWFjdGlvbnMoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIGZ1bmN0aW9uIHJlc2V0Q2xlYW51cFNjaGVkdWxlRm9yVGVzdHMoKSB7XG4gICAgICAgIHZhciBlXzEsIF9hO1xuICAgICAgICBpZiAodW5jb21taXR0ZWRSZWFjdGlvblJlZnMuc2l6ZSA+IDApIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgdW5jb21taXR0ZWRSZWFjdGlvblJlZnNfMSA9IF9fdmFsdWVzKHVuY29tbWl0dGVkUmVhY3Rpb25SZWZzKSwgdW5jb21taXR0ZWRSZWFjdGlvblJlZnNfMV8xID0gdW5jb21taXR0ZWRSZWFjdGlvblJlZnNfMS5uZXh0KCk7ICF1bmNvbW1pdHRlZFJlYWN0aW9uUmVmc18xXzEuZG9uZTsgdW5jb21taXR0ZWRSZWFjdGlvblJlZnNfMV8xID0gdW5jb21taXR0ZWRSZWFjdGlvblJlZnNfMS5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlZiA9IHVuY29tbWl0dGVkUmVhY3Rpb25SZWZzXzFfMS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRyYWNraW5nID0gcmVmLmN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0cmFja2luZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2tpbmcucmVhY3Rpb24uZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVmLmN1cnJlbnQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cbiAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1bmNvbW1pdHRlZFJlYWN0aW9uUmVmc18xXzEgJiYgIXVuY29tbWl0dGVkUmVhY3Rpb25SZWZzXzFfMS5kb25lICYmIChfYSA9IHVuY29tbWl0dGVkUmVhY3Rpb25SZWZzXzEucmV0dXJuKSkgX2EuY2FsbCh1bmNvbW1pdHRlZFJlYWN0aW9uUmVmc18xKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdW5jb21taXR0ZWRSZWFjdGlvblJlZnMuY2xlYXIoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVhY3Rpb25DbGVhbnVwSGFuZGxlKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQocmVhY3Rpb25DbGVhbnVwSGFuZGxlKTtcbiAgICAgICAgICAgIHJlYWN0aW9uQ2xlYW51cEhhbmRsZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBlbnN1cmVDbGVhbnVwVGltZXJSdW5uaW5nKCkge1xuICAgICAgICBpZiAocmVhY3Rpb25DbGVhbnVwSGFuZGxlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJlYWN0aW9uQ2xlYW51cEhhbmRsZSA9IHNldFRpbWVvdXQoY2xlYW5VbmNvbW1pdHRlZFJlYWN0aW9ucywgQ0xFQU5VUF9USU1FUl9MT09QX01JTExJUyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gc2NoZWR1bGVDbGVhbnVwT2ZSZWFjdGlvbklmTGVha2VkKHJlZikge1xuICAgICAgICB1bmNvbW1pdHRlZFJlYWN0aW9uUmVmcy5hZGQocmVmKTtcbiAgICAgICAgZW5zdXJlQ2xlYW51cFRpbWVyUnVubmluZygpO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZWNvcmRSZWFjdGlvbkFzQ29tbWl0dGVkKHJlYWN0aW9uUmVmKSB7XG4gICAgICAgIHVuY29tbWl0dGVkUmVhY3Rpb25SZWZzLmRlbGV0ZShyZWFjdGlvblJlZik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJ1biBieSB0aGUgY2xlYW51cCB0aW1lciB0byBkaXNwb3NlIGFueSBvdXRzdGFuZGluZyByZWFjdGlvbnNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbGVhblVuY29tbWl0dGVkUmVhY3Rpb25zKCkge1xuICAgICAgICByZWFjdGlvbkNsZWFudXBIYW5kbGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIC8vIExvb3AgdGhyb3VnaCBhbGwgdGhlIGNhbmRpZGF0ZSBsZWFrZWQgcmVhY3Rpb25zOyB0aG9zZSBvbGRlclxuICAgICAgICAvLyB0aGFuIENMRUFOVVBfTEVBS0VEX1JFQUNUSU9OU19BRlRFUl9NSUxMSVMgZ2V0IHRpZGllZC5cbiAgICAgICAgdmFyIG5vdyA9IERhdGUubm93KCk7XG4gICAgICAgIHVuY29tbWl0dGVkUmVhY3Rpb25SZWZzLmZvckVhY2goZnVuY3Rpb24gKHJlZikge1xuICAgICAgICAgICAgdmFyIHRyYWNraW5nID0gcmVmLmN1cnJlbnQ7XG4gICAgICAgICAgICBpZiAodHJhY2tpbmcpIHtcbiAgICAgICAgICAgICAgICBpZiAobm93ID49IHRyYWNraW5nLmNsZWFuQXQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSXQncyB0aW1lIHRvIHRpZHkgdXAgdGhpcyBsZWFrZWQgcmVhY3Rpb24uXG4gICAgICAgICAgICAgICAgICAgIHRyYWNraW5nLnJlYWN0aW9uLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgcmVmLmN1cnJlbnQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB1bmNvbW1pdHRlZFJlYWN0aW9uUmVmcy5kZWxldGUocmVmKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAodW5jb21taXR0ZWRSZWFjdGlvblJlZnMuc2l6ZSA+IDApIHtcbiAgICAgICAgICAgIC8vIFdlJ3ZlIGp1c3QgZmluaXNoZWQgYSByb3VuZCBvZiBjbGVhbnVwcyBidXQgdGhlcmUgYXJlIHN0aWxsXG4gICAgICAgICAgICAvLyBzb21lIGxlYWsgY2FuZGlkYXRlcyBvdXRzdGFuZGluZy5cbiAgICAgICAgICAgIGVuc3VyZUNsZWFudXBUaW1lclJ1bm5pbmcoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBhZGRSZWFjdGlvblRvVHJhY2s6IGZ1bmN0aW9uIChyZWFjdGlvblRyYWNraW5nUmVmLCByZWFjdGlvbiwgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBPbiB0aW1lciBiYXNlZCBpbXBsZW1lbnRhdGlvbiB3ZSBkb24ndCByZWFsbHkgbmVlZCB0aGlzIG9iamVjdCxcbiAgICAgICAgICogYnV0IHdlIGtlZXAgdGhlIHNhbWUgYXBpXG4gICAgICAgICAqL1xuICAgICAgICBvYmplY3RSZXRhaW5lZEJ5UmVhY3QpIHtcbiAgICAgICAgICAgIHJlYWN0aW9uVHJhY2tpbmdSZWYuY3VycmVudCA9IGNyZWF0ZVRyYWNraW5nRGF0YShyZWFjdGlvbik7XG4gICAgICAgICAgICBzY2hlZHVsZUNsZWFudXBPZlJlYWN0aW9uSWZMZWFrZWQocmVhY3Rpb25UcmFja2luZ1JlZik7XG4gICAgICAgICAgICByZXR1cm4gcmVhY3Rpb25UcmFja2luZ1JlZi5jdXJyZW50O1xuICAgICAgICB9LFxuICAgICAgICByZWNvcmRSZWFjdGlvbkFzQ29tbWl0dGVkOiByZWNvcmRSZWFjdGlvbkFzQ29tbWl0dGVkLFxuICAgICAgICBmb3JjZUNsZWFudXBUaW1lclRvUnVuTm93Rm9yVGVzdHM6IGZvcmNlQ2xlYW51cFRpbWVyVG9SdW5Ob3dGb3JUZXN0cyxcbiAgICAgICAgcmVzZXRDbGVhbnVwU2NoZWR1bGVGb3JUZXN0czogcmVzZXRDbGVhbnVwU2NoZWR1bGVGb3JUZXN0c1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVUaW1lckJhc2VkUmVhY3Rpb25DbGVhbnVwVHJhY2tpbmcuanMubWFwIiwiaW1wb3J0IHsgRmluYWxpemF0aW9uUmVnaXN0cnkgYXMgRmluYWxpemF0aW9uUmVnaXN0cnlNYXliZVVuZGVmaW5lZCB9IGZyb20gXCIuL0ZpbmFsaXphdGlvblJlZ2lzdHJ5V3JhcHBlclwiO1xuaW1wb3J0IHsgY3JlYXRlUmVhY3Rpb25DbGVhbnVwVHJhY2tpbmdVc2luZ0ZpbmFsaXphdGlvblJlZ2lzdGVyIH0gZnJvbSBcIi4vY3JlYXRlUmVhY3Rpb25DbGVhbnVwVHJhY2tpbmdVc2luZ0ZpbmFsaXphdGlvblJlZ2lzdGVyXCI7XG5pbXBvcnQgeyBjcmVhdGVUaW1lckJhc2VkUmVhY3Rpb25DbGVhbnVwVHJhY2tpbmcgfSBmcm9tIFwiLi9jcmVhdGVUaW1lckJhc2VkUmVhY3Rpb25DbGVhbnVwVHJhY2tpbmdcIjtcbnZhciBfYSA9IEZpbmFsaXphdGlvblJlZ2lzdHJ5TWF5YmVVbmRlZmluZWRcbiAgICA/IGNyZWF0ZVJlYWN0aW9uQ2xlYW51cFRyYWNraW5nVXNpbmdGaW5hbGl6YXRpb25SZWdpc3RlcihGaW5hbGl6YXRpb25SZWdpc3RyeU1heWJlVW5kZWZpbmVkKVxuICAgIDogY3JlYXRlVGltZXJCYXNlZFJlYWN0aW9uQ2xlYW51cFRyYWNraW5nKCksIGFkZFJlYWN0aW9uVG9UcmFjayA9IF9hLmFkZFJlYWN0aW9uVG9UcmFjaywgcmVjb3JkUmVhY3Rpb25Bc0NvbW1pdHRlZCA9IF9hLnJlY29yZFJlYWN0aW9uQXNDb21taXR0ZWQsIHJlc2V0Q2xlYW51cFNjaGVkdWxlRm9yVGVzdHMgPSBfYS5yZXNldENsZWFudXBTY2hlZHVsZUZvclRlc3RzLCBmb3JjZUNsZWFudXBUaW1lclRvUnVuTm93Rm9yVGVzdHMgPSBfYS5mb3JjZUNsZWFudXBUaW1lclRvUnVuTm93Rm9yVGVzdHM7XG5leHBvcnQgeyBhZGRSZWFjdGlvblRvVHJhY2ssIHJlY29yZFJlYWN0aW9uQXNDb21taXR0ZWQsIHJlc2V0Q2xlYW51cFNjaGVkdWxlRm9yVGVzdHMsIGZvcmNlQ2xlYW51cFRpbWVyVG9SdW5Ob3dGb3JUZXN0cyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVhY3Rpb25DbGVhbnVwVHJhY2tpbmcuanMubWFwIiwidmFyIGdsb2JhbElzVXNpbmdTdGF0aWNSZW5kZXJpbmcgPSBmYWxzZTtcbmV4cG9ydCBmdW5jdGlvbiBlbmFibGVTdGF0aWNSZW5kZXJpbmcoZW5hYmxlKSB7XG4gICAgZ2xvYmFsSXNVc2luZ1N0YXRpY1JlbmRlcmluZyA9IGVuYWJsZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1VzaW5nU3RhdGljUmVuZGVyaW5nKCkge1xuICAgIHJldHVybiBnbG9iYWxJc1VzaW5nU3RhdGljUmVuZGVyaW5nO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RhdGljUmVuZGVyaW5nLmpzLm1hcCIsInZhciBfX3JlYWQgPSAodGhpcyAmJiB0aGlzLl9fcmVhZCkgfHwgZnVuY3Rpb24gKG8sIG4pIHtcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XG4gICAgaWYgKCFtKSByZXR1cm4gbztcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcbiAgICB0cnkge1xuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cbiAgICB9XG4gICAgcmV0dXJuIGFyO1xufTtcbmltcG9ydCB7IFJlYWN0aW9uIH0gZnJvbSBcIm1vYnhcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHByaW50RGVidWdWYWx1ZSB9IGZyb20gXCIuL3V0aWxzL3ByaW50RGVidWdWYWx1ZVwiO1xuaW1wb3J0IHsgYWRkUmVhY3Rpb25Ub1RyYWNrLCByZWNvcmRSZWFjdGlvbkFzQ29tbWl0dGVkIH0gZnJvbSBcIi4vdXRpbHMvcmVhY3Rpb25DbGVhbnVwVHJhY2tpbmdcIjtcbmltcG9ydCB7IGlzVXNpbmdTdGF0aWNSZW5kZXJpbmcgfSBmcm9tIFwiLi9zdGF0aWNSZW5kZXJpbmdcIjtcbmZ1bmN0aW9uIG9ic2VydmVyQ29tcG9uZW50TmFtZUZvcihiYXNlQ29tcG9uZW50TmFtZSkge1xuICAgIHJldHVybiBcIm9ic2VydmVyXCIgKyBiYXNlQ29tcG9uZW50TmFtZTtcbn1cbi8qKlxuICogV2UgdXNlIGNsYXNzIHRvIG1ha2UgaXQgZWFzaWVyIHRvIGRldGVjdCBpbiBoZWFwIHNuYXBzaG90cyBieSBuYW1lXG4gKi9cbnZhciBPYmplY3RUb0JlUmV0YWluZWRCeVJlYWN0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE9iamVjdFRvQmVSZXRhaW5lZEJ5UmVhY3QoKSB7XG4gICAgfVxuICAgIHJldHVybiBPYmplY3RUb0JlUmV0YWluZWRCeVJlYWN0O1xufSgpKTtcbmZ1bmN0aW9uIG9iamVjdFRvQmVSZXRhaW5lZEJ5UmVhY3RGYWN0b3J5KCkge1xuICAgIHJldHVybiBuZXcgT2JqZWN0VG9CZVJldGFpbmVkQnlSZWFjdCgpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHVzZU9ic2VydmVyKGZuLCBiYXNlQ29tcG9uZW50TmFtZSkge1xuICAgIGlmIChiYXNlQ29tcG9uZW50TmFtZSA9PT0gdm9pZCAwKSB7IGJhc2VDb21wb25lbnROYW1lID0gXCJvYnNlcnZlZFwiOyB9XG4gICAgaWYgKGlzVXNpbmdTdGF0aWNSZW5kZXJpbmcoKSkge1xuICAgICAgICByZXR1cm4gZm4oKTtcbiAgICB9XG4gICAgdmFyIF9hID0gX19yZWFkKFJlYWN0LnVzZVN0YXRlKG9iamVjdFRvQmVSZXRhaW5lZEJ5UmVhY3RGYWN0b3J5KSwgMSksIG9iamVjdFJldGFpbmVkQnlSZWFjdCA9IF9hWzBdO1xuICAgIC8vIEZvcmNlIHVwZGF0ZSwgc2VlICMyOTgyXG4gICAgdmFyIF9iID0gX19yZWFkKFJlYWN0LnVzZVN0YXRlKCksIDIpLCBzZXRTdGF0ZSA9IF9iWzFdO1xuICAgIHZhciBmb3JjZVVwZGF0ZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNldFN0YXRlKFtdKTsgfTtcbiAgICAvLyBTdHJpY3RNb2RlL0NvbmN1cnJlbnRNb2RlL1N1c3BlbnNlIG1heSBtZWFuIHRoYXQgb3VyIGNvbXBvbmVudCBpc1xuICAgIC8vIHJlbmRlcmVkIGFuZCBhYmFuZG9uZWQgbXVsdGlwbGUgdGltZXMsIHNvIHdlIG5lZWQgdG8gdHJhY2sgbGVha2VkXG4gICAgLy8gUmVhY3Rpb25zLlxuICAgIHZhciByZWFjdGlvblRyYWNraW5nUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICAgIGlmICghcmVhY3Rpb25UcmFja2luZ1JlZi5jdXJyZW50KSB7XG4gICAgICAgIC8vIEZpcnN0IHJlbmRlciBmb3IgdGhpcyBjb21wb25lbnQgKG9yIGZpcnN0IHRpbWUgc2luY2UgYSBwcmV2aW91c1xuICAgICAgICAvLyByZWFjdGlvbiBmcm9tIGFuIGFiYW5kb25lZCByZW5kZXIgd2FzIGRpc3Bvc2VkKS5cbiAgICAgICAgdmFyIG5ld1JlYWN0aW9uID0gbmV3IFJlYWN0aW9uKG9ic2VydmVyQ29tcG9uZW50TmFtZUZvcihiYXNlQ29tcG9uZW50TmFtZSksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIE9ic2VydmFibGUgaGFzIGNoYW5nZWQsIG1lYW5pbmcgd2Ugd2FudCB0byByZS1yZW5kZXJcbiAgICAgICAgICAgIC8vIEJVVCBpZiB3ZSdyZSBhIGNvbXBvbmVudCB0aGF0IGhhc24ndCB5ZXQgZ290IHRvIHRoZSB1c2VFZmZlY3QoKVxuICAgICAgICAgICAgLy8gc3RhZ2UsIHdlIG1pZ2h0IGJlIGEgY29tcG9uZW50IHRoYXQgX3N0YXJ0ZWRfIHRvIHJlbmRlciwgYnV0XG4gICAgICAgICAgICAvLyBnb3QgZHJvcHBlZCwgYW5kIHdlIGRvbid0IHdhbnQgdG8gbWFrZSBzdGF0ZSBjaGFuZ2VzIHRoZW4uXG4gICAgICAgICAgICAvLyAoSXQgdHJpZ2dlcnMgd2FybmluZ3MgaW4gU3RyaWN0TW9kZSwgZm9yIGEgc3RhcnQuKVxuICAgICAgICAgICAgaWYgKHRyYWNraW5nRGF0YV8xLm1vdW50ZWQpIHtcbiAgICAgICAgICAgICAgICAvLyBXZSBoYXZlIHJlYWNoZWQgdXNlRWZmZWN0KCksIHNvIHdlJ3JlIG1vdW50ZWQsIGFuZCBjYW4gdHJpZ2dlciBhbiB1cGRhdGVcbiAgICAgICAgICAgICAgICBmb3JjZVVwZGF0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gV2UgaGF2ZW4ndCB5ZXQgcmVhY2hlZCB1c2VFZmZlY3QoKSwgc28gd2UnbGwgbmVlZCB0byB0cmlnZ2VyIGEgcmUtcmVuZGVyXG4gICAgICAgICAgICAgICAgLy8gd2hlbiAoYW5kIGlmKSB1c2VFZmZlY3QoKSBhcnJpdmVzLlxuICAgICAgICAgICAgICAgIHRyYWNraW5nRGF0YV8xLmNoYW5nZWRCZWZvcmVNb3VudCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgdHJhY2tpbmdEYXRhXzEgPSBhZGRSZWFjdGlvblRvVHJhY2socmVhY3Rpb25UcmFja2luZ1JlZiwgbmV3UmVhY3Rpb24sIG9iamVjdFJldGFpbmVkQnlSZWFjdCk7XG4gICAgfVxuICAgIHZhciByZWFjdGlvbiA9IHJlYWN0aW9uVHJhY2tpbmdSZWYuY3VycmVudC5yZWFjdGlvbjtcbiAgICBSZWFjdC51c2VEZWJ1Z1ZhbHVlKHJlYWN0aW9uLCBwcmludERlYnVnVmFsdWUpO1xuICAgIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIENhbGxlZCBvbiBmaXJzdCBtb3VudCBvbmx5XG4gICAgICAgIHJlY29yZFJlYWN0aW9uQXNDb21taXR0ZWQocmVhY3Rpb25UcmFja2luZ1JlZik7XG4gICAgICAgIGlmIChyZWFjdGlvblRyYWNraW5nUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgICAgIC8vIEdyZWF0LiBXZSd2ZSBhbHJlYWR5IGdvdCBvdXIgcmVhY3Rpb24gZnJvbSBvdXIgcmVuZGVyO1xuICAgICAgICAgICAgLy8gYWxsIHdlIG5lZWQgdG8gZG8gaXMgdG8gcmVjb3JkIHRoYXQgaXQncyBub3cgbW91bnRlZCxcbiAgICAgICAgICAgIC8vIHRvIGFsbG93IGZ1dHVyZSBvYnNlcnZhYmxlIGNoYW5nZXMgdG8gdHJpZ2dlciByZS1yZW5kZXJzXG4gICAgICAgICAgICByZWFjdGlvblRyYWNraW5nUmVmLmN1cnJlbnQubW91bnRlZCA9IHRydWU7XG4gICAgICAgICAgICAvLyBHb3QgYSBjaGFuZ2UgYmVmb3JlIGZpcnN0IG1vdW50LCBmb3JjZSBhbiB1cGRhdGVcbiAgICAgICAgICAgIGlmIChyZWFjdGlvblRyYWNraW5nUmVmLmN1cnJlbnQuY2hhbmdlZEJlZm9yZU1vdW50KSB7XG4gICAgICAgICAgICAgICAgcmVhY3Rpb25UcmFja2luZ1JlZi5jdXJyZW50LmNoYW5nZWRCZWZvcmVNb3VudCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGZvcmNlVXBkYXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBUaGUgcmVhY3Rpb24gd2Ugc2V0IHVwIGluIG91ciByZW5kZXIgaGFzIGJlZW4gZGlzcG9zZWQuXG4gICAgICAgICAgICAvLyBUaGlzIGNhbiBiZSBkdWUgdG8gYmFkIHRpbWluZ3Mgb2YgcmVuZGVyaW5ncywgZS5nLiBvdXJcbiAgICAgICAgICAgIC8vIGNvbXBvbmVudCB3YXMgcGF1c2VkIGZvciBhIF92ZXJ5XyBsb25nIHRpbWUsIGFuZCBvdXJcbiAgICAgICAgICAgIC8vIHJlYWN0aW9uIGdvdCBjbGVhbmVkIHVwXG4gICAgICAgICAgICAvLyBSZS1jcmVhdGUgdGhlIHJlYWN0aW9uXG4gICAgICAgICAgICByZWFjdGlvblRyYWNraW5nUmVmLmN1cnJlbnQgPSB7XG4gICAgICAgICAgICAgICAgcmVhY3Rpb246IG5ldyBSZWFjdGlvbihvYnNlcnZlckNvbXBvbmVudE5hbWVGb3IoYmFzZUNvbXBvbmVudE5hbWUpLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdlJ3ZlIGRlZmluaXRlbHkgYWxyZWFkeSBiZWVuIG1vdW50ZWQgYXQgdGhpcyBwb2ludFxuICAgICAgICAgICAgICAgICAgICBmb3JjZVVwZGF0ZSgpO1xuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIG1vdW50ZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgY2hhbmdlZEJlZm9yZU1vdW50OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBjbGVhbkF0OiBJbmZpbml0eVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGZvcmNlVXBkYXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJlYWN0aW9uVHJhY2tpbmdSZWYuY3VycmVudC5yZWFjdGlvbi5kaXNwb3NlKCk7XG4gICAgICAgICAgICByZWFjdGlvblRyYWNraW5nUmVmLmN1cnJlbnQgPSBudWxsO1xuICAgICAgICB9O1xuICAgIH0sIFtdKTtcbiAgICAvLyByZW5kZXIgdGhlIG9yaWdpbmFsIGNvbXBvbmVudCwgYnV0IGhhdmUgdGhlXG4gICAgLy8gcmVhY3Rpb24gdHJhY2sgdGhlIG9ic2VydmFibGVzLCBzbyB0aGF0IHJlbmRlcmluZ1xuICAgIC8vIGNhbiBiZSBpbnZhbGlkYXRlZCAoc2VlIGFib3ZlKSBvbmNlIGEgZGVwZW5kZW5jeSBjaGFuZ2VzXG4gICAgdmFyIHJlbmRlcmluZztcbiAgICB2YXIgZXhjZXB0aW9uO1xuICAgIHJlYWN0aW9uLnRyYWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlbmRlcmluZyA9IGZuKCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGV4Y2VwdGlvbiA9IGU7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoZXhjZXB0aW9uKSB7XG4gICAgICAgIHRocm93IGV4Y2VwdGlvbjsgLy8gcmUtdGhyb3cgYW55IGV4Y2VwdGlvbnMgY2F1Z2h0IGR1cmluZyByZW5kZXJpbmdcbiAgICB9XG4gICAgcmV0dXJuIHJlbmRlcmluZztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZU9ic2VydmVyLmpzLm1hcCIsInZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG5pbXBvcnQgeyBmb3J3YXJkUmVmLCBtZW1vIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBpc1VzaW5nU3RhdGljUmVuZGVyaW5nIH0gZnJvbSBcIi4vc3RhdGljUmVuZGVyaW5nXCI7XG5pbXBvcnQgeyB1c2VPYnNlcnZlciB9IGZyb20gXCIuL3VzZU9ic2VydmVyXCI7XG4vLyBuLmIuIGJhc2UgY2FzZSBpcyBub3QgdXNlZCBmb3IgYWN0dWFsIHR5cGluZ3Mgb3IgZXhwb3J0ZWQgaW4gdGhlIHR5cGluZyBmaWxlc1xuZXhwb3J0IGZ1bmN0aW9uIG9ic2VydmVyKGJhc2VDb21wb25lbnQsIG9wdGlvbnMpIHtcbiAgICAvLyBUaGUgd29ya2luZyBvZiBvYnNlcnZlciBpcyBleHBsYWluZWQgc3RlcCBieSBzdGVwIGluIHRoaXMgdGFsazogaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1jUEY0aUJlZG9GMCZmZWF0dXJlPXlvdXR1LmJlJnQ9MTMwN1xuICAgIGlmIChpc1VzaW5nU3RhdGljUmVuZGVyaW5nKCkpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VDb21wb25lbnQ7XG4gICAgfVxuICAgIHZhciByZWFsT3B0aW9ucyA9IF9fYXNzaWduKHsgZm9yd2FyZFJlZjogZmFsc2UgfSwgb3B0aW9ucyk7XG4gICAgdmFyIGJhc2VDb21wb25lbnROYW1lID0gYmFzZUNvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBiYXNlQ29tcG9uZW50Lm5hbWU7XG4gICAgdmFyIHdyYXBwZWRDb21wb25lbnQgPSBmdW5jdGlvbiAocHJvcHMsIHJlZikge1xuICAgICAgICByZXR1cm4gdXNlT2JzZXJ2ZXIoZnVuY3Rpb24gKCkgeyByZXR1cm4gYmFzZUNvbXBvbmVudChwcm9wcywgcmVmKTsgfSwgYmFzZUNvbXBvbmVudE5hbWUpO1xuICAgIH07XG4gICAgd3JhcHBlZENvbXBvbmVudC5kaXNwbGF5TmFtZSA9IGJhc2VDb21wb25lbnROYW1lO1xuICAgIC8vIG1lbW87IHdlIGFyZSBub3QgaW50ZXJlc3RlZCBpbiBkZWVwIHVwZGF0ZXNcbiAgICAvLyBpbiBwcm9wczsgd2UgYXNzdW1lIHRoYXQgaWYgZGVlcCBvYmplY3RzIGFyZSBjaGFuZ2VkLFxuICAgIC8vIHRoaXMgaXMgaW4gb2JzZXJ2YWJsZXMsIHdoaWNoIHdvdWxkIGhhdmUgYmVlbiB0cmFja2VkIGFueXdheVxuICAgIHZhciBtZW1vQ29tcG9uZW50O1xuICAgIGlmIChyZWFsT3B0aW9ucy5mb3J3YXJkUmVmKSB7XG4gICAgICAgIC8vIHdlIGhhdmUgdG8gdXNlIGZvcndhcmRSZWYgaGVyZSBiZWNhdXNlOlxuICAgICAgICAvLyAxLiBpdCBjYW5ub3QgZ28gYmVmb3JlIG1lbW8sIG9ubHkgYWZ0ZXIgaXRcbiAgICAgICAgLy8gMi4gZm9yd2FyZFJlZiBjb252ZXJ0cyB0aGUgZnVuY3Rpb24gaW50byBhbiBhY3R1YWwgY29tcG9uZW50LCBzbyB3ZSBjYW4ndCBsZXQgdGhlIGJhc2VDb21wb25lbnQgZG8gaXRcbiAgICAgICAgLy8gICAgc2luY2UgaXQgd291bGRuJ3QgYmUgYSBjYWxsYWJsZSBmdW5jdGlvbiBhbnltb3JlXG4gICAgICAgIG1lbW9Db21wb25lbnQgPSBtZW1vKGZvcndhcmRSZWYod3JhcHBlZENvbXBvbmVudCkpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbWVtb0NvbXBvbmVudCA9IG1lbW8od3JhcHBlZENvbXBvbmVudCk7XG4gICAgfVxuICAgIGNvcHlTdGF0aWNQcm9wZXJ0aWVzKGJhc2VDb21wb25lbnQsIG1lbW9Db21wb25lbnQpO1xuICAgIG1lbW9Db21wb25lbnQuZGlzcGxheU5hbWUgPSBiYXNlQ29tcG9uZW50TmFtZTtcbiAgICByZXR1cm4gbWVtb0NvbXBvbmVudDtcbn1cbi8vIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9tcmlkZ3dheS9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9ibG9iL21hc3Rlci9zcmMvaW5kZXguanNcbnZhciBob2lzdEJsYWNrTGlzdCA9IHtcbiAgICAkJHR5cGVvZjogdHJ1ZSxcbiAgICByZW5kZXI6IHRydWUsXG4gICAgY29tcGFyZTogdHJ1ZSxcbiAgICB0eXBlOiB0cnVlXG59O1xuZnVuY3Rpb24gY29weVN0YXRpY1Byb3BlcnRpZXMoYmFzZSwgdGFyZ2V0KSB7XG4gICAgT2JqZWN0LmtleXMoYmFzZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICghaG9pc3RCbGFja0xpc3Rba2V5XSkge1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGJhc2UsIGtleSkpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vYnNlcnZlci5qcy5tYXAiLCJpbXBvcnQgeyB1c2VPYnNlcnZlciB9IGZyb20gXCIuL3VzZU9ic2VydmVyXCI7XG5mdW5jdGlvbiBPYnNlcnZlckNvbXBvbmVudChfYSkge1xuICAgIHZhciBjaGlsZHJlbiA9IF9hLmNoaWxkcmVuLCByZW5kZXIgPSBfYS5yZW5kZXI7XG4gICAgdmFyIGNvbXBvbmVudCA9IGNoaWxkcmVuIHx8IHJlbmRlcjtcbiAgICBpZiAodHlwZW9mIGNvbXBvbmVudCAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gdXNlT2JzZXJ2ZXIoY29tcG9uZW50KTtcbn1cbmlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICBPYnNlcnZlckNvbXBvbmVudC5wcm9wVHlwZXMgPSB7XG4gICAgICAgIGNoaWxkcmVuOiBPYnNlcnZlclByb3BzQ2hlY2ssXG4gICAgICAgIHJlbmRlcjogT2JzZXJ2ZXJQcm9wc0NoZWNrXG4gICAgfTtcbn1cbk9ic2VydmVyQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gXCJPYnNlcnZlclwiO1xuZXhwb3J0IHsgT2JzZXJ2ZXJDb21wb25lbnQgYXMgT2JzZXJ2ZXIgfTtcbmZ1bmN0aW9uIE9ic2VydmVyUHJvcHNDaGVjayhwcm9wcywga2V5LCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgdmFyIGV4dHJhS2V5ID0ga2V5ID09PSBcImNoaWxkcmVuXCIgPyBcInJlbmRlclwiIDogXCJjaGlsZHJlblwiO1xuICAgIHZhciBoYXNQcm9wID0gdHlwZW9mIHByb3BzW2tleV0gPT09IFwiZnVuY3Rpb25cIjtcbiAgICB2YXIgaGFzRXh0cmFQcm9wID0gdHlwZW9mIHByb3BzW2V4dHJhS2V5XSA9PT0gXCJmdW5jdGlvblwiO1xuICAgIGlmIChoYXNQcm9wICYmIGhhc0V4dHJhUHJvcCkge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKFwiTW9iWCBPYnNlcnZlcjogRG8gbm90IHVzZSBjaGlsZHJlbiBhbmQgcmVuZGVyIGluIHRoZSBzYW1lIHRpbWUgaW5gXCIgKyBjb21wb25lbnROYW1lKTtcbiAgICB9XG4gICAgaWYgKGhhc1Byb3AgfHwgaGFzRXh0cmFQcm9wKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IEVycm9yKFwiSW52YWxpZCBwcm9wIGBcIiArXG4gICAgICAgIHByb3BGdWxsTmFtZSArXG4gICAgICAgIFwiYCBvZiB0eXBlIGBcIiArXG4gICAgICAgIHR5cGVvZiBwcm9wc1trZXldICtcbiAgICAgICAgXCJgIHN1cHBsaWVkIHRvXCIgK1xuICAgICAgICBcIiBgXCIgK1xuICAgICAgICBjb21wb25lbnROYW1lICtcbiAgICAgICAgXCJgLCBleHBlY3RlZCBgZnVuY3Rpb25gLlwiKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU9ic2VydmVyQ29tcG9uZW50LmpzLm1hcCIsImltcG9ydCB7IG9ic2VydmFibGUgfSBmcm9tIFwibW9ieFwiO1xuaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmV4cG9ydCBmdW5jdGlvbiB1c2VMb2NhbE9ic2VydmFibGUoaW5pdGlhbGl6ZXIsIGFubm90YXRpb25zKSB7XG4gICAgcmV0dXJuIHVzZVN0YXRlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9ic2VydmFibGUoaW5pdGlhbGl6ZXIoKSwgYW5ub3RhdGlvbnMsIHsgYXV0b0JpbmQ6IHRydWUgfSk7IH0pWzBdO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlTG9jYWxPYnNlcnZhYmxlLmpzLm1hcCIsInZhciBfX3JlYWQgPSAodGhpcyAmJiB0aGlzLl9fcmVhZCkgfHwgZnVuY3Rpb24gKG8sIG4pIHtcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XG4gICAgaWYgKCFtKSByZXR1cm4gbztcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcbiAgICB0cnkge1xuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cbiAgICB9XG4gICAgcmV0dXJuIGFyO1xufTtcbmltcG9ydCB7IHVzZURlcHJlY2F0ZWQgfSBmcm9tIFwiLi91dGlscy91dGlsc1wiO1xuaW1wb3J0IHsgb2JzZXJ2YWJsZSwgcnVuSW5BY3Rpb24gfSBmcm9tIFwibW9ieFwiO1xuaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmV4cG9ydCBmdW5jdGlvbiB1c2VBc09ic2VydmFibGVTb3VyY2UoY3VycmVudCkge1xuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpXG4gICAgICAgIHVzZURlcHJlY2F0ZWQoXCJbbW9ieC1yZWFjdC1saXRlXSAndXNlQXNPYnNlcnZhYmxlU291cmNlJyBpcyBkZXByZWNhdGVkLCBwbGVhc2Ugc3RvcmUgdGhlIHZhbHVlcyBkaXJlY3RseSBpbiBhbiBvYnNlcnZhYmxlLCBmb3IgZXhhbXBsZSBieSB1c2luZyAndXNlTG9jYWxPYnNlcnZhYmxlJywgYW5kIHN5bmMgZnV0dXJlIHVwZGF0ZXMgdXNpbmcgJ3VzZUVmZmVjdCcgd2hlbiBuZWVkZWQuIFNlZSB0aGUgUkVBRE1FIGZvciBleGFtcGxlcy5cIik7XG4gICAgdmFyIF9hID0gX19yZWFkKHVzZVN0YXRlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9ic2VydmFibGUoY3VycmVudCwge30sIHsgZGVlcDogZmFsc2UgfSk7IH0pLCAxKSwgcmVzID0gX2FbMF07XG4gICAgcnVuSW5BY3Rpb24oZnVuY3Rpb24gKCkge1xuICAgICAgICBPYmplY3QuYXNzaWduKHJlcywgY3VycmVudCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlcztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZUFzT2JzZXJ2YWJsZVNvdXJjZS5qcy5tYXAiLCJpbXBvcnQgeyBvYnNlcnZhYmxlIH0gZnJvbSBcIm1vYnhcIjtcbmltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VEZXByZWNhdGVkIH0gZnJvbSBcIi4vdXRpbHMvdXRpbHNcIjtcbmltcG9ydCB7IHVzZUFzT2JzZXJ2YWJsZVNvdXJjZSB9IGZyb20gXCIuL3VzZUFzT2JzZXJ2YWJsZVNvdXJjZVwiO1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUxvY2FsU3RvcmUoaW5pdGlhbGl6ZXIsIGN1cnJlbnQpIHtcbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKVxuICAgICAgICB1c2VEZXByZWNhdGVkKFwiW21vYngtcmVhY3QtbGl0ZV0gJ3VzZUxvY2FsU3RvcmUnIGlzIGRlcHJlY2F0ZWQsIHVzZSAndXNlTG9jYWxPYnNlcnZhYmxlJyBpbnN0ZWFkLlwiKTtcbiAgICB2YXIgc291cmNlID0gY3VycmVudCAmJiB1c2VBc09ic2VydmFibGVTb3VyY2UoY3VycmVudCk7XG4gICAgcmV0dXJuIHVzZVN0YXRlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9ic2VydmFibGUoaW5pdGlhbGl6ZXIoc291cmNlKSwgdW5kZWZpbmVkLCB7IGF1dG9CaW5kOiB0cnVlIH0pOyB9KVswXTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZUxvY2FsU3RvcmUuanMubWFwIiwiaW1wb3J0IFwiLi91dGlscy9hc3NlcnRFbnZpcm9ubWVudFwiO1xuaW1wb3J0IHsgdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMgYXMgYmF0Y2ggfSBmcm9tIFwiLi91dGlscy9yZWFjdEJhdGNoZWRVcGRhdGVzXCI7XG5pbXBvcnQgeyBvYnNlcnZlckJhdGNoaW5nIH0gZnJvbSBcIi4vdXRpbHMvb2JzZXJ2ZXJCYXRjaGluZ1wiO1xuaW1wb3J0IHsgdXNlRGVwcmVjYXRlZCB9IGZyb20gXCIuL3V0aWxzL3V0aWxzXCI7XG5pbXBvcnQgeyB1c2VPYnNlcnZlciBhcyB1c2VPYnNlcnZlck9yaWdpbmFsIH0gZnJvbSBcIi4vdXNlT2JzZXJ2ZXJcIjtcbmltcG9ydCB7IGVuYWJsZVN0YXRpY1JlbmRlcmluZyB9IGZyb20gXCIuL3N0YXRpY1JlbmRlcmluZ1wiO1xub2JzZXJ2ZXJCYXRjaGluZyhiYXRjaCk7XG5leHBvcnQgeyBpc1VzaW5nU3RhdGljUmVuZGVyaW5nLCBlbmFibGVTdGF0aWNSZW5kZXJpbmcgfSBmcm9tIFwiLi9zdGF0aWNSZW5kZXJpbmdcIjtcbmV4cG9ydCB7IG9ic2VydmVyIH0gZnJvbSBcIi4vb2JzZXJ2ZXJcIjtcbmV4cG9ydCB7IE9ic2VydmVyIH0gZnJvbSBcIi4vT2JzZXJ2ZXJDb21wb25lbnRcIjtcbmV4cG9ydCB7IHVzZUxvY2FsT2JzZXJ2YWJsZSB9IGZyb20gXCIuL3VzZUxvY2FsT2JzZXJ2YWJsZVwiO1xuZXhwb3J0IHsgdXNlTG9jYWxTdG9yZSB9IGZyb20gXCIuL3VzZUxvY2FsU3RvcmVcIjtcbmV4cG9ydCB7IHVzZUFzT2JzZXJ2YWJsZVNvdXJjZSB9IGZyb20gXCIuL3VzZUFzT2JzZXJ2YWJsZVNvdXJjZVwiO1xuZXhwb3J0IHsgcmVzZXRDbGVhbnVwU2NoZWR1bGVGb3JUZXN0cyBhcyBjbGVhclRpbWVycyB9IGZyb20gXCIuL3V0aWxzL3JlYWN0aW9uQ2xlYW51cFRyYWNraW5nXCI7XG5leHBvcnQgZnVuY3Rpb24gdXNlT2JzZXJ2ZXIoZm4sIGJhc2VDb21wb25lbnROYW1lKSB7XG4gICAgaWYgKGJhc2VDb21wb25lbnROYW1lID09PSB2b2lkIDApIHsgYmFzZUNvbXBvbmVudE5hbWUgPSBcIm9ic2VydmVkXCI7IH1cbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICAgIHVzZURlcHJlY2F0ZWQoXCJbbW9ieC1yZWFjdC1saXRlXSAndXNlT2JzZXJ2ZXIoZm4pJyBpcyBkZXByZWNhdGVkLiBVc2UgYDxPYnNlcnZlcj57Zm59PC9PYnNlcnZlcj5gIGluc3RlYWQsIG9yIHdyYXAgdGhlIGVudGlyZSBjb21wb25lbnQgaW4gYG9ic2VydmVyYC5cIik7XG4gICAgfVxuICAgIHJldHVybiB1c2VPYnNlcnZlck9yaWdpbmFsKGZuLCBiYXNlQ29tcG9uZW50TmFtZSk7XG59XG5leHBvcnQgeyBpc09ic2VydmVyQmF0Y2hlZCwgb2JzZXJ2ZXJCYXRjaGluZyB9IGZyb20gXCIuL3V0aWxzL29ic2VydmVyQmF0Y2hpbmdcIjtcbmV4cG9ydCBmdW5jdGlvbiB1c2VTdGF0aWNSZW5kZXJpbmcoZW5hYmxlKSB7XG4gICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJbbW9ieC1yZWFjdC1saXRlXSAndXNlU3RhdGljUmVuZGVyaW5nJyBpcyBkZXByZWNhdGVkLCB1c2UgJ2VuYWJsZVN0YXRpY1JlbmRlcmluZycgaW5zdGVhZFwiKTtcbiAgICB9XG4gICAgZW5hYmxlU3RhdGljUmVuZGVyaW5nKGVuYWJsZSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgICBvLl9fcHJvdG9fXyA9IHA7XG4gICAgcmV0dXJuIG87XG4gIH07XG5cbiAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTtcbn0iLCJpbXBvcnQgc2V0UHJvdG90eXBlT2YgZnJvbSBcIi4vc2V0UHJvdG90eXBlT2YuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59IiwiZnVuY3Rpb24gaXNBYnNvbHV0ZShwYXRobmFtZSkge1xuICByZXR1cm4gcGF0aG5hbWUuY2hhckF0KDApID09PSAnLyc7XG59XG5cbi8vIEFib3V0IDEuNXggZmFzdGVyIHRoYW4gdGhlIHR3by1hcmcgdmVyc2lvbiBvZiBBcnJheSNzcGxpY2UoKVxuZnVuY3Rpb24gc3BsaWNlT25lKGxpc3QsIGluZGV4KSB7XG4gIGZvciAodmFyIGkgPSBpbmRleCwgayA9IGkgKyAxLCBuID0gbGlzdC5sZW5ndGg7IGsgPCBuOyBpICs9IDEsIGsgKz0gMSkge1xuICAgIGxpc3RbaV0gPSBsaXN0W2tdO1xuICB9XG5cbiAgbGlzdC5wb3AoKTtcbn1cblxuLy8gVGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBiYXNlZCBoZWF2aWx5IG9uIG5vZGUncyB1cmwucGFyc2VcbmZ1bmN0aW9uIHJlc29sdmVQYXRobmFtZSh0bywgZnJvbSkge1xuICBpZiAoZnJvbSA9PT0gdW5kZWZpbmVkKSBmcm9tID0gJyc7XG5cbiAgdmFyIHRvUGFydHMgPSAodG8gJiYgdG8uc3BsaXQoJy8nKSkgfHwgW107XG4gIHZhciBmcm9tUGFydHMgPSAoZnJvbSAmJiBmcm9tLnNwbGl0KCcvJykpIHx8IFtdO1xuXG4gIHZhciBpc1RvQWJzID0gdG8gJiYgaXNBYnNvbHV0ZSh0byk7XG4gIHZhciBpc0Zyb21BYnMgPSBmcm9tICYmIGlzQWJzb2x1dGUoZnJvbSk7XG4gIHZhciBtdXN0RW5kQWJzID0gaXNUb0FicyB8fCBpc0Zyb21BYnM7XG5cbiAgaWYgKHRvICYmIGlzQWJzb2x1dGUodG8pKSB7XG4gICAgLy8gdG8gaXMgYWJzb2x1dGVcbiAgICBmcm9tUGFydHMgPSB0b1BhcnRzO1xuICB9IGVsc2UgaWYgKHRvUGFydHMubGVuZ3RoKSB7XG4gICAgLy8gdG8gaXMgcmVsYXRpdmUsIGRyb3AgdGhlIGZpbGVuYW1lXG4gICAgZnJvbVBhcnRzLnBvcCgpO1xuICAgIGZyb21QYXJ0cyA9IGZyb21QYXJ0cy5jb25jYXQodG9QYXJ0cyk7XG4gIH1cblxuICBpZiAoIWZyb21QYXJ0cy5sZW5ndGgpIHJldHVybiAnLyc7XG5cbiAgdmFyIGhhc1RyYWlsaW5nU2xhc2g7XG4gIGlmIChmcm9tUGFydHMubGVuZ3RoKSB7XG4gICAgdmFyIGxhc3QgPSBmcm9tUGFydHNbZnJvbVBhcnRzLmxlbmd0aCAtIDFdO1xuICAgIGhhc1RyYWlsaW5nU2xhc2ggPSBsYXN0ID09PSAnLicgfHwgbGFzdCA9PT0gJy4uJyB8fCBsYXN0ID09PSAnJztcbiAgfSBlbHNlIHtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gZmFsc2U7XG4gIH1cblxuICB2YXIgdXAgPSAwO1xuICBmb3IgKHZhciBpID0gZnJvbVBhcnRzLmxlbmd0aDsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgcGFydCA9IGZyb21QYXJ0c1tpXTtcblxuICAgIGlmIChwYXJ0ID09PSAnLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgIH0gZWxzZSBpZiAocGFydCA9PT0gJy4uJykge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgICB1cCsrO1xuICAgIH0gZWxzZSBpZiAodXApIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXAtLTtcbiAgICB9XG4gIH1cblxuICBpZiAoIW11c3RFbmRBYnMpIGZvciAoOyB1cC0tOyB1cCkgZnJvbVBhcnRzLnVuc2hpZnQoJy4uJyk7XG5cbiAgaWYgKFxuICAgIG11c3RFbmRBYnMgJiZcbiAgICBmcm9tUGFydHNbMF0gIT09ICcnICYmXG4gICAgKCFmcm9tUGFydHNbMF0gfHwgIWlzQWJzb2x1dGUoZnJvbVBhcnRzWzBdKSlcbiAgKVxuICAgIGZyb21QYXJ0cy51bnNoaWZ0KCcnKTtcblxuICB2YXIgcmVzdWx0ID0gZnJvbVBhcnRzLmpvaW4oJy8nKTtcblxuICBpZiAoaGFzVHJhaWxpbmdTbGFzaCAmJiByZXN1bHQuc3Vic3RyKC0xKSAhPT0gJy8nKSByZXN1bHQgKz0gJy8nO1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHJlc29sdmVQYXRobmFtZTtcbiIsImZ1bmN0aW9uIHZhbHVlT2Yob2JqKSB7XG4gIHJldHVybiBvYmoudmFsdWVPZiA/IG9iai52YWx1ZU9mKCkgOiBPYmplY3QucHJvdG90eXBlLnZhbHVlT2YuY2FsbChvYmopO1xufVxuXG5mdW5jdGlvbiB2YWx1ZUVxdWFsKGEsIGIpIHtcbiAgLy8gVGVzdCBmb3Igc3RyaWN0IGVxdWFsaXR5IGZpcnN0LlxuICBpZiAoYSA9PT0gYikgcmV0dXJuIHRydWU7XG5cbiAgLy8gT3RoZXJ3aXNlLCBpZiBlaXRoZXIgb2YgdGhlbSA9PSBudWxsIHRoZXkgYXJlIG5vdCBlcXVhbC5cbiAgaWYgKGEgPT0gbnVsbCB8fCBiID09IG51bGwpIHJldHVybiBmYWxzZTtcblxuICBpZiAoQXJyYXkuaXNBcnJheShhKSkge1xuICAgIHJldHVybiAoXG4gICAgICBBcnJheS5pc0FycmF5KGIpICYmXG4gICAgICBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiZcbiAgICAgIGEuZXZlcnkoZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlRXF1YWwoaXRlbSwgYltpbmRleF0pO1xuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBhID09PSAnb2JqZWN0JyB8fCB0eXBlb2YgYiA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgYVZhbHVlID0gdmFsdWVPZihhKTtcbiAgICB2YXIgYlZhbHVlID0gdmFsdWVPZihiKTtcblxuICAgIGlmIChhVmFsdWUgIT09IGEgfHwgYlZhbHVlICE9PSBiKSByZXR1cm4gdmFsdWVFcXVhbChhVmFsdWUsIGJWYWx1ZSk7XG5cbiAgICByZXR1cm4gT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgYSwgYikpLmV2ZXJ5KGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIHZhbHVlRXF1YWwoYVtrZXldLCBiW2tleV0pO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZGVmYXVsdCB2YWx1ZUVxdWFsO1xuIiwidmFyIGlzUHJvZHVjdGlvbiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbic7XG52YXIgcHJlZml4ID0gJ0ludmFyaWFudCBmYWlsZWQnO1xuZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICAgIGlmIChjb25kaXRpb24pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoaXNQcm9kdWN0aW9uKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihwcmVmaXgpO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IocHJlZml4ICsgXCI6IFwiICsgKG1lc3NhZ2UgfHwgJycpKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaW52YXJpYW50O1xuIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IHJlc29sdmVQYXRobmFtZSBmcm9tICdyZXNvbHZlLXBhdGhuYW1lJztcbmltcG9ydCB2YWx1ZUVxdWFsIGZyb20gJ3ZhbHVlLWVxdWFsJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ3RpbnktaW52YXJpYW50JztcblxuZnVuY3Rpb24gYWRkTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoIDogJy8nICsgcGF0aDtcbn1cbmZ1bmN0aW9uIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoLnN1YnN0cigxKSA6IHBhdGg7XG59XG5mdW5jdGlvbiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpIHtcbiAgcmV0dXJuIHBhdGgudG9Mb3dlckNhc2UoKS5pbmRleE9mKHByZWZpeC50b0xvd2VyQ2FzZSgpKSA9PT0gMCAmJiAnLz8jJy5pbmRleE9mKHBhdGguY2hhckF0KHByZWZpeC5sZW5ndGgpKSAhPT0gLTE7XG59XG5mdW5jdGlvbiBzdHJpcEJhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSA/IHBhdGguc3Vic3RyKHByZWZpeC5sZW5ndGgpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIHN0cmlwVHJhaWxpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdChwYXRoLmxlbmd0aCAtIDEpID09PSAnLycgPyBwYXRoLnNsaWNlKDAsIC0xKSA6IHBhdGg7XG59XG5mdW5jdGlvbiBwYXJzZVBhdGgocGF0aCkge1xuICB2YXIgcGF0aG5hbWUgPSBwYXRoIHx8ICcvJztcbiAgdmFyIHNlYXJjaCA9ICcnO1xuICB2YXIgaGFzaCA9ICcnO1xuICB2YXIgaGFzaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignIycpO1xuXG4gIGlmIChoYXNoSW5kZXggIT09IC0xKSB7XG4gICAgaGFzaCA9IHBhdGhuYW1lLnN1YnN0cihoYXNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIGhhc2hJbmRleCk7XG4gIH1cblxuICB2YXIgc2VhcmNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCc/Jyk7XG5cbiAgaWYgKHNlYXJjaEluZGV4ICE9PSAtMSkge1xuICAgIHNlYXJjaCA9IHBhdGhuYW1lLnN1YnN0cihzZWFyY2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgc2VhcmNoSW5kZXgpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwYXRobmFtZTogcGF0aG5hbWUsXG4gICAgc2VhcmNoOiBzZWFyY2ggPT09ICc/JyA/ICcnIDogc2VhcmNoLFxuICAgIGhhc2g6IGhhc2ggPT09ICcjJyA/ICcnIDogaGFzaFxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlUGF0aChsb2NhdGlvbikge1xuICB2YXIgcGF0aG5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgIHNlYXJjaCA9IGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgIGhhc2ggPSBsb2NhdGlvbi5oYXNoO1xuICB2YXIgcGF0aCA9IHBhdGhuYW1lIHx8ICcvJztcbiAgaWYgKHNlYXJjaCAmJiBzZWFyY2ggIT09ICc/JykgcGF0aCArPSBzZWFyY2guY2hhckF0KDApID09PSAnPycgPyBzZWFyY2ggOiBcIj9cIiArIHNlYXJjaDtcbiAgaWYgKGhhc2ggJiYgaGFzaCAhPT0gJyMnKSBwYXRoICs9IGhhc2guY2hhckF0KDApID09PSAnIycgPyBoYXNoIDogXCIjXCIgKyBoYXNoO1xuICByZXR1cm4gcGF0aDtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSwgY3VycmVudExvY2F0aW9uKSB7XG4gIHZhciBsb2NhdGlvbjtcblxuICBpZiAodHlwZW9mIHBhdGggPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gVHdvLWFyZyBmb3JtOiBwdXNoKHBhdGgsIHN0YXRlKVxuICAgIGxvY2F0aW9uID0gcGFyc2VQYXRoKHBhdGgpO1xuICAgIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH0gZWxzZSB7XG4gICAgLy8gT25lLWFyZyBmb3JtOiBwdXNoKGxvY2F0aW9uKVxuICAgIGxvY2F0aW9uID0gX2V4dGVuZHMoe30sIHBhdGgpO1xuICAgIGlmIChsb2NhdGlvbi5wYXRobmFtZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5wYXRobmFtZSA9ICcnO1xuXG4gICAgaWYgKGxvY2F0aW9uLnNlYXJjaCkge1xuICAgICAgaWYgKGxvY2F0aW9uLnNlYXJjaC5jaGFyQXQoMCkgIT09ICc/JykgbG9jYXRpb24uc2VhcmNoID0gJz8nICsgbG9jYXRpb24uc2VhcmNoO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhdGlvbi5zZWFyY2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAobG9jYXRpb24uaGFzaCkge1xuICAgICAgaWYgKGxvY2F0aW9uLmhhc2guY2hhckF0KDApICE9PSAnIycpIGxvY2F0aW9uLmhhc2ggPSAnIycgKyBsb2NhdGlvbi5oYXNoO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhdGlvbi5oYXNoID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKHN0YXRlICE9PSB1bmRlZmluZWQgJiYgbG9jYXRpb24uc3RhdGUgPT09IHVuZGVmaW5lZCkgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgbG9jYXRpb24ucGF0aG5hbWUgPSBkZWNvZGVVUkkobG9jYXRpb24ucGF0aG5hbWUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKGUgaW5zdGFuY2VvZiBVUklFcnJvcikge1xuICAgICAgdGhyb3cgbmV3IFVSSUVycm9yKCdQYXRobmFtZSBcIicgKyBsb2NhdGlvbi5wYXRobmFtZSArICdcIiBjb3VsZCBub3QgYmUgZGVjb2RlZC4gJyArICdUaGlzIGlzIGxpa2VseSBjYXVzZWQgYnkgYW4gaW52YWxpZCBwZXJjZW50LWVuY29kaW5nLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChrZXkpIGxvY2F0aW9uLmtleSA9IGtleTtcblxuICBpZiAoY3VycmVudExvY2F0aW9uKSB7XG4gICAgLy8gUmVzb2x2ZSBpbmNvbXBsZXRlL3JlbGF0aXZlIHBhdGhuYW1lIHJlbGF0aXZlIHRvIGN1cnJlbnQgbG9jYXRpb24uXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWU7XG4gICAgfSBlbHNlIGlmIChsb2NhdGlvbi5wYXRobmFtZS5jaGFyQXQoMCkgIT09ICcvJykge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSByZXNvbHZlUGF0aG5hbWUobG9jYXRpb24ucGF0aG5hbWUsIGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIFdoZW4gdGhlcmUgaXMgbm8gcHJpb3IgbG9jYXRpb24gYW5kIHBhdGhuYW1lIGlzIGVtcHR5LCBzZXQgaXQgdG8gL1xuICAgIGlmICghbG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gJy8nO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBsb2NhdGlvbjtcbn1cbmZ1bmN0aW9uIGxvY2F0aW9uc0FyZUVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEucGF0aG5hbWUgPT09IGIucGF0aG5hbWUgJiYgYS5zZWFyY2ggPT09IGIuc2VhcmNoICYmIGEuaGFzaCA9PT0gYi5oYXNoICYmIGEua2V5ID09PSBiLmtleSAmJiB2YWx1ZUVxdWFsKGEuc3RhdGUsIGIuc3RhdGUpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpIHtcbiAgdmFyIHByb21wdCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gc2V0UHJvbXB0KG5leHRQcm9tcHQpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHByb21wdCA9PSBudWxsLCAnQSBoaXN0b3J5IHN1cHBvcnRzIG9ubHkgb25lIHByb21wdCBhdCBhIHRpbWUnKSA6IHZvaWQgMDtcbiAgICBwcm9tcHQgPSBuZXh0UHJvbXB0O1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAocHJvbXB0ID09PSBuZXh0UHJvbXB0KSBwcm9tcHQgPSBudWxsO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBjb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGNhbGxiYWNrKSB7XG4gICAgLy8gVE9ETzogSWYgYW5vdGhlciB0cmFuc2l0aW9uIHN0YXJ0cyB3aGlsZSB3ZSdyZSBzdGlsbCBjb25maXJtaW5nXG4gICAgLy8gdGhlIHByZXZpb3VzIG9uZSwgd2UgbWF5IGVuZCB1cCBpbiBhIHdlaXJkIHN0YXRlLiBGaWd1cmUgb3V0IHRoZVxuICAgIC8vIGJlc3Qgd2F5IHRvIGhhbmRsZSB0aGlzLlxuICAgIGlmIChwcm9tcHQgIT0gbnVsbCkge1xuICAgICAgdmFyIHJlc3VsdCA9IHR5cGVvZiBwcm9tcHQgPT09ICdmdW5jdGlvbicgPyBwcm9tcHQobG9jYXRpb24sIGFjdGlvbikgOiBwcm9tcHQ7XG5cbiAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodHlwZW9mIGdldFVzZXJDb25maXJtYXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBnZXRVc2VyQ29uZmlybWF0aW9uKHJlc3VsdCwgY2FsbGJhY2spO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdBIGhpc3RvcnkgbmVlZHMgYSBnZXRVc2VyQ29uZmlybWF0aW9uIGZ1bmN0aW9uIGluIG9yZGVyIHRvIHVzZSBhIHByb21wdCBtZXNzYWdlJykgOiB2b2lkIDA7XG4gICAgICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFJldHVybiBmYWxzZSBmcm9tIGEgdHJhbnNpdGlvbiBob29rIHRvIGNhbmNlbCB0aGUgdHJhbnNpdGlvbi5cbiAgICAgICAgY2FsbGJhY2socmVzdWx0ICE9PSBmYWxzZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBsaXN0ZW5lcnMgPSBbXTtcblxuICBmdW5jdGlvbiBhcHBlbmRMaXN0ZW5lcihmbikge1xuICAgIHZhciBpc0FjdGl2ZSA9IHRydWU7XG5cbiAgICBmdW5jdGlvbiBsaXN0ZW5lcigpIHtcbiAgICAgIGlmIChpc0FjdGl2ZSkgZm4uYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaXNBY3RpdmUgPSBmYWxzZTtcbiAgICAgIGxpc3RlbmVycyA9IGxpc3RlbmVycy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0gIT09IGxpc3RlbmVyO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vdGlmeUxpc3RlbmVycygpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gbGlzdGVuZXIuYXBwbHkodm9pZCAwLCBhcmdzKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc2V0UHJvbXB0OiBzZXRQcm9tcHQsXG4gICAgY29uZmlybVRyYW5zaXRpb25UbzogY29uZmlybVRyYW5zaXRpb25UbyxcbiAgICBhcHBlbmRMaXN0ZW5lcjogYXBwZW5kTGlzdGVuZXIsXG4gICAgbm90aWZ5TGlzdGVuZXJzOiBub3RpZnlMaXN0ZW5lcnNcbiAgfTtcbn1cblxudmFyIGNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5mdW5jdGlvbiBnZXRDb25maXJtYXRpb24obWVzc2FnZSwgY2FsbGJhY2spIHtcbiAgY2FsbGJhY2sod2luZG93LmNvbmZpcm0obWVzc2FnZSkpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWFsZXJ0XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaXMgc3VwcG9ydGVkLiBUYWtlbiBmcm9tIE1vZGVybml6ci5cbiAqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9mZWF0dXJlLWRldGVjdHMvaGlzdG9yeS5qc1xuICogY2hhbmdlZCB0byBhdm9pZCBmYWxzZSBuZWdhdGl2ZXMgZm9yIFdpbmRvd3MgUGhvbmVzOiBodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC1yb3V0ZXIvaXNzdWVzLzU4NlxuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRzSGlzdG9yeSgpIHtcbiAgdmFyIHVhID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG4gIGlmICgodWEuaW5kZXhPZignQW5kcm9pZCAyLicpICE9PSAtMSB8fCB1YS5pbmRleE9mKCdBbmRyb2lkIDQuMCcpICE9PSAtMSkgJiYgdWEuaW5kZXhPZignTW9iaWxlIFNhZmFyaScpICE9PSAtMSAmJiB1YS5pbmRleE9mKCdDaHJvbWUnKSA9PT0gLTEgJiYgdWEuaW5kZXhPZignV2luZG93cyBQaG9uZScpID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gd2luZG93Lmhpc3RvcnkgJiYgJ3B1c2hTdGF0ZScgaW4gd2luZG93Lmhpc3Rvcnk7XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBicm93c2VyIGZpcmVzIHBvcHN0YXRlIG9uIGhhc2ggY2hhbmdlLlxuICogSUUxMCBhbmQgSUUxMSBkbyBub3QuXG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSgpIHtcbiAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ1RyaWRlbnQnKSA9PT0gLTE7XG59XG4vKipcbiAqIFJldHVybnMgZmFsc2UgaWYgdXNpbmcgZ28obikgd2l0aCBoYXNoIGhpc3RvcnkgY2F1c2VzIGEgZnVsbCBwYWdlIHJlbG9hZC5cbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCgpIHtcbiAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0ZpcmVmb3gnKSA9PT0gLTE7XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBhIGdpdmVuIHBvcHN0YXRlIGV2ZW50IGlzIGFuIGV4dHJhbmVvdXMgV2ViS2l0IGV2ZW50LlxuICogQWNjb3VudHMgZm9yIHRoZSBmYWN0IHRoYXQgQ2hyb21lIG9uIGlPUyBmaXJlcyByZWFsIHBvcHN0YXRlIGV2ZW50c1xuICogY29udGFpbmluZyB1bmRlZmluZWQgc3RhdGUgd2hlbiBwcmVzc2luZyB0aGUgYmFjayBidXR0b24uXG4gKi9cblxuZnVuY3Rpb24gaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudChldmVudCkge1xuICByZXR1cm4gZXZlbnQuc3RhdGUgPT09IHVuZGVmaW5lZCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0NyaU9TJykgPT09IC0xO1xufVxuXG52YXIgUG9wU3RhdGVFdmVudCA9ICdwb3BzdGF0ZSc7XG52YXIgSGFzaENoYW5nZUV2ZW50ID0gJ2hhc2hjaGFuZ2UnO1xuXG5mdW5jdGlvbiBnZXRIaXN0b3J5U3RhdGUoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5LnN0YXRlIHx8IHt9O1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gSUUgMTEgc29tZXRpbWVzIHRocm93cyB3aGVuIGFjY2Vzc2luZyB3aW5kb3cuaGlzdG9yeS5zdGF0ZVxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vUmVhY3RUcmFpbmluZy9oaXN0b3J5L3B1bGwvMjg5XG4gICAgcmV0dXJuIHt9O1xuICB9XG59XG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHVzZXMgdGhlIEhUTUw1IGhpc3RvcnkgQVBJIGluY2x1ZGluZ1xuICogcHVzaFN0YXRlLCByZXBsYWNlU3RhdGUsIGFuZCB0aGUgcG9wc3RhdGUgZXZlbnQuXG4gKi9cblxuXG5mdW5jdGlvbiBjcmVhdGVCcm93c2VySGlzdG9yeShwcm9wcykge1xuICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgIHByb3BzID0ge307XG4gIH1cblxuICAhY2FuVXNlRE9NID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQnJvd3NlciBoaXN0b3J5IG5lZWRzIGEgRE9NJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuVXNlSGlzdG9yeSA9IHN1cHBvcnRzSGlzdG9yeSgpO1xuICB2YXIgbmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIgPSAhc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSgpO1xuICB2YXIgX3Byb3BzID0gcHJvcHMsXG4gICAgICBfcHJvcHMkZm9yY2VSZWZyZXNoID0gX3Byb3BzLmZvcmNlUmVmcmVzaCxcbiAgICAgIGZvcmNlUmVmcmVzaCA9IF9wcm9wcyRmb3JjZVJlZnJlc2ggPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGZvcmNlUmVmcmVzaCxcbiAgICAgIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IF9wcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdm9pZCAwID8gZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IF9wcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB2b2lkIDAgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcbiAgdmFyIGJhc2VuYW1lID0gcHJvcHMuYmFzZW5hbWUgPyBzdHJpcFRyYWlsaW5nU2xhc2goYWRkTGVhZGluZ1NsYXNoKHByb3BzLmJhc2VuYW1lKSkgOiAnJztcblxuICBmdW5jdGlvbiBnZXRET01Mb2NhdGlvbihoaXN0b3J5U3RhdGUpIHtcbiAgICB2YXIgX3JlZiA9IGhpc3RvcnlTdGF0ZSB8fCB7fSxcbiAgICAgICAga2V5ID0gX3JlZi5rZXksXG4gICAgICAgIHN0YXRlID0gX3JlZi5zdGF0ZTtcblxuICAgIHZhciBfd2luZG93JGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uLFxuICAgICAgICBwYXRobmFtZSA9IF93aW5kb3ckbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICAgIHNlYXJjaCA9IF93aW5kb3ckbG9jYXRpb24uc2VhcmNoLFxuICAgICAgICBoYXNoID0gX3dpbmRvdyRsb2NhdGlvbi5oYXNoO1xuICAgIHZhciBwYXRoID0gcGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIWJhc2VuYW1lIHx8IGhhc0Jhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJykgOiB2b2lkIDA7XG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gc3RyaXBCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSk7XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBrZXkpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwga2V5TGVuZ3RoKTtcbiAgfVxuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gZ2xvYmFsSGlzdG9yeS5sZW5ndGg7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVBvcFN0YXRlKGV2ZW50KSB7XG4gICAgLy8gSWdub3JlIGV4dHJhbmVvdXMgcG9wc3RhdGUgZXZlbnRzIGluIFdlYktpdC5cbiAgICBpZiAoaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudChldmVudCkpIHJldHVybjtcbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZXZlbnQuc3RhdGUpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKSk7XG4gIH1cblxuICB2YXIgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247IC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2Yga2V5cyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBrZXlzIHdlIGRvbid0IGtub3cuXG5cbiAgICB2YXIgdG9JbmRleCA9IGFsbEtleXMuaW5kZXhPZih0b0xvY2F0aW9uLmtleSk7XG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGZyb21Mb2NhdGlvbi5rZXkpO1xuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuICAgIHZhciBkZWx0YSA9IHRvSW5kZXggLSBmcm9tSW5kZXg7XG5cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IHRydWU7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGluaXRpYWxMb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKTtcbiAgdmFyIGFsbEtleXMgPSBbaW5pdGlhbExvY2F0aW9uLmtleV07IC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuIGJhc2VuYW1lICsgY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXksXG4gICAgICAgICAgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5wdXNoU3RhdGUoe1xuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIHN0YXRlOiBzdGF0ZVxuICAgICAgICB9LCBudWxsLCBocmVmKTtcblxuICAgICAgICBpZiAoZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIHZhciBuZXh0S2V5cyA9IGFsbEtleXMuc2xpY2UoMCwgcHJldkluZGV4ICsgMSk7XG4gICAgICAgICAgbmV4dEtleXMucHVzaChsb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIGFsbEtleXMgPSBuZXh0S2V5cztcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdCcm93c2VyIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGUgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5JykgOiB2b2lkIDA7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZSh7XG4gICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgc3RhdGU6IHN0YXRlXG4gICAgICAgIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcbiAgICAgICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsS2V5c1twcmV2SW5kZXhdID0gbG9jYXRpb24ua2V5O1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKSA6IHZvaWQgMDtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoaHJlZik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnbyhuKSB7XG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICBnbygtMSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgZ28oMSk7XG4gIH1cblxuICB2YXIgbGlzdGVuZXJDb3VudCA9IDA7XG5cbiAgZnVuY3Rpb24gY2hlY2tET01MaXN0ZW5lcnMoZGVsdGEpIHtcbiAgICBsaXN0ZW5lckNvdW50ICs9IGRlbHRhO1xuXG4gICAgaWYgKGxpc3RlbmVyQ291bnQgPT09IDEgJiYgZGVsdGEgPT09IDEpIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFBvcFN0YXRlRXZlbnQsIGhhbmRsZVBvcFN0YXRlKTtcbiAgICAgIGlmIChuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lcikgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9IGVsc2UgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFBvcFN0YXRlRXZlbnQsIGhhbmRsZVBvcFN0YXRlKTtcbiAgICAgIGlmIChuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lcikgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaXNCbG9ja2VkID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gYmxvY2socHJvbXB0KSB7XG4gICAgaWYgKHByb21wdCA9PT0gdm9pZCAwKSB7XG4gICAgICBwcm9tcHQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgdW5ibG9jayA9IHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuXG4gICAgaWYgKCFpc0Jsb2NrZWQpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgICAgaXNCbG9ja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgICBpc0Jsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5ibG9jaygpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIHVubGlzdGVuKCk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbnZhciBIYXNoQ2hhbmdlRXZlbnQkMSA9ICdoYXNoY2hhbmdlJztcbnZhciBIYXNoUGF0aENvZGVycyA9IHtcbiAgaGFzaGJhbmc6IHtcbiAgICBlbmNvZGVQYXRoOiBmdW5jdGlvbiBlbmNvZGVQYXRoKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJyEnID8gcGF0aCA6ICchLycgKyBzdHJpcExlYWRpbmdTbGFzaChwYXRoKTtcbiAgICB9LFxuICAgIGRlY29kZVBhdGg6IGZ1bmN0aW9uIGRlY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoLnN1YnN0cigxKSA6IHBhdGg7XG4gICAgfVxuICB9LFxuICBub3NsYXNoOiB7XG4gICAgZW5jb2RlUGF0aDogc3RyaXBMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoXG4gIH0sXG4gIHNsYXNoOiB7XG4gICAgZW5jb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaFxuICB9XG59O1xuXG5mdW5jdGlvbiBzdHJpcEhhc2godXJsKSB7XG4gIHZhciBoYXNoSW5kZXggPSB1cmwuaW5kZXhPZignIycpO1xuICByZXR1cm4gaGFzaEluZGV4ID09PSAtMSA/IHVybCA6IHVybC5zbGljZSgwLCBoYXNoSW5kZXgpO1xufVxuXG5mdW5jdGlvbiBnZXRIYXNoUGF0aCgpIHtcbiAgLy8gV2UgY2FuJ3QgdXNlIHdpbmRvdy5sb2NhdGlvbi5oYXNoIGhlcmUgYmVjYXVzZSBpdCdzIG5vdFxuICAvLyBjb25zaXN0ZW50IGFjcm9zcyBicm93c2VycyAtIEZpcmVmb3ggd2lsbCBwcmUtZGVjb2RlIGl0IVxuICB2YXIgaHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICB2YXIgaGFzaEluZGV4ID0gaHJlZi5pbmRleE9mKCcjJyk7XG4gIHJldHVybiBoYXNoSW5kZXggPT09IC0xID8gJycgOiBocmVmLnN1YnN0cmluZyhoYXNoSW5kZXggKyAxKTtcbn1cblxuZnVuY3Rpb24gcHVzaEhhc2hQYXRoKHBhdGgpIHtcbiAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSBwYXRoO1xufVxuXG5mdW5jdGlvbiByZXBsYWNlSGFzaFBhdGgocGF0aCkge1xuICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShzdHJpcEhhc2god2luZG93LmxvY2F0aW9uLmhyZWYpICsgJyMnICsgcGF0aCk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUhhc2hIaXN0b3J5KHByb3BzKSB7XG4gIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgcHJvcHMgPSB7fTtcbiAgfVxuXG4gICFjYW5Vc2VET00gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdIYXNoIGhpc3RvcnkgbmVlZHMgYSBET00nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Hb1dpdGhvdXRSZWxvYWQgPSBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCgpO1xuICB2YXIgX3Byb3BzID0gcHJvcHMsXG4gICAgICBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPSBfcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHZvaWQgMCA/IGdldENvbmZpcm1hdGlvbiA6IF9wcm9wcyRnZXRVc2VyQ29uZmlybSxcbiAgICAgIF9wcm9wcyRoYXNoVHlwZSA9IF9wcm9wcy5oYXNoVHlwZSxcbiAgICAgIGhhc2hUeXBlID0gX3Byb3BzJGhhc2hUeXBlID09PSB2b2lkIDAgPyAnc2xhc2gnIDogX3Byb3BzJGhhc2hUeXBlO1xuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/IHN0cmlwVHJhaWxpbmdTbGFzaChhZGRMZWFkaW5nU2xhc2gocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuICB2YXIgX0hhc2hQYXRoQ29kZXJzJGhhc2hUID0gSGFzaFBhdGhDb2RlcnNbaGFzaFR5cGVdLFxuICAgICAgZW5jb2RlUGF0aCA9IF9IYXNoUGF0aENvZGVycyRoYXNoVC5lbmNvZGVQYXRoLFxuICAgICAgZGVjb2RlUGF0aCA9IF9IYXNoUGF0aENvZGVycyRoYXNoVC5kZWNvZGVQYXRoO1xuXG4gIGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKCkge1xuICAgIHZhciBwYXRoID0gZGVjb2RlUGF0aChnZXRIYXNoUGF0aCgpKTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCFiYXNlbmFtZSB8fCBoYXNCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpIDogdm9pZCAwO1xuICAgIGlmIChiYXNlbmFtZSkgcGF0aCA9IHN0cmlwQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpO1xuICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbihwYXRoKTtcbiAgfVxuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gZ2xvYmFsSGlzdG9yeS5sZW5ndGg7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfVxuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgdmFyIGlnbm9yZVBhdGggPSBudWxsO1xuXG4gIGZ1bmN0aW9uIGxvY2F0aW9uc0FyZUVxdWFsJCQxKGEsIGIpIHtcbiAgICByZXR1cm4gYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiYgYS5oYXNoID09PSBiLmhhc2g7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuXG4gICAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSB7XG4gICAgICAvLyBFbnN1cmUgd2UgYWx3YXlzIGhhdmUgYSBwcm9wZXJseS1lbmNvZGVkIGhhc2guXG4gICAgICByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICAgICAgdmFyIHByZXZMb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247XG4gICAgICBpZiAoIWZvcmNlTmV4dFBvcCAmJiBsb2NhdGlvbnNBcmVFcXVhbCQkMShwcmV2TG9jYXRpb24sIGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBBIGhhc2hjaGFuZ2UgZG9lc24ndCBhbHdheXMgPT0gbG9jYXRpb24gY2hhbmdlLlxuXG4gICAgICBpZiAoaWdub3JlUGF0aCA9PT0gY3JlYXRlUGF0aChsb2NhdGlvbikpIHJldHVybjsgLy8gSWdub3JlIHRoaXMgY2hhbmdlOyB3ZSBhbHJlYWR5IHNldFN0YXRlIGluIHB1c2gvcmVwbGFjZS5cblxuICAgICAgaWdub3JlUGF0aCA9IG51bGw7XG4gICAgICBoYW5kbGVQb3AobG9jYXRpb24pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXZlcnRQb3AobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uOyAvLyBUT0RPOiBXZSBjb3VsZCBwcm9iYWJseSBtYWtlIHRoaXMgbW9yZSByZWxpYWJsZSBieVxuICAgIC8vIGtlZXBpbmcgYSBsaXN0IG9mIHBhdGhzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIHBhdGhzIHdlIGRvbid0IGtub3cuXG5cbiAgICB2YXIgdG9JbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgodG9Mb2NhdGlvbikpO1xuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG4gICAgdmFyIGZyb21JbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgoZnJvbUxvY2F0aW9uKSk7XG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH0gLy8gRW5zdXJlIHRoZSBoYXNoIGlzIGVuY29kZWQgcHJvcGVybHkgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2UuXG5cblxuICB2YXIgcGF0aCA9IGdldEhhc2hQYXRoKCk7XG4gIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG4gIGlmIChwYXRoICE9PSBlbmNvZGVkUGF0aCkgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgdmFyIGluaXRpYWxMb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gIHZhciBhbGxQYXRocyA9IFtjcmVhdGVQYXRoKGluaXRpYWxMb2NhdGlvbildOyAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgIHZhciBiYXNlVGFnID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYmFzZScpO1xuICAgIHZhciBocmVmID0gJyc7XG5cbiAgICBpZiAoYmFzZVRhZyAmJiBiYXNlVGFnLmdldEF0dHJpYnV0ZSgnaHJlZicpKSB7XG4gICAgICBocmVmID0gc3RyaXBIYXNoKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaHJlZiArICcjJyArIGVuY29kZVBhdGgoYmFzZW5hbWUgKyBjcmVhdGVQYXRoKGxvY2F0aW9uKSk7XG4gIH1cblxuICBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBwYXRoID0gY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUFVTSCwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcHVzaEhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgoaGlzdG9yeS5sb2NhdGlvbikpO1xuICAgICAgICB2YXIgbmV4dFBhdGhzID0gYWxsUGF0aHMuc2xpY2UoMCwgcHJldkluZGV4ICsgMSk7XG4gICAgICAgIG5leHRQYXRocy5wdXNoKHBhdGgpO1xuICAgICAgICBhbGxQYXRocyA9IG5leHRQYXRocztcbiAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdIYXNoIGhpc3RvcnkgY2Fubm90IFBVU0ggdGhlIHNhbWUgcGF0aDsgYSBuZXcgZW50cnkgd2lsbCBub3QgYmUgYWRkZWQgdG8gdGhlIGhpc3Rvcnkgc3RhY2snKSA6IHZvaWQgMDtcbiAgICAgICAgc2V0U3RhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHJlcGxhY2Ugc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHBhdGggPSBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBSRVBMQUNFLCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMuaW5kZXhPZihjcmVhdGVQYXRoKGhpc3RvcnkubG9jYXRpb24pKTtcbiAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxQYXRoc1twcmV2SW5kZXhdID0gcGF0aDtcbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnbyhuKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhjYW5Hb1dpdGhvdXRSZWxvYWQsICdIYXNoIGhpc3RvcnkgZ28obikgY2F1c2VzIGEgZnVsbCBwYWdlIHJlbG9hZCBpbiB0aGlzIGJyb3dzZXInKSA6IHZvaWQgMDtcbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIGdvKC0xKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICBnbygxKTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSAmJiBkZWx0YSA9PT0gMSkge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoSGFzaENoYW5nZUV2ZW50JDEsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoSGFzaENoYW5nZUV2ZW50JDEsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBibG9jayhwcm9tcHQpIHtcbiAgICBpZiAocHJvbXB0ID09PSB2b2lkIDApIHtcbiAgICAgIHByb21wdCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cblxuZnVuY3Rpb24gY2xhbXAobiwgbG93ZXJCb3VuZCwgdXBwZXJCb3VuZCkge1xuICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgobiwgbG93ZXJCb3VuZCksIHVwcGVyQm91bmQpO1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgaGlzdG9yeSBvYmplY3QgdGhhdCBzdG9yZXMgbG9jYXRpb25zIGluIG1lbW9yeS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZU1lbW9yeUhpc3RvcnkocHJvcHMpIHtcbiAgaWYgKHByb3BzID09PSB2b2lkIDApIHtcbiAgICBwcm9wcyA9IHt9O1xuICB9XG5cbiAgdmFyIF9wcm9wcyA9IHByb3BzLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgX3Byb3BzJGluaXRpYWxFbnRyaWVzID0gX3Byb3BzLmluaXRpYWxFbnRyaWVzLFxuICAgICAgaW5pdGlhbEVudHJpZXMgPSBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPT09IHZvaWQgMCA/IFsnLyddIDogX3Byb3BzJGluaXRpYWxFbnRyaWVzLFxuICAgICAgX3Byb3BzJGluaXRpYWxJbmRleCA9IF9wcm9wcy5pbml0aWFsSW5kZXgsXG4gICAgICBpbml0aWFsSW5kZXggPSBfcHJvcHMkaW5pdGlhbEluZGV4ID09PSB2b2lkIDAgPyAwIDogX3Byb3BzJGluaXRpYWxJbmRleCxcbiAgICAgIF9wcm9wcyRrZXlMZW5ndGggPSBfcHJvcHMua2V5TGVuZ3RoLFxuICAgICAga2V5TGVuZ3RoID0gX3Byb3BzJGtleUxlbmd0aCA9PT0gdm9pZCAwID8gNiA6IF9wcm9wcyRrZXlMZW5ndGg7XG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwga2V5TGVuZ3RoKTtcbiAgfVxuXG4gIHZhciBpbmRleCA9IGNsYW1wKGluaXRpYWxJbmRleCwgMCwgaW5pdGlhbEVudHJpZXMubGVuZ3RoIC0gMSk7XG4gIHZhciBlbnRyaWVzID0gaW5pdGlhbEVudHJpZXMubWFwKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgIHJldHVybiB0eXBlb2YgZW50cnkgPT09ICdzdHJpbmcnID8gY3JlYXRlTG9jYXRpb24oZW50cnksIHVuZGVmaW5lZCwgY3JlYXRlS2V5KCkpIDogY3JlYXRlTG9jYXRpb24oZW50cnksIHVuZGVmaW5lZCwgZW50cnkua2V5IHx8IGNyZWF0ZUtleSgpKTtcbiAgfSk7IC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IGNyZWF0ZVBhdGg7XG5cbiAgZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcHVzaCB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBwcmV2SW5kZXggPSBoaXN0b3J5LmluZGV4O1xuICAgICAgdmFyIG5leHRJbmRleCA9IHByZXZJbmRleCArIDE7XG4gICAgICB2YXIgbmV4dEVudHJpZXMgPSBoaXN0b3J5LmVudHJpZXMuc2xpY2UoMCk7XG5cbiAgICAgIGlmIChuZXh0RW50cmllcy5sZW5ndGggPiBuZXh0SW5kZXgpIHtcbiAgICAgICAgbmV4dEVudHJpZXMuc3BsaWNlKG5leHRJbmRleCwgbmV4dEVudHJpZXMubGVuZ3RoIC0gbmV4dEluZGV4LCBsb2NhdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXh0RW50cmllcy5wdXNoKGxvY2F0aW9uKTtcbiAgICAgIH1cblxuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICBpbmRleDogbmV4dEluZGV4LFxuICAgICAgICBlbnRyaWVzOiBuZXh0RW50cmllc1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byByZXBsYWNlIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgaGlzdG9yeS5lbnRyaWVzW2hpc3RvcnkuaW5kZXhdID0gbG9jYXRpb247XG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ28obikge1xuICAgIHZhciBuZXh0SW5kZXggPSBjbGFtcChoaXN0b3J5LmluZGV4ICsgbiwgMCwgaGlzdG9yeS5lbnRyaWVzLmxlbmd0aCAtIDEpO1xuICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICB2YXIgbG9jYXRpb24gPSBoaXN0b3J5LmVudHJpZXNbbmV4dEluZGV4XTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKG9rKSB7XG4gICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgICAgaW5kZXg6IG5leHRJbmRleFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE1pbWljIHRoZSBiZWhhdmlvciBvZiBET00gaGlzdG9yaWVzIGJ5XG4gICAgICAgIC8vIGNhdXNpbmcgYSByZW5kZXIgYWZ0ZXIgYSBjYW5jZWxsZWQgUE9QLlxuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIGdvKC0xKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICBnbygxKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbkdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gaGlzdG9yeS5pbmRleCArIG47XG4gICAgcmV0dXJuIG5leHRJbmRleCA+PSAwICYmIG5leHRJbmRleCA8IGhpc3RvcnkuZW50cmllcy5sZW5ndGg7XG4gIH1cblxuICBmdW5jdGlvbiBibG9jayhwcm9tcHQpIHtcbiAgICBpZiAocHJvbXB0ID09PSB2b2lkIDApIHtcbiAgICAgIHByb21wdCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHJldHVybiB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGVudHJpZXMubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGVudHJpZXNbaW5kZXhdLFxuICAgIGluZGV4OiBpbmRleCxcbiAgICBlbnRyaWVzOiBlbnRyaWVzLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBjYW5HbzogY2FuR28sXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuXG5leHBvcnQgeyBjcmVhdGVCcm93c2VySGlzdG9yeSwgY3JlYXRlSGFzaEhpc3RvcnksIGNyZWF0ZU1lbW9yeUhpc3RvcnksIGNyZWF0ZUxvY2F0aW9uLCBsb2NhdGlvbnNBcmVFcXVhbCwgcGFyc2VQYXRoLCBjcmVhdGVQYXRoIH07XG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5cbnZhciBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgPSAxMDczNzQxODIzO1xudmFyIGNvbW1vbmpzR2xvYmFsID0gdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsVGhpcyA6IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB7fTtcblxuZnVuY3Rpb24gZ2V0VW5pcXVlSWQoKSB7XG4gIHZhciBrZXkgPSAnX19nbG9iYWxfdW5pcXVlX2lkX18nO1xuICByZXR1cm4gY29tbW9uanNHbG9iYWxba2V5XSA9IChjb21tb25qc0dsb2JhbFtrZXldIHx8IDApICsgMTtcbn1cblxuZnVuY3Rpb24gb2JqZWN0SXMoeCwgeSkge1xuICBpZiAoeCA9PT0geSkge1xuICAgIHJldHVybiB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUV2ZW50RW1pdHRlcih2YWx1ZSkge1xuICB2YXIgaGFuZGxlcnMgPSBbXTtcbiAgcmV0dXJuIHtcbiAgICBvbjogZnVuY3Rpb24gb24oaGFuZGxlcikge1xuICAgICAgaGFuZGxlcnMucHVzaChoYW5kbGVyKTtcbiAgICB9LFxuICAgIG9mZjogZnVuY3Rpb24gb2ZmKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXJzID0gaGFuZGxlcnMuZmlsdGVyKGZ1bmN0aW9uIChoKSB7XG4gICAgICAgIHJldHVybiBoICE9PSBoYW5kbGVyO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KG5ld1ZhbHVlLCBjaGFuZ2VkQml0cykge1xuICAgICAgdmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgIGhhbmRsZXJzLmZvckVhY2goZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgcmV0dXJuIGhhbmRsZXIodmFsdWUsIGNoYW5nZWRCaXRzKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gb25seUNoaWxkKGNoaWxkcmVuKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGNoaWxkcmVuKSA/IGNoaWxkcmVuWzBdIDogY2hpbGRyZW47XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVJlYWN0Q29udGV4dChkZWZhdWx0VmFsdWUsIGNhbGN1bGF0ZUNoYW5nZWRCaXRzKSB7XG4gIHZhciBfUHJvdmlkZXIkY2hpbGRDb250ZXgsIF9Db25zdW1lciRjb250ZXh0VHlwZTtcblxuICB2YXIgY29udGV4dFByb3AgPSAnX19jcmVhdGUtcmVhY3QtY29udGV4dC0nICsgZ2V0VW5pcXVlSWQoKSArICdfXyc7XG5cbiAgdmFyIFByb3ZpZGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzTG9vc2UoUHJvdmlkZXIsIF9Db21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gUHJvdmlkZXIoKSB7XG4gICAgICB2YXIgX3RoaXM7XG5cbiAgICAgIF90aGlzID0gX0NvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICBfdGhpcy5lbWl0dGVyID0gY3JlYXRlRXZlbnRFbWl0dGVyKF90aGlzLnByb3BzLnZhbHVlKTtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICB2YXIgX3Byb3RvID0gUHJvdmlkZXIucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICByZXR1cm4gX3JlZiA9IHt9LCBfcmVmW2NvbnRleHRQcm9wXSA9IHRoaXMuZW1pdHRlciwgX3JlZjtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgaWYgKHRoaXMucHJvcHMudmFsdWUgIT09IG5leHRQcm9wcy52YWx1ZSkge1xuICAgICAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLnByb3BzLnZhbHVlO1xuICAgICAgICB2YXIgbmV3VmFsdWUgPSBuZXh0UHJvcHMudmFsdWU7XG4gICAgICAgIHZhciBjaGFuZ2VkQml0cztcblxuICAgICAgICBpZiAob2JqZWN0SXMob2xkVmFsdWUsIG5ld1ZhbHVlKSkge1xuICAgICAgICAgIGNoYW5nZWRCaXRzID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaGFuZ2VkQml0cyA9IHR5cGVvZiBjYWxjdWxhdGVDaGFuZ2VkQml0cyA9PT0gJ2Z1bmN0aW9uJyA/IGNhbGN1bGF0ZUNoYW5nZWRCaXRzKG9sZFZhbHVlLCBuZXdWYWx1ZSkgOiBNQVhfU0lHTkVEXzMxX0JJVF9JTlQ7XG5cbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgd2FybmluZygoY2hhbmdlZEJpdHMgJiBNQVhfU0lHTkVEXzMxX0JJVF9JTlQpID09PSBjaGFuZ2VkQml0cywgJ2NhbGN1bGF0ZUNoYW5nZWRCaXRzOiBFeHBlY3RlZCB0aGUgcmV0dXJuIHZhbHVlIHRvIGJlIGEgJyArICczMS1iaXQgaW50ZWdlci4gSW5zdGVhZCByZWNlaXZlZDogJyArIGNoYW5nZWRCaXRzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjaGFuZ2VkQml0cyB8PSAwO1xuXG4gICAgICAgICAgaWYgKGNoYW5nZWRCaXRzICE9PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXR0ZXIuc2V0KG5leHRQcm9wcy52YWx1ZSwgY2hhbmdlZEJpdHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgfTtcblxuICAgIHJldHVybiBQcm92aWRlcjtcbiAgfShDb21wb25lbnQpO1xuXG4gIFByb3ZpZGVyLmNoaWxkQ29udGV4dFR5cGVzID0gKF9Qcm92aWRlciRjaGlsZENvbnRleCA9IHt9LCBfUHJvdmlkZXIkY2hpbGRDb250ZXhbY29udGV4dFByb3BdID0gUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLCBfUHJvdmlkZXIkY2hpbGRDb250ZXgpO1xuXG4gIHZhciBDb25zdW1lciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvbXBvbmVudDIpIHtcbiAgICBfaW5oZXJpdHNMb29zZShDb25zdW1lciwgX0NvbXBvbmVudDIpO1xuXG4gICAgZnVuY3Rpb24gQ29uc3VtZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyO1xuXG4gICAgICBfdGhpczIgPSBfQ29tcG9uZW50Mi5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICBfdGhpczIuc3RhdGUgPSB7XG4gICAgICAgIHZhbHVlOiBfdGhpczIuZ2V0VmFsdWUoKVxuICAgICAgfTtcblxuICAgICAgX3RoaXMyLm9uVXBkYXRlID0gZnVuY3Rpb24gKG5ld1ZhbHVlLCBjaGFuZ2VkQml0cykge1xuICAgICAgICB2YXIgb2JzZXJ2ZWRCaXRzID0gX3RoaXMyLm9ic2VydmVkQml0cyB8IDA7XG5cbiAgICAgICAgaWYgKChvYnNlcnZlZEJpdHMgJiBjaGFuZ2VkQml0cykgIT09IDApIHtcbiAgICAgICAgICBfdGhpczIuc2V0U3RhdGUoe1xuICAgICAgICAgICAgdmFsdWU6IF90aGlzMi5nZXRWYWx1ZSgpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBfdGhpczI7XG4gICAgfVxuXG4gICAgdmFyIF9wcm90bzIgPSBDb25zdW1lci5wcm90b3R5cGU7XG5cbiAgICBfcHJvdG8yLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgdmFyIG9ic2VydmVkQml0cyA9IG5leHRQcm9wcy5vYnNlcnZlZEJpdHM7XG4gICAgICB0aGlzLm9ic2VydmVkQml0cyA9IG9ic2VydmVkQml0cyA9PT0gdW5kZWZpbmVkIHx8IG9ic2VydmVkQml0cyA9PT0gbnVsbCA/IE1BWF9TSUdORURfMzFfQklUX0lOVCA6IG9ic2VydmVkQml0cztcbiAgICB9O1xuXG4gICAgX3Byb3RvMi5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgdGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXS5vbih0aGlzLm9uVXBkYXRlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIG9ic2VydmVkQml0cyA9IHRoaXMucHJvcHMub2JzZXJ2ZWRCaXRzO1xuICAgICAgdGhpcy5vYnNlcnZlZEJpdHMgPSBvYnNlcnZlZEJpdHMgPT09IHVuZGVmaW5lZCB8fCBvYnNlcnZlZEJpdHMgPT09IG51bGwgPyBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgOiBvYnNlcnZlZEJpdHM7XG4gICAgfTtcblxuICAgIF9wcm90bzIuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0ub2ZmKHRoaXMub25VcGRhdGUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8yLmdldFZhbHVlID0gZnVuY3Rpb24gZ2V0VmFsdWUoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXS5nZXQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90bzIucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIG9ubHlDaGlsZCh0aGlzLnByb3BzLmNoaWxkcmVuKSh0aGlzLnN0YXRlLnZhbHVlKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIENvbnN1bWVyO1xuICB9KENvbXBvbmVudCk7XG5cbiAgQ29uc3VtZXIuY29udGV4dFR5cGVzID0gKF9Db25zdW1lciRjb250ZXh0VHlwZSA9IHt9LCBfQ29uc3VtZXIkY29udGV4dFR5cGVbY29udGV4dFByb3BdID0gUHJvcFR5cGVzLm9iamVjdCwgX0NvbnN1bWVyJGNvbnRleHRUeXBlKTtcbiAgcmV0dXJuIHtcbiAgICBQcm92aWRlcjogUHJvdmlkZXIsXG4gICAgQ29uc3VtZXI6IENvbnN1bWVyXG4gIH07XG59XG5cbnZhciBpbmRleCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQgfHwgY3JlYXRlUmVhY3RDb250ZXh0O1xuXG5leHBvcnQgZGVmYXVsdCBpbmRleDtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufSIsIi8vIFRPRE86IFJlcGxhY2Ugd2l0aCBSZWFjdC5jcmVhdGVDb250ZXh0IG9uY2Ugd2UgY2FuIGFzc3VtZSBSZWFjdCAxNitcbmltcG9ydCBjcmVhdGVDb250ZXh0IGZyb20gXCJtaW5pLWNyZWF0ZS1yZWFjdC1jb250ZXh0XCI7XG5cbmNvbnN0IGNyZWF0ZU5hbWVkQ29udGV4dCA9IG5hbWUgPT4ge1xuICBjb25zdCBjb250ZXh0ID0gY3JlYXRlQ29udGV4dCgpO1xuICBjb250ZXh0LmRpc3BsYXlOYW1lID0gbmFtZTtcblxuICByZXR1cm4gY29udGV4dDtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZU5hbWVkQ29udGV4dDtcbiIsImltcG9ydCBjcmVhdGVOYW1lZENvbnRleHQgZnJvbSBcIi4vY3JlYXRlTmFtZUNvbnRleHRcIjtcblxuY29uc3QgaGlzdG9yeUNvbnRleHQgPSAvKiNfX1BVUkVfXyovIGNyZWF0ZU5hbWVkQ29udGV4dChcIlJvdXRlci1IaXN0b3J5XCIpO1xuZXhwb3J0IGRlZmF1bHQgaGlzdG9yeUNvbnRleHQ7XG4iLCJpbXBvcnQgY3JlYXRlTmFtZWRDb250ZXh0IGZyb20gXCIuL2NyZWF0ZU5hbWVDb250ZXh0XCI7XG5cbmNvbnN0IGNvbnRleHQgPSAvKiNfX1BVUkVfXyovIGNyZWF0ZU5hbWVkQ29udGV4dChcIlJvdXRlclwiKTtcbmV4cG9ydCBkZWZhdWx0IGNvbnRleHQ7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgd2FybmluZyBmcm9tIFwidGlueS13YXJuaW5nXCI7XG5cbmltcG9ydCBIaXN0b3J5Q29udGV4dCBmcm9tIFwiLi9IaXN0b3J5Q29udGV4dC5qc1wiO1xuaW1wb3J0IFJvdXRlckNvbnRleHQgZnJvbSBcIi4vUm91dGVyQ29udGV4dC5qc1wiO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBwdXR0aW5nIGhpc3Rvcnkgb24gY29udGV4dC5cbiAqL1xuY2xhc3MgUm91dGVyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIGNvbXB1dGVSb290TWF0Y2gocGF0aG5hbWUpIHtcbiAgICByZXR1cm4geyBwYXRoOiBcIi9cIiwgdXJsOiBcIi9cIiwgcGFyYW1zOiB7fSwgaXNFeGFjdDogcGF0aG5hbWUgPT09IFwiL1wiIH07XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBsb2NhdGlvbjogcHJvcHMuaGlzdG9yeS5sb2NhdGlvblxuICAgIH07XG5cbiAgICAvLyBUaGlzIGlzIGEgYml0IG9mIGEgaGFjay4gV2UgaGF2ZSB0byBzdGFydCBsaXN0ZW5pbmcgZm9yIGxvY2F0aW9uXG4gICAgLy8gY2hhbmdlcyBoZXJlIGluIHRoZSBjb25zdHJ1Y3RvciBpbiBjYXNlIHRoZXJlIGFyZSBhbnkgPFJlZGlyZWN0PnNcbiAgICAvLyBvbiB0aGUgaW5pdGlhbCByZW5kZXIuIElmIHRoZXJlIGFyZSwgdGhleSB3aWxsIHJlcGxhY2UvcHVzaCB3aGVuXG4gICAgLy8gdGhleSBtb3VudCBhbmQgc2luY2UgY0RNIGZpcmVzIGluIGNoaWxkcmVuIGJlZm9yZSBwYXJlbnRzLCB3ZSBtYXlcbiAgICAvLyBnZXQgYSBuZXcgbG9jYXRpb24gYmVmb3JlIHRoZSA8Um91dGVyPiBpcyBtb3VudGVkLlxuICAgIHRoaXMuX2lzTW91bnRlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3BlbmRpbmdMb2NhdGlvbiA9IG51bGw7XG5cbiAgICBpZiAoIXByb3BzLnN0YXRpY0NvbnRleHQpIHtcbiAgICAgIHRoaXMudW5saXN0ZW4gPSBwcm9wcy5oaXN0b3J5Lmxpc3Rlbihsb2NhdGlvbiA9PiB7XG4gICAgICAgIGlmICh0aGlzLl9pc01vdW50ZWQpIHtcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgbG9jYXRpb24gfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fcGVuZGluZ0xvY2F0aW9uID0gbG9jYXRpb247XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuX2lzTW91bnRlZCA9IHRydWU7XG5cbiAgICBpZiAodGhpcy5fcGVuZGluZ0xvY2F0aW9uKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgbG9jYXRpb246IHRoaXMuX3BlbmRpbmdMb2NhdGlvbiB9KTtcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy51bmxpc3Rlbikge1xuICAgICAgdGhpcy51bmxpc3RlbigpO1xuICAgICAgdGhpcy5faXNNb3VudGVkID0gZmFsc2U7XG4gICAgICB0aGlzLl9wZW5kaW5nTG9jYXRpb24gPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPFJvdXRlckNvbnRleHQuUHJvdmlkZXJcbiAgICAgICAgdmFsdWU9e3tcbiAgICAgICAgICBoaXN0b3J5OiB0aGlzLnByb3BzLmhpc3RvcnksXG4gICAgICAgICAgbG9jYXRpb246IHRoaXMuc3RhdGUubG9jYXRpb24sXG4gICAgICAgICAgbWF0Y2g6IFJvdXRlci5jb21wdXRlUm9vdE1hdGNoKHRoaXMuc3RhdGUubG9jYXRpb24ucGF0aG5hbWUpLFxuICAgICAgICAgIHN0YXRpY0NvbnRleHQ6IHRoaXMucHJvcHMuc3RhdGljQ29udGV4dFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8SGlzdG9yeUNvbnRleHQuUHJvdmlkZXJcbiAgICAgICAgICBjaGlsZHJlbj17dGhpcy5wcm9wcy5jaGlsZHJlbiB8fCBudWxsfVxuICAgICAgICAgIHZhbHVlPXt0aGlzLnByb3BzLmhpc3Rvcnl9XG4gICAgICAgIC8+XG4gICAgICA8L1JvdXRlckNvbnRleHQuUHJvdmlkZXI+XG4gICAgKTtcbiAgfVxufVxuXG5pZiAoX19ERVZfXykge1xuICBSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgc3RhdGljQ29udGV4dDogUHJvcFR5cGVzLm9iamVjdFxuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24ocHJldlByb3BzKSB7XG4gICAgd2FybmluZyhcbiAgICAgIHByZXZQcm9wcy5oaXN0b3J5ID09PSB0aGlzLnByb3BzLmhpc3RvcnksXG4gICAgICBcIllvdSBjYW5ub3QgY2hhbmdlIDxSb3V0ZXIgaGlzdG9yeT5cIlxuICAgICk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJvdXRlcjtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCB7IGNyZWF0ZU1lbW9yeUhpc3RvcnkgYXMgY3JlYXRlSGlzdG9yeSB9IGZyb20gXCJoaXN0b3J5XCI7XG5pbXBvcnQgd2FybmluZyBmcm9tIFwidGlueS13YXJuaW5nXCI7XG5cbmltcG9ydCBSb3V0ZXIgZnJvbSBcIi4vUm91dGVyLmpzXCI7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIGEgPFJvdXRlcj4gdGhhdCBzdG9yZXMgbG9jYXRpb24gaW4gbWVtb3J5LlxuICovXG5jbGFzcyBNZW1vcnlSb3V0ZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBoaXN0b3J5ID0gY3JlYXRlSGlzdG9yeSh0aGlzLnByb3BzKTtcblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIDxSb3V0ZXIgaGlzdG9yeT17dGhpcy5oaXN0b3J5fSBjaGlsZHJlbj17dGhpcy5wcm9wcy5jaGlsZHJlbn0gLz47XG4gIH1cbn1cblxuaWYgKF9fREVWX18pIHtcbiAgTWVtb3J5Um91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBpbml0aWFsRW50cmllczogUHJvcFR5cGVzLmFycmF5LFxuICAgIGluaXRpYWxJbmRleDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBrZXlMZW5ndGg6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG4gIH07XG5cbiAgTWVtb3J5Um91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uKCkge1xuICAgIHdhcm5pbmcoXG4gICAgICAhdGhpcy5wcm9wcy5oaXN0b3J5LFxuICAgICAgXCI8TWVtb3J5Um91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArXG4gICAgICAgIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgTWVtb3J5Um91dGVyIGFzIFJvdXRlciB9YC5cIlxuICAgICk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IE1lbW9yeVJvdXRlcjtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuY2xhc3MgTGlmZWN5Y2xlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Nb3VudCkgdGhpcy5wcm9wcy5vbk1vdW50LmNhbGwodGhpcywgdGhpcyk7XG4gIH1cblxuICBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25VcGRhdGUpIHRoaXMucHJvcHMub25VcGRhdGUuY2FsbCh0aGlzLCB0aGlzLCBwcmV2UHJvcHMpO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Vbm1vdW50KSB0aGlzLnByb3BzLm9uVW5tb3VudC5jYWxsKHRoaXMsIHRoaXMpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IExpZmVjeWNsZTtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcInRpbnktaW52YXJpYW50XCI7XG5cbmltcG9ydCBMaWZlY3ljbGUgZnJvbSBcIi4vTGlmZWN5Y2xlLmpzXCI7XG5pbXBvcnQgUm91dGVyQ29udGV4dCBmcm9tIFwiLi9Sb3V0ZXJDb250ZXh0LmpzXCI7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHByb21wdGluZyB0aGUgdXNlciBiZWZvcmUgbmF2aWdhdGluZyBhd2F5IGZyb20gYSBzY3JlZW4uXG4gKi9cbmZ1bmN0aW9uIFByb21wdCh7IG1lc3NhZ2UsIHdoZW4gPSB0cnVlIH0pIHtcbiAgcmV0dXJuIChcbiAgICA8Um91dGVyQ29udGV4dC5Db25zdW1lcj5cbiAgICAgIHtjb250ZXh0ID0+IHtcbiAgICAgICAgaW52YXJpYW50KGNvbnRleHQsIFwiWW91IHNob3VsZCBub3QgdXNlIDxQcm9tcHQ+IG91dHNpZGUgYSA8Um91dGVyPlwiKTtcblxuICAgICAgICBpZiAoIXdoZW4gfHwgY29udGV4dC5zdGF0aWNDb250ZXh0KSByZXR1cm4gbnVsbDtcblxuICAgICAgICBjb25zdCBtZXRob2QgPSBjb250ZXh0Lmhpc3RvcnkuYmxvY2s7XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8TGlmZWN5Y2xlXG4gICAgICAgICAgICBvbk1vdW50PXtzZWxmID0+IHtcbiAgICAgICAgICAgICAgc2VsZi5yZWxlYXNlID0gbWV0aG9kKG1lc3NhZ2UpO1xuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIG9uVXBkYXRlPXsoc2VsZiwgcHJldlByb3BzKSA9PiB7XG4gICAgICAgICAgICAgIGlmIChwcmV2UHJvcHMubWVzc2FnZSAhPT0gbWVzc2FnZSkge1xuICAgICAgICAgICAgICAgIHNlbGYucmVsZWFzZSgpO1xuICAgICAgICAgICAgICAgIHNlbGYucmVsZWFzZSA9IG1ldGhvZChtZXNzYWdlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIG9uVW5tb3VudD17c2VsZiA9PiB7XG4gICAgICAgICAgICAgIHNlbGYucmVsZWFzZSgpO1xuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIG1lc3NhZ2U9e21lc3NhZ2V9XG4gICAgICAgICAgLz5cbiAgICAgICAgKTtcbiAgICAgIH19XG4gICAgPC9Sb3V0ZXJDb250ZXh0LkNvbnN1bWVyPlxuICApO1xufVxuXG5pZiAoX19ERVZfXykge1xuICBjb25zdCBtZXNzYWdlVHlwZSA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMuc3RyaW5nXSk7XG5cbiAgUHJvbXB0LnByb3BUeXBlcyA9IHtcbiAgICB3aGVuOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBtZXNzYWdlOiBtZXNzYWdlVHlwZS5pc1JlcXVpcmVkXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IFByb21wdDtcbiIsImltcG9ydCBwYXRoVG9SZWdleHAgZnJvbSBcInBhdGgtdG8tcmVnZXhwXCI7XG5cbmNvbnN0IGNhY2hlID0ge307XG5jb25zdCBjYWNoZUxpbWl0ID0gMTAwMDA7XG5sZXQgY2FjaGVDb3VudCA9IDA7XG5cbmZ1bmN0aW9uIGNvbXBpbGVQYXRoKHBhdGgpIHtcbiAgaWYgKGNhY2hlW3BhdGhdKSByZXR1cm4gY2FjaGVbcGF0aF07XG5cbiAgY29uc3QgZ2VuZXJhdG9yID0gcGF0aFRvUmVnZXhwLmNvbXBpbGUocGF0aCk7XG5cbiAgaWYgKGNhY2hlQ291bnQgPCBjYWNoZUxpbWl0KSB7XG4gICAgY2FjaGVbcGF0aF0gPSBnZW5lcmF0b3I7XG4gICAgY2FjaGVDb3VudCsrO1xuICB9XG5cbiAgcmV0dXJuIGdlbmVyYXRvcjtcbn1cblxuLyoqXG4gKiBQdWJsaWMgQVBJIGZvciBnZW5lcmF0aW5nIGEgVVJMIHBhdGhuYW1lIGZyb20gYSBwYXRoIGFuZCBwYXJhbWV0ZXJzLlxuICovXG5mdW5jdGlvbiBnZW5lcmF0ZVBhdGgocGF0aCA9IFwiL1wiLCBwYXJhbXMgPSB7fSkge1xuICByZXR1cm4gcGF0aCA9PT0gXCIvXCIgPyBwYXRoIDogY29tcGlsZVBhdGgocGF0aCkocGFyYW1zLCB7IHByZXR0eTogdHJ1ZSB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2VuZXJhdGVQYXRoO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHsgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsIH0gZnJvbSBcImhpc3RvcnlcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcInRpbnktaW52YXJpYW50XCI7XG5cbmltcG9ydCBMaWZlY3ljbGUgZnJvbSBcIi4vTGlmZWN5Y2xlLmpzXCI7XG5pbXBvcnQgUm91dGVyQ29udGV4dCBmcm9tIFwiLi9Sb3V0ZXJDb250ZXh0LmpzXCI7XG5pbXBvcnQgZ2VuZXJhdGVQYXRoIGZyb20gXCIuL2dlbmVyYXRlUGF0aC5qc1wiO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBuYXZpZ2F0aW5nIHByb2dyYW1tYXRpY2FsbHkgd2l0aCBhIGNvbXBvbmVudC5cbiAqL1xuZnVuY3Rpb24gUmVkaXJlY3QoeyBjb21wdXRlZE1hdGNoLCB0bywgcHVzaCA9IGZhbHNlIH0pIHtcbiAgcmV0dXJuIChcbiAgICA8Um91dGVyQ29udGV4dC5Db25zdW1lcj5cbiAgICAgIHtjb250ZXh0ID0+IHtcbiAgICAgICAgaW52YXJpYW50KGNvbnRleHQsIFwiWW91IHNob3VsZCBub3QgdXNlIDxSZWRpcmVjdD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpO1xuXG4gICAgICAgIGNvbnN0IHsgaGlzdG9yeSwgc3RhdGljQ29udGV4dCB9ID0gY29udGV4dDtcblxuICAgICAgICBjb25zdCBtZXRob2QgPSBwdXNoID8gaGlzdG9yeS5wdXNoIDogaGlzdG9yeS5yZXBsYWNlO1xuICAgICAgICBjb25zdCBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKFxuICAgICAgICAgIGNvbXB1dGVkTWF0Y2hcbiAgICAgICAgICAgID8gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiXG4gICAgICAgICAgICAgID8gZ2VuZXJhdGVQYXRoKHRvLCBjb21wdXRlZE1hdGNoLnBhcmFtcylcbiAgICAgICAgICAgICAgOiB7XG4gICAgICAgICAgICAgICAgICAuLi50byxcbiAgICAgICAgICAgICAgICAgIHBhdGhuYW1lOiBnZW5lcmF0ZVBhdGgodG8ucGF0aG5hbWUsIGNvbXB1dGVkTWF0Y2gucGFyYW1zKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogdG9cbiAgICAgICAgKTtcblxuICAgICAgICAvLyBXaGVuIHJlbmRlcmluZyBpbiBhIHN0YXRpYyBjb250ZXh0LFxuICAgICAgICAvLyBzZXQgdGhlIG5ldyBsb2NhdGlvbiBpbW1lZGlhdGVseS5cbiAgICAgICAgaWYgKHN0YXRpY0NvbnRleHQpIHtcbiAgICAgICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8TGlmZWN5Y2xlXG4gICAgICAgICAgICBvbk1vdW50PXsoKSA9PiB7XG4gICAgICAgICAgICAgIG1ldGhvZChsb2NhdGlvbik7XG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgb25VcGRhdGU9eyhzZWxmLCBwcmV2UHJvcHMpID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgcHJldkxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocHJldlByb3BzLnRvKTtcbiAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICFsb2NhdGlvbnNBcmVFcXVhbChwcmV2TG9jYXRpb24sIHtcbiAgICAgICAgICAgICAgICAgIC4uLmxvY2F0aW9uLFxuICAgICAgICAgICAgICAgICAga2V5OiBwcmV2TG9jYXRpb24ua2V5XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIHRvPXt0b31cbiAgICAgICAgICAvPlxuICAgICAgICApO1xuICAgICAgfX1cbiAgICA8L1JvdXRlckNvbnRleHQuQ29uc3VtZXI+XG4gICk7XG59XG5cbmlmIChfX0RFVl9fKSB7XG4gIFJlZGlyZWN0LnByb3BUeXBlcyA9IHtcbiAgICBwdXNoOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBmcm9tOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHRvOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSkuaXNSZXF1aXJlZFxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBSZWRpcmVjdDtcbiIsImltcG9ydCBwYXRoVG9SZWdleHAgZnJvbSBcInBhdGgtdG8tcmVnZXhwXCI7XG5cbmNvbnN0IGNhY2hlID0ge307XG5jb25zdCBjYWNoZUxpbWl0ID0gMTAwMDA7XG5sZXQgY2FjaGVDb3VudCA9IDA7XG5cbmZ1bmN0aW9uIGNvbXBpbGVQYXRoKHBhdGgsIG9wdGlvbnMpIHtcbiAgY29uc3QgY2FjaGVLZXkgPSBgJHtvcHRpb25zLmVuZH0ke29wdGlvbnMuc3RyaWN0fSR7b3B0aW9ucy5zZW5zaXRpdmV9YDtcbiAgY29uc3QgcGF0aENhY2hlID0gY2FjaGVbY2FjaGVLZXldIHx8IChjYWNoZVtjYWNoZUtleV0gPSB7fSk7XG5cbiAgaWYgKHBhdGhDYWNoZVtwYXRoXSkgcmV0dXJuIHBhdGhDYWNoZVtwYXRoXTtcblxuICBjb25zdCBrZXlzID0gW107XG4gIGNvbnN0IHJlZ2V4cCA9IHBhdGhUb1JlZ2V4cChwYXRoLCBrZXlzLCBvcHRpb25zKTtcbiAgY29uc3QgcmVzdWx0ID0geyByZWdleHAsIGtleXMgfTtcblxuICBpZiAoY2FjaGVDb3VudCA8IGNhY2hlTGltaXQpIHtcbiAgICBwYXRoQ2FjaGVbcGF0aF0gPSByZXN1bHQ7XG4gICAgY2FjaGVDb3VudCsrO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBQdWJsaWMgQVBJIGZvciBtYXRjaGluZyBhIFVSTCBwYXRobmFtZSB0byBhIHBhdGguXG4gKi9cbmZ1bmN0aW9uIG1hdGNoUGF0aChwYXRobmFtZSwgb3B0aW9ucyA9IHt9KSB7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiB8fCBBcnJheS5pc0FycmF5KG9wdGlvbnMpKSB7XG4gICAgb3B0aW9ucyA9IHsgcGF0aDogb3B0aW9ucyB9O1xuICB9XG5cbiAgY29uc3QgeyBwYXRoLCBleGFjdCA9IGZhbHNlLCBzdHJpY3QgPSBmYWxzZSwgc2Vuc2l0aXZlID0gZmFsc2UgfSA9IG9wdGlvbnM7XG5cbiAgY29uc3QgcGF0aHMgPSBbXS5jb25jYXQocGF0aCk7XG5cbiAgcmV0dXJuIHBhdGhzLnJlZHVjZSgobWF0Y2hlZCwgcGF0aCkgPT4ge1xuICAgIGlmICghcGF0aCAmJiBwYXRoICE9PSBcIlwiKSByZXR1cm4gbnVsbDtcbiAgICBpZiAobWF0Y2hlZCkgcmV0dXJuIG1hdGNoZWQ7XG5cbiAgICBjb25zdCB7IHJlZ2V4cCwga2V5cyB9ID0gY29tcGlsZVBhdGgocGF0aCwge1xuICAgICAgZW5kOiBleGFjdCxcbiAgICAgIHN0cmljdCxcbiAgICAgIHNlbnNpdGl2ZVxuICAgIH0pO1xuICAgIGNvbnN0IG1hdGNoID0gcmVnZXhwLmV4ZWMocGF0aG5hbWUpO1xuXG4gICAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG5cbiAgICBjb25zdCBbdXJsLCAuLi52YWx1ZXNdID0gbWF0Y2g7XG4gICAgY29uc3QgaXNFeGFjdCA9IHBhdGhuYW1lID09PSB1cmw7XG5cbiAgICBpZiAoZXhhY3QgJiYgIWlzRXhhY3QpIHJldHVybiBudWxsO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGgsIC8vIHRoZSBwYXRoIHVzZWQgdG8gbWF0Y2hcbiAgICAgIHVybDogcGF0aCA9PT0gXCIvXCIgJiYgdXJsID09PSBcIlwiID8gXCIvXCIgOiB1cmwsIC8vIHRoZSBtYXRjaGVkIHBvcnRpb24gb2YgdGhlIFVSTFxuICAgICAgaXNFeGFjdCwgLy8gd2hldGhlciBvciBub3Qgd2UgbWF0Y2hlZCBleGFjdGx5XG4gICAgICBwYXJhbXM6IGtleXMucmVkdWNlKChtZW1vLCBrZXksIGluZGV4KSA9PiB7XG4gICAgICAgIG1lbW9ba2V5Lm5hbWVdID0gdmFsdWVzW2luZGV4XTtcbiAgICAgICAgcmV0dXJuIG1lbW87XG4gICAgICB9LCB7fSlcbiAgICB9O1xuICB9LCBudWxsKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWF0Y2hQYXRoO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgaXNWYWxpZEVsZW1lbnRUeXBlIH0gZnJvbSBcInJlYWN0LWlzXCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCJ0aW55LWludmFyaWFudFwiO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSBcInRpbnktd2FybmluZ1wiO1xuXG5pbXBvcnQgUm91dGVyQ29udGV4dCBmcm9tIFwiLi9Sb3V0ZXJDb250ZXh0LmpzXCI7XG5pbXBvcnQgbWF0Y2hQYXRoIGZyb20gXCIuL21hdGNoUGF0aC5qc1wiO1xuXG5mdW5jdGlvbiBpc0VtcHR5Q2hpbGRyZW4oY2hpbGRyZW4pIHtcbiAgcmV0dXJuIFJlYWN0LkNoaWxkcmVuLmNvdW50KGNoaWxkcmVuKSA9PT0gMDtcbn1cblxuZnVuY3Rpb24gZXZhbENoaWxkcmVuRGV2KGNoaWxkcmVuLCBwcm9wcywgcGF0aCkge1xuICBjb25zdCB2YWx1ZSA9IGNoaWxkcmVuKHByb3BzKTtcblxuICB3YXJuaW5nKFxuICAgIHZhbHVlICE9PSB1bmRlZmluZWQsXG4gICAgXCJZb3UgcmV0dXJuZWQgYHVuZGVmaW5lZGAgZnJvbSB0aGUgYGNoaWxkcmVuYCBmdW5jdGlvbiBvZiBcIiArXG4gICAgICBgPFJvdXRlJHtwYXRoID8gYCBwYXRoPVwiJHtwYXRofVwiYCA6IFwiXCJ9PiwgYnV0IHlvdSBgICtcbiAgICAgIFwic2hvdWxkIGhhdmUgcmV0dXJuZWQgYSBSZWFjdCBlbGVtZW50IG9yIGBudWxsYFwiXG4gICk7XG5cbiAgcmV0dXJuIHZhbHVlIHx8IG51bGw7XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIG1hdGNoaW5nIGEgc2luZ2xlIHBhdGggYW5kIHJlbmRlcmluZy5cbiAqL1xuY2xhc3MgUm91dGUgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxSb3V0ZXJDb250ZXh0LkNvbnN1bWVyPlxuICAgICAgICB7Y29udGV4dCA9PiB7XG4gICAgICAgICAgaW52YXJpYW50KGNvbnRleHQsIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZT4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpO1xuXG4gICAgICAgICAgY29uc3QgbG9jYXRpb24gPSB0aGlzLnByb3BzLmxvY2F0aW9uIHx8IGNvbnRleHQubG9jYXRpb247XG4gICAgICAgICAgY29uc3QgbWF0Y2ggPSB0aGlzLnByb3BzLmNvbXB1dGVkTWF0Y2hcbiAgICAgICAgICAgID8gdGhpcy5wcm9wcy5jb21wdXRlZE1hdGNoIC8vIDxTd2l0Y2g+IGFscmVhZHkgY29tcHV0ZWQgdGhlIG1hdGNoIGZvciB1c1xuICAgICAgICAgICAgOiB0aGlzLnByb3BzLnBhdGhcbiAgICAgICAgICAgID8gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCB0aGlzLnByb3BzKVxuICAgICAgICAgICAgOiBjb250ZXh0Lm1hdGNoO1xuXG4gICAgICAgICAgY29uc3QgcHJvcHMgPSB7IC4uLmNvbnRleHQsIGxvY2F0aW9uLCBtYXRjaCB9O1xuXG4gICAgICAgICAgbGV0IHsgY2hpbGRyZW4sIGNvbXBvbmVudCwgcmVuZGVyIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgICAgICAgLy8gUHJlYWN0IHVzZXMgYW4gZW1wdHkgYXJyYXkgYXMgY2hpbGRyZW4gYnlcbiAgICAgICAgICAvLyBkZWZhdWx0LCBzbyB1c2UgbnVsbCBpZiB0aGF0J3MgdGhlIGNhc2UuXG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pICYmIGlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbikpIHtcbiAgICAgICAgICAgIGNoaWxkcmVuID0gbnVsbDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPFJvdXRlckNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3Byb3BzfT5cbiAgICAgICAgICAgICAge3Byb3BzLm1hdGNoXG4gICAgICAgICAgICAgICAgPyBjaGlsZHJlblxuICAgICAgICAgICAgICAgICAgPyB0eXBlb2YgY2hpbGRyZW4gPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgICAgICAgICAgICA/IF9fREVWX19cbiAgICAgICAgICAgICAgICAgICAgICA/IGV2YWxDaGlsZHJlbkRldihjaGlsZHJlbiwgcHJvcHMsIHRoaXMucHJvcHMucGF0aClcbiAgICAgICAgICAgICAgICAgICAgICA6IGNoaWxkcmVuKHByb3BzKVxuICAgICAgICAgICAgICAgICAgICA6IGNoaWxkcmVuXG4gICAgICAgICAgICAgICAgICA6IGNvbXBvbmVudFxuICAgICAgICAgICAgICAgICAgPyBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbXBvbmVudCwgcHJvcHMpXG4gICAgICAgICAgICAgICAgICA6IHJlbmRlclxuICAgICAgICAgICAgICAgICAgPyByZW5kZXIocHJvcHMpXG4gICAgICAgICAgICAgICAgICA6IG51bGxcbiAgICAgICAgICAgICAgICA6IHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgICAgICAgPyBfX0RFVl9fXG4gICAgICAgICAgICAgICAgICA/IGV2YWxDaGlsZHJlbkRldihjaGlsZHJlbiwgcHJvcHMsIHRoaXMucHJvcHMucGF0aClcbiAgICAgICAgICAgICAgICAgIDogY2hpbGRyZW4ocHJvcHMpXG4gICAgICAgICAgICAgICAgOiBudWxsfVxuICAgICAgICAgICAgPC9Sb3V0ZXJDb250ZXh0LlByb3ZpZGVyPlxuICAgICAgICAgICk7XG4gICAgICAgIH19XG4gICAgICA8L1JvdXRlckNvbnRleHQuQ29uc3VtZXI+XG4gICAgKTtcbiAgfVxufVxuXG5pZiAoX19ERVZfXykge1xuICBSb3V0ZS5wcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMubm9kZV0pLFxuICAgIGNvbXBvbmVudDogKHByb3BzLCBwcm9wTmFtZSkgPT4ge1xuICAgICAgaWYgKHByb3BzW3Byb3BOYW1lXSAmJiAhaXNWYWxpZEVsZW1lbnRUeXBlKHByb3BzW3Byb3BOYW1lXSkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihcbiAgICAgICAgICBgSW52YWxpZCBwcm9wICdjb21wb25lbnQnIHN1cHBsaWVkIHRvICdSb3V0ZSc6IHRoZSBwcm9wIGlzIG5vdCBhIHZhbGlkIFJlYWN0IGNvbXBvbmVudGBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGV4YWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBwYXRoOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICAgIFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc3RyaW5nKVxuICAgIF0pLFxuICAgIHJlbmRlcjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgc2Vuc2l0aXZlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzdHJpY3Q6IFByb3BUeXBlcy5ib29sXG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24oKSB7XG4gICAgd2FybmluZyhcbiAgICAgICEoXG4gICAgICAgIHRoaXMucHJvcHMuY2hpbGRyZW4gJiZcbiAgICAgICAgIWlzRW1wdHlDaGlsZHJlbih0aGlzLnByb3BzLmNoaWxkcmVuKSAmJlxuICAgICAgICB0aGlzLnByb3BzLmNvbXBvbmVudFxuICAgICAgKSxcbiAgICAgIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSBjb21wb25lbnQ+IGFuZCA8Um91dGUgY2hpbGRyZW4+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgY29tcG9uZW50PiB3aWxsIGJlIGlnbm9yZWRcIlxuICAgICk7XG5cbiAgICB3YXJuaW5nKFxuICAgICAgIShcbiAgICAgICAgdGhpcy5wcm9wcy5jaGlsZHJlbiAmJlxuICAgICAgICAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pICYmXG4gICAgICAgIHRoaXMucHJvcHMucmVuZGVyXG4gICAgICApLFxuICAgICAgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIHJlbmRlcj4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZFwiXG4gICAgKTtcblxuICAgIHdhcm5pbmcoXG4gICAgICAhKHRoaXMucHJvcHMuY29tcG9uZW50ICYmIHRoaXMucHJvcHMucmVuZGVyKSxcbiAgICAgIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSBjb21wb25lbnQ+IGFuZCA8Um91dGUgcmVuZGVyPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIHJlbmRlcj4gd2lsbCBiZSBpZ25vcmVkXCJcbiAgICApO1xuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbihwcmV2UHJvcHMpIHtcbiAgICB3YXJuaW5nKFxuICAgICAgISh0aGlzLnByb3BzLmxvY2F0aW9uICYmICFwcmV2UHJvcHMubG9jYXRpb24pLFxuICAgICAgJzxSb3V0ZT4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBpbml0aWFsbHkgdXNlZCBubyBcImxvY2F0aW9uXCIgcHJvcCBhbmQgdGhlbiBwcm92aWRlZCBvbmUgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nXG4gICAgKTtcblxuICAgIHdhcm5pbmcoXG4gICAgICAhKCF0aGlzLnByb3BzLmxvY2F0aW9uICYmIHByZXZQcm9wcy5sb2NhdGlvbiksXG4gICAgICAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIGNvbnRyb2xsZWQgdG8gdW5jb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IHByb3ZpZGVkIGEgXCJsb2NhdGlvblwiIHByb3AgaW5pdGlhbGx5IGJ1dCBvbWl0dGVkIGl0IG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJ1xuICAgICk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJvdXRlO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHsgY3JlYXRlTG9jYXRpb24sIGNyZWF0ZVBhdGggfSBmcm9tIFwiaGlzdG9yeVwiO1xuaW1wb3J0IGludmFyaWFudCBmcm9tIFwidGlueS1pbnZhcmlhbnRcIjtcbmltcG9ydCB3YXJuaW5nIGZyb20gXCJ0aW55LXdhcm5pbmdcIjtcblxuaW1wb3J0IFJvdXRlciBmcm9tIFwiLi9Sb3V0ZXIuanNcIjtcblxuZnVuY3Rpb24gYWRkTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSBcIi9cIiA/IHBhdGggOiBcIi9cIiArIHBhdGg7XG59XG5cbmZ1bmN0aW9uIGFkZEJhc2VuYW1lKGJhc2VuYW1lLCBsb2NhdGlvbikge1xuICBpZiAoIWJhc2VuYW1lKSByZXR1cm4gbG9jYXRpb247XG5cbiAgcmV0dXJuIHtcbiAgICAuLi5sb2NhdGlvbixcbiAgICBwYXRobmFtZTogYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lKSArIGxvY2F0aW9uLnBhdGhuYW1lXG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUoYmFzZW5hbWUsIGxvY2F0aW9uKSB7XG4gIGlmICghYmFzZW5hbWUpIHJldHVybiBsb2NhdGlvbjtcblxuICBjb25zdCBiYXNlID0gYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lKTtcblxuICBpZiAobG9jYXRpb24ucGF0aG5hbWUuaW5kZXhPZihiYXNlKSAhPT0gMCkgcmV0dXJuIGxvY2F0aW9uO1xuXG4gIHJldHVybiB7XG4gICAgLi4ubG9jYXRpb24sXG4gICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lLnN1YnN0cihiYXNlLmxlbmd0aClcbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVVJMKGxvY2F0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgbG9jYXRpb24gPT09IFwic3RyaW5nXCIgPyBsb2NhdGlvbiA6IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xufVxuXG5mdW5jdGlvbiBzdGF0aWNIYW5kbGVyKG1ldGhvZE5hbWUpIHtcbiAgcmV0dXJuICgpID0+IHtcbiAgICBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IGNhbm5vdCAlcyB3aXRoIDxTdGF0aWNSb3V0ZXI+XCIsIG1ldGhvZE5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBub29wKCkge31cblxuLyoqXG4gKiBUaGUgcHVibGljIHRvcC1sZXZlbCBBUEkgZm9yIGEgXCJzdGF0aWNcIiA8Um91dGVyPiwgc28tY2FsbGVkIGJlY2F1c2UgaXRcbiAqIGNhbid0IGFjdHVhbGx5IGNoYW5nZSB0aGUgY3VycmVudCBsb2NhdGlvbi4gSW5zdGVhZCwgaXQganVzdCByZWNvcmRzXG4gKiBsb2NhdGlvbiBjaGFuZ2VzIGluIGEgY29udGV4dCBvYmplY3QuIFVzZWZ1bCBtYWlubHkgaW4gdGVzdGluZyBhbmRcbiAqIHNlcnZlci1yZW5kZXJpbmcgc2NlbmFyaW9zLlxuICovXG5jbGFzcyBTdGF0aWNSb3V0ZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBuYXZpZ2F0ZVRvKGxvY2F0aW9uLCBhY3Rpb24pIHtcbiAgICBjb25zdCB7IGJhc2VuYW1lID0gXCJcIiwgY29udGV4dCA9IHt9IH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnRleHQuYWN0aW9uID0gYWN0aW9uO1xuICAgIGNvbnRleHQubG9jYXRpb24gPSBhZGRCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKTtcbiAgICBjb250ZXh0LnVybCA9IGNyZWF0ZVVSTChjb250ZXh0LmxvY2F0aW9uKTtcbiAgfVxuXG4gIGhhbmRsZVB1c2ggPSBsb2NhdGlvbiA9PiB0aGlzLm5hdmlnYXRlVG8obG9jYXRpb24sIFwiUFVTSFwiKTtcbiAgaGFuZGxlUmVwbGFjZSA9IGxvY2F0aW9uID0+IHRoaXMubmF2aWdhdGVUbyhsb2NhdGlvbiwgXCJSRVBMQUNFXCIpO1xuICBoYW5kbGVMaXN0ZW4gPSAoKSA9PiBub29wO1xuICBoYW5kbGVCbG9jayA9ICgpID0+IG5vb3A7XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgYmFzZW5hbWUgPSBcIlwiLCBjb250ZXh0ID0ge30sIGxvY2F0aW9uID0gXCIvXCIsIC4uLnJlc3QgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBjb25zdCBoaXN0b3J5ID0ge1xuICAgICAgY3JlYXRlSHJlZjogcGF0aCA9PiBhZGRMZWFkaW5nU2xhc2goYmFzZW5hbWUgKyBjcmVhdGVVUkwocGF0aCkpLFxuICAgICAgYWN0aW9uOiBcIlBPUFwiLFxuICAgICAgbG9jYXRpb246IHN0cmlwQmFzZW5hbWUoYmFzZW5hbWUsIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSksXG4gICAgICBwdXNoOiB0aGlzLmhhbmRsZVB1c2gsXG4gICAgICByZXBsYWNlOiB0aGlzLmhhbmRsZVJlcGxhY2UsXG4gICAgICBnbzogc3RhdGljSGFuZGxlcihcImdvXCIpLFxuICAgICAgZ29CYWNrOiBzdGF0aWNIYW5kbGVyKFwiZ29CYWNrXCIpLFxuICAgICAgZ29Gb3J3YXJkOiBzdGF0aWNIYW5kbGVyKFwiZ29Gb3J3YXJkXCIpLFxuICAgICAgbGlzdGVuOiB0aGlzLmhhbmRsZUxpc3RlbixcbiAgICAgIGJsb2NrOiB0aGlzLmhhbmRsZUJsb2NrXG4gICAgfTtcblxuICAgIHJldHVybiA8Um91dGVyIHsuLi5yZXN0fSBoaXN0b3J5PXtoaXN0b3J5fSBzdGF0aWNDb250ZXh0PXtjb250ZXh0fSAvPjtcbiAgfVxufVxuXG5pZiAoX19ERVZfXykge1xuICBTdGF0aWNSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNvbnRleHQ6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgbG9jYXRpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKVxuICB9O1xuXG4gIFN0YXRpY1JvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbigpIHtcbiAgICB3YXJuaW5nKFxuICAgICAgIXRoaXMucHJvcHMuaGlzdG9yeSxcbiAgICAgIFwiPFN0YXRpY1JvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgK1xuICAgICAgICBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IFN0YXRpY1JvdXRlciBhcyBSb3V0ZXIgfWAuXCJcbiAgICApO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBTdGF0aWNSb3V0ZXI7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCJ0aW55LWludmFyaWFudFwiO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSBcInRpbnktd2FybmluZ1wiO1xuXG5pbXBvcnQgUm91dGVyQ29udGV4dCBmcm9tIFwiLi9Sb3V0ZXJDb250ZXh0LmpzXCI7XG5pbXBvcnQgbWF0Y2hQYXRoIGZyb20gXCIuL21hdGNoUGF0aC5qc1wiO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgdGhlIGZpcnN0IDxSb3V0ZT4gdGhhdCBtYXRjaGVzLlxuICovXG5jbGFzcyBTd2l0Y2ggZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxSb3V0ZXJDb250ZXh0LkNvbnN1bWVyPlxuICAgICAgICB7Y29udGV4dCA9PiB7XG4gICAgICAgICAgaW52YXJpYW50KGNvbnRleHQsIFwiWW91IHNob3VsZCBub3QgdXNlIDxTd2l0Y2g+IG91dHNpZGUgYSA8Um91dGVyPlwiKTtcblxuICAgICAgICAgIGNvbnN0IGxvY2F0aW9uID0gdGhpcy5wcm9wcy5sb2NhdGlvbiB8fCBjb250ZXh0LmxvY2F0aW9uO1xuXG4gICAgICAgICAgbGV0IGVsZW1lbnQsIG1hdGNoO1xuXG4gICAgICAgICAgLy8gV2UgdXNlIFJlYWN0LkNoaWxkcmVuLmZvckVhY2ggaW5zdGVhZCBvZiBSZWFjdC5DaGlsZHJlbi50b0FycmF5KCkuZmluZCgpXG4gICAgICAgICAgLy8gaGVyZSBiZWNhdXNlIHRvQXJyYXkgYWRkcyBrZXlzIHRvIGFsbCBjaGlsZCBlbGVtZW50cyBhbmQgd2UgZG8gbm90IHdhbnRcbiAgICAgICAgICAvLyB0byB0cmlnZ2VyIGFuIHVubW91bnQvcmVtb3VudCBmb3IgdHdvIDxSb3V0ZT5zIHRoYXQgcmVuZGVyIHRoZSBzYW1lXG4gICAgICAgICAgLy8gY29tcG9uZW50IGF0IGRpZmZlcmVudCBVUkxzLlxuICAgICAgICAgIFJlYWN0LkNoaWxkcmVuLmZvckVhY2godGhpcy5wcm9wcy5jaGlsZHJlbiwgY2hpbGQgPT4ge1xuICAgICAgICAgICAgaWYgKG1hdGNoID09IG51bGwgJiYgUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICAgICAgICAgIGVsZW1lbnQgPSBjaGlsZDtcblxuICAgICAgICAgICAgICBjb25zdCBwYXRoID0gY2hpbGQucHJvcHMucGF0aCB8fCBjaGlsZC5wcm9wcy5mcm9tO1xuXG4gICAgICAgICAgICAgIG1hdGNoID0gcGF0aFxuICAgICAgICAgICAgICAgID8gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCB7IC4uLmNoaWxkLnByb3BzLCBwYXRoIH0pXG4gICAgICAgICAgICAgICAgOiBjb250ZXh0Lm1hdGNoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgcmV0dXJuIG1hdGNoXG4gICAgICAgICAgICA/IFJlYWN0LmNsb25lRWxlbWVudChlbGVtZW50LCB7IGxvY2F0aW9uLCBjb21wdXRlZE1hdGNoOiBtYXRjaCB9KVxuICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICB9fVxuICAgICAgPC9Sb3V0ZXJDb250ZXh0LkNvbnN1bWVyPlxuICAgICk7XG4gIH1cbn1cblxuaWYgKF9fREVWX18pIHtcbiAgU3dpdGNoLnByb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3RcbiAgfTtcblxuICBTd2l0Y2gucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uKHByZXZQcm9wcykge1xuICAgIHdhcm5pbmcoXG4gICAgICAhKHRoaXMucHJvcHMubG9jYXRpb24gJiYgIXByZXZQcm9wcy5sb2NhdGlvbiksXG4gICAgICAnPFN3aXRjaD4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBpbml0aWFsbHkgdXNlZCBubyBcImxvY2F0aW9uXCIgcHJvcCBhbmQgdGhlbiBwcm92aWRlZCBvbmUgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nXG4gICAgKTtcblxuICAgIHdhcm5pbmcoXG4gICAgICAhKCF0aGlzLnByb3BzLmxvY2F0aW9uICYmIHByZXZQcm9wcy5sb2NhdGlvbiksXG4gICAgICAnPFN3aXRjaD4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSBjb250cm9sbGVkIHRvIHVuY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBwcm92aWRlZCBhIFwibG9jYXRpb25cIiBwcm9wIGluaXRpYWxseSBidXQgb21pdHRlZCBpdCBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLidcbiAgICApO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBTd2l0Y2g7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgaG9pc3RTdGF0aWNzIGZyb20gXCJob2lzdC1ub24tcmVhY3Qtc3RhdGljc1wiO1xuaW1wb3J0IGludmFyaWFudCBmcm9tIFwidGlueS1pbnZhcmlhbnRcIjtcblxuaW1wb3J0IFJvdXRlckNvbnRleHQgZnJvbSBcIi4vUm91dGVyQ29udGV4dC5qc1wiO1xuXG4vKipcbiAqIEEgcHVibGljIGhpZ2hlci1vcmRlciBjb21wb25lbnQgdG8gYWNjZXNzIHRoZSBpbXBlcmF0aXZlIEFQSVxuICovXG5mdW5jdGlvbiB3aXRoUm91dGVyKENvbXBvbmVudCkge1xuICBjb25zdCBkaXNwbGF5TmFtZSA9IGB3aXRoUm91dGVyKCR7Q29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lfSlgO1xuICBjb25zdCBDID0gcHJvcHMgPT4ge1xuICAgIGNvbnN0IHsgd3JhcHBlZENvbXBvbmVudFJlZiwgLi4ucmVtYWluaW5nUHJvcHMgfSA9IHByb3BzO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxSb3V0ZXJDb250ZXh0LkNvbnN1bWVyPlxuICAgICAgICB7Y29udGV4dCA9PiB7XG4gICAgICAgICAgaW52YXJpYW50KFxuICAgICAgICAgICAgY29udGV4dCxcbiAgICAgICAgICAgIGBZb3Ugc2hvdWxkIG5vdCB1c2UgPCR7ZGlzcGxheU5hbWV9IC8+IG91dHNpZGUgYSA8Um91dGVyPmBcbiAgICAgICAgICApO1xuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8Q29tcG9uZW50XG4gICAgICAgICAgICAgIHsuLi5yZW1haW5pbmdQcm9wc31cbiAgICAgICAgICAgICAgey4uLmNvbnRleHR9XG4gICAgICAgICAgICAgIHJlZj17d3JhcHBlZENvbXBvbmVudFJlZn1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKTtcbiAgICAgICAgfX1cbiAgICAgIDwvUm91dGVyQ29udGV4dC5Db25zdW1lcj5cbiAgICApO1xuICB9O1xuXG4gIEMuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgQy5XcmFwcGVkQ29tcG9uZW50ID0gQ29tcG9uZW50O1xuXG4gIGlmIChfX0RFVl9fKSB7XG4gICAgQy5wcm9wVHlwZXMgPSB7XG4gICAgICB3cmFwcGVkQ29tcG9uZW50UmVmOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICAgICAgUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgUHJvcFR5cGVzLmZ1bmMsXG4gICAgICAgIFByb3BUeXBlcy5vYmplY3RcbiAgICAgIF0pXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBob2lzdFN0YXRpY3MoQywgQ29tcG9uZW50KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgd2l0aFJvdXRlcjtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcInRpbnktaW52YXJpYW50XCI7XG5cbmltcG9ydCBSb3V0ZXJDb250ZXh0IGZyb20gXCIuL1JvdXRlckNvbnRleHQuanNcIjtcbmltcG9ydCBIaXN0b3J5Q29udGV4dCBmcm9tIFwiLi9IaXN0b3J5Q29udGV4dC5qc1wiO1xuaW1wb3J0IG1hdGNoUGF0aCBmcm9tIFwiLi9tYXRjaFBhdGguanNcIjtcblxuY29uc3QgdXNlQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQ7XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VIaXN0b3J5KCkge1xuICBpZiAoX19ERVZfXykge1xuICAgIGludmFyaWFudChcbiAgICAgIHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIsXG4gICAgICBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VIaXN0b3J5KClcIlxuICAgICk7XG4gIH1cblxuICByZXR1cm4gdXNlQ29udGV4dChIaXN0b3J5Q29udGV4dCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VMb2NhdGlvbigpIHtcbiAgaWYgKF9fREVWX18pIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICB0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiLFxuICAgICAgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlTG9jYXRpb24oKVwiXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiB1c2VDb250ZXh0KFJvdXRlckNvbnRleHQpLmxvY2F0aW9uO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXNlUGFyYW1zKCkge1xuICBpZiAoX19ERVZfXykge1xuICAgIGludmFyaWFudChcbiAgICAgIHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIsXG4gICAgICBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VQYXJhbXMoKVwiXG4gICAgKTtcbiAgfVxuXG4gIGNvbnN0IG1hdGNoID0gdXNlQ29udGV4dChSb3V0ZXJDb250ZXh0KS5tYXRjaDtcbiAgcmV0dXJuIG1hdGNoID8gbWF0Y2gucGFyYW1zIDoge307XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VSb3V0ZU1hdGNoKHBhdGgpIHtcbiAgaWYgKF9fREVWX18pIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICB0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiLFxuICAgICAgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlUm91dGVNYXRjaCgpXCJcbiAgICApO1xuICB9XG5cbiAgY29uc3QgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICBjb25zdCBtYXRjaCA9IHVzZUNvbnRleHQoUm91dGVyQ29udGV4dCkubWF0Y2g7XG4gIHJldHVybiBwYXRoID8gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCBwYXRoKSA6IG1hdGNoO1xufVxuIiwiaWYgKF9fREVWX18pIHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjb25zdCBnbG9iYWwgPSB3aW5kb3c7XG4gICAgY29uc3Qga2V5ID0gXCJfX3JlYWN0X3JvdXRlcl9idWlsZF9fXCI7XG4gICAgY29uc3QgYnVpbGROYW1lcyA9IHsgY2pzOiBcIkNvbW1vbkpTXCIsIGVzbTogXCJFUyBtb2R1bGVzXCIsIHVtZDogXCJVTURcIiB9O1xuXG4gICAgaWYgKGdsb2JhbFtrZXldICYmIGdsb2JhbFtrZXldICE9PSBwcm9jZXNzLmVudi5CVUlMRF9GT1JNQVQpIHtcbiAgICAgIGNvbnN0IGluaXRpYWxCdWlsZE5hbWUgPSBidWlsZE5hbWVzW2dsb2JhbFtrZXldXTtcbiAgICAgIGNvbnN0IHNlY29uZGFyeUJ1aWxkTmFtZSA9IGJ1aWxkTmFtZXNbcHJvY2Vzcy5lbnYuQlVJTERfRk9STUFUXTtcblxuICAgICAgLy8gVE9ETzogQWRkIGxpbmsgdG8gYXJ0aWNsZSB0aGF0IGV4cGxhaW5zIGluIGRldGFpbCBob3cgdG8gYXZvaWRcbiAgICAgIC8vIGxvYWRpbmcgMiBkaWZmZXJlbnQgYnVpbGRzLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgWW91IGFyZSBsb2FkaW5nIHRoZSAke3NlY29uZGFyeUJ1aWxkTmFtZX0gYnVpbGQgb2YgUmVhY3QgUm91dGVyIGAgK1xuICAgICAgICAgIGBvbiBhIHBhZ2UgdGhhdCBpcyBhbHJlYWR5IHJ1bm5pbmcgdGhlICR7aW5pdGlhbEJ1aWxkTmFtZX0gYCArXG4gICAgICAgICAgYGJ1aWxkLCBzbyB0aGluZ3Mgd29uJ3Qgd29yayByaWdodC5gXG4gICAgICApO1xuICAgIH1cblxuICAgIGdsb2JhbFtrZXldID0gcHJvY2Vzcy5lbnYuQlVJTERfRk9STUFUO1xuICB9XG59XG5cbmV4cG9ydCB7IGRlZmF1bHQgYXMgTWVtb3J5Um91dGVyIH0gZnJvbSBcIi4vTWVtb3J5Um91dGVyLmpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFByb21wdCB9IGZyb20gXCIuL1Byb21wdC5qc1wiO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBSZWRpcmVjdCB9IGZyb20gXCIuL1JlZGlyZWN0LmpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFJvdXRlIH0gZnJvbSBcIi4vUm91dGUuanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgUm91dGVyIH0gZnJvbSBcIi4vUm91dGVyLmpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFN0YXRpY1JvdXRlciB9IGZyb20gXCIuL1N0YXRpY1JvdXRlci5qc1wiO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBTd2l0Y2ggfSBmcm9tIFwiLi9Td2l0Y2guanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZ2VuZXJhdGVQYXRoIH0gZnJvbSBcIi4vZ2VuZXJhdGVQYXRoLmpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIG1hdGNoUGF0aCB9IGZyb20gXCIuL21hdGNoUGF0aC5qc1wiO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB3aXRoUm91dGVyIH0gZnJvbSBcIi4vd2l0aFJvdXRlci5qc1wiO1xuXG5leHBvcnQgeyBkZWZhdWx0IGFzIF9fSGlzdG9yeUNvbnRleHQgfSBmcm9tIFwiLi9IaXN0b3J5Q29udGV4dC5qc1wiO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBfX1JvdXRlckNvbnRleHQgfSBmcm9tIFwiLi9Sb3V0ZXJDb250ZXh0LmpzXCI7XG5cbmV4cG9ydCB7IHVzZUhpc3RvcnksIHVzZUxvY2F0aW9uLCB1c2VQYXJhbXMsIHVzZVJvdXRlTWF0Y2ggfSBmcm9tIFwiLi9ob29rcy5qc1wiO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgUm91dGVyIH0gZnJvbSBcInJlYWN0LXJvdXRlclwiO1xuaW1wb3J0IHsgY3JlYXRlQnJvd3Nlckhpc3RvcnkgYXMgY3JlYXRlSGlzdG9yeSB9IGZyb20gXCJoaXN0b3J5XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgd2FybmluZyBmcm9tIFwidGlueS13YXJuaW5nXCI7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIGEgPFJvdXRlcj4gdGhhdCB1c2VzIEhUTUw1IGhpc3RvcnkuXG4gKi9cbmNsYXNzIEJyb3dzZXJSb3V0ZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBoaXN0b3J5ID0gY3JlYXRlSGlzdG9yeSh0aGlzLnByb3BzKTtcblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIDxSb3V0ZXIgaGlzdG9yeT17dGhpcy5oaXN0b3J5fSBjaGlsZHJlbj17dGhpcy5wcm9wcy5jaGlsZHJlbn0gLz47XG4gIH1cbn1cblxuaWYgKF9fREVWX18pIHtcbiAgQnJvd3NlclJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGZvcmNlUmVmcmVzaDogUHJvcFR5cGVzLmJvb2wsXG4gICAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAga2V5TGVuZ3RoOiBQcm9wVHlwZXMubnVtYmVyXG4gIH07XG5cbiAgQnJvd3NlclJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbigpIHtcbiAgICB3YXJuaW5nKFxuICAgICAgIXRoaXMucHJvcHMuaGlzdG9yeSxcbiAgICAgIFwiPEJyb3dzZXJSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICtcbiAgICAgICAgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBCcm93c2VyUm91dGVyIGFzIFJvdXRlciB9YC5cIlxuICAgICk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IEJyb3dzZXJSb3V0ZXI7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tIFwicmVhY3Qtcm91dGVyXCI7XG5pbXBvcnQgeyBjcmVhdGVIYXNoSGlzdG9yeSBhcyBjcmVhdGVIaXN0b3J5IH0gZnJvbSBcImhpc3RvcnlcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCB3YXJuaW5nIGZyb20gXCJ0aW55LXdhcm5pbmdcIjtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHVzZXMgd2luZG93LmxvY2F0aW9uLmhhc2guXG4gKi9cbmNsYXNzIEhhc2hSb3V0ZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBoaXN0b3J5ID0gY3JlYXRlSGlzdG9yeSh0aGlzLnByb3BzKTtcblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIDxSb3V0ZXIgaGlzdG9yeT17dGhpcy5oaXN0b3J5fSBjaGlsZHJlbj17dGhpcy5wcm9wcy5jaGlsZHJlbn0gLz47XG4gIH1cbn1cblxuaWYgKF9fREVWX18pIHtcbiAgSGFzaFJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICAgIGhhc2hUeXBlOiBQcm9wVHlwZXMub25lT2YoW1wiaGFzaGJhbmdcIiwgXCJub3NsYXNoXCIsIFwic2xhc2hcIl0pXG4gIH07XG5cbiAgSGFzaFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbigpIHtcbiAgICB3YXJuaW5nKFxuICAgICAgIXRoaXMucHJvcHMuaGlzdG9yeSxcbiAgICAgIFwiPEhhc2hSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICtcbiAgICAgICAgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBIYXNoUm91dGVyIGFzIFJvdXRlciB9YC5cIlxuICAgICk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IEhhc2hSb3V0ZXI7XG4iLCJpbXBvcnQgeyBjcmVhdGVMb2NhdGlvbiB9IGZyb20gXCJoaXN0b3J5XCI7XG5cbmV4cG9ydCBjb25zdCByZXNvbHZlVG9Mb2NhdGlvbiA9ICh0bywgY3VycmVudExvY2F0aW9uKSA9PlxuICB0eXBlb2YgdG8gPT09IFwiZnVuY3Rpb25cIiA/IHRvKGN1cnJlbnRMb2NhdGlvbikgOiB0bztcblxuZXhwb3J0IGNvbnN0IG5vcm1hbGl6ZVRvTG9jYXRpb24gPSAodG8sIGN1cnJlbnRMb2NhdGlvbikgPT4ge1xuICByZXR1cm4gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiXG4gICAgPyBjcmVhdGVMb2NhdGlvbih0bywgbnVsbCwgbnVsbCwgY3VycmVudExvY2F0aW9uKVxuICAgIDogdG87XG59O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgX19Sb3V0ZXJDb250ZXh0IGFzIFJvdXRlckNvbnRleHQgfSBmcm9tIFwicmVhY3Qtcm91dGVyXCI7XG5pbXBvcnQgeyBjcmVhdGVQYXRoIH0gZnJvbSAnaGlzdG9yeSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCJ0aW55LWludmFyaWFudFwiO1xuaW1wb3J0IHtcbiAgcmVzb2x2ZVRvTG9jYXRpb24sXG4gIG5vcm1hbGl6ZVRvTG9jYXRpb25cbn0gZnJvbSBcIi4vdXRpbHMvbG9jYXRpb25VdGlscy5qc1wiO1xuXG4vLyBSZWFjdCAxNSBjb21wYXRcbmNvbnN0IGZvcndhcmRSZWZTaGltID0gQyA9PiBDO1xubGV0IHsgZm9yd2FyZFJlZiB9ID0gUmVhY3Q7XG5pZiAodHlwZW9mIGZvcndhcmRSZWYgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgZm9yd2FyZFJlZiA9IGZvcndhcmRSZWZTaGltO1xufVxuXG5mdW5jdGlvbiBpc01vZGlmaWVkRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuICEhKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuYWx0S2V5IHx8IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQuc2hpZnRLZXkpO1xufVxuXG5jb25zdCBMaW5rQW5jaG9yID0gZm9yd2FyZFJlZihcbiAgKFxuICAgIHtcbiAgICAgIGlubmVyUmVmLCAvLyBUT0RPOiBkZXByZWNhdGVcbiAgICAgIG5hdmlnYXRlLFxuICAgICAgb25DbGljayxcbiAgICAgIC4uLnJlc3RcbiAgICB9LFxuICAgIGZvcndhcmRlZFJlZlxuICApID0+IHtcbiAgICBjb25zdCB7IHRhcmdldCB9ID0gcmVzdDtcblxuICAgIGxldCBwcm9wcyA9IHtcbiAgICAgIC4uLnJlc3QsXG4gICAgICBvbkNsaWNrOiBldmVudCA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKG9uQ2xpY2spIG9uQ2xpY2soZXZlbnQpO1xuICAgICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgdGhyb3cgZXg7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXG4gICAgICAgICAgIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgJiYgLy8gb25DbGljayBwcmV2ZW50ZWQgZGVmYXVsdFxuICAgICAgICAgIGV2ZW50LmJ1dHRvbiA9PT0gMCAmJiAvLyBpZ25vcmUgZXZlcnl0aGluZyBidXQgbGVmdCBjbGlja3NcbiAgICAgICAgICAoIXRhcmdldCB8fCB0YXJnZXQgPT09IFwiX3NlbGZcIikgJiYgLy8gbGV0IGJyb3dzZXIgaGFuZGxlIFwidGFyZ2V0PV9ibGFua1wiIGV0Yy5cbiAgICAgICAgICAhaXNNb2RpZmllZEV2ZW50KGV2ZW50KSAvLyBpZ25vcmUgY2xpY2tzIHdpdGggbW9kaWZpZXIga2V5c1xuICAgICAgICApIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIG5hdmlnYXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gUmVhY3QgMTUgY29tcGF0XG4gICAgaWYgKGZvcndhcmRSZWZTaGltICE9PSBmb3J3YXJkUmVmKSB7XG4gICAgICBwcm9wcy5yZWYgPSBmb3J3YXJkZWRSZWYgfHwgaW5uZXJSZWY7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb3BzLnJlZiA9IGlubmVyUmVmO1xuICAgIH1cblxuICAgIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqc3gtYTExeS9hbmNob3ItaGFzLWNvbnRlbnQgKi9cbiAgICByZXR1cm4gPGEgey4uLnByb3BzfSAvPjtcbiAgfVxuKTtcblxuaWYgKF9fREVWX18pIHtcbiAgTGlua0FuY2hvci5kaXNwbGF5TmFtZSA9IFwiTGlua0FuY2hvclwiO1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgYSBoaXN0b3J5LWF3YXJlIDxhPi5cbiAqL1xuY29uc3QgTGluayA9IGZvcndhcmRSZWYoXG4gIChcbiAgICB7XG4gICAgICBjb21wb25lbnQgPSBMaW5rQW5jaG9yLFxuICAgICAgcmVwbGFjZSxcbiAgICAgIHRvLFxuICAgICAgaW5uZXJSZWYsIC8vIFRPRE86IGRlcHJlY2F0ZVxuICAgICAgLi4ucmVzdFxuICAgIH0sXG4gICAgZm9yd2FyZGVkUmVmXG4gICkgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICA8Um91dGVyQ29udGV4dC5Db25zdW1lcj5cbiAgICAgICAge2NvbnRleHQgPT4ge1xuICAgICAgICAgIGludmFyaWFudChjb250ZXh0LCBcIllvdSBzaG91bGQgbm90IHVzZSA8TGluaz4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpO1xuXG4gICAgICAgICAgY29uc3QgeyBoaXN0b3J5IH0gPSBjb250ZXh0O1xuXG4gICAgICAgICAgY29uc3QgbG9jYXRpb24gPSBub3JtYWxpemVUb0xvY2F0aW9uKFxuICAgICAgICAgICAgcmVzb2x2ZVRvTG9jYXRpb24odG8sIGNvbnRleHQubG9jYXRpb24pLFxuICAgICAgICAgICAgY29udGV4dC5sb2NhdGlvblxuICAgICAgICAgICk7XG5cbiAgICAgICAgICBjb25zdCBocmVmID0gbG9jYXRpb24gPyBoaXN0b3J5LmNyZWF0ZUhyZWYobG9jYXRpb24pIDogXCJcIjtcbiAgICAgICAgICBjb25zdCBwcm9wcyA9IHtcbiAgICAgICAgICAgIC4uLnJlc3QsXG4gICAgICAgICAgICBocmVmLFxuICAgICAgICAgICAgbmF2aWdhdGUoKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGxvY2F0aW9uID0gcmVzb2x2ZVRvTG9jYXRpb24odG8sIGNvbnRleHQubG9jYXRpb24pO1xuICAgICAgICAgICAgICBjb25zdCBpc0R1cGxpY2F0ZU5hdmlnYXRpb24gPSBjcmVhdGVQYXRoKGNvbnRleHQubG9jYXRpb24pID09PSBjcmVhdGVQYXRoKG5vcm1hbGl6ZVRvTG9jYXRpb24obG9jYXRpb24pKTtcbiAgICAgICAgICAgICAgY29uc3QgbWV0aG9kID0gKHJlcGxhY2UgfHwgaXNEdXBsaWNhdGVOYXZpZ2F0aW9uKSA/IGhpc3RvcnkucmVwbGFjZSA6IGhpc3RvcnkucHVzaDtcblxuICAgICAgICAgICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG5cbiAgICAgICAgICAvLyBSZWFjdCAxNSBjb21wYXRcbiAgICAgICAgICBpZiAoZm9yd2FyZFJlZlNoaW0gIT09IGZvcndhcmRSZWYpIHtcbiAgICAgICAgICAgIHByb3BzLnJlZiA9IGZvcndhcmRlZFJlZiB8fCBpbm5lclJlZjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJvcHMuaW5uZXJSZWYgPSBpbm5lclJlZjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb21wb25lbnQsIHByb3BzKTtcbiAgICAgICAgfX1cbiAgICAgIDwvUm91dGVyQ29udGV4dC5Db25zdW1lcj5cbiAgICApO1xuICB9XG4pO1xuXG5pZiAoX19ERVZfXykge1xuICBjb25zdCB0b1R5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIFByb3BUeXBlcy5vYmplY3QsXG4gICAgUHJvcFR5cGVzLmZ1bmNcbiAgXSk7XG4gIGNvbnN0IHJlZlR5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIFByb3BUeXBlcy5mdW5jLFxuICAgIFByb3BUeXBlcy5zaGFwZSh7IGN1cnJlbnQ6IFByb3BUeXBlcy5hbnkgfSlcbiAgXSk7XG5cbiAgTGluay5kaXNwbGF5TmFtZSA9IFwiTGlua1wiO1xuXG4gIExpbmsucHJvcFR5cGVzID0ge1xuICAgIGlubmVyUmVmOiByZWZUeXBlLFxuICAgIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICAgIHJlcGxhY2U6IFByb3BUeXBlcy5ib29sLFxuICAgIHRhcmdldDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0bzogdG9UeXBlLmlzUmVxdWlyZWRcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgTGluaztcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IF9fUm91dGVyQ29udGV4dCBhcyBSb3V0ZXJDb250ZXh0LCBtYXRjaFBhdGggfSBmcm9tIFwicmVhY3Qtcm91dGVyXCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCJ0aW55LWludmFyaWFudFwiO1xuaW1wb3J0IExpbmsgZnJvbSBcIi4vTGluay5qc1wiO1xuaW1wb3J0IHtcbiAgcmVzb2x2ZVRvTG9jYXRpb24sXG4gIG5vcm1hbGl6ZVRvTG9jYXRpb25cbn0gZnJvbSBcIi4vdXRpbHMvbG9jYXRpb25VdGlscy5qc1wiO1xuXG4vLyBSZWFjdCAxNSBjb21wYXRcbmNvbnN0IGZvcndhcmRSZWZTaGltID0gQyA9PiBDO1xubGV0IHsgZm9yd2FyZFJlZiB9ID0gUmVhY3Q7XG5pZiAodHlwZW9mIGZvcndhcmRSZWYgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgZm9yd2FyZFJlZiA9IGZvcndhcmRSZWZTaGltO1xufVxuXG5mdW5jdGlvbiBqb2luQ2xhc3NuYW1lcyguLi5jbGFzc25hbWVzKSB7XG4gIHJldHVybiBjbGFzc25hbWVzLmZpbHRlcihpID0+IGkpLmpvaW4oXCIgXCIpO1xufVxuXG4vKipcbiAqIEEgPExpbms+IHdyYXBwZXIgdGhhdCBrbm93cyBpZiBpdCdzIFwiYWN0aXZlXCIgb3Igbm90LlxuICovXG5jb25zdCBOYXZMaW5rID0gZm9yd2FyZFJlZihcbiAgKFxuICAgIHtcbiAgICAgIFwiYXJpYS1jdXJyZW50XCI6IGFyaWFDdXJyZW50ID0gXCJwYWdlXCIsXG4gICAgICBhY3RpdmVDbGFzc05hbWUgPSBcImFjdGl2ZVwiLCAvLyBUT0RPOiBkZXByZWNhdGVcbiAgICAgIGFjdGl2ZVN0eWxlLCAvLyBUT0RPOiBkZXByZWNhdGVcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lUHJvcCxcbiAgICAgIGV4YWN0LFxuICAgICAgaXNBY3RpdmU6IGlzQWN0aXZlUHJvcCxcbiAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblByb3AsXG4gICAgICBzZW5zaXRpdmUsXG4gICAgICBzdHJpY3QsXG4gICAgICBzdHlsZTogc3R5bGVQcm9wLFxuICAgICAgdG8sXG4gICAgICBpbm5lclJlZiwgLy8gVE9ETzogZGVwcmVjYXRlXG4gICAgICAuLi5yZXN0XG4gICAgfSxcbiAgICBmb3J3YXJkZWRSZWZcbiAgKSA9PiB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxSb3V0ZXJDb250ZXh0LkNvbnN1bWVyPlxuICAgICAgICB7Y29udGV4dCA9PiB7XG4gICAgICAgICAgaW52YXJpYW50KGNvbnRleHQsIFwiWW91IHNob3VsZCBub3QgdXNlIDxOYXZMaW5rPiBvdXRzaWRlIGEgPFJvdXRlcj5cIik7XG5cbiAgICAgICAgICBjb25zdCBjdXJyZW50TG9jYXRpb24gPSBsb2NhdGlvblByb3AgfHwgY29udGV4dC5sb2NhdGlvbjtcbiAgICAgICAgICBjb25zdCB0b0xvY2F0aW9uID0gbm9ybWFsaXplVG9Mb2NhdGlvbihcbiAgICAgICAgICAgIHJlc29sdmVUb0xvY2F0aW9uKHRvLCBjdXJyZW50TG9jYXRpb24pLFxuICAgICAgICAgICAgY3VycmVudExvY2F0aW9uXG4gICAgICAgICAgKTtcbiAgICAgICAgICBjb25zdCB7IHBhdGhuYW1lOiBwYXRoIH0gPSB0b0xvY2F0aW9uO1xuICAgICAgICAgIC8vIFJlZ2V4IHRha2VuIGZyb206IGh0dHBzOi8vZ2l0aHViLmNvbS9waWxsYXJqcy9wYXRoLXRvLXJlZ2V4cC9ibG9iL21hc3Rlci9pbmRleC5qcyNMMjAyXG4gICAgICAgICAgY29uc3QgZXNjYXBlZFBhdGggPVxuICAgICAgICAgICAgcGF0aCAmJiBwYXRoLnJlcGxhY2UoLyhbLisqPz1eIToke30oKVtcXF18L1xcXFxdKS9nLCBcIlxcXFwkMVwiKTtcblxuICAgICAgICAgIGNvbnN0IG1hdGNoID0gZXNjYXBlZFBhdGhcbiAgICAgICAgICAgID8gbWF0Y2hQYXRoKGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZSwge1xuICAgICAgICAgICAgICAgIHBhdGg6IGVzY2FwZWRQYXRoLFxuICAgICAgICAgICAgICAgIGV4YWN0LFxuICAgICAgICAgICAgICAgIHNlbnNpdGl2ZSxcbiAgICAgICAgICAgICAgICBzdHJpY3RcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgICBjb25zdCBpc0FjdGl2ZSA9ICEhKGlzQWN0aXZlUHJvcFxuICAgICAgICAgICAgPyBpc0FjdGl2ZVByb3AobWF0Y2gsIGN1cnJlbnRMb2NhdGlvbilcbiAgICAgICAgICAgIDogbWF0Y2gpO1xuXG4gICAgICAgICAgbGV0IGNsYXNzTmFtZSA9XG4gICAgICAgICAgICB0eXBlb2YgY2xhc3NOYW1lUHJvcCA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgICAgID8gY2xhc3NOYW1lUHJvcChpc0FjdGl2ZSlcbiAgICAgICAgICAgICAgOiBjbGFzc05hbWVQcm9wO1xuXG4gICAgICAgICAgbGV0IHN0eWxlID1cbiAgICAgICAgICAgIHR5cGVvZiBzdHlsZVByb3AgPT09IFwiZnVuY3Rpb25cIiA/IHN0eWxlUHJvcChpc0FjdGl2ZSkgOiBzdHlsZVByb3A7XG5cbiAgICAgICAgICBpZiAoaXNBY3RpdmUpIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZSA9IGpvaW5DbGFzc25hbWVzKGNsYXNzTmFtZSwgYWN0aXZlQ2xhc3NOYW1lKTtcbiAgICAgICAgICAgIHN0eWxlID0geyAuLi5zdHlsZSwgLi4uYWN0aXZlU3R5bGUgfTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBwcm9wcyA9IHtcbiAgICAgICAgICAgIFwiYXJpYS1jdXJyZW50XCI6IChpc0FjdGl2ZSAmJiBhcmlhQ3VycmVudCkgfHwgbnVsbCxcbiAgICAgICAgICAgIGNsYXNzTmFtZSxcbiAgICAgICAgICAgIHN0eWxlLFxuICAgICAgICAgICAgdG86IHRvTG9jYXRpb24sXG4gICAgICAgICAgICAuLi5yZXN0XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIC8vIFJlYWN0IDE1IGNvbXBhdFxuICAgICAgICAgIGlmIChmb3J3YXJkUmVmU2hpbSAhPT0gZm9yd2FyZFJlZikge1xuICAgICAgICAgICAgcHJvcHMucmVmID0gZm9yd2FyZGVkUmVmIHx8IGlubmVyUmVmO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwcm9wcy5pbm5lclJlZiA9IGlubmVyUmVmO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiA8TGluayB7Li4ucHJvcHN9IC8+O1xuICAgICAgICB9fVxuICAgICAgPC9Sb3V0ZXJDb250ZXh0LkNvbnN1bWVyPlxuICAgICk7XG4gIH1cbik7XG5cbmlmIChfX0RFVl9fKSB7XG4gIE5hdkxpbmsuZGlzcGxheU5hbWUgPSBcIk5hdkxpbmtcIjtcblxuICBjb25zdCBhcmlhQ3VycmVudFR5cGUgPSBQcm9wVHlwZXMub25lT2YoW1xuICAgIFwicGFnZVwiLFxuICAgIFwic3RlcFwiLFxuICAgIFwibG9jYXRpb25cIixcbiAgICBcImRhdGVcIixcbiAgICBcInRpbWVcIixcbiAgICBcInRydWVcIixcbiAgICBcImZhbHNlXCJcbiAgXSk7XG5cbiAgTmF2TGluay5wcm9wVHlwZXMgPSB7XG4gICAgLi4uTGluay5wcm9wVHlwZXMsXG4gICAgXCJhcmlhLWN1cnJlbnRcIjogYXJpYUN1cnJlbnRUeXBlLFxuICAgIGFjdGl2ZUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBhY3RpdmVTdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBjbGFzc05hbWU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5mdW5jXSksXG4gICAgZXhhY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIGlzQWN0aXZlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBzZW5zaXRpdmU6IFByb3BUeXBlcy5ib29sLFxuICAgIHN0cmljdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgc3R5bGU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5mdW5jXSlcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgTmF2TGluaztcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMF0udXNlWzFdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1swXS51c2VbMl0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vUmVwb1RpbGUubW9kdWxlLnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1swXS51c2VbMV0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsyXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9SZXBvVGlsZS5tb2R1bGUuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuXHJcbmltcG9ydCBzdHlsZXMgZnJvbSBcIi4uL1JlcG9UaWxlL1JlcG9UaWxlLm1vZHVsZS5zY3NzXCI7XHJcblxyXG50eXBlIEF2YXRhclByb3BzID0ge1xyXG4gIHNyYz86IHN0cmluZztcclxuICBhbHQ6IHN0cmluZztcclxufTtcclxuXHJcbmNvbnN0IEF2YXRhcjogUmVhY3QuRkM8QXZhdGFyUHJvcHM+ID0gKHsgc3JjLCBhbHQgfSkgPT4gKFxyXG4gIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMucmVwb3RpbGVfX2F2YXRhcn0+XHJcbiAgICB7c3JjICYmIDxpbWcgc3JjPXtzcmN9IGFsdD17YWx0fSAvPn1cclxuICAgIHshc3JjICYmIGFsdH1cclxuICA8L2Rpdj5cclxuKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFJlYWN0Lm1lbW8oQXZhdGFyKTtcclxuIiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gXCIuL0F2YXRhclwiO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmNvbnN0IFN0YXJJY29uID0gKCkgPT4gKFxuICA8c3ZnXG4gICAgd2lkdGg9XCIxNFwiXG4gICAgaGVpZ2h0PVwiMTNcIlxuICAgIHZpZXdCb3g9XCIwIDAgMTQgMTNcIlxuICAgIGZpbGw9XCJub25lXCJcbiAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgPlxuICAgIDxwYXRoXG4gICAgICBmaWxsUnVsZT1cImV2ZW5vZGRcIlxuICAgICAgY2xpcFJ1bGU9XCJldmVub2RkXCJcbiAgICAgIGQ9XCJNNi45OTk5OSAwLjIxODc1QzcuMTIyNSAwLjIxODY3MSA3LjI0MjU5IDAuMjUyODg3IDcuMzQ2NjYgMC4zMTc1MjZDNy40NTA3NCAwLjM4MjE2NSA3LjUzNDYzIDAuNDc0NjQ1IDcuNTg4ODcgMC41ODQ1TDkuMjM1NjIgMy45MjI2MkwxMi45MTk0IDQuNDU4MTJDMTMuMDQwNSA0LjQ3NTcyIDEzLjE1NDMgNC41MjY4NiAxMy4yNDggNC42MDU3NUMxMy4zNDE2IDQuNjg0NjUgMTMuNDExMiA0Ljc4ODE2IDEzLjQ0OTEgNC45MDQ1OEMxMy40ODcgNS4wMjEgMTMuNDkxNSA1LjE0NTcgMTMuNDYyMiA1LjI2NDU3QzEzLjQzMjkgNS4zODM0NCAxMy4zNzEgNS40OTE3NSAxMy4yODM0IDUuNTc3MjVMMTAuNjE4MSA4LjE3NkwxMS4yNDcyIDExLjg0NEMxMS4yNjggMTEuOTY0NyAxMS4yNTQ2IDEyLjA4ODggMTEuMjA4NSAxMi4yMDIyQzExLjE2MjQgMTIuMzE1NyAxMS4wODU0IDEyLjQxNCAxMC45ODY0IDEyLjQ4NkMxMC44ODczIDEyLjU1OCAxMC43NzAxIDEyLjYwMDkgMTAuNjQ4IDEyLjYwOTdDMTAuNTI1OCAxMi42MTg2IDEwLjQwMzYgMTIuNTkzMSAxMC4yOTUyIDEyLjUzNjFMNi45OTk5OSAxMC44MDM2TDMuNzA0NzQgMTIuNTM2MUMzLjU5NjQxIDEyLjU5MyAzLjQ3NDMyIDEyLjYxODUgMy4zNTIyOCAxMi42MDk2QzMuMjMwMjQgMTIuNjAwOCAzLjExMzEgMTIuNTU4IDMuMDE0MDkgMTIuNDg2MUMyLjkxNTA4IDEyLjQxNDIgMi44MzgxMyAxMi4zMTYxIDIuNzkxOTUgMTIuMjAyOEMyLjc0NTc3IDEyLjA4OTUgMi43MzIxOSAxMS45NjU1IDIuNzUyNzQgMTEuODQ0OUwzLjM4Mjc0IDguMTc1MTNMMC43MTU3NDEgNS41NzcyNUMwLjYyNzg2MiA1LjQ5MTc4IDAuNTY1Njc4IDUuMzgzNDEgMC41MzYyMzcgNS4yNjQ0MUMwLjUwNjc5NSA1LjE0NTQxIDAuNTExMjczIDUuMDIwNTUgMC41NDkxNjMgNC45MDM5NkMwLjU4NzA1MyA0Ljc4NzM4IDAuNjU2ODM5IDQuNjgzNzQgMC43NTA2MTUgNC42MDQ3OEMwLjg0NDM5MSA0LjUyNTgzIDAuOTU4NDA2IDQuNDc0NzIgMS4wNzk3NCA0LjQ1NzI1TDQuNzYzNDkgMy45MjI2Mkw2LjQxMTEyIDAuNTg0NUM2LjQ2NTM1IDAuNDc0NjQ1IDYuNTQ5MjUgMC4zODIxNjUgNi42NTMzMiAwLjMxNzUyNkM2Ljc1NzM5IDAuMjUyODg3IDYuODc3NDggMC4yMTg2NzEgNi45OTk5OSAwLjIxODc1Wk02Ljk5OTk5IDIuMzU4MTNMNS43ODgxMiA0LjgxMjVDNS43NDEwNSA0LjkwNzc5IDUuNjcxNTYgNC45OTAyMiA1LjU4NTU5IDUuMDUyNzFDNS40OTk2MyA1LjExNTIgNS4zOTk3OCA1LjE1NTg4IDUuMjk0NjIgNS4xNzEyNUwyLjU4NDc0IDUuNTY1TDQuNTQ0NzQgNy40NzZDNC42MjEgNy41NTAyNiA0LjY3ODA1IDcuNjQxOTUgNC43MTA5OCA3Ljc0MzE2QzQuNzQzOSA3Ljg0NDM4IDQuNzUxNzIgNy45NTIwOSA0LjczMzc0IDguMDU3TDQuMjcxNzQgMTAuNzU1NUw2LjY5NDYyIDkuNDgxNUM2Ljc4ODc5IDkuNDMxOTkgNi44OTM1OSA5LjQwNjEyIDYuOTk5OTkgOS40MDYxMkM3LjEwNjM5IDkuNDA2MTIgNy4yMTExOSA5LjQzMTk5IDcuMzA1MzcgOS40ODE1TDkuNzI5MTIgMTAuNzU1NUw5LjI2NTM3IDguMDU3QzkuMjQ3MzkgNy45NTIwOSA5LjI1NTIgNy44NDQzOCA5LjI4ODEzIDcuNzQzMTZDOS4zMjEwNiA3LjY0MTk1IDkuMzc4MTEgNy41NTAyNiA5LjQ1NDM3IDcuNDc2TDExLjQxNDQgNS41NjU4OEw4LjcwNTM3IDUuMTcyMTJDOC42MDAyMSA1LjE1Njc2IDguNTAwMzUgNS4xMTYwOCA4LjQxNDM5IDUuMDUzNTlDOC4zMjg0MyA0Ljk5MTEgOC4yNTg5MyA0LjkwODY2IDguMjExODcgNC44MTMzN0w2Ljk5OTk5IDIuMzU3MjVWMi4zNTgxM1pcIlxuICAgICAgZmlsbD1cIiNGRjk0MzJcIlxuICAgIC8+XG4gIDwvc3ZnPlxuKTtcblxuZXhwb3J0IGRlZmF1bHQgUmVhY3QubWVtbyhTdGFySWNvbik7XG4iLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSBcIi4vU3Rhckljb25cIjtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuXHJcbmltcG9ydCBBdmF0YXIgZnJvbSBcImNvbXBvbmVudHMvQXZhdGFyXCI7XHJcbmltcG9ydCBTdGFySWNvbiBmcm9tIFwiY29tcG9uZW50cy9TdGFySWNvblwiO1xyXG5pbXBvcnQgeyBSZXBvSXRlbU1vZGVsIH0gZnJvbSBcInN0b3JlL21vZGVscy9naXRIdWJcIjtcclxuXHJcbmltcG9ydCBzdHlsZXMgZnJvbSBcIi4vUmVwb1RpbGUubW9kdWxlLnNjc3NcIjtcclxuXHJcbmV4cG9ydCB0eXBlIFJlcG9UaWxlUHJvcHMgPSB7XHJcbiAgaXRlbTogUmVwb0l0ZW1Nb2RlbDtcclxuICBvbkNsaWNrOiAoZTogUmVhY3QuTW91c2VFdmVudCkgPT4gdm9pZDtcclxufTtcclxuXHJcbmNvbnN0IFJlcG9UaWxlOiBSZWFjdC5GQzxSZXBvVGlsZVByb3BzPiA9ICh7IGl0ZW0sIG9uQ2xpY2sgfSkgPT4ge1xyXG4gIGNvbnN0IHJlcG9MaW5rID0gYGh0dHBzOi8vZ2l0aHViLmNvbS8ke2l0ZW0ub3duZXIubG9naW59YDtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMucmVwb3RpbGV9PlxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLnJlcG90aWxlX19jb250ZW50fSBvbkNsaWNrPXtvbkNsaWNrfT5cclxuICAgICAgICA8QXZhdGFyIHNyYz17aXRlbS5vd25lci5hdmF0YXJVcmx9IGFsdD17aXRlbS5uYW1lWzBdfSAvPlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMucmVwb3RpbGVfX2luZm99PlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5yZXBvdGlsZV9faGVhZGluZ30+e2l0ZW0ubmFtZX08L2Rpdj5cclxuICAgICAgICAgIDxhXHJcbiAgICAgICAgICAgIGNsYXNzTmFtZT17c3R5bGVzLnJlcG90aWxlX19vcmdMaW5rfVxyXG4gICAgICAgICAgICBocmVmPXtyZXBvTGlua31cclxuICAgICAgICAgICAgdGFyZ2V0PXtcIl9ibGFua1wifVxyXG4gICAgICAgICAgICByZWw9e1wibm9yZWZlcnJlclwifVxyXG4gICAgICAgICAgPlxyXG4gICAgICAgICAgICB7aXRlbS5vd25lci5sb2dpbn1cclxuICAgICAgICAgIDwvYT5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMucmVwb3RpbGVfX3N0YXRzfT5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5yZXBvdGlsZV9fc3RhdHNfX3N0YXJzfT5cclxuICAgICAgICAgICAgICA8U3Rhckljb24gLz5cclxuICAgICAgICAgICAgICB7aXRlbS5zdGFyZ2F6ZXJzQ291bnR9XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2PlVwZGF0ZWQge2l0ZW0udXBkYXRlZEF0LnN1YnN0cigwLCAxMCl9PC9kaXY+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgUmVwb1RpbGU7XHJcbiIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tIFwiLi9SZXBvVGlsZVwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9SZXBvVGlsZVwiO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcblxyXG5pbXBvcnQgeyB1c2VSZXBvc0xpc3RDb250ZXh0IH0gZnJvbSBcImNvbXBvbmVudHMvUmVwb3NDb250ZXh0L1JlcG9zQ29udGV4dFwiO1xyXG5pbXBvcnQgUmVwb1RpbGUgZnJvbSBcImNvbXBvbmVudHMvUmVwb1RpbGVcIjtcclxuaW1wb3J0IHN0eWxlcyBmcm9tIFwiY29tcG9uZW50cy9SZXBvVGlsZS9SZXBvVGlsZS5tb2R1bGUuc2Nzc1wiO1xyXG5pbXBvcnQgeyBSZXBvSXRlbU1vZGVsIH0gZnJvbSBcIm1vZGVscy9naXRIdWJcIjtcclxuaW1wb3J0IHsgTGluayB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcblxyXG50eXBlIFJlcG9zTGlzdFBhZ2VQcm9wcyA9IHtcclxuICBsaXN0OiBSZXBvSXRlbU1vZGVsW107XHJcbn07XHJcblxyXG5jb25zdCBSZXBvc0xpc3RQYWdlOiBSZWFjdC5GQzxSZXBvc0xpc3RQYWdlUHJvcHM+ID0gKHsgbGlzdCB9KSA9PiB7XHJcbiAgY29uc3QgY29udGV4dCA9IHVzZVJlcG9zTGlzdENvbnRleHQoKTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXY+XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMubGlzdH0+XHJcbiAgICAgICAge2NvbnRleHQucmVwb3NMaXN0U3RvcmU/Lmxpc3QubWFwKChyZXBvKSA9PiAoXHJcbiAgICAgICAgICA8ZGl2IGtleT17cmVwby5pZH0+XHJcbiAgICAgICAgICAgIDxMaW5rIHRvPXtgL3JlcG9zLyR7cmVwby5pZH1gfT5cclxuICAgICAgICAgICAgICA8UmVwb1RpbGUgb25DbGljaz17KCkgPT4ge319IGl0ZW09e3JlcG99IC8+XHJcbiAgICAgICAgICAgIDwvTGluaz5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICkpfVxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBSZWFjdC5tZW1vKFJlcG9zTGlzdFBhZ2UpO1xyXG4iLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSBcIi4vUmVwb3NMaXN0UGFnZVwiO1xyXG4iLCIvLyDQn9C10YDQtdGH0LjRgdC70LXQvdC40LUg0LzQtdGC0L7QtNC+0LIgSFRUUC3Qt9Cw0L/RgNC+0YHQsFxyXG5leHBvcnQgZW51bSBIVFRQTWV0aG9kIHtcclxuICBHRVQgPSBcIkdFVFwiLFxyXG4gIFBPU1QgPSBcIlBPU1RcIixcclxufVxyXG5cclxuLy8g0J/QsNGA0LDQvNC10YLRgNGLINC30LDQv9GA0L7RgdCwXHJcbmV4cG9ydCB0eXBlIFJlcXVlc3RQYXJhbXM8UmVxVD4gPSB7XHJcbiAgbWV0aG9kOiBIVFRQTWV0aG9kOyAvLyDQnNC10YLQvtC0INC30LDQv9GA0L7RgdCwLCBHRVQg0LjQu9C4IFBPU1RcclxuICBlbmRwb2ludDogc3RyaW5nOyAvLyBBUEktZW5kcG9pbnQsINC90LAg0LrQvtGC0L7RgNGL0Lkg0LTQtdC70LDQtdGC0YHRjyDQt9Cw0L/RgNC+0YFcclxuICBoZWFkZXJzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+OyAvLyDQntCx0YrQtdC60YIg0YEg0L/QtdGA0LXQtNCw0LLQsNC10LzRi9C80LggSFRUUC3Qt9Cw0LPQvtC70L7QstC60LDQvNC4XHJcblxyXG4gIC8qKlxyXG4gICAqINCe0LHRitC10LrRgiDRgSDQtNCw0L3QvdGL0LzQuCDQt9Cw0L/RgNC+0YHQsC5cclxuICAgKiAtINCU0LvRjyBHRVQt0LfQsNC/0YDQvtGB0LAg0LTQsNC90L3Ri9C1INC/0YDQtdCy0YDQsNGJ0LDRjtGC0YHRjyDQsiBxdWVyeS3RgdGC0YDQvtC60YMg0Lgg0LTQvtCx0LDQstC70Y/RjtGC0YHRjyDQsiBlbmRwb2ludFxyXG4gICAqIC0g0JTQu9GPIFBPU1Qt0LfQsNC/0YDQvtGB0LAg0LTQsNC90L3Ri9C1INC/0YDQtdC+0LHRgNCw0LfRg9GO0YLRgdGPINC6INGE0L7RgNC80LDRgtGDIEpTT04g0Lgg0LTQvtCx0LDQstC70Y/RjtGC0YHRjyDQsiDRgtC10LvQviDQt9Cw0L/RgNC+0YHQsCAo0L3QtdC+0LHRj9C30LDRgtC10LvRjNC90L7QtSDRgtGA0LXQsdC+0LLQsNC90LjQtSlcclxuICAgKi9cclxuICBkYXRhOiBSZXFUO1xyXG59O1xyXG5cclxuLy8g0J/QtdGA0LXRh9C40YHQu9C10L3QuNC1INGB0YLQsNGC0YPRgdC+0LIg0L7RgtCy0LXRgtCwXHJcbmV4cG9ydCBlbnVtIFN0YXR1c0hUVFAge1xyXG4gIE9LID0gXCIyMDAgT0tcIixcclxuICBOT1RfRk9VTkQgPSBcIjQwNCBOb3QgRm91bmRcIixcclxuICBFUlJPUiA9IFwiRVJST1JcIixcclxufVxyXG5cclxuLy8g0J7RgtCy0LXRgiBBUElcclxuZXhwb3J0IHR5cGUgQXBpUmVzcG9uc2U8U3VjY2Vzc1QsIEVycm9yVD4gPVxyXG4gIHwge1xyXG4gICAgICBzdWNjZXNzOiB0cnVlO1xyXG4gICAgICBkYXRhOiBTdWNjZXNzVDtcclxuICAgICAgc3RhdHVzOiBudW1iZXI7XHJcbiAgICB9XHJcbiAgfCB7XHJcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlO1xyXG4gICAgICBkYXRhOiBFcnJvclQ7XHJcbiAgICAgIHN0YXR1czogbnVtYmVyO1xyXG4gICAgfVxyXG4gIHwge1xyXG4gICAgICBzdWNjZXNzOiBmYWxzZTtcclxuICAgICAgZGF0YTogYW55O1xyXG4gICAgICBzdGF0dXM6IFN0YXR1c0hUVFA7XHJcbiAgICB9O1xyXG5cclxuLy8g0JjQvdGC0LXRgNGE0LXQudGBINC00LvRjyDQutC70LDRgdGB0LAsINGBINC/0L7QvNC+0YnRjNGOINC60L7RgtC+0YDQvtCz0L4g0LzQvtC20L3QviDQtNC10LvQsNGC0Ywg0LfQsNC/0YDQvtGB0Ysg0LogQVBJXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUFwaVN0b3JlIHtcclxuICAvLyDQsdCw0LfQvtCy0YvQuSB1cmwg0LTQu9GPINCy0YvQv9C+0LvQvdC10L3QuNGPINC30LDQv9GA0L7RgdC+0LJcclxuICByZWFkb25seSBiYXNlVXJsOiBzdHJpbmc7XHJcblxyXG4gIC8vINCc0LXRgtC+0LQsINGBINC/0L7QvNC+0YnRjNGOINC60L7RgtC+0YDQvtCz0L4g0LTQtdC70LDQtdGC0YHRjyDQt9Cw0L/RgNC+0YFcclxuICByZXF1ZXN0PFN1Y2Nlc3NULCBFcnJvclQgPSBhbnksIFJlcVQgPSB7fT4oXHJcbiAgICBwYXJhbXM6IFJlcXVlc3RQYXJhbXM8UmVxVD5cclxuICApOiBQcm9taXNlPEFwaVJlc3BvbnNlPFN1Y2Nlc3NULCBFcnJvclQ+PjtcclxufVxyXG4iLCJpbXBvcnQgcXMgZnJvbSBcInFzXCI7XG5cbmltcG9ydCB7XG4gIEFwaVJlc3BvbnNlLFxuICBJQXBpU3RvcmUsXG4gIFJlcXVlc3RQYXJhbXMsXG4gIEhUVFBNZXRob2QsXG4gIFN0YXR1c0hUVFAsXG59IGZyb20gXCIuL3R5cGVzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFwaVN0b3JlIGltcGxlbWVudHMgSUFwaVN0b3JlIHtcbiAgcmVhZG9ubHkgYmFzZVVybDogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKGJhc2VVcmw6IHN0cmluZykge1xuICAgIHRoaXMuYmFzZVVybCA9IGJhc2VVcmw7XG4gIH1cblxuICAvLyDRhNC+0YDQvNC40YDRg9C10Lwg0LfQsNC/0YDQvtGBLCDQutC+0YLQvtGA0YvQuSDRhdC+0YLQuNC8INC+0YLQv9GA0LDQstC40YLRjFxuICBwcml2YXRlIGdldFJlcURhdGE8UmVxVD4ocGFyYW1zOiBSZXF1ZXN0UGFyYW1zPFJlcVQ+KTogW3N0cmluZywgUmVxdWVzdEluaXRdIHtcbiAgICBsZXQgZW5kcG9pbnQgPSBgJHt0aGlzLmJhc2VVcmx9JHtwYXJhbXMuZW5kcG9pbnR9YDsgLy8g0YjQsNCx0LvQvtC90L3QsNGPINGB0YLRgNC+0LrQsFxuXG4gICAgLy8g0YTQvtGA0LzQuNGA0YPQtdC8INC+0LHRitC10LrRgiDQt9Cw0L/RgNC+0YHQsFxuICAgIGNvbnN0IHJlcTogUmVxdWVzdEluaXQgPSB7XG4gICAgICBtZXRob2Q6IHBhcmFtcy5tZXRob2QsXG4gICAgICBoZWFkZXJzOiB7IC4uLnBhcmFtcy5oZWFkZXJzIH0sXG4gICAgfTtcblxuICAgIC8vINGE0L7RgNC80LjRgNGD0LXQvCBxdWVyeS3RgdGC0YDQvtC60YNcbiAgICBpZiAocGFyYW1zLm1ldGhvZCA9PT0gSFRUUE1ldGhvZC5HRVQpIHtcbiAgICAgIGVuZHBvaW50ID0gYCR7ZW5kcG9pbnR9PyR7cXMuc3RyaW5naWZ5KHBhcmFtcy5kYXRhKX1gO1xuICAgIH1cblxuICAgIC8vINGE0L7RgNC80LjRgNGD0LXQvCDRgtC10LvQviDQt9Cw0L/RgNC+0YHQsFxuICAgIGlmIChwYXJhbXMubWV0aG9kID09PSBIVFRQTWV0aG9kLlBPU1QpIHtcbiAgICAgIHJlcS5ib2R5ID0gSlNPTi5zdHJpbmdpZnkocGFyYW1zLmRhdGEpO1xuICAgICAgcmVxLmhlYWRlcnMgPSB7XG4gICAgICAgIC4uLnJlcS5oZWFkZXJzLFxuICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOFwiLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gW2VuZHBvaW50LCByZXFdO1xuICB9XG5cbiAgYXN5bmMgcmVxdWVzdDxTdWNjZXNzVCwgRXJyb3JUID0gYW55LCBSZXFUID0ge30+KFxuICAgIHBhcmFtczogUmVxdWVzdFBhcmFtczxSZXFUPlxuICApOiBQcm9taXNlPEFwaVJlc3BvbnNlPFN1Y2Nlc3NULCBFcnJvclQ+PiB7XG4gICAgLy8gVE9ETzog0J3QsNC/0LjRiNC40YLQtSDQt9C00LXRgdGMINC60L7QtCwg0LrQvtGC0L7RgNGL0Lkg0YEg0L/QvtC80L7RidGM0Y4gZmV0Y2gg0LHRg9C00LXRgiDQtNC10LvQsNGC0Ywg0LfQsNC/0YDQvtGBXG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgW2VuZHBvaW50LCByZXFdID0gdGhpcy5nZXRSZXFEYXRhKHBhcmFtcyk7XG5cbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goZW5kcG9pbnQsIHJlcSk7XG5cbiAgICAgIC8vINC+0LHRgNCw0LHQsNGC0YvQstCw0LXQvCDQt9Cw0L/RgNC+0YEsINCy0L7Qt9Cy0YDQsNGJ0LDQtdC8INC00LDQvdC90YvQtSDQuNC3IEFwaVJlc3BvbnNlXG4gICAgICBpZiAocmVzcG9uc2Uub2spIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgIGRhdGE6IGF3YWl0IHJlc3BvbnNlLmpzb24oKSxcbiAgICAgICAgICBzdGF0dXM6IHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIHN0YXR1czogcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgICBkYXRhOiBhd2FpdCByZXNwb25zZS5qc29uKCksXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgZGF0YTogZXJyb3IsXG4gICAgICAgIHN0YXR1czogU3RhdHVzSFRUUC5FUlJPUixcbiAgICAgIH07XG4gICAgfVxuICB9XG59XG4iLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSBcIi4vQXBpU3RvcmVcIjtcbiIsImV4cG9ydCB0eXBlIEdpdEh1YlJlcG9Pd25lckFwaSA9IHtcclxuICBpZDogbnVtYmVyO1xyXG4gIHVybDogc3RyaW5nO1xyXG4gIGF2YXRhcl91cmw6IHN0cmluZztcclxuICBsb2dpbjogc3RyaW5nO1xyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgR2l0SHViUmVwb093bmVyTW9kZWwgPSB7XHJcbiAgaWQ6IG51bWJlcjtcclxuICB1cmw6IHN0cmluZztcclxuICBhdmF0YXJVcmw6IHN0cmluZztcclxuICBsb2dpbjogc3RyaW5nO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IG5vcm1hbGl6ZUdpdEh1YlJlcG9Pd25lciA9IChcclxuICBmcm9tOiBHaXRIdWJSZXBvT3duZXJBcGlcclxuKTogR2l0SHViUmVwb093bmVyTW9kZWwgPT4gKHtcclxuICBpZDogZnJvbS5pZCxcclxuICB1cmw6IGZyb20udXJsLFxyXG4gIGF2YXRhclVybDogZnJvbS5hdmF0YXJfdXJsLFxyXG4gIGxvZ2luOiBmcm9tLmxvZ2luLFxyXG59KTtcclxuIiwiaW1wb3J0IHtcclxuICBHaXRIdWJSZXBvT3duZXJBcGksXHJcbiAgR2l0SHViUmVwb093bmVyTW9kZWwsXHJcbiAgbm9ybWFsaXplR2l0SHViUmVwb093bmVyLFxyXG59IGZyb20gXCIuL2dpdEh1YlJlcG9Pd25lclwiO1xyXG5cclxuZXhwb3J0IHR5cGUgUmVwb0l0ZW1BcGkgPSB7XHJcbiAgaWQ6IG51bWJlcjtcclxuICB1cmw6IHN0cmluZztcclxuICBuYW1lOiBzdHJpbmc7XHJcbiAgc3RhcmdhemVyc19jb3VudDogbnVtYmVyO1xyXG4gIG93bmVyOiBHaXRIdWJSZXBvT3duZXJBcGk7XHJcbiAgdXBkYXRlZF9hdDogc3RyaW5nO1xyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgUmVwb0l0ZW1Nb2RlbCA9IHtcclxuICBpZDogbnVtYmVyO1xyXG4gIHVybDogc3RyaW5nO1xyXG4gIG5hbWU6IHN0cmluZztcclxuICBzdGFyZ2F6ZXJzQ291bnQ6IG51bWJlcjtcclxuICBvd25lcjogR2l0SHViUmVwb093bmVyTW9kZWw7XHJcbiAgdXBkYXRlZEF0OiBzdHJpbmc7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3Qgbm9ybWFsaXplUmVwb0l0ZW0gPSAoZnJvbTogUmVwb0l0ZW1BcGkpOiBSZXBvSXRlbU1vZGVsID0+ICh7XHJcbiAgaWQ6IGZyb20uaWQsXHJcbiAgdXJsOiBmcm9tLnVybCxcclxuICBuYW1lOiBmcm9tLm5hbWUsXHJcbiAgc3RhcmdhemVyc0NvdW50OiBmcm9tLnN0YXJnYXplcnNfY291bnQsXHJcbiAgb3duZXI6IG5vcm1hbGl6ZUdpdEh1YlJlcG9Pd25lcihmcm9tLm93bmVyKSxcclxuICB1cGRhdGVkQXQ6IGZyb20udXBkYXRlZF9hdCxcclxufSk7XHJcbiIsImltcG9ydCB7IE1ldGEgfSBmcm9tIFwidXRpbHMvbWV0YVwiO1xyXG5pbXBvcnQgeyBJTG9jYWxTdG9yZSB9IGZyb20gXCJ1dGlscy91c2VMb2NhbFN0b3JlXCI7XHJcbmltcG9ydCB7IGNvbXB1dGVkLCBtYWtlT2JzZXJ2YWJsZSwgb2JzZXJ2YWJsZSwgcnVuSW5BY3Rpb24gfSBmcm9tIFwibW9ieFwiO1xyXG5pbXBvcnQgQXBpU3RvcmUgZnJvbSBcInNoYXJlZC9zdG9yZS9BcGlTdG9yZVwiO1xyXG5pbXBvcnQgeyBIVFRQTWV0aG9kIH0gZnJvbSBcInNoYXJlZC9zdG9yZS9BcGlTdG9yZS90eXBlc1wiO1xyXG5pbXBvcnQge1xyXG4gIG5vcm1hbGl6ZVJlcG9JdGVtLFxyXG4gIFJlcG9JdGVtQXBpLFxyXG4gIFJlcG9JdGVtTW9kZWwsXHJcbn0gZnJvbSBcInN0b3JlL21vZGVscy9naXRIdWJcIjtcclxuXHJcbnR5cGUgUHJpdmF0ZUZpZWxkcyA9IFwiX3JlcG9cIiB8IFwiX21ldGFcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlcG9JdGVtU3RvcmUgaW1wbGVtZW50cyBJTG9jYWxTdG9yZSB7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBhcGlTdG9yZSA9IG5ldyBBcGlTdG9yZShcImh0dHBzOi8vYXBpLmdpdGh1Yi5jb21cIik7XHJcblxyXG4gIHByaXZhdGUgX3JlcG86IG51bGwgfCBSZXBvSXRlbU1vZGVsID0gbnVsbDtcclxuICBwcml2YXRlIF9tZXRhOiBNZXRhID0gTWV0YS5pbml0aWFsO1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIG1ha2VPYnNlcnZhYmxlPFJlcG9JdGVtU3RvcmUsIFByaXZhdGVGaWVsZHM+KHRoaXMsIHtcclxuICAgICAgX3JlcG86IG9ic2VydmFibGUucmVmLFxyXG4gICAgICBfbWV0YTogb2JzZXJ2YWJsZSxcclxuICAgICAgcmVwbzogY29tcHV0ZWQsXHJcbiAgICAgIG1ldGE6IGNvbXB1dGVkLFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBnZXQgcmVwbygpOiBSZXBvSXRlbU1vZGVsIHwgbnVsbCB7XHJcbiAgICByZXR1cm4gdGhpcy5fcmVwbztcclxuICB9XHJcblxyXG4gIGdldCBtZXRhKCk6IE1ldGEge1xyXG4gICAgcmV0dXJuIHRoaXMuX21ldGE7XHJcbiAgfVxyXG5cclxuICBhc3luYyBnZXRSZXBvKGlkOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IGVuZFBvaW50OiBzdHJpbmcgPSBgL3JlcG9zaXRvcmllcy8ke2lkfWA7XHJcbiAgICB0aGlzLl9tZXRhID0gTWV0YS5sb2FkaW5nO1xyXG4gICAgdGhpcy5fcmVwbyA9IG51bGw7XHJcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLmFwaVN0b3JlLnJlcXVlc3Q8UmVwb0l0ZW1BcGk+KHtcclxuICAgICAgZGF0YToge30sXHJcbiAgICAgIGVuZHBvaW50OiBlbmRQb2ludCxcclxuICAgICAgaGVhZGVyczoge30sXHJcbiAgICAgIG1ldGhvZDogSFRUUE1ldGhvZC5HRVQsXHJcbiAgICB9KTtcclxuXHJcbiAgICBydW5JbkFjdGlvbigoKSA9PiB7XHJcbiAgICAgIGlmICghcmVzdWx0LnN1Y2Nlc3MpIHtcclxuICAgICAgICB0aGlzLl9tZXRhID0gTWV0YS5lcnJvcjtcclxuICAgICAgfVxyXG5cclxuICAgICAgdHJ5IHtcclxuICAgICAgICB0aGlzLl9tZXRhID0gTWV0YS5zdWNjZXNzO1xyXG4gICAgICAgIHRoaXMuX3JlcG8gPSBub3JtYWxpemVSZXBvSXRlbShyZXN1bHQuZGF0YSk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgdGhpcy5fbWV0YSA9IE1ldGEuZXJyb3I7XHJcbiAgICAgICAgdGhpcy5fcmVwbyA9IG51bGw7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZGVzdHJveSgpOiB2b2lkIHt9XHJcbn1cclxuIiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gXCIuL1JlcG9JdGVtU3RvcmVcIjtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcclxuXHJcbmltcG9ydCBSZXBvVGlsZSBmcm9tIFwiY29tcG9uZW50cy9SZXBvVGlsZVwiO1xyXG5pbXBvcnQgeyBNZXRhIH0gZnJvbSBcInV0aWxzL21ldGFcIjtcclxuaW1wb3J0IHsgdXNlTG9jYWxTdG9yZSB9IGZyb20gXCJ1dGlscy91c2VMb2NhbFN0b3JlXCI7XHJcbmltcG9ydCB7IG9ic2VydmVyIH0gZnJvbSBcIm1vYngtcmVhY3QtbGl0ZVwiO1xyXG5pbXBvcnQgeyBMaW5rLCB1c2VQYXJhbXMgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xyXG5cclxuaW1wb3J0IFJlcG9JdGVtU3RvcmUgZnJvbSBcIi4uLy4uL3N0b3JlL1JlcG9JdGVtU3RvcmVcIjtcclxuXHJcbmNvbnN0IFVzZXJSZXBvUGFnZSA9ICgpID0+IHtcclxuICBjb25zdCByZXBvSXRlbVN0b3JlID0gdXNlTG9jYWxTdG9yZSgoKSA9PiBuZXcgUmVwb0l0ZW1TdG9yZSgpKTtcclxuXHJcbiAgY29uc3QgeyBpZCB9ID0gdXNlUGFyYW1zPHsgaWQ/OiBzdHJpbmcgfT4oKTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGlmIChpZCkgcmVwb0l0ZW1TdG9yZS5nZXRSZXBvKGlkKTtcclxuICB9LCBbcmVwb0l0ZW1TdG9yZV0pO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPGRpdj5cclxuICAgICAge3JlcG9JdGVtU3RvcmUubWV0YSA9PT0gTWV0YS5zdWNjZXNzICYmIHJlcG9JdGVtU3RvcmUucmVwbyA/IChcclxuICAgICAgICA8UmVwb1RpbGUgaXRlbT17cmVwb0l0ZW1TdG9yZS5yZXBvfSBvbkNsaWNrPXsoKSA9PiB7fX0gLz5cclxuICAgICAgKSA6IChcclxuICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgPGRpdj7QotCw0LrQvtCz0L4g0YDQtdC/0L7Qt9C40YLQvtGA0LjRjyDQvdC10YIgOmM8L2Rpdj5cclxuICAgICAgICAgIDxwPlxyXG4gICAgICAgICAgICA8TGluayB0bz1cIi9yZXBvc1wiPtCd0LDQt9Cw0LQ8L0xpbms+XHJcbiAgICAgICAgICA8L3A+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICl9XHJcbiAgICA8L2Rpdj5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgb2JzZXJ2ZXIoVXNlclJlcG9QYWdlKTtcclxuIiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gXCIuL1VzZXJSZXBvUGFnZVwiO1xyXG4iLCJleHBvcnQgdHlwZSBDb2xsZWN0aW9uTW9kZWw8SyBleHRlbmRzIHN0cmluZyB8IG51bWJlciwgVD4gPSB7XHJcbiAgb3JkZXI6IEtbXTtcclxuICBlbnRpdGllczogUmVjb3JkPEssIFQ+O1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldEluaXRpYWxDb2xsZWN0aW9uTW9kZWwgPSAoKTogQ29sbGVjdGlvbk1vZGVsPGFueSwgYW55PiA9PiAoe1xyXG4gIG9yZGVyOiBbXSxcclxuICBlbnRpdGllczoge30sXHJcbn0pO1xyXG5cclxuZXhwb3J0IGNvbnN0IG5vcm1hbGl6ZUNvbGxlY3Rpb24gPSA8SyBleHRlbmRzIHN0cmluZyB8IG51bWJlciwgVD4oXHJcbiAgZWxlbWVudHM6IFRbXSxcclxuICBnZXRLZXlGb3JFbGVtZW50OiAoZWxlbWVudDogVCkgPT4gS1xyXG4pOiBDb2xsZWN0aW9uTW9kZWw8SywgVD4gPT4ge1xyXG4gIGNvbnN0IGNvbGxlY3Rpb246IENvbGxlY3Rpb25Nb2RlbDxLLCBUPiA9IGdldEluaXRpYWxDb2xsZWN0aW9uTW9kZWwoKTtcclxuXHJcbiAgZWxlbWVudHMuZm9yRWFjaCgoZWwpID0+IHtcclxuICAgIGNvbnN0IGlkID0gZ2V0S2V5Rm9yRWxlbWVudChlbCk7XHJcbiAgICBjb2xsZWN0aW9uLm9yZGVyLnB1c2goaWQpO1xyXG4gICAgY29sbGVjdGlvbi5lbnRpdGllc1tpZF0gPSBlbDtcclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIGNvbGxlY3Rpb247XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgbGluZWFyaXplQ29sbGVjdGlvbiA9IDxLIGV4dGVuZHMgc3RyaW5nIHwgbnVtYmVyLCBUPihcclxuICBlbGVtZW50czogQ29sbGVjdGlvbk1vZGVsPEssIFQ+XHJcbik6IFRbXSA9PiBlbGVtZW50cy5vcmRlci5tYXAoKGVsKSA9PiBlbGVtZW50cy5lbnRpdGllc1tlbF0pO1xyXG4iLCJpbXBvcnQge1xyXG4gIEdldE9yZ2FuaXphdGlvblJlcG9zTGlzdFBhcmFtcyxcclxuICBJR2l0SHViU3RvcmUsXHJcbn0gZnJvbSBcInN0b3JlL0dpdEh1YlN0b3JlL3R5cGVzXCI7XHJcbmltcG9ydCB7IE1ldGEgfSBmcm9tIFwidXRpbHMvbWV0YVwiO1xyXG5pbXBvcnQgeyBJTG9jYWxTdG9yZSB9IGZyb20gXCJ1dGlscy91c2VMb2NhbFN0b3JlXCI7XHJcbmltcG9ydCB7XHJcbiAgYWN0aW9uLFxyXG4gIGNvbXB1dGVkLFxyXG4gIG1ha2VPYnNlcnZhYmxlLFxyXG4gIG9ic2VydmFibGUsXHJcbiAgcnVuSW5BY3Rpb24sXHJcbn0gZnJvbSBcIm1vYnhcIjtcclxuaW1wb3J0IHsgSFRUUE1ldGhvZCB9IGZyb20gXCJzaGFyZWQvc3RvcmUvQXBpU3RvcmUvdHlwZXNcIjtcclxuaW1wb3J0IHtcclxuICBub3JtYWxpemVSZXBvSXRlbSxcclxuICBSZXBvSXRlbUFwaSxcclxuICBSZXBvSXRlbU1vZGVsLFxyXG59IGZyb20gXCJzdG9yZS9tb2RlbHMvZ2l0SHViXCI7XHJcbmltcG9ydCB7XHJcbiAgQ29sbGVjdGlvbk1vZGVsLFxyXG4gIGdldEluaXRpYWxDb2xsZWN0aW9uTW9kZWwsXHJcbiAgbGluZWFyaXplQ29sbGVjdGlvbixcclxuICBub3JtYWxpemVDb2xsZWN0aW9uLFxyXG59IGZyb20gXCJzdG9yZS9tb2RlbHMvc2hhcmVkL2NvbGxlY3Rpb25cIjtcclxuXHJcbmltcG9ydCBBcGlTdG9yZSBmcm9tIFwiLi4vLi4vc2hhcmVkL3N0b3JlL0FwaVN0b3JlXCI7XHJcblxyXG50eXBlIFByaXZhdGVGaWVsZHMgPSBcIl9saXN0XCIgfCBcIl9tZXRhXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZXBvc0xpc3RTdG9yZSBpbXBsZW1lbnRzIElHaXRIdWJTdG9yZSwgSUxvY2FsU3RvcmUge1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgYXBpU3RvcmUgPSBuZXcgQXBpU3RvcmUoXCJodHRwczovL2FwaS5naXRodWIuY29tXCIpO1xyXG5cclxuICBwcml2YXRlIF9saXN0OiBDb2xsZWN0aW9uTW9kZWw8bnVtYmVyLCBSZXBvSXRlbU1vZGVsPiA9IHtcclxuICAgIG9yZGVyOiBbXSxcclxuICAgIGVudGl0aWVzOiB7fSxcclxuICB9O1xyXG4gIHByaXZhdGUgX21ldGE6IE1ldGEgPSBNZXRhLmluaXRpYWw7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgbWFrZU9ic2VydmFibGU8UmVwb3NMaXN0U3RvcmUsIFByaXZhdGVGaWVsZHM+KHRoaXMsIHtcclxuICAgICAgX2xpc3Q6IG9ic2VydmFibGUucmVmLFxyXG4gICAgICBfbWV0YTogb2JzZXJ2YWJsZSxcclxuICAgICAgbGlzdDogY29tcHV0ZWQsXHJcbiAgICAgIG1ldGE6IGNvbXB1dGVkLFxyXG4gICAgICBnZXRPcmdhbml6YXRpb25SZXBvc0xpc3Q6IGFjdGlvbixcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGxpc3QoKTogUmVwb0l0ZW1Nb2RlbFtdIHtcclxuICAgIHJldHVybiBsaW5lYXJpemVDb2xsZWN0aW9uKHRoaXMuX2xpc3QpO1xyXG4gIH1cclxuXHJcbiAgZ2V0IG1ldGEoKTogTWV0YSB7XHJcbiAgICByZXR1cm4gdGhpcy5fbWV0YTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGdldE9yZ2FuaXphdGlvblJlcG9zTGlzdChcclxuICAgIHBhcmFtczogR2V0T3JnYW5pemF0aW9uUmVwb3NMaXN0UGFyYW1zXHJcbiAgKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICB0aGlzLl9tZXRhID0gTWV0YS5sb2FkaW5nO1xyXG4gICAgdGhpcy5fbGlzdCA9IGdldEluaXRpYWxDb2xsZWN0aW9uTW9kZWwoKTtcclxuXHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuYXBpU3RvcmUucmVxdWVzdDxSZXBvSXRlbUFwaVtdPih7XHJcbiAgICAgIG1ldGhvZDogSFRUUE1ldGhvZC5HRVQsXHJcbiAgICAgIGRhdGE6IHt9LFxyXG4gICAgICBoZWFkZXJzOiB7fSxcclxuICAgICAgZW5kcG9pbnQ6IGAvb3Jncy8ke3BhcmFtcy5vcmdOYW1lfS9yZXBvc2AsXHJcbiAgICB9KTtcclxuXHJcbiAgICBydW5JbkFjdGlvbigoKSA9PiB7XHJcbiAgICAgIGlmICghcmVzcG9uc2Uuc3VjY2Vzcykge1xyXG4gICAgICAgIHRoaXMuX21ldGEgPSBNZXRhLmVycm9yO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IGxpc3Q6IFJlcG9JdGVtTW9kZWxbXSA9IFtdO1xyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgcmVzcG9uc2UuZGF0YSkge1xyXG4gICAgICAgICAgbGlzdC5wdXNoKG5vcm1hbGl6ZVJlcG9JdGVtKGl0ZW0pKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX21ldGEgPSBNZXRhLnN1Y2Nlc3M7XHJcbiAgICAgICAgdGhpcy5fbGlzdCA9IG5vcm1hbGl6ZUNvbGxlY3Rpb24obGlzdCwgKGxpc3RJdGVtKSA9PiBsaXN0SXRlbS5pZCk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcclxuICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICB0aGlzLl9tZXRhID0gTWV0YS5lcnJvcjtcclxuICAgICAgICB0aGlzLl9saXN0ID0gZ2V0SW5pdGlhbENvbGxlY3Rpb25Nb2RlbCgpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbiAgZGVzdHJveSgpOiB2b2lkIHt9XHJcbn1cclxuIiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gXCIuL1JlcG9zTGlzdFN0b3JlXCI7XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuXHJcbmltcG9ydCBCdXR0b24gZnJvbSBcImNvbXBvbmVudHMvQnV0dG9uXCI7XHJcbmltcG9ydCBJbnB1dCBmcm9tIFwiY29tcG9uZW50cy9JbnB1dFwiO1xyXG5pbXBvcnQgUmVwb3NDb250ZXh0IGZyb20gXCJjb21wb25lbnRzL1JlcG9zQ29udGV4dC9SZXBvc0NvbnRleHRcIjtcclxuaW1wb3J0IFNlYXJjaEljb24gZnJvbSBcImNvbXBvbmVudHMvU2VhcmNoSWNvblwiO1xyXG5pbXBvcnQgc3R5bGVzIGZyb20gXCJzdHlsZXMvc3R5bGUubW9kdWxlLnNjc3NcIjtcclxuaW1wb3J0IHsgTWV0YSB9IGZyb20gXCJ1dGlscy9tZXRhXCI7XHJcbmltcG9ydCB7IHVzZUxvY2FsU3RvcmUgfSBmcm9tIFwidXRpbHMvdXNlTG9jYWxTdG9yZVwiO1xyXG5pbXBvcnQgeyBvYnNlcnZlciB9IGZyb20gXCJtb2J4LXJlYWN0LWxpdGVcIjtcclxuaW1wb3J0IHsgQnJvd3NlclJvdXRlciwgUmVkaXJlY3QsIFJvdXRlLCBTd2l0Y2ggfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xyXG5pbXBvcnQgUmVwb3NMaXN0UGFnZSBmcm9tIFwicGFnZXMvUmVwb3NMaXN0UGFnZVwiO1xyXG5pbXBvcnQgVXNlclJlcG9QYWdlIGZyb20gXCJwYWdlcy9Vc2VyUmVwb1BhZ2VcIjtcclxuaW1wb3J0IFJlcG9zTGlzdFN0b3JlIGZyb20gXCJzdG9yZS9SZXBvc0xpc3RTdG9yZVwiO1xyXG5cclxuY29uc3QgUmVwb3NTZWFyY2hQYWdlOiBSZWFjdC5GQyA9ICgpID0+IHtcclxuICBjb25zdCByZXBvc0xpc3RTdG9yZSA9IHVzZUxvY2FsU3RvcmUoKCkgPT4gbmV3IFJlcG9zTGlzdFN0b3JlKCkpO1xyXG5cclxuICBjb25zdCBbdmFsdWUsIG9uQ2hhbmdlXSA9IFJlYWN0LnVzZVN0YXRlKFwiXCIpO1xyXG5cclxuICBjb25zdCBoYW5kbGVTZWFyY2ggPSAoKSA9PiB7XHJcbiAgICByZXBvc0xpc3RTdG9yZS5nZXRPcmdhbml6YXRpb25SZXBvc0xpc3Qoe1xyXG4gICAgICBvcmdOYW1lOiBcImt0c3N0dWRpb1wiLFxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgaGFuZGxlQ2hhbmdlID0gUmVhY3QudXNlQ2FsbGJhY2soXHJcbiAgICAoZTogUmVhY3QuQ2hhbmdlRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IG9uQ2hhbmdlKGUudGFyZ2V0LnZhbHVlKSxcclxuICAgIFtdXHJcbiAgKTtcclxuXHJcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcclxuICAgIHJlcG9zTGlzdFN0b3JlLmdldE9yZ2FuaXphdGlvblJlcG9zTGlzdCh7IG9yZ05hbWU6IFwia3Rzc3R1ZGlvXCIgfSk7XHJcbiAgfSwgW3JlcG9zTGlzdFN0b3JlXSk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8QnJvd3NlclJvdXRlcj5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5ib2R5fT5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLnNlYXJjaH0+XHJcbiAgICAgICAgICB7cmVwb3NMaXN0U3RvcmUubWV0YSAhPT0gTWV0YS5sb2FkaW5nICYmIChcclxuICAgICAgICAgICAgPElucHV0XHJcbiAgICAgICAgICAgICAgdmFsdWU9e3ZhbHVlfVxyXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPXtcItCS0LLQtdC00LjRgtC1INC90LDQt9Cy0LDQvdC40LUg0L7RgNCz0LDQvdC40LfQsNGG0LjQuFwifVxyXG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICApfVxyXG5cclxuICAgICAgICAgIHtyZXBvc0xpc3RTdG9yZS5tZXRhID09PSBNZXRhLmxvYWRpbmcgJiYgKFxyXG4gICAgICAgICAgICA8SW5wdXRcclxuICAgICAgICAgICAgICB2YWx1ZT17dmFsdWV9XHJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9e1wi0JLQstC10LTQuNGC0LUg0L3QsNC30LLQsNC90LjQtSDQvtGA0LPQsNC90LjQt9Cw0YbQuNC4XCJ9XHJcbiAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cclxuICAgICAgICAgICAgICBpc0Rpc2FibGVkPXt0cnVlfVxyXG4gICAgICAgICAgICAvPlxyXG4gICAgICAgICAgKX1cclxuXHJcbiAgICAgICAgICB7cmVwb3NMaXN0U3RvcmUubWV0YSAhPT0gTWV0YS5sb2FkaW5nICYmIChcclxuICAgICAgICAgICAgPEJ1dHRvbiBkaXNhYmxlZD17ZmFsc2V9IG9uQ2xpY2s9e2hhbmRsZVNlYXJjaH0+XHJcbiAgICAgICAgICAgICAgPFNlYXJjaEljb24gLz5cclxuICAgICAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgICApfVxyXG5cclxuICAgICAgICAgIHtyZXBvc0xpc3RTdG9yZS5tZXRhID09PSBNZXRhLmxvYWRpbmcgJiYgKFxyXG4gICAgICAgICAgICA8QnV0dG9uIGRpc2FibGVkPXt0cnVlfSBvbkNsaWNrPXtoYW5kbGVTZWFyY2h9PlxyXG4gICAgICAgICAgICAgIDxTZWFyY2hJY29uIC8+XHJcbiAgICAgICAgICAgIDwvQnV0dG9uPlxyXG4gICAgICAgICAgKX1cclxuICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgPFN3aXRjaD5cclxuICAgICAgICAgIDxSb3V0ZSBleGFjdCBwYXRoPVwiL3JlcG9zLzppZFwiIGNvbXBvbmVudD17VXNlclJlcG9QYWdlfSAvPlxyXG4gICAgICAgICAgPFJlcG9zQ29udGV4dCByZXBvc0xpc3RTdG9yZT17cmVwb3NMaXN0U3RvcmV9PlxyXG4gICAgICAgICAgICA8Um91dGUgZXhhY3QgcGF0aD1cIi9yZXBvc1wiIGNvbXBvbmVudD17UmVwb3NMaXN0UGFnZX0gLz5cclxuICAgICAgICAgICAgPFJlZGlyZWN0IHRvPVwiL3JlcG9zXCIgLz5cclxuICAgICAgICAgIDwvUmVwb3NDb250ZXh0PlxyXG4gICAgICAgIDwvU3dpdGNoPlxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvQnJvd3NlclJvdXRlcj5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgb2JzZXJ2ZXIoUmVwb3NTZWFyY2hQYWdlKTtcclxuIiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gXCIuL1JlcG9zU2VhcmNoUGFnZVwiO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBSZXBvc1NlYXJjaFBhZ2UgZnJvbSBcIi4uL3BhZ2VzL1JlcG9zU2VhcmNoUGFnZVwiO1xyXG5cclxuLy8gaW1wb3J0IFJlcG9zU2VhcmNoUGFnZSBmcm9tIFwicGFnZXMvUmVwb3NTZWFyY2hQYWdlXCI7XHJcblxyXG5jb25zdCBBcHAgPSAoKSA9PiB7XHJcbiAgcmV0dXJuIDxSZXBvc1NlYXJjaFBhZ2UgLz47XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBBcHA7XHJcbiIsImltcG9ydCB7IGNvbmZpZ3VyZSB9IGZyb20gXCJtb2J4XCI7XHJcblxyXG5jb25maWd1cmUoe1xyXG4gIHVzZVByb3hpZXM6IFwiaWZhdmFpbGFibGVcIixcclxuICBjb21wdXRlZFJlcXVpcmVzUmVhY3Rpb246IHRydWUsXHJcbiAgcmVhY3Rpb25SZXF1aXJlc09ic2VydmFibGU6IHRydWUsXHJcbiAgb2JzZXJ2YWJsZVJlcXVpcmVzUmVhY3Rpb246IHRydWUsXHJcbn0pO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCBSZWFjdERPTSBmcm9tIFwicmVhY3QtZG9tXCI7XG5cbmltcG9ydCBcInJlZ2VuZXJhdG9yLXJ1bnRpbWVcIjtcbmltcG9ydCBcIi4vaW5kZXguY3NzXCI7XG5pbXBvcnQgQXBwIGZyb20gXCIuL0FwcC9BcHBcIjtcbi8vIGltcG9ydCByZXBvcnRXZWJWaXRhbHMgZnJvbSBcIi4vcmVwb3J0V2ViVml0YWxzXCI7XG5pbXBvcnQgXCIuL2NvbmZpZy9jb25maWd1cmVNb2JYXCI7XG4vLyBpbXBvcnQgXCJsYXlvdXRzL3N0eWxlLmNzc1wiOyAvL25ld1xuLy8gaW1wb3J0IHN0eWxlcyBmcm9tIFwiLi9zdHlsZS5tb2R1bGUuc2Nzc1wiOyAvL25ld1xuLy8gaW1wb3J0IFwiLi9yb290L3Jvb3RcIjtcblxuUmVhY3RET00ucmVuZGVyKFxuICA8UmVhY3QuU3RyaWN0TW9kZT5cbiAgICB7LyogPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5ib2R5fT7QutGDPC9kaXY+ICovfVxuICAgIDxBcHAgLz5cbiAgPC9SZWFjdC5TdHJpY3RNb2RlPixcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyb290XCIpXG4pO1xuXG4vLyByZXBvcnRXZWJWaXRhbHMoKTtcblxuaWYgKG1vZHVsZS5ob3QpIHtcbiAgbW9kdWxlLmhvdC5hY2NlcHQoKTtcbn1cbiJdLCJuYW1lcyI6WyJSZWFjdCIsInN0eWxlcyIsIkJ1dHRvbiIsIm9uQ2xpY2siLCJkaXNhYmxlZCIsImNoaWxkcmVuIiwiYnV0dG9uIiwibWVtbyIsImRlZmF1bHQiLCJJbnB1dCIsInZhbHVlIiwicGxhY2Vob2xkZXIiLCJvbkNoYW5nZSIsImlzRGlzYWJsZWQiLCJzZWFyY2hfX2lucHV0IiwiY3JlYXRlQ29udGV4dCIsInVzZUNvbnRleHQiLCJyZXBvc0xpc3RDb250ZXh0IiwicmVwb3NMaXN0U3RvcmUiLCJQcm92aWRlciIsInVzZVJlcG9zTGlzdENvbnRleHQiLCJSZXBvc0NvbnRleHQiLCJTZWFyY2hJY29uIiwiTWV0YSIsInVzZUxvY2FsU3RvcmUiLCJjcmVhdG9yIiwiY29udGFpbmVyIiwidXNlUmVmIiwiY3VycmVudCIsInVzZUVmZmVjdCIsImRlc3Ryb3kiLCJuaWNlRXJyb3JzIiwia2V5Iiwib3RoZXIiLCJwcm9wZXJ0eSIsImVycm9ycyIsImRpZSIsImVycm9yIiwiYXJncyIsImUiLCJtb2NrR2xvYmFsIiwiZ2V0R2xvYmFsIiwiYXNzaWduIiwiT2JqZWN0IiwiZ2V0RGVzY3JpcHRvciIsImRlZmluZVByb3BlcnR5Iiwib2JqZWN0UHJvdG90eXBlIiwiRU1QVFlfQVJSQVkiLCJFTVBUWV9PQkpFQ1QiLCJoYXNQcm94eSIsInBsYWluT2JqZWN0U3RyaW5nIiwiYXNzZXJ0UHJveGllcyIsIndhcm5BYm91dFByb3h5UmVxdWlyZW1lbnQiLCJtc2ciLCJnbG9iYWxTdGF0ZSIsImdldE5leHRJZCIsIm9uY2UiLCJmdW5jIiwiaW52b2tlZCIsIm5vb3AiLCJpc0Z1bmN0aW9uIiwiZm4iLCJpc1N0cmluZ2lzaCIsInQiLCJpc09iamVjdCIsImlzUGxhaW5PYmplY3QiLCJwcm90byIsImlzR2VuZXJhdG9yIiwib2JqIiwiY29uc3RydWN0b3IiLCJhZGRIaWRkZW5Qcm9wIiwib2JqZWN0IiwicHJvcE5hbWUiLCJlbnVtZXJhYmxlIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJhZGRIaWRkZW5GaW5hbFByb3AiLCJjcmVhdGVJbnN0YW5jZW9mUHJlZGljYXRlIiwibmFtZSIsInRoZUNsYXNzIiwieCIsImlzRVM2TWFwIiwidGhpbmciLCJpc0VTNlNldCIsImhhc0dldE93blByb3BlcnR5U3ltYm9scyIsImdldFBsYWluT2JqZWN0S2V5cyIsImtleXMiLCJzeW1ib2xzIiwib3duS2V5cyIsIlJlZmxlY3QiLCJzdHJpbmdpZnlLZXkiLCJ0b1ByaW1pdGl2ZSIsImhhc1Byb3AiLCJ0YXJnZXQiLCJwcm9wIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsInJlcyIsInN0b3JlZEFubm90YXRpb25zU3ltYm9sIiwiU3ltYm9sIiwiY3JlYXRlRGVjb3JhdG9yQW5ub3RhdGlvbiIsImFubm90YXRpb24iLCJzdG9yZUFubm90YXRpb24iLCJwcm90b3R5cGUiLCJpc092ZXJyaWRlIiwiZmllbGROYW1lIiwiYXNzZXJ0Tm90RGVjb3JhdGVkIiwiY3VycmVudEFubm90YXRpb25UeXBlIiwicmVxdWVzdGVkQW5ub3RhdGlvblR5cGUiLCJjb2xsZWN0U3RvcmVkQW5ub3RhdGlvbnMiLCIkbW9ieCIsIkF0b20iLCJpc1BlbmRpbmdVbm9ic2VydmF0aW9uXyIsImlzQmVpbmdPYnNlcnZlZF8iLCJvYnNlcnZlcnNfIiwiZGlmZlZhbHVlXyIsImxhc3RBY2Nlc3NlZEJ5XyIsImxvd2VzdE9ic2VydmVyU3RhdGVfIiwiSURlcml2YXRpb25TdGF0ZV8iLCJOT1RfVFJBQ0tJTkdfIiwibmFtZV8iLCJvbkJPTCIsIm9uQlVPTCIsIm9uQk8iLCJsaXN0ZW5lciIsIm9uQlVPIiwicmVwb3J0T2JzZXJ2ZWQiLCJyZXBvcnRDaGFuZ2VkIiwic3RhcnRCYXRjaCIsInByb3BhZ2F0ZUNoYW5nZWQiLCJlbmRCYXRjaCIsInRvU3RyaW5nIiwiaXNBdG9tIiwiY3JlYXRlQXRvbSIsIm9uQmVjb21lT2JzZXJ2ZWRIYW5kbGVyIiwib25CZWNvbWVVbm9ic2VydmVkSGFuZGxlciIsImF0b20iLCJvbkJlY29tZU9ic2VydmVkIiwib25CZWNvbWVVbm9ic2VydmVkIiwiYSIsImRlZXBFcXVhbCIsImIiLCJjb21wYXJlciIsImlkZW50aXR5Iiwic3RydWN0dXJhbCIsInNoYWxsb3ciLCJzaGFsbG93Q29tcGFyZXIiLCJkZWVwRW5oYW5jZXIiLCJ2IiwiXyIsImlzT2JzZXJ2YWJsZSIsIkFycmF5IiwiaXNBY3Rpb24iLCJpc0Zsb3ciLCJmbG93IiwiYXV0b0FjdGlvbiIsInNoYWxsb3dFbmhhbmNlciIsImlzT2JzZXJ2YWJsZU9iamVjdCIsImlzT2JzZXJ2YWJsZUFycmF5IiwiaXNPYnNlcnZhYmxlTWFwIiwiaXNPYnNlcnZhYmxlU2V0IiwiZGVlcCIsInJlZmVyZW5jZUVuaGFuY2VyIiwibmV3VmFsdWUiLCJyZWZTdHJ1Y3RFbmhhbmNlciIsIm9sZFZhbHVlIiwiT1ZFUlJJREUiLCJvdmVycmlkZSIsImFubm90YXRpb25UeXBlXyIsIm1ha2VfIiwiZXh0ZW5kXyIsImFkbSIsImNyZWF0ZUFjdGlvbkFubm90YXRpb24iLCJvcHRpb25zIiwib3B0aW9uc18iLCJzb3VyY2UiLCJkZXNjcmlwdG9yIiwiYWN0aW9uRGVzY3JpcHRvciIsImNyZWF0ZUFjdGlvbkRlc2NyaXB0b3IiLCJzYWZlRGVzY3JpcHRvcnMiLCJhc3NlcnRBY3Rpb25EZXNjcmlwdG9yIiwiY3JlYXRlQWN0aW9uIiwiY3JlYXRlRmxvd0Fubm90YXRpb24iLCJmbG93RGVzY3JpcHRvciIsImNyZWF0ZUZsb3dEZXNjcmlwdG9yIiwiYXNzZXJ0Rmxvd0Rlc2NyaXB0b3IiLCJjcmVhdGVDb21wdXRlZEFubm90YXRpb24iLCJhc3NlcnRDb21wdXRlZERlc2NyaXB0b3IiLCJnZXQiLCJzZXQiLCJjcmVhdGVPYnNlcnZhYmxlQW5ub3RhdGlvbiIsImFzc2VydE9ic2VydmFibGVEZXNjcmlwdG9yIiwiQVVUTyIsImF1dG9Bbm5vdGF0aW9uIiwiY3JlYXRlQXV0b0Fubm90YXRpb24iLCJjb21wdXRlZCIsImZsb3dBbm5vdGF0aW9uIiwiYWN0aW9uQW5ub3RhdGlvbiIsIm9ic2VydmFibGVBbm5vdGF0aW9uIiwib2JzZXJ2YWJsZSIsIk9CU0VSVkFCTEUiLCJPQlNFUlZBQkxFX1JFRiIsIk9CU0VSVkFCTEVfU0hBTExPVyIsIk9CU0VSVkFCTEVfU1RSVUNUIiwiZGVmYXVsdENyZWF0ZU9ic2VydmFibGVPcHRpb25zIiwiZGVmYXVsdERlY29yYXRvciIsInByb3h5IiwiYXNDcmVhdGVPYnNlcnZhYmxlT3B0aW9ucyIsIm9ic2VydmFibGVSZWZBbm5vdGF0aW9uIiwiZW5oYW5jZXIiLCJvYnNlcnZhYmxlU2hhbGxvd0Fubm90YXRpb24iLCJvYnNlcnZhYmxlU3RydWN0QW5ub3RhdGlvbiIsIm9ic2VydmFibGVEZWNvcmF0b3JBbm5vdGF0aW9uIiwiZ2V0RW5oYW5jZXJGcm9tT3B0aW9ucyIsImdldEVuaGFuY2VyRnJvbUFubm90YXRpb24iLCJnZXRBbm5vdGF0aW9uRnJvbU9wdGlvbnMiLCJvYnNlcnZhYmxlRmFjdG9yaWVzIiwiYm94IiwibyIsImFycmF5IiwibWFwIiwiZXh0ZW5kT2JzZXJ2YWJsZSIsImFzT2JzZXJ2YWJsZU9iamVjdCIsImFzRHluYW1pY09ic2VydmFibGVPYmplY3QiLCJyZWYiLCJzdHJ1Y3QiLCJDT01QVVRFRCIsIkNPTVBVVEVEX1NUUlVDVCIsImNvbXB1dGVkQW5ub3RhdGlvbiIsImNvbXB1dGVkU3RydWN0QW5ub3RhdGlvbiIsImVxdWFscyIsIm9wdHMiLCJhcmcxIiwiY3VycmVudEFjdGlvbklkIiwibmV4dEFjdGlvbklkIiwiaXNGdW5jdGlvbk5hbWVDb25maWd1cmFibGUiLCJ0bXBOYW1lRGVzY3JpcHRvciIsImFjdGlvbk5hbWUiLCJleGVjdXRlQWN0aW9uIiwiY2FuUnVuQXNEZXJpdmF0aW9uIiwic2NvcGUiLCJydW5JbmZvIiwiX3N0YXJ0QWN0aW9uIiwiX2VuZEFjdGlvbiIsIm5vdGlmeVNweV8iLCJpc1NweUVuYWJsZWQiLCJzdGFydFRpbWVfIiwiRGF0ZSIsImZsYXR0ZW5lZEFyZ3MiLCJzcHlSZXBvcnRTdGFydCIsInR5cGUiLCJhcmd1bWVudHMiLCJwcmV2RGVyaXZhdGlvbl8iLCJydW5Bc0FjdGlvbiIsInByZXZBbGxvd1N0YXRlQ2hhbmdlc18iLCJ1bnRyYWNrZWRTdGFydCIsImFsbG93U3RhdGVDaGFuZ2VzU3RhcnQiLCJwcmV2QWxsb3dTdGF0ZVJlYWRzXyIsImFsbG93U3RhdGVSZWFkc1N0YXJ0IiwicnVuQXNBY3Rpb25fIiwiYWN0aW9uSWRfIiwicGFyZW50QWN0aW9uSWRfIiwiYWxsb3dTdGF0ZUNoYW5nZXNFbmQiLCJhbGxvd1N0YXRlUmVhZHNFbmQiLCJ1bnRyYWNrZWRFbmQiLCJzcHlSZXBvcnRFbmQiLCJ0aW1lIiwiYWxsb3dTdGF0ZUNoYW5nZXMiLCJwcmV2IiwiQ1JFQVRFIiwiT2JzZXJ2YWJsZVZhbHVlIiwiaGFzVW5yZXBvcnRlZENoYW5nZV8iLCJpbnRlcmNlcHRvcnNfIiwiY2hhbmdlTGlzdGVuZXJzXyIsInZhbHVlXyIsImRlaGFuY2VyIiwibm90aWZ5U3B5Iiwic3B5UmVwb3J0Iiwib2JzZXJ2YWJsZUtpbmQiLCJkZWJ1Z09iamVjdE5hbWUiLCJkZWhhbmNlVmFsdWUiLCJwcmVwYXJlTmV3VmFsdWVfIiwiY2hlY2tJZlN0YXRlTW9kaWZpY2F0aW9uc0FyZUFsbG93ZWQiLCJoYXNJbnRlcmNlcHRvcnMiLCJjaGFuZ2UiLCJpbnRlcmNlcHRDaGFuZ2UiLCJzZXROZXdWYWx1ZV8iLCJoYXNMaXN0ZW5lcnMiLCJub3RpZnlMaXN0ZW5lcnMiLCJpbnRlcmNlcHRfIiwicmVnaXN0ZXJJbnRlcmNlcHRvciIsIm9ic2VydmVfIiwidW5kZWZpbmVkIiwicmVnaXN0ZXJMaXN0ZW5lciIsInJhdyIsInRvSlNPTiIsInZhbHVlT2YiLCJpc09ic2VydmFibGVWYWx1ZSIsIkNvbXB1dGVkVmFsdWUiLCJkZXBlbmRlbmNpZXNTdGF0ZV8iLCJvYnNlcnZpbmdfIiwibmV3T2JzZXJ2aW5nXyIsInJ1bklkXyIsIlVQX1RPX0RBVEVfIiwidW5ib3VuZERlcHNDb3VudF8iLCJ0cmlnZ2VyZWRCeV8iLCJpc0NvbXB1dGluZ18iLCJpc1J1bm5pbmdTZXR0ZXJfIiwiZGVyaXZhdGlvbiIsInNldHRlcl8iLCJpc1RyYWNpbmdfIiwiVHJhY2VNb2RlIiwiTk9ORSIsInNjb3BlXyIsImVxdWFsc18iLCJyZXF1aXJlc1JlYWN0aW9uXyIsImtlZXBBbGl2ZV8iLCJvbkJlY29tZVN0YWxlXyIsInByb3BhZ2F0ZU1heWJlQ2hhbmdlZCIsInNob3VsZENvbXB1dGUiLCJwcmV2VHJhY2tpbmdDb250ZXh0IiwicHJvcGFnYXRlQ2hhbmdlQ29uZmlybWVkIiwicmVzdWx0IiwiaXNDYXVnaHRFeGNlcHRpb24iLCJ0cmFja0FuZENvbXB1dGUiLCJ3YXNTdXNwZW5kZWQiLCJjaGFuZ2VkIiwiY29tcHV0ZVZhbHVlXyIsInRyYWNrRGVyaXZlZEZ1bmN0aW9uIiwic3VzcGVuZF8iLCJjbGVhck9ic2VydmluZyIsImNvbnNvbGUiLCJmaXJzdFRpbWUiLCJwcmV2VmFsdWUiLCJhdXRvcnVuIiwicHJldlUiLCJ3YXJuQWJvdXRVbnRyYWNrZWRSZWFkXyIsImlzQ29tcHV0ZWRWYWx1ZSIsIkNhdWdodEV4Y2VwdGlvbiIsInByZXZBbGxvd1N0YXRlUmVhZHMiLCJwcmV2VW50cmFja2VkIiwib2JzIiwibCIsImkiLCJjaGFuZ2VEZXBlbmRlbmNpZXNTdGF0ZVRvMCIsImlzQ29tcHV0aW5nRGVyaXZhdGlvbiIsImhhc09ic2VydmVycyIsImNoZWNrSWZTdGF0ZVJlYWRzQXJlQWxsb3dlZCIsImYiLCJjb250ZXh0IiwicHJldlRyYWNraW5nIiwiYmluZERlcGVuZGVuY2llcyIsIndhcm5BYm91dERlcml2YXRpb25XaXRob3V0RGVwZW5kZW5jaWVzIiwicHJldk9ic2VydmluZyIsIm9ic2VydmluZyIsImxvd2VzdE5ld09ic2VydmluZ0Rlcml2YXRpb25TdGF0ZSIsImkwIiwiZGVwIiwicmVtb3ZlT2JzZXJ2ZXIiLCJhZGRPYnNlcnZlciIsInVudHJhY2tlZCIsImFjdGlvbiIsImFsbG93U3RhdGVSZWFkcyIsInBlcnNpc3RlbnRLZXlzIiwiTW9iWEdsb2JhbHMiLCJjYW5NZXJnZUdsb2JhbFN0YXRlIiwiaXNvbGF0ZUNhbGxlZCIsImdsb2JhbCIsInNldFRpbWVvdXQiLCJpc29sYXRlR2xvYmFsU3RhdGUiLCJnZXRHbG9iYWxTdGF0ZSIsInJlc2V0R2xvYmFsU3RhdGUiLCJkZWZhdWx0R2xvYmFscyIsImdldE9ic2VydmVycyIsIm5vZGUiLCJxdWV1ZUZvclVub2JzZXJ2YXRpb24iLCJydW5SZWFjdGlvbnMiLCJsaXN0IiwiZCIsImxvZ1RyYWNlSW5mbyIsImxpbmVzIiwicHJpbnREZXBUcmVlIiwiZ2V0RGVwZW5kZW5jeVRyZWUiLCJ0cmVlIiwiZGVwdGgiLCJSZWFjdGlvbiIsImlzRGlzcG9zZWRfIiwiaXNTY2hlZHVsZWRfIiwiaXNUcmFja1BlbmRpbmdfIiwiaXNSdW5uaW5nXyIsInJlcXVpcmVzT2JzZXJ2YWJsZV8iLCJzY2hlZHVsZV8iLCJpc1NjaGVkdWxlZCIsInJ1blJlYWN0aW9uXyIsInRyYWNrIiwibm90aWZ5Iiwic3RhcnRUaW1lIiwicHJldlJlYWN0aW9uIiwicmVwb3J0RXhjZXB0aW9uSW5EZXJpdmF0aW9uXyIsIm1lc3NhZ2UiLCJkaXNwb3NlIiwiZ2V0RGlzcG9zZXJfIiwiciIsInRyYWNlIiwiZW50ZXJCcmVha1BvaW50Iiwib25SZWFjdGlvbkVycm9yIiwiaGFuZGxlciIsImlkeCIsIk1BWF9SRUFDVElPTl9JVEVSQVRJT05TIiwicmVhY3Rpb25TY2hlZHVsZXIiLCJhbGxSZWFjdGlvbnMiLCJpdGVyYXRpb25zIiwicmVtYWluaW5nUmVhY3Rpb25zIiwiaXNSZWFjdGlvbiIsInNldFJlYWN0aW9uU2NoZWR1bGVyIiwiYmFzZVNjaGVkdWxlciIsImV2ZW50IiwibGlzdGVuZXJzIiwiRU5EX0VWRU5UIiwic3B5IiwiQUNUSU9OIiwiQUNUSU9OX0JPVU5EIiwiQVVUT0FDVElPTiIsIkFVVE9BQ1RJT05fQk9VTkQiLCJERUZBVUxUX0FDVElPTl9OQU1FIiwiYWN0aW9uQm91bmRBbm5vdGF0aW9uIiwiYm91bmQiLCJhdXRvQWN0aW9uQW5ub3RhdGlvbiIsImF1dG9BY3Rpb25Cb3VuZEFubm90YXRpb24iLCJjcmVhdGVBY3Rpb25GYWN0b3J5IiwicnVuSW5BY3Rpb24iLCJ2aWV3IiwicnVuU3luYyIsInJlYWN0aW9uIiwic2NoZWR1bGVyIiwiY3JlYXRlU2NoZWR1bGVyRnJvbU9wdGlvbnMiLCJydW4iLCJleHByZXNzaW9uIiwiZWZmZWN0IiwiZWZmZWN0QWN0aW9uIiwid3JhcEVycm9ySGFuZGxlciIsInJlYWN0aW9uUnVubmVyIiwibmV4dFZhbHVlIiwiYmFzZUZuIiwiZXJyb3JIYW5kbGVyIiwiT05fQkVDT01FX09CU0VSVkVEIiwiT05fQkVDT01FX1VOT0JTRVJWRUQiLCJhcmcyIiwiYXJnMyIsImludGVyY2VwdEhvb2siLCJnZXRBdG9tIiwiY2IiLCJsaXN0ZW5lcnNLZXkiLCJob29rIiwiaG9va0xpc3RlbmVycyIsIk5FVkVSIiwiQUxXQVlTIiwiT0JTRVJWRUQiLCJjb25maWd1cmUiLCJ1c2VQcm94aWVzIiwiZW5mb3JjZUFjdGlvbnMiLCJlYSIsInByb3BlcnRpZXMiLCJhbm5vdGF0aW9ucyIsImRlc2NyaXB0b3JzIiwibm9kZVRvRGVwZW5kZW5jeVRyZWUiLCJ1bmlxdWUiLCJnZXRPYnNlcnZlclRyZWUiLCJub2RlVG9PYnNlcnZlclRyZWUiLCJnZW5lcmF0b3JJZCIsIkZsb3dDYW5jZWxsYXRpb25FcnJvciIsIkVycm9yIiwiaXNGbG93Q2FuY2VsbGF0aW9uRXJyb3IiLCJmbG93Qm91bmRBbm5vdGF0aW9uIiwiZ2VuZXJhdG9yIiwiY3R4IiwicnVuSWQiLCJnZW4iLCJwZW5kaW5nUHJvbWlzZSIsInByb21pc2UiLCJzdGVwSWQiLCJyZWplY3RvciIsInJldCIsInJlamVjdCIsIm5leHQiLCJyZXNvbHZlIiwiUHJvbWlzZSIsIm9uRnVsZmlsbGVkIiwiY2FuY2VsUHJvbWlzZSIsInlpZWxkZWRQcm9taXNlIiwiZmxvd1Jlc3VsdCIsImludGVyY2VwdFJlYWRzIiwicHJvcE9ySGFuZGxlciIsImdldEFkbWluaXN0cmF0aW9uIiwiaW50ZXJjZXB0IiwiaW50ZXJjZXB0UHJvcGVydHkiLCJpbnRlcmNlcHRJbnRlcmNlcHRhYmxlIiwiX2lzQ29tcHV0ZWQiLCJpc0NvbXB1dGVkIiwiaXNDb21wdXRlZFByb3AiLCJfaXNPYnNlcnZhYmxlIiwiaXNPYnNlcnZhYmxlUHJvcCIsInZhbHVlcyIsImVudHJpZXMiLCJwYXJzZUludCIsInJlbW92ZSIsImhhcyIsImFwaURlZmluZVByb3BlcnR5IiwiYXBpT3duS2V5cyIsIm9ic2VydmUiLCJwcm9wT3JDYiIsImNiT3JGaXJlIiwiZmlyZUltbWVkaWF0ZWx5Iiwib2JzZXJ2ZU9ic2VydmFibGVQcm9wZXJ0eSIsIm9ic2VydmVPYnNlcnZhYmxlIiwidG9KU0hlbHBlciIsIl9fYWxyZWFkeVNlZW4iLCJjYWNoZSIsInRvSlMiLCJnZXRBdG9tRnJvbUFyZ3MiLCJ0cmFuc2FjdGlvbiIsInRoaXNBcmciLCJ3aGVuIiwicHJlZGljYXRlIiwid2hlblByb21pc2UiLCJfd2hlbiIsInRpbWVvdXRIYW5kbGUiLCJkaXNwb3NlciIsImNvbmQiLCJjbGVhclRpbWVvdXQiLCJvbkVycm9yIiwiY2FuY2VsIiwib2JqZWN0UHJveHlUcmFwcyIsImdldEFkbSIsImRlbGV0ZVByb3BlcnR5IiwicHJldmVudEV4dGVuc2lvbnMiLCJpbnRlcmNlcHRhYmxlIiwiaW50ZXJjZXB0b3JzIiwibGlzdGVuYWJsZSIsIm1ha2VPYnNlcnZhYmxlIiwia2V5c1N5bWJvbCIsIm1ha2VBdXRvT2JzZXJ2YWJsZSIsIm92ZXJyaWRlcyIsIlNQTElDRSIsIlVQREFURSIsIk1BWF9TUExJQ0VfU0laRSIsImFycmF5VHJhcHMiLCJpc05hTiIsImFycmF5RXh0ZW5zaW9ucyIsIk9ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uIiwiYXRvbV8iLCJ2YWx1ZXNfIiwiZW5oYW5jZXJfIiwicHJveHlfIiwibGFzdEtub3duTGVuZ3RoXyIsImRlaGFuY2VWYWx1ZV8iLCJkZWhhbmNlVmFsdWVzXyIsImluZGV4IiwiYWRkZWQiLCJhZGRlZENvdW50IiwicmVtb3ZlZCIsInJlbW92ZWRDb3VudCIsImdldEFycmF5TGVuZ3RoXyIsInNldEFycmF5TGVuZ3RoXyIsIm5ld0xlbmd0aCIsImN1cnJlbnRMZW5ndGgiLCJuZXdJdGVtcyIsInVwZGF0ZUFycmF5TGVuZ3RoXyIsIm9sZExlbmd0aCIsImRlbHRhIiwicmVzZXJ2ZUFycmF5QnVmZmVyIiwic3BsaWNlV2l0aEFycmF5XyIsImxlbmd0aCIsIk1hdGgiLCJkZWxldGVDb3VudCIsImxlbmd0aERlbHRhIiwic3BsaWNlSXRlbXNJbnRvVmFsdWVzXyIsIm9sZEl0ZW1zIiwibm90aWZ5QXJyYXlDaGlsZFVwZGF0ZV8iLCJub3RpZnlBcnJheVNwbGljZV8iLCJnZXRfIiwic2V0XyIsImNyZWF0ZU9ic2VydmFibGVBcnJheSIsImluaXRpYWxWYWx1ZXMiLCJvd25lZCIsImNsZWFyIiwicmVwbGFjZSIsInNwbGljZSIsInNwbGljZVdpdGhBcnJheSIsInB1c2giLCJpdGVtcyIsInBvcCIsInNoaWZ0IiwidW5zaGlmdCIsInJldmVyc2UiLCJzb3J0IiwiY29weSIsImFkZEFycmF5RXh0ZW5zaW9uIiwiZnVuY0ZhY3RvcnkiLCJkZWhhbmNlZFZhbHVlcyIsImNhbGxiYWNrIiwiaXNPYnNlcnZhYmxlQXJyYXlBZG1pbmlzdHJhdGlvbiIsIk9ic2VydmFibGVNYXBNYXJrZXIiLCJBREQiLCJERUxFVEUiLCJPYnNlcnZhYmxlTWFwIiwiZGF0YV8iLCJoYXNNYXBfIiwia2V5c0F0b21fIiwiaGFzXyIsImVudHJ5IiwibmV3RW50cnkiLCJoYXNLZXkiLCJ1cGRhdGVIYXNNYXBFbnRyeV8iLCJ1cGRhdGVWYWx1ZV8iLCJhZGRWYWx1ZV8iLCJzZWxmIiwibWFrZUl0ZXJhYmxlIiwiZG9uZSIsIml0ZXJhdG9yIiwiZm9yRWFjaCIsIm1lcmdlIiwicmVwbGFjZW1lbnRNYXAiLCJjb252ZXJ0VG9NYXAiLCJvcmRlcmVkRGF0YSIsImtleXNSZXBvcnRDaGFuZ2VkQ2FsbGVkIiwiZGVsZXRlZCIsImtleUV4aXN0ZWQiLCJpdGVyMSIsIml0ZXIyIiwibmV4dDEiLCJuZXh0MiIsInRvU3RyaW5nVGFnIiwiZGF0YVN0cnVjdHVyZSIsIk9ic2VydmFibGVTZXRNYXJrZXIiLCJPYnNlcnZhYmxlU2V0IiwiY2FsbGJhY2tGbiIsImFkZCIsIm5leHRJbmRleCIsIm9ic2VydmFibGVWYWx1ZXMiLCJkZXNjcmlwdG9yQ2FjaGUiLCJSRU1PVkUiLCJPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24iLCJpc1BsYWluT2JqZWN0XyIsImFwcGxpZWRBbm5vdGF0aW9uc18iLCJwZW5kaW5nS2V5c18iLCJkZWZhdWx0QW5ub3RhdGlvbl8iLCJpc0Fubm90YXRpb24iLCJnZXRPYnNlcnZhYmxlUHJvcFZhbHVlXyIsInNldE9ic2VydmFibGVQcm9wVmFsdWVfIiwicHJveHlUcmFwIiwiYXNzZXJ0QW5ub3RhYmxlIiwib3V0Y29tZSIsInJlY29yZEFubm90YXRpb25BcHBsaWVkIiwiZGVmaW5lUHJvcGVydHlfIiwiZGVsZXRlT3V0Y29tZSIsImRlZmluZU9ic2VydmFibGVQcm9wZXJ0eV8iLCJjYWNoZWREZXNjcmlwdG9yIiwiZ2V0Q2FjaGVkT2JzZXJ2YWJsZVByb3BEZXNjcmlwdG9yIiwiZGVmaW5lQ29tcHV0ZWRQcm9wZXJ0eV8iLCJkZWxldGVfIiwibm90aWZ5UHJvcGVydHlBZGRpdGlvbl8iLCJvd25LZXlzXyIsImtleXNfIiwiZ2V0RGVidWdOYW1lIiwiU3RyaW5nIiwiaXNPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24iLCJPQlNFUlZBQkxFX0FSUkFZX0JVRkZFUl9TSVpFIiwiU3R1YkFycmF5IiwiY3RvciIsImluaGVyaXQiLCJMZWdhY3lPYnNlcnZhYmxlQXJyYXkiLCJjb25jYXQiLCJhcnJheXMiLCJjcmVhdGVBcnJheUVudHJ5RGVzY3JpcHRvciIsIm1heCIsImNyZWF0ZUFycmF5QnVmZmVySXRlbSIsImNyZWF0ZUxlZ2FjeUFycmF5IiwibmFtZWQiLCJlcSIsImNsYXNzTmFtZSIsInVud3JhcCIsImFyZUFycmF5cyIsImFDdG9yIiwiYkN0b3IiLCJhU3RhY2siLCJiU3RhY2siLCJnIiwiX19NT0JYX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJleHRyYXMiLCJfc2V0UHJvdG90eXBlT2YiLCJwIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJfaW5oZXJpdHNMb29zZSIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNyZWF0ZSIsIl9leHRlbmRzIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiYXBwbHkiLCJpc0Fic29sdXRlIiwicGF0aG5hbWUiLCJjaGFyQXQiLCJzcGxpY2VPbmUiLCJrIiwibiIsInJlc29sdmVQYXRobmFtZSIsInRvIiwiZnJvbSIsInRvUGFydHMiLCJzcGxpdCIsImZyb21QYXJ0cyIsImlzVG9BYnMiLCJpc0Zyb21BYnMiLCJtdXN0RW5kQWJzIiwiaGFzVHJhaWxpbmdTbGFzaCIsImxhc3QiLCJ1cCIsInBhcnQiLCJqb2luIiwic3Vic3RyIiwidmFsdWVFcXVhbCIsImlzQXJyYXkiLCJldmVyeSIsIml0ZW0iLCJhVmFsdWUiLCJiVmFsdWUiLCJpc1Byb2R1Y3Rpb24iLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJwcmVmaXgiLCJpbnZhcmlhbnQiLCJjb25kaXRpb24iLCJ3YXJuaW5nIiwiYWRkTGVhZGluZ1NsYXNoIiwicGF0aCIsInN0cmlwTGVhZGluZ1NsYXNoIiwiaGFzQmFzZW5hbWUiLCJ0b0xvd2VyQ2FzZSIsImluZGV4T2YiLCJzdHJpcEJhc2VuYW1lIiwic3RyaXBUcmFpbGluZ1NsYXNoIiwic2xpY2UiLCJwYXJzZVBhdGgiLCJzZWFyY2giLCJoYXNoIiwiaGFzaEluZGV4Iiwic2VhcmNoSW5kZXgiLCJjcmVhdGVQYXRoIiwibG9jYXRpb24iLCJjcmVhdGVMb2NhdGlvbiIsInN0YXRlIiwiY3VycmVudExvY2F0aW9uIiwiZGVjb2RlVVJJIiwiVVJJRXJyb3IiLCJsb2NhdGlvbnNBcmVFcXVhbCIsImNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyIiwicHJvbXB0Iiwic2V0UHJvbXB0IiwibmV4dFByb21wdCIsImNvbmZpcm1UcmFuc2l0aW9uVG8iLCJnZXRVc2VyQ29uZmlybWF0aW9uIiwiYXBwZW5kTGlzdGVuZXIiLCJpc0FjdGl2ZSIsImZpbHRlciIsIl9sZW4iLCJfa2V5IiwiY2FuVXNlRE9NIiwid2luZG93IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiZ2V0Q29uZmlybWF0aW9uIiwiY29uZmlybSIsInN1cHBvcnRzSGlzdG9yeSIsInVhIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiaGlzdG9yeSIsInN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UiLCJzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCIsImlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQiLCJQb3BTdGF0ZUV2ZW50IiwiSGFzaENoYW5nZUV2ZW50IiwiZ2V0SGlzdG9yeVN0YXRlIiwiY3JlYXRlQnJvd3Nlckhpc3RvcnkiLCJwcm9wcyIsImdsb2JhbEhpc3RvcnkiLCJjYW5Vc2VIaXN0b3J5IiwibmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIiLCJfcHJvcHMiLCJfcHJvcHMkZm9yY2VSZWZyZXNoIiwiZm9yY2VSZWZyZXNoIiwiX3Byb3BzJGdldFVzZXJDb25maXJtIiwiX3Byb3BzJGtleUxlbmd0aCIsImtleUxlbmd0aCIsImJhc2VuYW1lIiwiZ2V0RE9NTG9jYXRpb24iLCJoaXN0b3J5U3RhdGUiLCJfcmVmIiwiX3dpbmRvdyRsb2NhdGlvbiIsImNyZWF0ZUtleSIsInJhbmRvbSIsInRyYW5zaXRpb25NYW5hZ2VyIiwic2V0U3RhdGUiLCJuZXh0U3RhdGUiLCJoYW5kbGVQb3BTdGF0ZSIsImhhbmRsZVBvcCIsImhhbmRsZUhhc2hDaGFuZ2UiLCJmb3JjZU5leHRQb3AiLCJvayIsInJldmVydFBvcCIsImZyb21Mb2NhdGlvbiIsInRvTG9jYXRpb24iLCJ0b0luZGV4IiwiYWxsS2V5cyIsImZyb21JbmRleCIsImdvIiwiaW5pdGlhbExvY2F0aW9uIiwiY3JlYXRlSHJlZiIsImhyZWYiLCJwdXNoU3RhdGUiLCJwcmV2SW5kZXgiLCJuZXh0S2V5cyIsInJlcGxhY2VTdGF0ZSIsImdvQmFjayIsImdvRm9yd2FyZCIsImxpc3RlbmVyQ291bnQiLCJjaGVja0RPTUxpc3RlbmVycyIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiaXNCbG9ja2VkIiwiYmxvY2siLCJ1bmJsb2NrIiwibGlzdGVuIiwidW5saXN0ZW4iLCJIYXNoQ2hhbmdlRXZlbnQkMSIsIkhhc2hQYXRoQ29kZXJzIiwiaGFzaGJhbmciLCJlbmNvZGVQYXRoIiwiZGVjb2RlUGF0aCIsIm5vc2xhc2giLCJzbGFzaCIsInN0cmlwSGFzaCIsInVybCIsImdldEhhc2hQYXRoIiwic3Vic3RyaW5nIiwicHVzaEhhc2hQYXRoIiwicmVwbGFjZUhhc2hQYXRoIiwiY3JlYXRlSGFzaEhpc3RvcnkiLCJjYW5Hb1dpdGhvdXRSZWxvYWQiLCJfcHJvcHMkaGFzaFR5cGUiLCJoYXNoVHlwZSIsIl9IYXNoUGF0aENvZGVycyRoYXNoVCIsImlnbm9yZVBhdGgiLCJsb2NhdGlvbnNBcmVFcXVhbCQkMSIsImVuY29kZWRQYXRoIiwicHJldkxvY2F0aW9uIiwiYWxsUGF0aHMiLCJsYXN0SW5kZXhPZiIsImJhc2VUYWciLCJxdWVyeVNlbGVjdG9yIiwiZ2V0QXR0cmlidXRlIiwiaGFzaENoYW5nZWQiLCJuZXh0UGF0aHMiLCJjbGFtcCIsImxvd2VyQm91bmQiLCJ1cHBlckJvdW5kIiwibWluIiwiY3JlYXRlTWVtb3J5SGlzdG9yeSIsIl9wcm9wcyRpbml0aWFsRW50cmllcyIsImluaXRpYWxFbnRyaWVzIiwiX3Byb3BzJGluaXRpYWxJbmRleCIsImluaXRpYWxJbmRleCIsIm5leHRFbnRyaWVzIiwiY2FuR28iLCJDb21wb25lbnQiLCJQcm9wVHlwZXMiLCJNQVhfU0lHTkVEXzMxX0JJVF9JTlQiLCJjb21tb25qc0dsb2JhbCIsImdsb2JhbFRoaXMiLCJnZXRVbmlxdWVJZCIsIm9iamVjdElzIiwieSIsImNyZWF0ZUV2ZW50RW1pdHRlciIsImhhbmRsZXJzIiwib24iLCJvZmYiLCJoIiwiY2hhbmdlZEJpdHMiLCJvbmx5Q2hpbGQiLCJjcmVhdGVSZWFjdENvbnRleHQiLCJkZWZhdWx0VmFsdWUiLCJjYWxjdWxhdGVDaGFuZ2VkQml0cyIsIl9Qcm92aWRlciRjaGlsZENvbnRleCIsIl9Db25zdW1lciRjb250ZXh0VHlwZSIsImNvbnRleHRQcm9wIiwiX0NvbXBvbmVudCIsIl90aGlzIiwiZW1pdHRlciIsIl9wcm90byIsImdldENoaWxkQ29udGV4dCIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJuZXh0UHJvcHMiLCJyZW5kZXIiLCJjaGlsZENvbnRleHRUeXBlcyIsImlzUmVxdWlyZWQiLCJDb25zdW1lciIsIl9Db21wb25lbnQyIiwiX3RoaXMyIiwiZ2V0VmFsdWUiLCJvblVwZGF0ZSIsIm9ic2VydmVkQml0cyIsIl9wcm90bzIiLCJjb21wb25lbnREaWRNb3VudCIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiY29udGV4dFR5cGVzIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJleGNsdWRlZCIsInNvdXJjZUtleXMiLCJjcmVhdGVOYW1lZENvbnRleHQiLCJoaXN0b3J5Q29udGV4dCIsIlJvdXRlciIsImNvbXB1dGVSb290TWF0Y2giLCJwYXJhbXMiLCJpc0V4YWN0IiwiX3BlbmRpbmdMb2NhdGlvbiIsIlJvdXRlckNvbnRleHQiLCJtYXRjaCIsInN0YXRpY0NvbnRleHQiLCJIaXN0b3J5Q29udGV4dCIsInByZXZQcm9wcyIsIk1lbW9yeVJvdXRlciIsImNyZWF0ZUhpc3RvcnkiLCJMaWZlY3ljbGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJtZXRob2QiLCJtZXNzYWdlVHlwZSIsIlByb21wdCIsImNhY2hlTGltaXQiLCJjYWNoZUNvdW50IiwicGF0aFRvUmVnZXhwIiwicHJldHR5IiwiY29tcHV0ZWRNYXRjaCIsImdlbmVyYXRlUGF0aCIsIlJlZGlyZWN0IiwiY2FjaGVLZXkiLCJwYXRoQ2FjaGUiLCJyZWdleHAiLCJleGFjdCIsInN0cmljdCIsInNlbnNpdGl2ZSIsInBhdGhzIiwiY29tcGlsZVBhdGgiLCJlbmQiLCJSb3V0ZSIsIm1hdGNoUGF0aCIsImNvbXBvbmVudCIsImlzRW1wdHlDaGlsZHJlbiIsImV2YWxDaGlsZHJlbkRldiIsImlzVmFsaWRFbGVtZW50VHlwZSIsImJvb2wiLCJiYXNlIiwiU3RhdGljUm91dGVyIiwibmF2aWdhdGVUbyIsImFkZEJhc2VuYW1lIiwiY3JlYXRlVVJMIiwiaGFuZGxlUHVzaCIsImhhbmRsZVJlcGxhY2UiLCJoYW5kbGVMaXN0ZW4iLCJoYW5kbGVCbG9jayIsInJlc3QiLCJzdGF0aWNIYW5kbGVyIiwiU3dpdGNoIiwiZWxlbWVudCIsImNoaWxkIiwiZGlzcGxheU5hbWUiLCJDIiwid3JhcHBlZENvbXBvbmVudFJlZiIsInJlbWFpbmluZ1Byb3BzIiwiaG9pc3RTdGF0aWNzIiwidXNlTG9jYXRpb24iLCJidWlsZE5hbWVzIiwiY2pzIiwiZXNtIiwidW1kIiwiaW5pdGlhbEJ1aWxkTmFtZSIsInNlY29uZGFyeUJ1aWxkTmFtZSIsIkJyb3dzZXJSb3V0ZXIiLCJudW1iZXIiLCJIYXNoUm91dGVyIiwicmVzb2x2ZVRvTG9jYXRpb24iLCJub3JtYWxpemVUb0xvY2F0aW9uIiwiZm9yd2FyZFJlZlNoaW0iLCJmb3J3YXJkUmVmIiwiTGlua0FuY2hvciIsImlubmVyUmVmIiwibmF2aWdhdGUiLCJpc01vZGlmaWVkRXZlbnQiLCJmb3J3YXJkZWRSZWYiLCJMaW5rIiwiaXNEdXBsaWNhdGVOYXZpZ2F0aW9uIiwidG9UeXBlIiwicmVmVHlwZSIsImFueSIsImNsYXNzbmFtZXMiLCJOYXZMaW5rIiwiYXJpYUN1cnJlbnQiLCJhY3RpdmVDbGFzc05hbWUiLCJhY3RpdmVTdHlsZSIsImNsYXNzTmFtZVByb3AiLCJpc0FjdGl2ZVByb3AiLCJsb2NhdGlvblByb3AiLCJzdHlsZSIsInN0eWxlUHJvcCIsImVzY2FwZWRQYXRoIiwiam9pbkNsYXNzbmFtZXMiLCJhcmlhQ3VycmVudFR5cGUiLCJBdmF0YXIiLCJzcmMiLCJhbHQiLCJyZXBvdGlsZV9fYXZhdGFyIiwiU3Rhckljb24iLCJSZXBvVGlsZSIsInJlcG9MaW5rIiwib3duZXIiLCJsb2dpbiIsInJlcG90aWxlIiwicmVwb3RpbGVfX2NvbnRlbnQiLCJhdmF0YXJVcmwiLCJyZXBvdGlsZV9faW5mbyIsInJlcG90aWxlX19oZWFkaW5nIiwicmVwb3RpbGVfX29yZ0xpbmsiLCJyZXBvdGlsZV9fc3RhdHMiLCJyZXBvdGlsZV9fc3RhdHNfX3N0YXJzIiwic3RhcmdhemVyc0NvdW50IiwidXBkYXRlZEF0IiwiUmVwb3NMaXN0UGFnZSIsInJlcG8iLCJpZCIsIkhUVFBNZXRob2QiLCJTdGF0dXNIVFRQIiwicXMiLCJBcGlTdG9yZSIsImJhc2VVcmwiLCJlbmRwb2ludCIsInJlcSIsImhlYWRlcnMiLCJHRVQiLCJzdHJpbmdpZnkiLCJkYXRhIiwiUE9TVCIsImJvZHkiLCJKU09OIiwiZ2V0UmVxRGF0YSIsImZldGNoIiwicmVzcG9uc2UiLCJqc29uIiwic3RhdHVzIiwic3VjY2VzcyIsIkVSUk9SIiwibm9ybWFsaXplR2l0SHViUmVwb093bmVyIiwiYXZhdGFyX3VybCIsIm5vcm1hbGl6ZVJlcG9JdGVtIiwic3RhcmdhemVyc19jb3VudCIsInVwZGF0ZWRfYXQiLCJSZXBvSXRlbVN0b3JlIiwiYXBpU3RvcmUiLCJfcmVwbyIsIl9tZXRhIiwiaW5pdGlhbCIsIm1ldGEiLCJlbmRQb2ludCIsImxvYWRpbmciLCJyZXF1ZXN0Iiwib2JzZXJ2ZXIiLCJ1c2VQYXJhbXMiLCJVc2VyUmVwb1BhZ2UiLCJyZXBvSXRlbVN0b3JlIiwiZ2V0UmVwbyIsImdldEluaXRpYWxDb2xsZWN0aW9uTW9kZWwiLCJvcmRlciIsImVudGl0aWVzIiwibm9ybWFsaXplQ29sbGVjdGlvbiIsImVsZW1lbnRzIiwiZ2V0S2V5Rm9yRWxlbWVudCIsImNvbGxlY3Rpb24iLCJlbCIsImxpbmVhcml6ZUNvbGxlY3Rpb24iLCJSZXBvc0xpc3RTdG9yZSIsIl9saXN0IiwiZ2V0T3JnYW5pemF0aW9uUmVwb3NMaXN0Iiwib3JnTmFtZSIsImxpc3RJdGVtIiwibG9nIiwiUmVwb3NTZWFyY2hQYWdlIiwidXNlU3RhdGUiLCJoYW5kbGVTZWFyY2giLCJoYW5kbGVDaGFuZ2UiLCJ1c2VDYWxsYmFjayIsIkFwcCIsImNvbXB1dGVkUmVxdWlyZXNSZWFjdGlvbiIsInJlYWN0aW9uUmVxdWlyZXNPYnNlcnZhYmxlIiwib2JzZXJ2YWJsZVJlcXVpcmVzUmVhY3Rpb24iLCJSZWFjdERPTSIsImdldEVsZW1lbnRCeUlkIiwibW9kdWxlIiwiaG90IiwiYWNjZXB0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///179\n')},579:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Z\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(476);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(705);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"body{margin:0;font-family:-apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}code{font-family:source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/index.css\"],\"names\":[],\"mappings\":\"AAAA,KACE,QAAS,CACT,6JAEY,CACZ,kCAAmC,CACnC,iCAAkC,CACnC,KAGC,8EACW\",\"sourcesContent\":[\"body {\\n  margin: 0;\\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\\n    sans-serif;\\n  -webkit-font-smoothing: antialiased;\\n  -moz-osx-font-smoothing: grayscale;\\n}\\n\\ncode {\\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\\n    monospace;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTc5LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUMwRztBQUNqQjtBQUN6Riw4QkFBOEIsbUZBQTJCLENBQUMsNEZBQXFDO0FBQy9GO0FBQ0EsK0NBQStDLFNBQVMsOEpBQThKLG1DQUFtQyxrQ0FBa0MsS0FBSywrRUFBK0UsU0FBUyx5S0FBeUssY0FBYyw2S0FBNkssd0NBQXdDLHVDQUF1QyxHQUFHLFVBQVUseUZBQXlGLEdBQUcscUJBQXFCO0FBQ3o2QjtBQUNBLGlFQUFlLHVCQUF1QixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3JhX25ldy8uL3NyYy9pbmRleC5jc3M/MmU1MiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcImJvZHl7bWFyZ2luOjA7Zm9udC1mYW1pbHk6LWFwcGxlLXN5c3RlbSwgQmxpbmtNYWNTeXN0ZW1Gb250LCAnU2Vnb2UgVUknLCAnUm9ib3RvJywgJ094eWdlbicsICdVYnVudHUnLCAnQ2FudGFyZWxsJywgJ0ZpcmEgU2FucycsICdEcm9pZCBTYW5zJywgJ0hlbHZldGljYSBOZXVlJywgc2Fucy1zZXJpZjstd2Via2l0LWZvbnQtc21vb3RoaW5nOmFudGlhbGlhc2VkOy1tb3otb3N4LWZvbnQtc21vb3RoaW5nOmdyYXlzY2FsZX1jb2Rle2ZvbnQtZmFtaWx5OnNvdXJjZS1jb2RlLXBybywgTWVubG8sIE1vbmFjbywgQ29uc29sYXMsICdDb3VyaWVyIE5ldycsIG1vbm9zcGFjZX1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvaW5kZXguY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLEtBQ0UsUUFBUyxDQUNULDZKQUVZLENBQ1osa0NBQW1DLENBQ25DLGlDQUFrQyxDQUNuQyxLQUdDLDhFQUNXXCIsXCJzb3VyY2VzQ29udGVudFwiOltcImJvZHkge1xcbiAgbWFyZ2luOiAwO1xcbiAgZm9udC1mYW1pbHk6IC1hcHBsZS1zeXN0ZW0sIEJsaW5rTWFjU3lzdGVtRm9udCwgJ1NlZ29lIFVJJywgJ1JvYm90bycsICdPeHlnZW4nLFxcbiAgICAnVWJ1bnR1JywgJ0NhbnRhcmVsbCcsICdGaXJhIFNhbnMnLCAnRHJvaWQgU2FucycsICdIZWx2ZXRpY2EgTmV1ZScsXFxuICAgIHNhbnMtc2VyaWY7XFxuICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcXG4gIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7XFxufVxcblxcbmNvZGUge1xcbiAgZm9udC1mYW1pbHk6IHNvdXJjZS1jb2RlLXBybywgTWVubG8sIE1vbmFjbywgQ29uc29sYXMsICdDb3VyaWVyIE5ldycsXFxuICAgIG1vbm9zcGFjZTtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///579\n")},369:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(476);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(705);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, ".src-components-Button-Button-module__button{width:50px;height:50px;border-radius:6px;background:#f55;border:none}.src-components-Button-Button-module__button:hover{opacity:0.7}.src-components-Button-Button-module__button:disabled{background:#d9d9d9}\\n", "",{"version":3,"sources":["webpack://./src/components/Button/Button.module.scss","webpack://./src/variables.scss"],"names":[],"mappings":"AAEA,6CCWE,UDVoB,CCWpB,WDXoB,CCclB,iBDduB,CAEzB,eCLiB,CDMjB,WAAY,CACb,mDAGC,WAAY,CACb,sDAGC,kBCZwB","sourcesContent":["@import \\"../../variables.scss\\";\\r\\n\\r\\n.button {\\r\\n  @include square(50px, 6px);\\r\\n\\r\\n  background: $red-color;\\r\\n  border: none;\\r\\n}\\r\\n\\r\\n.button:hover {\\r\\n  opacity: 0.7;\\r\\n}\\r\\n\\r\\n.button:disabled {\\r\\n  background: $light-gray-color;\\r\\n}\\r\\n","$red-color: #ff5555;\\r\\n$white-color: #fff;\\r\\n$light-gray-color: #d9d9d9;\\r\\n$gray-color: #7e7e7e;\\r\\n$org-link-color: #208fbf;\\r\\n$text-color: #000;\\r\\n$repotile-hover: rgba(182, 182, 182, 0.25);\\r\\n$input-bg-disabled: #f9f9f9;\\r\\n\\r\\n$border: 1.5px solid $light-gray-color;\\r\\n$border-radius: 6px;\\r\\n\\r\\n@mixin square($size, $border-radius: none) {\\r\\n  width: $size;\\r\\n  height: $size;\\r\\n\\r\\n  @if ($border-radius != none) {\\r\\n    border-radius: $border-radius;\\r\\n  }\\r\\n}\\r\\n"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"button": "src-components-Button-Button-module__button"\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzY5LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNnSDtBQUNqQjtBQUMvRiw4QkFBOEIsbUZBQTJCLENBQUMsNEZBQXFDO0FBQy9GO0FBQ0EsdUZBQXVGLFdBQVcsWUFBWSxrQkFBa0IsZ0JBQWdCLFlBQVksbURBQW1ELFlBQVksc0RBQXNELG1CQUFtQixTQUFTLCtSQUErUixpQkFBaUIsaUNBQWlDLGlDQUFpQyxtQkFBbUIsS0FBSyx1QkFBdUIsbUJBQW1CLEtBQUssMEJBQTBCLG9DQUFvQyxLQUFLLDJCQUEyQix1QkFBdUIsK0JBQStCLHlCQUF5Qiw2QkFBNkIsc0JBQXNCLCtDQUErQyxnQ0FBZ0MsK0NBQStDLHdCQUF3QixvREFBb0QsbUJBQW1CLG9CQUFvQix3Q0FBd0Msc0NBQXNDLE9BQU8sS0FBSyx1QkFBdUI7QUFDeHlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWUsdUJBQXVCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jcmFfbmV3Ly4vc3JjL2NvbXBvbmVudHMvQnV0dG9uL0J1dHRvbi5tb2R1bGUuc2Nzcz9mYmViIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLnNyYy1jb21wb25lbnRzLUJ1dHRvbi1CdXR0b24tbW9kdWxlX19idXR0b257d2lkdGg6NTBweDtoZWlnaHQ6NTBweDtib3JkZXItcmFkaXVzOjZweDtiYWNrZ3JvdW5kOiNmNTU7Ym9yZGVyOm5vbmV9LnNyYy1jb21wb25lbnRzLUJ1dHRvbi1CdXR0b24tbW9kdWxlX19idXR0b246aG92ZXJ7b3BhY2l0eTowLjd9LnNyYy1jb21wb25lbnRzLUJ1dHRvbi1CdXR0b24tbW9kdWxlX19idXR0b246ZGlzYWJsZWR7YmFja2dyb3VuZDojZDlkOWQ5fVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jb21wb25lbnRzL0J1dHRvbi9CdXR0b24ubW9kdWxlLnNjc3NcIixcIndlYnBhY2s6Ly8uL3NyYy92YXJpYWJsZXMuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFFQSw2Q0NXRSxVRFZvQixDQ1dwQixXRFhvQixDQ2NsQixpQkRkdUIsQ0FFekIsZUNMaUIsQ0RNakIsV0FBWSxDQUNiLG1EQUdDLFdBQVksQ0FDYixzREFHQyxrQkNad0JcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGltcG9ydCBcXFwiLi4vLi4vdmFyaWFibGVzLnNjc3NcXFwiO1xcclxcblxcclxcbi5idXR0b24ge1xcclxcbiAgQGluY2x1ZGUgc3F1YXJlKDUwcHgsIDZweCk7XFxyXFxuXFxyXFxuICBiYWNrZ3JvdW5kOiAkcmVkLWNvbG9yO1xcclxcbiAgYm9yZGVyOiBub25lO1xcclxcbn1cXHJcXG5cXHJcXG4uYnV0dG9uOmhvdmVyIHtcXHJcXG4gIG9wYWNpdHk6IDAuNztcXHJcXG59XFxyXFxuXFxyXFxuLmJ1dHRvbjpkaXNhYmxlZCB7XFxyXFxuICBiYWNrZ3JvdW5kOiAkbGlnaHQtZ3JheS1jb2xvcjtcXHJcXG59XFxyXFxuXCIsXCIkcmVkLWNvbG9yOiAjZmY1NTU1O1xcclxcbiR3aGl0ZS1jb2xvcjogI2ZmZjtcXHJcXG4kbGlnaHQtZ3JheS1jb2xvcjogI2Q5ZDlkOTtcXHJcXG4kZ3JheS1jb2xvcjogIzdlN2U3ZTtcXHJcXG4kb3JnLWxpbmstY29sb3I6ICMyMDhmYmY7XFxyXFxuJHRleHQtY29sb3I6ICMwMDA7XFxyXFxuJHJlcG90aWxlLWhvdmVyOiByZ2JhKDE4MiwgMTgyLCAxODIsIDAuMjUpO1xcclxcbiRpbnB1dC1iZy1kaXNhYmxlZDogI2Y5ZjlmOTtcXHJcXG5cXHJcXG4kYm9yZGVyOiAxLjVweCBzb2xpZCAkbGlnaHQtZ3JheS1jb2xvcjtcXHJcXG4kYm9yZGVyLXJhZGl1czogNnB4O1xcclxcblxcclxcbkBtaXhpbiBzcXVhcmUoJHNpemUsICRib3JkZXItcmFkaXVzOiBub25lKSB7XFxyXFxuICB3aWR0aDogJHNpemU7XFxyXFxuICBoZWlnaHQ6ICRzaXplO1xcclxcblxcclxcbiAgQGlmICgkYm9yZGVyLXJhZGl1cyAhPSBub25lKSB7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6ICRib3JkZXItcmFkaXVzO1xcclxcbiAgfVxcclxcbn1cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJidXR0b25cIjogXCJzcmMtY29tcG9uZW50cy1CdXR0b24tQnV0dG9uLW1vZHVsZV9fYnV0dG9uXCJcbn07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///369\n')},326:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(476);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(705);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, ".src-components-RepoTile-RepoTile-module__list{-webkit-box-align:center;align-items:center;grid-template-rows:repeat(12, 104px);grid-row-gap:16px}.src-components-RepoTile-RepoTile-module__repotile{width:100%;display:-webkit-box;display:flex;margin-bottom:16px;border:1.5px solid #d9d9d9;border-radius:6px}.src-components-RepoTile-RepoTile-module__repotile__avatar{position:absolute;width:80px;height:80px;border-radius:50%;top:10.5px;left:10.5px;font-size:40px;color:#fff;text-align:center;padding:20px;font-weight:700;line-height:10px;background-color:#f55;text-transform:uppercase;display:-webkit-box;display:flex;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center}.src-components-RepoTile-RepoTile-module__repotile__avatar img{width:80px;height:80px;border-radius:50%}.src-components-RepoTile-RepoTile-module__repotile__content{position:relative;padding:21.5px 10.5px 20.5px 10.5px}.src-components-RepoTile-RepoTile-module__repotile__info{display:-webkit-box;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:justify;justify-content:space-between;width:241px;height:59px;margin-left:92px}.src-components-RepoTile-RepoTile-module__repotile__heading{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;font-weight:bold;font-size:16px;line-height:19px;color:#000}.src-components-RepoTile-RepoTile-module__repotile__orgLink{text-decoration:none}.src-components-RepoTile-RepoTile-module__repotile__stats,.src-components-RepoTile-RepoTile-module__repotile__orgLink{color:#7e7e7e}.src-components-RepoTile-RepoTile-module__repotile__stats{display:-webkit-box;display:flex;-webkit-box-pack:justify;justify-content:space-between;padding-right:65px}.src-components-RepoTile-RepoTile-module__repotile__stats__stars{display:inline-block;width:42px}.src-components-RepoTile-RepoTile-module__repotile__stats__stars svg{vertical-align:bottom;padding-right:4px;width:16px;height:16px}.src-components-RepoTile-RepoTile-module__repotile:hover{-webkit-box-shadow:0px 2px 6px rgba(182,182,182,0.25);box-shadow:0px 2px 6px rgba(182,182,182,0.25)}.src-components-RepoTile-RepoTile-module__repotile__orgLink:hover{color:#208fbf}\\n", "",{"version":3,"sources":["webpack://./src/components/RepoTile/RepoTile.module.scss","webpack://./src/variables.scss"],"names":[],"mappings":"AAEA,+CACE,wBAAmB,CAAnB,kBAAmB,CACnB,oCAAqC,CACrC,iBAAkB,CACnB,mDAGC,UAAW,CACX,mBAAa,CAAb,YAAa,CACb,kBAAmB,CAEnB,0BCXwB,CDYxB,iBCJiB,CDMjB,2DACE,iBAAkB,CCJpB,UDKsB,CCJtB,WDIsB,CCDpB,iBDCyB,CACzB,UAAW,CACX,WAAY,CAEZ,cAAe,CACf,UCtBc,CDuBd,iBAAkB,CAClB,YAAa,CACb,eAAgB,CAChB,gBAAiB,CAEjB,qBC7Be,CD8Bf,wBAAyB,CAEzB,mBAAa,CAAb,YAAa,CACb,uBAAuB,CAAvB,sBAAuB,CACvB,wBAAa,CAAb,kBAAmB,CAlBpB,+DCHD,UDwBwB,CCvBxB,WDuBwB,CCpBtB,iBDoB2B,CAC1B,4DAID,iBAAkB,CAClB,mCAAoC,CACrC,yDAGC,mBAAa,CAAb,YAAa,CACb,2BAAsB,CAAtB,4BAAsB,CAAtB,qBAAsB,CACtB,wBAA8B,CAA9B,6BAA8B,CAE9B,WAAY,CACZ,WAAY,CACZ,gBAAiB,CAClB,4DAGC,kBAAmB,CACnB,eAAgB,CAChB,sBAAuB,CAEvB,gBAAiB,CACjB,cAAe,CACf,gBAAiB,CAEjB,UC5Da,CD6Dd,4DAGC,oBAAqB,CACtB,sHAIC,aCvEgB,CDwEjB,0DAGC,mBAAa,CAAb,YAAa,CACb,wBAA8B,CAA9B,6BAA8B,CAC9B,kBAAmB,CAEnB,iEACE,oBAAqB,CACrB,UAAW,CAFZ,qEAKG,qBAAsB,CACtB,iBAAkB,CC3ExB,UD6E0B,CC5E1B,WD4E0B,CACrB,yDAML,qDC3Fe,CD2Ff,6CC3FwC,CD4FzC,kEAGC,aCjGsB","sourcesContent":["@import \\"../../variables.scss\\";\\r\\n\\r\\n.list {\\r\\n  align-items: center;\\r\\n  grid-template-rows: repeat(12, 104px);\\r\\n  grid-row-gap: 16px;\\r\\n}\\r\\n\\r\\n.repotile {\\r\\n  width: 100%;\\r\\n  display: flex;\\r\\n  margin-bottom: 16px;\\r\\n\\r\\n  border: $border;\\r\\n  border-radius: $border-radius;\\r\\n\\r\\n  &__avatar {\\r\\n    position: absolute;\\r\\n    @include square(80px, 50%);\\r\\n    top: 10.5px;\\r\\n    left: 10.5px;\\r\\n\\r\\n    font-size: 40px;\\r\\n    color: $white-color;\\r\\n    text-align: center;\\r\\n    padding: 20px;\\r\\n    font-weight: 700;\\r\\n    line-height: 10px;\\r\\n\\r\\n    background-color: $red-color;\\r\\n    text-transform: uppercase;\\r\\n\\r\\n    display: flex;\\r\\n    justify-content: center;\\r\\n    align-items: center;\\r\\n\\r\\n    & img {\\r\\n      @include square(80px, 50%);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  &__content {\\r\\n    position: relative;\\r\\n    padding: 21.5px 10.5px 20.5px 10.5px;\\r\\n  }\\r\\n\\r\\n  &__info {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    justify-content: space-between;\\r\\n\\r\\n    width: 241px;\\r\\n    height: 59px;\\r\\n    margin-left: 92px;\\r\\n  }\\r\\n\\r\\n  &__heading {\\r\\n    white-space: nowrap;\\r\\n    overflow: hidden;\\r\\n    text-overflow: ellipsis;\\r\\n\\r\\n    font-weight: bold;\\r\\n    font-size: 16px;\\r\\n    line-height: 19px;\\r\\n\\r\\n    color: $text-color;\\r\\n  }\\r\\n\\r\\n  &__orgLink {\\r\\n    text-decoration: none;\\r\\n  }\\r\\n\\r\\n  &__stats,\\r\\n  &__orgLink {\\r\\n    color: $gray-color;\\r\\n  }\\r\\n\\r\\n  &__stats {\\r\\n    display: flex;\\r\\n    justify-content: space-between;\\r\\n    padding-right: 65px;\\r\\n\\r\\n    &__stars {\\r\\n      display: inline-block;\\r\\n      width: 42px;\\r\\n\\r\\n      & svg {\\r\\n        vertical-align: bottom;\\r\\n        padding-right: 4px;\\r\\n\\r\\n        @include square(16px);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n.repotile:hover {\\r\\n  box-shadow: 0px 2px 6px $repotile-hover;\\r\\n}\\r\\n\\r\\n.repotile__orgLink:hover {\\r\\n  color: $org-link-color;\\r\\n}\\r\\n","$red-color: #ff5555;\\r\\n$white-color: #fff;\\r\\n$light-gray-color: #d9d9d9;\\r\\n$gray-color: #7e7e7e;\\r\\n$org-link-color: #208fbf;\\r\\n$text-color: #000;\\r\\n$repotile-hover: rgba(182, 182, 182, 0.25);\\r\\n$input-bg-disabled: #f9f9f9;\\r\\n\\r\\n$border: 1.5px solid $light-gray-color;\\r\\n$border-radius: 6px;\\r\\n\\r\\n@mixin square($size, $border-radius: none) {\\r\\n  width: $size;\\r\\n  height: $size;\\r\\n\\r\\n  @if ($border-radius != none) {\\r\\n    border-radius: $border-radius;\\r\\n  }\\r\\n}\\r\\n"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"list": "src-components-RepoTile-RepoTile-module__list",\n\t"repotile": "src-components-RepoTile-RepoTile-module__repotile",\n\t"repotile__avatar": "src-components-RepoTile-RepoTile-module__repotile__avatar",\n\t"repotile__content": "src-components-RepoTile-RepoTile-module__repotile__content",\n\t"repotile__info": "src-components-RepoTile-RepoTile-module__repotile__info",\n\t"repotile__heading": "src-components-RepoTile-RepoTile-module__repotile__heading",\n\t"repotile__orgLink": "src-components-RepoTile-RepoTile-module__repotile__orgLink",\n\t"repotile__stats": "src-components-RepoTile-RepoTile-module__repotile__stats",\n\t"repotile__stats__stars": "src-components-RepoTile-RepoTile-module__repotile__stats__stars"\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///326\n')},699:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(476);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(705);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, "body{margin:20px 20px;width:357px;font-family:\\"Roboto\\", sans-serif;font-style:normal;font-weight:normal;font-size:14px;line-height:16px}*,*:before,*:after{-webkit-box-sizing:border-box;box-sizing:border-box}.src-styles-style-module__component{display:grid;-webkit-box-align:center;align-items:center;grid-template-rows:50px 1352px;grid-row-gap:20px}.src-styles-style-module__search{margin:20px auto;display:grid;grid-template-columns:295px 50px;grid-column-gap:12px;-webkit-box-align:center;align-items:center}.src-styles-style-module__search__input{padding:15.5px 2px 15.5px 12px;line-height:16px;background-color:#fff;border:1.5px solid #d9d9d9;border-radius:6px}.src-styles-style-module__search__input:focus{outline:none;border:1.5px solid #f55}.src-styles-style-module__search__input:disabled{color:#7e7e7e;background-color:#f9f9f9;border:1.5px solid #d9d9d9}.src-styles-style-module__search__input::-webkit-input-placeholder{-webkit-box-align:center;align-items:center;color:#7e7e7e}.src-styles-style-module__search__input::placeholder{-webkit-box-align:center;align-items:center;color:#7e7e7e}.src-styles-style-module__search__input:focus::-webkit-input-placeholder{opacity:0}.src-styles-style-module__search__input:focus::placeholder{opacity:0}.src-styles-style-module__search__input:disabled::-webkit-input-placeholder{visibility:hidden}.src-styles-style-module__search__input:disabled::placeholder{visibility:hidden}\\n", "",{"version":3,"sources":["webpack://./src/styles/style.module.scss","webpack://./src/variables.scss"],"names":[],"mappings":"AAEA,KACE,gBAAiB,CACjB,WAAY,CACZ,gCAAiC,CACjC,iBAAkB,CAClB,kBAAmB,CACnB,cAAe,CACf,gBAAiB,CAClB,mBAKC,6BAAY,CAAZ,qBAAsB,CACvB,oCAGC,YAAa,CACb,wBAAmB,CAAnB,kBAAmB,CAEnB,8BAA+B,CAC/B,iBAAkB,CACnB,iCAGC,gBAAiB,CAEjB,YAAa,CACb,gCAAiC,CACjC,oBAAqB,CAErB,wBAAa,CAAb,kBAAmB,CAEnB,wCACE,8BAA+B,CAC/B,gBAAiB,CAEjB,qBCtCc,CDuCd,0BCtCsB,CDuCtB,iBC/Be,CDgChB,8CAID,YAAa,CACb,uBC/CiB,CDgDlB,iDAGC,aChDkB,CDiDlB,wBC7CyB,CD8CzB,0BCnDwB,CDoDzB,mEAGC,wBAAmB,CAAnB,kBAAmB,CAEnB,aCxDkB,CDmDnB,qDAGC,wBAAmB,CAAnB,kBAAmB,CAEnB,aCxDkB,CDyDnB,yEAGC,SAAU,CAHX,2DAGC,SAAU,CACX,4EAGC,iBAAkB,CAHnB,8DAGC,iBAAkB","sourcesContent":["@import \\"../variables.scss\\";\\r\\n\\r\\nbody {\\r\\n  margin: 20px 20px;\\r\\n  width: 357px;\\r\\n  font-family: \\"Roboto\\", sans-serif;\\r\\n  font-style: normal;\\r\\n  font-weight: normal;\\r\\n  font-size: 14px;\\r\\n  line-height: 16px;\\r\\n}\\r\\n\\r\\n*,\\r\\n*:before,\\r\\n*:after {\\r\\n  box-sizing: border-box;\\r\\n}\\r\\n\\r\\n.component {\\r\\n  display: grid;\\r\\n  align-items: center;\\r\\n\\r\\n  grid-template-rows: 50px 1352px;\\r\\n  grid-row-gap: 20px;\\r\\n}\\r\\n\\r\\n.search {\\r\\n  margin: 20px auto;\\r\\n\\r\\n  display: grid;\\r\\n  grid-template-columns: 295px 50px;\\r\\n  grid-column-gap: 12px;\\r\\n\\r\\n  align-items: center;\\r\\n\\r\\n  &__input {\\r\\n    padding: 15.5px 2px 15.5px 12px;\\r\\n    line-height: 16px;\\r\\n\\r\\n    background-color: $white-color;\\r\\n    border: $border;\\r\\n    border-radius: $border-radius;\\r\\n  }\\r\\n}\\r\\n\\r\\n.search__input:focus {\\r\\n  outline: none;\\r\\n  border: 1.5px solid $red-color;\\r\\n}\\r\\n\\r\\n.search__input:disabled {\\r\\n  color: $gray-color;\\r\\n  background-color: $input-bg-disabled;\\r\\n  border: $border;\\r\\n}\\r\\n\\r\\n.search__input::placeholder {\\r\\n  align-items: center;\\r\\n\\r\\n  color: $gray-color;\\r\\n}\\r\\n\\r\\n.search__input:focus::placeholder {\\r\\n  opacity: 0;\\r\\n}\\r\\n\\r\\n.search__input:disabled::placeholder {\\r\\n  visibility: hidden;\\r\\n}\\r\\n","$red-color: #ff5555;\\r\\n$white-color: #fff;\\r\\n$light-gray-color: #d9d9d9;\\r\\n$gray-color: #7e7e7e;\\r\\n$org-link-color: #208fbf;\\r\\n$text-color: #000;\\r\\n$repotile-hover: rgba(182, 182, 182, 0.25);\\r\\n$input-bg-disabled: #f9f9f9;\\r\\n\\r\\n$border: 1.5px solid $light-gray-color;\\r\\n$border-radius: 6px;\\r\\n\\r\\n@mixin square($size, $border-radius: none) {\\r\\n  width: $size;\\r\\n  height: $size;\\r\\n\\r\\n  @if ($border-radius != none) {\\r\\n    border-radius: $border-radius;\\r\\n  }\\r\\n}\\r\\n"],"sourceRoot":""}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t"component": "src-styles-style-module__component",\n\t"search": "src-styles-style-module__search",\n\t"search__input": "src-styles-style-module__search__input"\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjk5LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUM2RztBQUNqQjtBQUM1Riw4QkFBOEIsbUZBQTJCLENBQUMsNEZBQXFDO0FBQy9GO0FBQ0EsK0NBQStDLGlCQUFpQixZQUFZLG1DQUFtQyxrQkFBa0IsbUJBQW1CLGVBQWUsaUJBQWlCLG1CQUFtQiw4QkFBOEIsc0JBQXNCLG9DQUFvQyxhQUFhLHlCQUF5QixtQkFBbUIsK0JBQStCLGtCQUFrQixpQ0FBaUMsaUJBQWlCLGFBQWEsaUNBQWlDLHFCQUFxQix5QkFBeUIsbUJBQW1CLHdDQUF3QywrQkFBK0IsaUJBQWlCLHNCQUFzQiwyQkFBMkIsa0JBQWtCLDhDQUE4QyxhQUFhLHdCQUF3QixpREFBaUQsY0FBYyx5QkFBeUIsMkJBQTJCLG1FQUFtRSx5QkFBeUIsbUJBQW1CLGNBQWMscURBQXFELHlCQUF5QixtQkFBbUIsY0FBYyx5RUFBeUUsVUFBVSwyREFBMkQsVUFBVSw0RUFBNEUsa0JBQWtCLDhEQUE4RCxrQkFBa0IsU0FBUyxvdkJBQW92QixjQUFjLHdCQUF3QixtQkFBbUIsMENBQTBDLHlCQUF5QiwwQkFBMEIsc0JBQXNCLHdCQUF3QixLQUFLLG9DQUFvQyw2QkFBNkIsS0FBSyxvQkFBb0Isb0JBQW9CLDBCQUEwQiwwQ0FBMEMseUJBQXlCLEtBQUssaUJBQWlCLHdCQUF3Qix3QkFBd0Isd0NBQXdDLDRCQUE0Qiw4QkFBOEIsb0JBQW9CLHdDQUF3QywwQkFBMEIsMkNBQTJDLHdCQUF3QixzQ0FBc0MsT0FBTyxLQUFLLDhCQUE4QixvQkFBb0IscUNBQXFDLEtBQUssaUNBQWlDLHlCQUF5QiwyQ0FBMkMsc0JBQXNCLEtBQUsscUNBQXFDLDBCQUEwQiw2QkFBNkIsS0FBSywyQ0FBMkMsaUJBQWlCLEtBQUssOENBQThDLHlCQUF5QixLQUFLLDJCQUEyQix1QkFBdUIsK0JBQStCLHlCQUF5Qiw2QkFBNkIsc0JBQXNCLCtDQUErQyxnQ0FBZ0MsK0NBQStDLHdCQUF3QixvREFBb0QsbUJBQW1CLG9CQUFvQix3Q0FBd0Msc0NBQXNDLE9BQU8sS0FBSyx1QkFBdUI7QUFDMTRIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFlLHVCQUF1QixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3JhX25ldy8uL3NyYy9zdHlsZXMvc3R5bGUubW9kdWxlLnNjc3M/YjQ4ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcImJvZHl7bWFyZ2luOjIwcHggMjBweDt3aWR0aDozNTdweDtmb250LWZhbWlseTpcXFwiUm9ib3RvXFxcIiwgc2Fucy1zZXJpZjtmb250LXN0eWxlOm5vcm1hbDtmb250LXdlaWdodDpub3JtYWw7Zm9udC1zaXplOjE0cHg7bGluZS1oZWlnaHQ6MTZweH0qLCo6YmVmb3JlLCo6YWZ0ZXJ7LXdlYmtpdC1ib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym94LXNpemluZzpib3JkZXItYm94fS5zcmMtc3R5bGVzLXN0eWxlLW1vZHVsZV9fY29tcG9uZW50e2Rpc3BsYXk6Z3JpZDstd2Via2l0LWJveC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyO2dyaWQtdGVtcGxhdGUtcm93czo1MHB4IDEzNTJweDtncmlkLXJvdy1nYXA6MjBweH0uc3JjLXN0eWxlcy1zdHlsZS1tb2R1bGVfX3NlYXJjaHttYXJnaW46MjBweCBhdXRvO2Rpc3BsYXk6Z3JpZDtncmlkLXRlbXBsYXRlLWNvbHVtbnM6Mjk1cHggNTBweDtncmlkLWNvbHVtbi1nYXA6MTJweDstd2Via2l0LWJveC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyfS5zcmMtc3R5bGVzLXN0eWxlLW1vZHVsZV9fc2VhcmNoX19pbnB1dHtwYWRkaW5nOjE1LjVweCAycHggMTUuNXB4IDEycHg7bGluZS1oZWlnaHQ6MTZweDtiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7Ym9yZGVyOjEuNXB4IHNvbGlkICNkOWQ5ZDk7Ym9yZGVyLXJhZGl1czo2cHh9LnNyYy1zdHlsZXMtc3R5bGUtbW9kdWxlX19zZWFyY2hfX2lucHV0OmZvY3Vze291dGxpbmU6bm9uZTtib3JkZXI6MS41cHggc29saWQgI2Y1NX0uc3JjLXN0eWxlcy1zdHlsZS1tb2R1bGVfX3NlYXJjaF9faW5wdXQ6ZGlzYWJsZWR7Y29sb3I6IzdlN2U3ZTtiYWNrZ3JvdW5kLWNvbG9yOiNmOWY5Zjk7Ym9yZGVyOjEuNXB4IHNvbGlkICNkOWQ5ZDl9LnNyYy1zdHlsZXMtc3R5bGUtbW9kdWxlX19zZWFyY2hfX2lucHV0Ojotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyey13ZWJraXQtYm94LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7Y29sb3I6IzdlN2U3ZX0uc3JjLXN0eWxlcy1zdHlsZS1tb2R1bGVfX3NlYXJjaF9faW5wdXQ6OnBsYWNlaG9sZGVyey13ZWJraXQtYm94LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7Y29sb3I6IzdlN2U3ZX0uc3JjLXN0eWxlcy1zdHlsZS1tb2R1bGVfX3NlYXJjaF9faW5wdXQ6Zm9jdXM6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXJ7b3BhY2l0eTowfS5zcmMtc3R5bGVzLXN0eWxlLW1vZHVsZV9fc2VhcmNoX19pbnB1dDpmb2N1czo6cGxhY2Vob2xkZXJ7b3BhY2l0eTowfS5zcmMtc3R5bGVzLXN0eWxlLW1vZHVsZV9fc2VhcmNoX19pbnB1dDpkaXNhYmxlZDo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlcnt2aXNpYmlsaXR5OmhpZGRlbn0uc3JjLXN0eWxlcy1zdHlsZS1tb2R1bGVfX3NlYXJjaF9faW5wdXQ6ZGlzYWJsZWQ6OnBsYWNlaG9sZGVye3Zpc2liaWxpdHk6aGlkZGVufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXMvc3R5bGUubW9kdWxlLnNjc3NcIixcIndlYnBhY2s6Ly8uL3NyYy92YXJpYWJsZXMuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFFQSxLQUNFLGdCQUFpQixDQUNqQixXQUFZLENBQ1osZ0NBQWlDLENBQ2pDLGlCQUFrQixDQUNsQixrQkFBbUIsQ0FDbkIsY0FBZSxDQUNmLGdCQUFpQixDQUNsQixtQkFLQyw2QkFBWSxDQUFaLHFCQUFzQixDQUN2QixvQ0FHQyxZQUFhLENBQ2Isd0JBQW1CLENBQW5CLGtCQUFtQixDQUVuQiw4QkFBK0IsQ0FDL0IsaUJBQWtCLENBQ25CLGlDQUdDLGdCQUFpQixDQUVqQixZQUFhLENBQ2IsZ0NBQWlDLENBQ2pDLG9CQUFxQixDQUVyQix3QkFBYSxDQUFiLGtCQUFtQixDQUVuQix3Q0FDRSw4QkFBK0IsQ0FDL0IsZ0JBQWlCLENBRWpCLHFCQ3RDYyxDRHVDZCwwQkN0Q3NCLENEdUN0QixpQkMvQmUsQ0RnQ2hCLDhDQUlELFlBQWEsQ0FDYix1QkMvQ2lCLENEZ0RsQixpREFHQyxhQ2hEa0IsQ0RpRGxCLHdCQzdDeUIsQ0Q4Q3pCLDBCQ25Ed0IsQ0RvRHpCLG1FQUdDLHdCQUFtQixDQUFuQixrQkFBbUIsQ0FFbkIsYUN4RGtCLENEbURuQixxREFHQyx3QkFBbUIsQ0FBbkIsa0JBQW1CLENBRW5CLGFDeERrQixDRHlEbkIseUVBR0MsU0FBVSxDQUhYLDJEQUdDLFNBQVUsQ0FDWCw0RUFHQyxpQkFBa0IsQ0FIbkIsOERBR0MsaUJBQWtCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkBpbXBvcnQgXFxcIi4uL3ZhcmlhYmxlcy5zY3NzXFxcIjtcXHJcXG5cXHJcXG5ib2R5IHtcXHJcXG4gIG1hcmdpbjogMjBweCAyMHB4O1xcclxcbiAgd2lkdGg6IDM1N3B4O1xcclxcbiAgZm9udC1mYW1pbHk6IFxcXCJSb2JvdG9cXFwiLCBzYW5zLXNlcmlmO1xcclxcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xcclxcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcXHJcXG4gIGZvbnQtc2l6ZTogMTRweDtcXHJcXG4gIGxpbmUtaGVpZ2h0OiAxNnB4O1xcclxcbn1cXHJcXG5cXHJcXG4qLFxcclxcbio6YmVmb3JlLFxcclxcbio6YWZ0ZXIge1xcclxcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXHJcXG59XFxyXFxuXFxyXFxuLmNvbXBvbmVudCB7XFxyXFxuICBkaXNwbGF5OiBncmlkO1xcclxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG5cXHJcXG4gIGdyaWQtdGVtcGxhdGUtcm93czogNTBweCAxMzUycHg7XFxyXFxuICBncmlkLXJvdy1nYXA6IDIwcHg7XFxyXFxufVxcclxcblxcclxcbi5zZWFyY2gge1xcclxcbiAgbWFyZ2luOiAyMHB4IGF1dG87XFxyXFxuXFxyXFxuICBkaXNwbGF5OiBncmlkO1xcclxcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAyOTVweCA1MHB4O1xcclxcbiAgZ3JpZC1jb2x1bW4tZ2FwOiAxMnB4O1xcclxcblxcclxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG5cXHJcXG4gICZfX2lucHV0IHtcXHJcXG4gICAgcGFkZGluZzogMTUuNXB4IDJweCAxNS41cHggMTJweDtcXHJcXG4gICAgbGluZS1oZWlnaHQ6IDE2cHg7XFxyXFxuXFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICR3aGl0ZS1jb2xvcjtcXHJcXG4gICAgYm9yZGVyOiAkYm9yZGVyO1xcclxcbiAgICBib3JkZXItcmFkaXVzOiAkYm9yZGVyLXJhZGl1cztcXHJcXG4gIH1cXHJcXG59XFxyXFxuXFxyXFxuLnNlYXJjaF9faW5wdXQ6Zm9jdXMge1xcclxcbiAgb3V0bGluZTogbm9uZTtcXHJcXG4gIGJvcmRlcjogMS41cHggc29saWQgJHJlZC1jb2xvcjtcXHJcXG59XFxyXFxuXFxyXFxuLnNlYXJjaF9faW5wdXQ6ZGlzYWJsZWQge1xcclxcbiAgY29sb3I6ICRncmF5LWNvbG9yO1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogJGlucHV0LWJnLWRpc2FibGVkO1xcclxcbiAgYm9yZGVyOiAkYm9yZGVyO1xcclxcbn1cXHJcXG5cXHJcXG4uc2VhcmNoX19pbnB1dDo6cGxhY2Vob2xkZXIge1xcclxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG5cXHJcXG4gIGNvbG9yOiAkZ3JheS1jb2xvcjtcXHJcXG59XFxyXFxuXFxyXFxuLnNlYXJjaF9faW5wdXQ6Zm9jdXM6OnBsYWNlaG9sZGVyIHtcXHJcXG4gIG9wYWNpdHk6IDA7XFxyXFxufVxcclxcblxcclxcbi5zZWFyY2hfX2lucHV0OmRpc2FibGVkOjpwbGFjZWhvbGRlciB7XFxyXFxuICB2aXNpYmlsaXR5OiBoaWRkZW47XFxyXFxufVxcclxcblwiLFwiJHJlZC1jb2xvcjogI2ZmNTU1NTtcXHJcXG4kd2hpdGUtY29sb3I6ICNmZmY7XFxyXFxuJGxpZ2h0LWdyYXktY29sb3I6ICNkOWQ5ZDk7XFxyXFxuJGdyYXktY29sb3I6ICM3ZTdlN2U7XFxyXFxuJG9yZy1saW5rLWNvbG9yOiAjMjA4ZmJmO1xcclxcbiR0ZXh0LWNvbG9yOiAjMDAwO1xcclxcbiRyZXBvdGlsZS1ob3ZlcjogcmdiYSgxODIsIDE4MiwgMTgyLCAwLjI1KTtcXHJcXG4kaW5wdXQtYmctZGlzYWJsZWQ6ICNmOWY5Zjk7XFxyXFxuXFxyXFxuJGJvcmRlcjogMS41cHggc29saWQgJGxpZ2h0LWdyYXktY29sb3I7XFxyXFxuJGJvcmRlci1yYWRpdXM6IDZweDtcXHJcXG5cXHJcXG5AbWl4aW4gc3F1YXJlKCRzaXplLCAkYm9yZGVyLXJhZGl1czogbm9uZSkge1xcclxcbiAgd2lkdGg6ICRzaXplO1xcclxcbiAgaGVpZ2h0OiAkc2l6ZTtcXHJcXG5cXHJcXG4gIEBpZiAoJGJvcmRlci1yYWRpdXMgIT0gbm9uZSkge1xcclxcbiAgICBib3JkZXItcmFkaXVzOiAkYm9yZGVyLXJhZGl1cztcXHJcXG4gIH1cXHJcXG59XFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwiY29tcG9uZW50XCI6IFwic3JjLXN0eWxlcy1zdHlsZS1tb2R1bGVfX2NvbXBvbmVudFwiLFxuXHRcInNlYXJjaFwiOiBcInNyYy1zdHlsZXMtc3R5bGUtbW9kdWxlX19zZWFyY2hcIixcblx0XCJzZWFyY2hfX2lucHV0XCI6IFwic3JjLXN0eWxlcy1zdHlsZS1tb2R1bGVfX3NlYXJjaF9faW5wdXRcIlxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///699\n')},379:module=>{"use strict";eval('\n\nvar stylesInDOM = [];\n\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n\n  return result;\n}\n\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = "".concat(id, " ").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n\n    identifiers.push(identifier);\n  }\n\n  return identifiers;\n}\n\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n\n  return updater;\n}\n\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n\n    var newLastIdentifiers = modulesToDom(newList, options);\n\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n\n      var _index = getIndexByIdentifier(_identifier);\n\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n\n    lastIdentifiers = newLastIdentifiers;\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzc5LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViOztBQUVBO0FBQ0E7O0FBRUEsa0JBQWtCLHdCQUF3QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLGtCQUFrQixpQkFBaUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG9CQUFvQiw0QkFBNEI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEscUJBQXFCLDZCQUE2QjtBQUNsRDs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jcmFfbmV3Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzPzJkYmEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcblxuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG5cbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///379\n')},569:module=>{"use strict";eval('\n\nvar memo = {};\n/* istanbul ignore next  */\n\nfunction getTarget(target) {\n  if (typeof memo[target] === "undefined") {\n    var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself\n\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n\n    memo[target] = styleTarget;\n  }\n\n  return memo[target];\n}\n/* istanbul ignore next  */\n\n\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n\n  if (!target) {\n    throw new Error("Couldn\'t find a style target. This probably means that the value for the \'insert\' parameter is invalid.");\n  }\n\n  target.appendChild(style);\n}\n\nmodule.exports = insertBySelector;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTY5LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHNEQUFzRDs7QUFFdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NyYV9uZXcvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzP2IyMTQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuXG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuXG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuXG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///569\n')},216:module=>{"use strict";eval('\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement("style");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\n\nmodule.exports = insertStyleElement;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjE2LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3JhX25ldy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcz9kZTZjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///216\n')},565:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce =  true ? __webpack_require__.nc : 0;\n\n  if (nonce) {\n    styleElement.setAttribute("nonce", nonce);\n  }\n}\n\nmodule.exports = setAttributesWithoutAttributes;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTY1LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQSxjQUFjLEtBQXdDLEdBQUcsc0JBQWlCLEdBQUcsQ0FBSTs7QUFFakY7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jcmFfbmV3Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzP2RkY2UiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///565\n')},795:module=>{"use strict";eval('\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = "";\n\n  if (obj.supports) {\n    css += "@supports (".concat(obj.supports, ") {");\n  }\n\n  if (obj.media) {\n    css += "@media ".concat(obj.media, " {");\n  }\n\n  var needLayer = typeof obj.layer !== "undefined";\n\n  if (needLayer) {\n    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");\n  }\n\n  css += obj.css;\n\n  if (needLayer) {\n    css += "}";\n  }\n\n  if (obj.media) {\n    css += "}";\n  }\n\n  if (obj.supports) {\n    css += "}";\n  }\n\n  var sourceMap = obj.sourceMap;\n\n  if (sourceMap && typeof btoa !== "undefined") {\n    css += "\\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");\n  } // For old IE\n\n  /* istanbul ignore if  */\n\n\n  options.styleTagTransform(css, styleElement, options.options);\n}\n\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n\n  styleElement.parentNode.removeChild(styleElement);\n}\n/* istanbul ignore next  */\n\n\nfunction domAPI(options) {\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\n\nmodule.exports = domAPI;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzk1LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGtEQUFrRDtBQUNsRDs7QUFFQTtBQUNBLDBDQUEwQztBQUMxQzs7QUFFQTs7QUFFQTtBQUNBLGlGQUFpRjtBQUNqRjs7QUFFQTs7QUFFQTtBQUNBLGFBQWE7QUFDYjs7QUFFQTtBQUNBLGFBQWE7QUFDYjs7QUFFQTtBQUNBLGFBQWE7QUFDYjs7QUFFQTs7QUFFQTtBQUNBLHlEQUF5RDtBQUN6RCxJQUFJOztBQUVKOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jcmFfbmV3Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanM/ZTQ3OSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuXG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cblxuICBjc3MgKz0gb2JqLmNzcztcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///795\n')},589:module=>{"use strict";eval("\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\n\nmodule.exports = styleTagTransform;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTg5LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jcmFfbmV3Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanM/MWRkZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///589\n")},654:()=>{}},__webpack_module_cache__={};function __webpack_require__(Q){var F=__webpack_module_cache__[Q];if(void 0!==F)return F.exports;var B=__webpack_module_cache__[Q]={id:Q,loaded:!1,exports:{}};return __webpack_modules__[Q](B,B.exports,__webpack_require__),B.loaded=!0,B.exports}__webpack_require__.n=Q=>{var F=Q&&Q.__esModule?()=>Q.default:()=>Q;return __webpack_require__.d(F,{a:F}),F},__webpack_require__.d=(Q,F)=>{for(var B in F)__webpack_require__.o(F,B)&&!__webpack_require__.o(Q,B)&&Object.defineProperty(Q,B,{enumerable:!0,get:F[B]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(Q){if("object"==typeof window)return window}}(),__webpack_require__.o=(Q,F)=>Object.prototype.hasOwnProperty.call(Q,F),__webpack_require__.nmd=Q=>(Q.paths=[],Q.children||(Q.children=[]),Q);var __webpack_exports__=__webpack_require__(179)})();